
Dual Core test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000149dc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000335c  08014c7c  08014c7c  00024c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017fd8  08017fd8  00030158  2**0
                  CONTENTS
  4 .ARM          00000008  08017fd8  08017fd8  00027fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017fe0  08017fe0  00030158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017fe0  08017fe0  00027fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017fe4  08017fe4  00027fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  08017fe8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000098  08018080  00030098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000f8  080180e0  000300f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008178  24000158  08018140  00030158  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240082d0  08018140  000382d0  2**0
                  ALLOC
 13 .lwip_sec     00000400  30000000  00000000  00010000  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002c7c7  00000000  00000000  00030186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000064c6  00000000  00000000  0005c94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001d30  00000000  00000000  00062e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00001c30  00000000  00000000  00064b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000478b7  00000000  00000000  00066778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003190e  00000000  00000000  000ae02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001952c5  00000000  00000000  000df93d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  00274c02  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000081c4  00000000  00000000  00274c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014c64 	.word	0x08014c64

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	08014c64 	.word	0x08014c64

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007b6:	f000 fa2d 	bl	8000c14 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007ba:	4b58      	ldr	r3, [pc, #352]	; (800091c <main+0x16c>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d11b      	bne.n	80007fe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007c6:	f3bf 8f4f 	dsb	sy
}
 80007ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007cc:	f3bf 8f6f 	isb	sy
}
 80007d0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007d2:	4b52      	ldr	r3, [pc, #328]	; (800091c <main+0x16c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007da:	f3bf 8f4f 	dsb	sy
}
 80007de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007e0:	f3bf 8f6f 	isb	sy
}
 80007e4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007e6:	4b4d      	ldr	r3, [pc, #308]	; (800091c <main+0x16c>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a4c      	ldr	r2, [pc, #304]	; (800091c <main+0x16c>)
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007f2:	f3bf 8f4f 	dsb	sy
}
 80007f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f8:	f3bf 8f6f 	isb	sy
}
 80007fc:	e000      	b.n	8000800 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007fe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000800:	4b46      	ldr	r3, [pc, #280]	; (800091c <main+0x16c>)
 8000802:	695b      	ldr	r3, [r3, #20]
 8000804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000808:	2b00      	cmp	r3, #0
 800080a:	d138      	bne.n	800087e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800080c:	4b43      	ldr	r3, [pc, #268]	; (800091c <main+0x16c>)
 800080e:	2200      	movs	r2, #0
 8000810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000814:	f3bf 8f4f 	dsb	sy
}
 8000818:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800081a:	4b40      	ldr	r3, [pc, #256]	; (800091c <main+0x16c>)
 800081c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000820:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	0b5b      	lsrs	r3, r3, #13
 8000826:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800082a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	08db      	lsrs	r3, r3, #3
 8000830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000834:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	015a      	lsls	r2, r3, #5
 800083a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800083e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000840:	68ba      	ldr	r2, [r7, #8]
 8000842:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000844:	4935      	ldr	r1, [pc, #212]	; (800091c <main+0x16c>)
 8000846:	4313      	orrs	r3, r2
 8000848:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	1e5a      	subs	r2, r3, #1
 8000850:	60ba      	str	r2, [r7, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1ef      	bne.n	8000836 <main+0x86>
    } while(sets-- != 0U);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	1e5a      	subs	r2, r3, #1
 800085a:	60fa      	str	r2, [r7, #12]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1e5      	bne.n	800082c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000860:	f3bf 8f4f 	dsb	sy
}
 8000864:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000866:	4b2d      	ldr	r3, [pc, #180]	; (800091c <main+0x16c>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a2c      	ldr	r2, [pc, #176]	; (800091c <main+0x16c>)
 800086c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000870:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000872:	f3bf 8f4f 	dsb	sy
}
 8000876:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000878:	f3bf 8f6f 	isb	sy
}
 800087c:	e000      	b.n	8000880 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800087e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000884:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000886:	bf00      	nop
 8000888:	4b25      	ldr	r3, [pc, #148]	; (8000920 <main+0x170>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000890:	2b00      	cmp	r3, #0
 8000892:	d004      	beq.n	800089e <main+0xee>
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	1e5a      	subs	r2, r3, #1
 8000898:	617a      	str	r2, [r7, #20]
 800089a:	2b00      	cmp	r3, #0
 800089c:	dcf4      	bgt.n	8000888 <main+0xd8>
  if ( timeout < 0 )
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	da01      	bge.n	80008a8 <main+0xf8>
  {
  Error_Handler();
 80008a4:	f000 f9e3 	bl	8000c6e <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a8:	f000 fd6c 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ac:	f000 f83c 	bl	8000928 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <main+0x170>)
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b6:	4a1a      	ldr	r2, [pc, #104]	; (8000920 <main+0x170>)
 80008b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <main+0x170>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f002 fcfe 	bl	80032d0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008d4:	2100      	movs	r1, #0
 80008d6:	2000      	movs	r0, #0
 80008d8:	f002 fd14 	bl	8003304 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008e0:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008e2:	bf00      	nop
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <main+0x170>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d104      	bne.n	80008fa <main+0x14a>
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	1e5a      	subs	r2, r3, #1
 80008f4:	617a      	str	r2, [r7, #20]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	dcf4      	bgt.n	80008e4 <main+0x134>
if ( timeout < 0 )
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	da01      	bge.n	8000904 <main+0x154>
{
Error_Handler();
 8000900:	f000 f9b5 	bl	8000c6e <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000904:	f000 f912 	bl	8000b2c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000908:	f000 f892 	bl	8000a30 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800090c:	f000 f8dc 	bl	8000ac8 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000910:	f006 fd5a 	bl	80073c8 <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <main+0x174>)
 8000916:	f006 fed9 	bl	80076cc <ethernetif_input>
 800091a:	e7fb      	b.n	8000914 <main+0x164>
 800091c:	e000ed00 	.word	0xe000ed00
 8000920:	58024400 	.word	0x58024400
 8000924:	24000718 	.word	0x24000718

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b09c      	sub	sp, #112	; 0x70
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000932:	224c      	movs	r2, #76	; 0x4c
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f013 f93c 	bl	8013bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2220      	movs	r2, #32
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f013 f936 	bl	8013bb4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000948:	2004      	movs	r0, #4
 800094a:	f002 fe37 	bl	80035bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b34      	ldr	r3, [pc, #208]	; (8000a24 <SystemClock_Config+0xfc>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a33      	ldr	r2, [pc, #204]	; (8000a24 <SystemClock_Config+0xfc>)
 8000958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800095c:	6193      	str	r3, [r2, #24]
 800095e:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <SystemClock_Config+0xfc>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <SystemClock_Config+0x100>)
 800096a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096c:	4a2e      	ldr	r2, [pc, #184]	; (8000a28 <SystemClock_Config+0x100>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000974:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <SystemClock_Config+0x100>)
 8000976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000980:	bf00      	nop
 8000982:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <SystemClock_Config+0xfc>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800098a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800098e:	d1f8      	bne.n	8000982 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <SystemClock_Config+0x104>)
 8000992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000994:	f023 0303 	bic.w	r3, r3, #3
 8000998:	4a24      	ldr	r2, [pc, #144]	; (8000a2c <SystemClock_Config+0x104>)
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a0:	2301      	movs	r3, #1
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009aa:	2302      	movs	r3, #2
 80009ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ae:	2302      	movs	r3, #2
 80009b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009b6:	2378      	movs	r3, #120	; 0x78
 80009b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009c6:	230c      	movs	r3, #12
 80009c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 fe5a 	bl	8003690 <HAL_RCC_OscConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009e2:	f000 f944 	bl	8000c6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e6:	233f      	movs	r3, #63	; 0x3f
 80009e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ea:	2303      	movs	r3, #3
 80009ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009f2:	2308      	movs	r3, #8
 80009f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009f6:	2340      	movs	r3, #64	; 0x40
 80009f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009fa:	2340      	movs	r3, #64	; 0x40
 80009fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a02:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a04:	2340      	movs	r3, #64	; 0x40
 8000a06:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f003 fa6d 	bl	8003eec <HAL_RCC_ClockConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000a18:	f000 f929 	bl	8000c6e <Error_Handler>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3770      	adds	r7, #112	; 0x70
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	58024800 	.word	0x58024800
 8000a28:	58000400 	.word	0x58000400
 8000a2c:	58024400 	.word	0x58024400

08000a30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a36:	4a23      	ldr	r2, [pc, #140]	; (8000ac4 <MX_USART3_UART_Init+0x94>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a78:	4811      	ldr	r0, [pc, #68]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a7a:	f005 f92b 	bl	8005cd4 <HAL_UART_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a84:	f000 f8f3 	bl	8000c6e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a8c:	f006 f8c8 	bl	8006c20 <HAL_UARTEx_SetTxFifoThreshold>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a96:	f000 f8ea 	bl	8000c6e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a9e:	f006 f8fd 	bl	8006c9c <HAL_UARTEx_SetRxFifoThreshold>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa8:	f000 f8e1 	bl	8000c6e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000aae:	f006 f87e 	bl	8006bae <HAL_UARTEx_DisableFifoMode>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab8:	f000 f8d9 	bl	8000c6e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	24000174 	.word	0x24000174
 8000ac4:	40004800 	.word	0x40004800

08000ac8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ace:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad4:	2209      	movs	r2, #9
 8000ad6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b10:	f002 fc0c 	bl	800332c <HAL_PCD_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b1a:	f000 f8a8 	bl	8000c6e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	24000204 	.word	0x24000204
 8000b28:	40080000 	.word	0x40080000

08000b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a35      	ldr	r2, [pc, #212]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000b3a:	f043 0310 	orr.w	r3, r3, #16
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b50:	4b2f      	ldr	r3, [pc, #188]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	4a2e      	ldr	r2, [pc, #184]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	61bb      	str	r3, [r7, #24]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	4a26      	ldr	r2, [pc, #152]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	4a1f      	ldr	r2, [pc, #124]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_GPIO_Init+0xe4>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]

}
 8000c04:	bf00      	nop
 8000c06:	3724      	adds	r7, #36	; 0x24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	58024400 	.word	0x58024400

08000c14 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c26:	f000 fd67 	bl	80016f8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000c32:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000c36:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000c38:	230e      	movs	r3, #14
 8000c3a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c44:	2300      	movs	r3, #0
 8000c46:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fd84 	bl	8001768 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c60:	2004      	movs	r0, #4
 8000c62:	f000 fd61 	bl	8001728 <HAL_MPU_Enable>

}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c72:	b672      	cpsid	i
}
 8000c74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <Error_Handler+0x8>

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_MspInit+0x30>)
 8000c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c84:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <HAL_MspInit+0x30>)
 8000c86:	f043 0302 	orr.w	r3, r3, #2
 8000c8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_MspInit+0x30>)
 8000c90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	58024400 	.word	0x58024400

08000cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0b8      	sub	sp, #224	; 0xe0
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	22bc      	movs	r2, #188	; 0xbc
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f012 ff71 	bl	8013bb4 <memset>
  if(huart->Instance==USART3)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <HAL_UART_MspInit+0xc0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d142      	bne.n	8000d62 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 fc8a 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cf6:	f7ff ffba 	bl	8000c6e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_UART_MspInit+0xc4>)
 8000cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d00:	4a1b      	ldr	r2, [pc, #108]	; (8000d70 <HAL_UART_MspInit+0xc4>)
 8000d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_UART_MspInit+0xc4>)
 8000d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_UART_MspInit+0xc4>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1e:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <HAL_UART_MspInit+0xc4>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_UART_MspInit+0xc4>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d50:	2307      	movs	r3, #7
 8000d52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d56:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <HAL_UART_MspInit+0xc8>)
 8000d5e:	f002 f907 	bl	8002f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	37e0      	adds	r7, #224	; 0xe0
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40004800 	.word	0x40004800
 8000d70:	58024400 	.word	0x58024400
 8000d74:	58020c00 	.word	0x58020c00

08000d78 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0b8      	sub	sp, #224	; 0xe0
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	22bc      	movs	r2, #188	; 0xbc
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f012 ff0b 	bl	8013bb4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a36      	ldr	r2, [pc, #216]	; (8000e7c <HAL_PCD_MspInit+0x104>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d165      	bne.n	8000e74 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000da8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000dac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000db2:	2318      	movs	r3, #24
 8000db4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000dc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dc6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000dcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000dd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f003 fc13 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000de4:	f7ff ff43 	bl	8000c6e <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000de8:	f002 fc42 	bl	8003670 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <HAL_PCD_MspInit+0x108>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df2:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <HAL_PCD_MspInit+0x108>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <HAL_PCD_MspInit+0x108>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e0a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000e0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e24:	230a      	movs	r3, #10
 8000e26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4814      	ldr	r0, [pc, #80]	; (8000e84 <HAL_PCD_MspInit+0x10c>)
 8000e32:	f002 f89d 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <HAL_PCD_MspInit+0x10c>)
 8000e52:	f002 f88d 	bl	8002f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_PCD_MspInit+0x108>)
 8000e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e5c:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <HAL_PCD_MspInit+0x108>)
 8000e5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_PCD_MspInit+0x108>)
 8000e68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	37e0      	adds	r7, #224	; 0xe0
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40080000 	.word	0x40080000
 8000e80:	58024400 	.word	0x58024400
 8000e84:	58020000 	.word	0x58020000

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed4:	f000 fac8 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	return 1;
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_kill>:

int _kill(int pid, int sig)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <_kill+0x20>)
 8000ef8:	2216      	movs	r2, #22
 8000efa:	601a      	str	r2, [r3, #0]
	return -1;
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	240082c0 	.word	0x240082c0

08000f10 <_exit>:

void _exit (int status)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ffe5 	bl	8000eec <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f22:	e7fe      	b.n	8000f22 <_exit+0x12>

08000f24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	e00a      	b.n	8000f4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f36:	f3af 8000 	nop.w
 8000f3a:	4601      	mov	r1, r0
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	60ba      	str	r2, [r7, #8]
 8000f42:	b2ca      	uxtb	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dbf0      	blt.n	8000f36 <_read+0x12>
	}

return len;
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	e009      	b.n	8000f84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	1c5a      	adds	r2, r3, #1
 8000f74:	60ba      	str	r2, [r7, #8]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	dbf1      	blt.n	8000f70 <_write+0x12>
	}
	return len;
 8000f8c:	687b      	ldr	r3, [r7, #4]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <_close>:

int _close(int file)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fbe:	605a      	str	r2, [r3, #4]
	return 0;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_isatty>:

int _isatty(int file)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
	return 1;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
	return 0;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001008:	4a14      	ldr	r2, [pc, #80]	; (800105c <_sbrk+0x5c>)
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <_sbrk+0x60>)
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <_sbrk+0x64>)
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <_sbrk+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	429a      	cmp	r2, r3
 800102e:	d205      	bcs.n	800103c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <_sbrk+0x6c>)
 8001032:	220c      	movs	r2, #12
 8001034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	e009      	b.n	8001050 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	4a06      	ldr	r2, [pc, #24]	; (8001064 <_sbrk+0x64>)
 800104c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	4618      	mov	r0, r3
 8001052:	371c      	adds	r7, #28
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	24080000 	.word	0x24080000
 8001060:	00000400 	.word	0x00000400
 8001064:	24000710 	.word	0x24000710
 8001068:	240082d0 	.word	0x240082d0
 800106c:	240082c0 	.word	0x240082c0

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001074:	f7ff fb06 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	; (80010b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	; (80010bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109e:	f012 fd47 	bl	8013b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fb85 	bl	80007b0 <main>
  bx  lr
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010b0:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 80010b4:	08017fe8 	.word	0x08017fe8
  ldr r2, =_sbss
 80010b8:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 80010bc:	240082d0 	.word	0x240082d0

080010c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC3_IRQHandler>

080010c2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <LAN8742_RegisterBusIO+0x28>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d007      	beq.n	80010ea <LAN8742_RegisterBusIO+0x28>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <LAN8742_RegisterBusIO+0x28>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d102      	bne.n	80010f0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	e014      	b.n	800111a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	691a      	ldr	r2, [r3, #16]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d17c      	bne.n	8001240 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2220      	movs	r2, #32
 8001158:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	e01c      	b.n	800119a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f107 0208 	add.w	r2, r7, #8
 8001168:	2112      	movs	r1, #18
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	4798      	blx	r3
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	da03      	bge.n	800117c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001174:	f06f 0304 	mvn.w	r3, #4
 8001178:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800117a:	e00b      	b.n	8001194 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	f003 031f 	and.w	r3, r3, #31
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	429a      	cmp	r2, r3
 8001186:	d105      	bne.n	8001194 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
         break;
 8001192:	e005      	b.n	80011a0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	3301      	adds	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	2b1f      	cmp	r3, #31
 800119e:	d9df      	bls.n	8001160 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b1f      	cmp	r3, #31
 80011a6:	d902      	bls.n	80011ae <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011a8:	f06f 0302 	mvn.w	r3, #2
 80011ac:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d145      	bne.n	8001240 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6810      	ldr	r0, [r2, #0]
 80011bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c0:	2100      	movs	r1, #0
 80011c2:	4798      	blx	r3
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db37      	blt.n	800123a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6810      	ldr	r0, [r2, #0]
 80011d2:	f107 0208 	add.w	r2, r7, #8
 80011d6:	2100      	movs	r1, #0
 80011d8:	4798      	blx	r3
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db28      	blt.n	8001232 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4798      	blx	r3
 80011e6:	4603      	mov	r3, r0
 80011e8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80011ea:	e01c      	b.n	8001226 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4798      	blx	r3
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011fe:	d80e      	bhi.n	800121e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6810      	ldr	r0, [r2, #0]
 8001208:	f107 0208 	add.w	r2, r7, #8
 800120c:	2100      	movs	r1, #0
 800120e:	4798      	blx	r3
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	da07      	bge.n	8001226 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001216:	f06f 0304 	mvn.w	r3, #4
 800121a:	613b      	str	r3, [r7, #16]
                 break;
 800121c:	e010      	b.n	8001240 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800121e:	f06f 0301 	mvn.w	r3, #1
 8001222:	613b      	str	r3, [r7, #16]
               break;
 8001224:	e00c      	b.n	8001240 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1dd      	bne.n	80011ec <LAN8742_Init+0xc6>
 8001230:	e006      	b.n	8001240 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001232:	f06f 0304 	mvn.w	r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	e002      	b.n	8001240 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800123a:	f06f 0303 	mvn.w	r3, #3
 800123e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d112      	bne.n	800126c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	4798      	blx	r3
 800124c:	4603      	mov	r3, r0
 800124e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001250:	bf00      	nop
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	4798      	blx	r3
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001264:	d9f5      	bls.n	8001252 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800126c:	693b      	ldr	r3, [r7, #16]
 }
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6810      	ldr	r0, [r2, #0]
 800128a:	f107 020c 	add.w	r2, r7, #12
 800128e:	2101      	movs	r1, #1
 8001290:	4798      	blx	r3
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	da02      	bge.n	800129e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001298:	f06f 0304 	mvn.w	r3, #4
 800129c:	e06e      	b.n	800137c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6810      	ldr	r0, [r2, #0]
 80012a6:	f107 020c 	add.w	r2, r7, #12
 80012aa:	2101      	movs	r1, #1
 80012ac:	4798      	blx	r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da02      	bge.n	80012ba <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012b4:	f06f 0304 	mvn.w	r3, #4
 80012b8:	e060      	b.n	800137c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80012c4:	2301      	movs	r3, #1
 80012c6:	e059      	b.n	800137c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6810      	ldr	r0, [r2, #0]
 80012d0:	f107 020c 	add.w	r2, r7, #12
 80012d4:	2100      	movs	r1, #0
 80012d6:	4798      	blx	r3
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	da02      	bge.n	80012e4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012de:	f06f 0304 	mvn.w	r3, #4
 80012e2:	e04b      	b.n	800137c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d11b      	bne.n	8001326 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <LAN8742_GetLinkState+0x90>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001302:	2302      	movs	r3, #2
 8001304:	e03a      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001310:	2303      	movs	r3, #3
 8001312:	e033      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800131e:	2304      	movs	r3, #4
 8001320:	e02c      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001322:	2305      	movs	r3, #5
 8001324:	e02a      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6810      	ldr	r0, [r2, #0]
 800132e:	f107 020c 	add.w	r2, r7, #12
 8001332:	211f      	movs	r1, #31
 8001334:	4798      	blx	r3
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	da02      	bge.n	8001342 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800133c:	f06f 0304 	mvn.w	r3, #4
 8001340:	e01c      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800134c:	2306      	movs	r3, #6
 800134e:	e015      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 031c 	and.w	r3, r3, #28
 8001356:	2b18      	cmp	r3, #24
 8001358:	d101      	bne.n	800135e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800135a:	2302      	movs	r3, #2
 800135c:	e00e      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f003 031c 	and.w	r3, r3, #28
 8001364:	2b08      	cmp	r3, #8
 8001366:	d101      	bne.n	800136c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001368:	2303      	movs	r3, #3
 800136a:	e007      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 031c 	and.w	r3, r3, #28
 8001372:	2b14      	cmp	r3, #20
 8001374:	d101      	bne.n	800137a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001376:	2304      	movs	r3, #4
 8001378:	e000      	b.n	800137c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800137a:	2305      	movs	r3, #5
    }				
  }
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138a:	2003      	movs	r0, #3
 800138c:	f000 f982 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001390:	f002 ff62 	bl	8004258 <HAL_RCC_GetSysClockFreq>
 8001394:	4602      	mov	r2, r0
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_Init+0x68>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	4913      	ldr	r1, [pc, #76]	; (80013f0 <HAL_Init+0x6c>)
 80013a2:	5ccb      	ldrb	r3, [r1, r3]
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	fa22 f303 	lsr.w	r3, r2, r3
 80013ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_Init+0x68>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_Init+0x6c>)
 80013b8:	5cd3      	ldrb	r3, [r2, r3]
 80013ba:	f003 031f 	and.w	r3, r3, #31
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <HAL_Init+0x70>)
 80013c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013c8:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <HAL_Init+0x74>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 f814 	bl	80013fc <HAL_InitTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e002      	b.n	80013e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013de:	f7ff fc4b 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	58024400 	.word	0x58024400
 80013f0:	08017d54 	.word	0x08017d54
 80013f4:	24000004 	.word	0x24000004
 80013f8:	24000000 	.word	0x24000000

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_InitTick+0x60>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e021      	b.n	8001454 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_InitTick+0x64>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_InitTick+0x60>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001422:	fbb2 f3f3 	udiv	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f959 	bl	80016de <HAL_SYSTICK_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00e      	b.n	8001454 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d80a      	bhi.n	8001452 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f000 f931 	bl	80016aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_InitTick+0x68>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2400000c 	.word	0x2400000c
 8001460:	24000000 	.word	0x24000000
 8001464:	24000008 	.word	0x24000008

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	2400000c 	.word	0x2400000c
 800148c:	24000714 	.word	0x24000714

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	24000714 	.word	0x24000714

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffde 	bl	8001490 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2400000c 	.word	0x2400000c

080014f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_GetREVID+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0c1b      	lsrs	r3, r3, #16
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	5c001000 	.word	0x5c001000

08001508 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001518:	4904      	ldr	r1, [pc, #16]	; (800152c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	58000400 	.word	0x58000400

08001530 <__NVIC_SetPriorityGrouping>:
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <__NVIC_SetPriorityGrouping+0x40>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800154c:	4013      	ands	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <__NVIC_SetPriorityGrouping+0x44>)
 800155a:	4313      	orrs	r3, r2
 800155c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155e:	4a04      	ldr	r2, [pc, #16]	; (8001570 <__NVIC_SetPriorityGrouping+0x40>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00
 8001574:	05fa0000 	.word	0x05fa0000

08001578 <__NVIC_GetPriorityGrouping>:
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800157c:	4b04      	ldr	r3, [pc, #16]	; (8001590 <__NVIC_GetPriorityGrouping+0x18>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0307 	and.w	r3, r3, #7
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_SetPriority>:
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f7ff ff8e 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff47 	bl	8001530 <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b8:	f7ff ff5e 	bl	8001578 <__NVIC_GetPriorityGrouping>
 80016bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7ff ff90 	bl	80015e8 <NVIC_EncodePriority>
 80016c8:	4602      	mov	r2, r0
 80016ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff5f 	bl	8001594 <__NVIC_SetPriority>
}
 80016d6:	bf00      	nop
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffb2 	bl	8001650 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016fc:	f3bf 8f5f 	dmb	sy
}
 8001700:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <HAL_MPU_Disable+0x28>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_MPU_Disable+0x28>)
 8001708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_MPU_Disable+0x2c>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	e000ed90 	.word	0xe000ed90

08001728 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001730:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <HAL_MPU_Enable+0x38>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_MPU_Enable+0x3c>)
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	4a09      	ldr	r2, [pc, #36]	; (8001764 <HAL_MPU_Enable+0x3c>)
 8001740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001744:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001746:	f3bf 8f4f 	dsb	sy
}
 800174a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800174c:	f3bf 8f6f 	isb	sy
}
 8001750:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000ed90 	.word	0xe000ed90
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	785a      	ldrb	r2, [r3, #1]
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_MPU_ConfigRegion+0x84>)
 8001776:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d029      	beq.n	80017d4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001780:	4a1a      	ldr	r2, [pc, #104]	; (80017ec <HAL_MPU_ConfigRegion+0x84>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7b1b      	ldrb	r3, [r3, #12]
 800178c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7adb      	ldrb	r3, [r3, #11]
 8001792:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001794:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7a9b      	ldrb	r3, [r3, #10]
 800179a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800179c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7b5b      	ldrb	r3, [r3, #13]
 80017a2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7b9b      	ldrb	r3, [r3, #14]
 80017aa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7bdb      	ldrb	r3, [r3, #15]
 80017b2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7a5b      	ldrb	r3, [r3, #9]
 80017ba:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7a1b      	ldrb	r3, [r3, #8]
 80017c2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017c4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017ce:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017d0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80017d2:	e005      	b.n	80017e0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_MPU_ConfigRegion+0x84>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <HAL_MPU_ConfigRegion+0x84>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed90 	.word	0xe000ed90

080017f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0cf      	b.n	80019a2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001808:	2b00      	cmp	r3, #0
 800180a:	d106      	bne.n	800181a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2223      	movs	r2, #35	; 0x23
 8001810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f005 ffc9 	bl	80077ac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	4b64      	ldr	r3, [pc, #400]	; (80019ac <HAL_ETH_Init+0x1bc>)
 800181c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001820:	4a62      	ldr	r2, [pc, #392]	; (80019ac <HAL_ETH_Init+0x1bc>)
 8001822:	f043 0302 	orr.w	r3, r3, #2
 8001826:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800182a:	4b60      	ldr	r3, [pc, #384]	; (80019ac <HAL_ETH_Init+0x1bc>)
 800182c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7a1b      	ldrb	r3, [r3, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d103      	bne.n	8001848 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff fe61 	bl	8001508 <HAL_SYSCFG_ETHInterfaceSelect>
 8001846:	e003      	b.n	8001850 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001848:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800184c:	f7ff fe5c 	bl	8001508 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001850:	4b57      	ldr	r3, [pc, #348]	; (80019b0 <HAL_ETH_Init+0x1c0>)
 8001852:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800186a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800186c:	f7ff fe10 	bl	8001490 <HAL_GetTick>
 8001870:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001872:	e011      	b.n	8001898 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001874:	f7ff fe0c 	bl	8001490 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001882:	d909      	bls.n	8001898 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2204      	movs	r2, #4
 8001888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	22e0      	movs	r2, #224	; 0xe0
 8001890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e084      	b.n	80019a2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1e4      	bne.n	8001874 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 fd94 	bl	80023d8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80018b0:	f002 fe4c 	bl	800454c <HAL_RCC_GetHCLKFreq>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a3f      	ldr	r2, [pc, #252]	; (80019b4 <HAL_ETH_Init+0x1c4>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9a      	lsrs	r2, r3, #18
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3a01      	subs	r2, #1
 80018c4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 ff7f 	bl	80027cc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80018da:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018ea:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	22e0      	movs	r2, #224	; 0xe0
 8001906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e049      	b.n	80019a2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001916:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800191a:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <HAL_ETH_Init+0x1c8>)
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6952      	ldr	r2, [r2, #20]
 8001922:	0051      	lsls	r1, r2, #1
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	430b      	orrs	r3, r1
 800192a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800192e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 ffe7 	bl	8002906 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f001 f82d 	bl	8002998 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	3305      	adds	r3, #5
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	021a      	lsls	r2, r3, #8
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	3304      	adds	r3, #4
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	3303      	adds	r3, #3
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	061a      	lsls	r2, r3, #24
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	3302      	adds	r3, #2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	3301      	adds	r3, #1
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800197c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800198a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800198c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2210      	movs	r2, #16
 800199c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	58024400 	.word	0x58024400
 80019b0:	58000400 	.word	0x58000400
 80019b4:	431bde83 	.word	0x431bde83
 80019b8:	ffff8001 	.word	0xffff8001

080019bc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d153      	bne.n	8001a76 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2223      	movs	r2, #35	; 0x23
 80019d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2204      	movs	r2, #4
 80019da:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f9f6 	bl	8001dce <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0202 	orr.w	r2, r2, #2
 80019f0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0201 	orr.w	r2, r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a2e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a4a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a56:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001a62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a66:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2223      	movs	r2, #35	; 0x23
 8001a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
  }
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a8e:	2b23      	cmp	r3, #35	; 0x23
 8001a90:	d13f      	bne.n	8001b12 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2223      	movs	r2, #35	; 0x23
 8001a96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ab2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001abe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ace:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0201 	bic.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 0201 	orr.w	r2, r2, #1
 8001af2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0202 	bic.w	r2, r2, #2
 8001b04:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2210      	movs	r2, #16
 8001b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e000      	b.n	8001b14 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
  }
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b38:	f043 0201 	orr.w	r2, r3, #1
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e07f      	b.n	8001c46 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b4c:	2b23      	cmp	r3, #35	; 0x23
 8001b4e:	d179      	bne.n	8001c44 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001b50:	2200      	movs	r2, #0
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 ff7d 	bl	8002a54 <ETH_Prepare_Tx_Descriptors>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b66:	f043 0202 	orr.w	r2, r3, #2
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e068      	b.n	8001c46 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b74:	f3bf 8f4f 	dsb	sy
}
 8001b78:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3206      	adds	r2, #6
 8001b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b86:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d904      	bls.n	8001ba4 <HAL_ETH_Transmit+0x84>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	1f1a      	subs	r2, r3, #4
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3106      	adds	r1, #6
 8001bb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001bb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bb8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 8001bbc:	f7ff fc68 	bl	8001490 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001bc2:	e039      	b.n	8001c38 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bcc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d012      	beq.n	8001bfe <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bde:	f043 0208 	orr.w	r2, r3, #8
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf0:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e023      	b.n	8001c46 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c04:	d018      	beq.n	8001c38 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c06:	f7ff fc43 	bl	8001490 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d302      	bcc.n	8001c1c <HAL_ETH_Transmit+0xfc>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10d      	bne.n	8001c38 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c22:	f043 0204 	orr.w	r2, r3, #4
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001c32:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e006      	b.n	8001c46 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	dbc1      	blt.n	8001bc4 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	e000      	b.n	8001c46 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
  }
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b088      	sub	sp, #32
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6c:	f043 0201 	orr.w	r2, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0a5      	b.n	8001dc6 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c80:	2b23      	cmp	r3, #35	; 0x23
 8001c82:	d001      	beq.n	8001c88 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e09e      	b.n	8001dc6 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69fa      	ldr	r2, [r7, #28]
 8001c92:	3212      	adds	r2, #18
 8001c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c98:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c9e:	f1c3 0304 	rsb	r3, r3, #4
 8001ca2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ca4:	e067      	b.n	8001d76 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d103      	bne.n	8001cd6 <HAL_ETH_ReadData+0x88>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d03d      	beq.n	8001d52 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00d      	beq.n	8001d1c <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	f005 ff33 	bl	8007b9c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	441a      	add	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d902      	bls.n	8001d64 <HAL_ETH_ReadData+0x116>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b04      	subs	r3, #4
 8001d62:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	3212      	adds	r2, #18
 8001d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3301      	adds	r3, #1
 8001d74:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db06      	blt.n	8001d8c <HAL_ETH_ReadData+0x13e>
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d202      	bcs.n	8001d8c <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d08c      	beq.n	8001ca6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	441a      	add	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 f814 	bl	8001dce <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d108      	bne.n	8001dc4 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	e000      	b.n	8001dc6 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3720      	adds	r7, #32
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b088      	sub	sp, #32
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001de2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	3212      	adds	r2, #18
 8001dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dee:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001df4:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001df6:	e03b      	b.n	8001e70 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d112      	bne.n	8001e26 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	4618      	mov	r0, r3
 8001e06:	f005 fe99 	bl	8007b3c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001e10:	2300      	movs	r3, #0
 8001e12:	74fb      	strb	r3, [r7, #19]
 8001e14:	e007      	b.n	8001e26 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	461a      	mov	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001e26:	7cfb      	ldrb	r3, [r7, #19]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d021      	beq.n	8001e70 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001e2c:	f3bf 8f5f 	dmb	sy
}
 8001e30:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d004      	beq.n	8001e44 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	e003      	b.n	8001e4c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001e4a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d902      	bls.n	8001e5e <ETH_UpdateDescriptor+0x90>
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	3212      	adds	r2, #18
 8001e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e68:	617b      	str	r3, [r7, #20]
      desccount--;
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <ETH_UpdateDescriptor+0xae>
 8001e76:	7cfb      	ldrb	r3, [r7, #19]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1bd      	bne.n	8001df8 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d00d      	beq.n	8001ea2 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2300      	movs	r3, #0
 8001e92:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	3720      	adds	r7, #32
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e03e      	b.n	8001f4a <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ed4:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	055b      	lsls	r3, r3, #21
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	041b      	lsls	r3, r3, #16
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f043 030c 	orr.w	r3, r3, #12
 8001ef8:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001f0c:	f7ff fac0 	bl	8001490 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f12:	e009      	b.n	8001f28 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f14:	f7ff fabc 	bl	8001490 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f22:	d901      	bls.n	8001f28 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e010      	b.n	8001f4a <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1ed      	bne.n	8001f14 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e03c      	b.n	8001ff0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f7e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	055b      	lsls	r3, r3, #21
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f023 030c 	bic.w	r3, r3, #12
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_ETH_WritePHYRegister+0xa4>)
 8001fb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001fba:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <HAL_ETH_WritePHYRegister+0xa4>)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001fc2:	f7ff fa65 	bl	8001490 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001fc8:	e009      	b.n	8001fde <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001fca:	f7ff fa61 	bl	8001490 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fd8:	d901      	bls.n	8001fde <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e008      	b.n	8001ff0 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1ed      	bne.n	8001fca <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40028000 	.word	0x40028000

08001ffc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e1c3      	b.n	8002398 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 020c 	and.w	r2, r3, #12
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf14      	ite	ne
 800202c:	2301      	movne	r3, #1
 800202e:	2300      	moveq	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	bf0c      	ite	eq
 8002056:	2301      	moveq	r3, #1
 8002058:	2300      	movne	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800206e:	2b00      	cmp	r3, #0
 8002070:	bf14      	ite	ne
 8002072:	2301      	movne	r3, #1
 8002074:	2300      	moveq	r3, #0
 8002076:	b2db      	uxtb	r3, r3
 8002078:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800209e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bf14      	ite	ne
 80020a6:	2301      	movne	r3, #1
 80020a8:	2300      	moveq	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf14      	ite	ne
 80020c0:	2301      	movne	r3, #1
 80020c2:	2300      	moveq	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bf14      	ite	ne
 80020f6:	2301      	movne	r3, #1
 80020f8:	2300      	moveq	r3, #0
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	461a      	mov	r2, r3
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002140:	2b00      	cmp	r3, #0
 8002142:	bf14      	ite	ne
 8002144:	2301      	movne	r3, #1
 8002146:	2300      	moveq	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800215a:	2b00      	cmp	r3, #0
 800215c:	bf14      	ite	ne
 800215e:	2301      	movne	r3, #1
 8002160:	2300      	moveq	r3, #0
 8002162:	b2db      	uxtb	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf14      	ite	ne
 8002178:	2301      	movne	r3, #1
 800217a:	2300      	moveq	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800218a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf14      	ite	ne
 8002192:	2301      	movne	r3, #1
 8002194:	2300      	moveq	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf14      	ite	ne
 80021ba:	2301      	movne	r3, #1
 80021bc:	2300      	moveq	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf14      	ite	ne
 800220c:	2301      	movne	r3, #1
 800220e:	2300      	moveq	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf14      	ite	ne
 8002228:	2301      	movne	r3, #1
 800222a:	2300      	moveq	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	0e5b      	lsrs	r3, r3, #25
 800225a:	f003 021f 	and.w	r2, r3, #31
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 020f 	and.w	r2, r3, #15
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	bf14      	ite	ne
 800229a:	2301      	movne	r3, #1
 800229c:	2300      	moveq	r3, #0
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bf0c      	ite	eq
 80022b6:	2301      	moveq	r3, #1
 80022b8:	2300      	movne	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	b29a      	uxth	r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf14      	ite	ne
 800230e:	2301      	movne	r3, #1
 8002310:	2300      	moveq	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002324:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002334:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf14      	ite	ne
 800234c:	2301      	movne	r3, #1
 800234e:	2300      	moveq	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	bf14      	ite	ne
 800236a:	2301      	movne	r3, #1
 800236c:	2300      	moveq	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e00b      	b.n	80023d0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023be:	2b10      	cmp	r3, #16
 80023c0:	d105      	bne.n	80023ce <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80023c2:	6839      	ldr	r1, [r7, #0]
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f85f 	bl	8002488 <ETH_SetMACConfig>

    return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e000      	b.n	80023d0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
  }
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80023f2:	f002 f8ab 	bl	800454c <HAL_RCC_GetHCLKFreq>
 80023f6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4a1e      	ldr	r2, [pc, #120]	; (8002474 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d908      	bls.n	8002412 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d804      	bhi.n	8002412 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	e027      	b.n	8002462 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	4a18      	ldr	r2, [pc, #96]	; (8002478 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d908      	bls.n	800242c <HAL_ETH_SetMDIOClockRange+0x54>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4a17      	ldr	r2, [pc, #92]	; (800247c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d204      	bcs.n	800242c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	e01a      	b.n	8002462 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4a13      	ldr	r2, [pc, #76]	; (800247c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d303      	bcc.n	800243c <HAL_ETH_SetMDIOClockRange+0x64>
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4a12      	ldr	r2, [pc, #72]	; (8002480 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d911      	bls.n	8002460 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4a10      	ldr	r2, [pc, #64]	; (8002480 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d908      	bls.n	8002456 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d804      	bhi.n	8002456 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e005      	b.n	8002462 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	e000      	b.n	8002462 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002460:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	01312cff 	.word	0x01312cff
 8002478:	02160ebf 	.word	0x02160ebf
 800247c:	03938700 	.word	0x03938700
 8002480:	05f5e0ff 	.word	0x05f5e0ff
 8002484:	08f0d17f 	.word	0x08f0d17f

08002488 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800249a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	791b      	ldrb	r3, [r3, #4]
 80024a0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80024a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	7b1b      	ldrb	r3, [r3, #12]
 80024a8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80024aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	7b5b      	ldrb	r3, [r3, #13]
 80024b0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80024b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	7b9b      	ldrb	r3, [r3, #14]
 80024b8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80024ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	7bdb      	ldrb	r3, [r3, #15]
 80024c0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80024c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	7c12      	ldrb	r2, [r2, #16]
 80024c8:	2a00      	cmp	r2, #0
 80024ca:	d102      	bne.n	80024d2 <ETH_SetMACConfig+0x4a>
 80024cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024d0:	e000      	b.n	80024d4 <ETH_SetMACConfig+0x4c>
 80024d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80024d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	7c52      	ldrb	r2, [r2, #17]
 80024da:	2a00      	cmp	r2, #0
 80024dc:	d102      	bne.n	80024e4 <ETH_SetMACConfig+0x5c>
 80024de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024e2:	e000      	b.n	80024e6 <ETH_SetMACConfig+0x5e>
 80024e4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80024e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	7c9b      	ldrb	r3, [r3, #18]
 80024ec:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024ee:	431a      	orrs	r2, r3
               macconf->Speed |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80024f4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80024fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	7f1b      	ldrb	r3, [r3, #28]
 8002500:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002502:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	7f5b      	ldrb	r3, [r3, #29]
 8002508:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800250a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	7f92      	ldrb	r2, [r2, #30]
 8002510:	2a00      	cmp	r2, #0
 8002512:	d102      	bne.n	800251a <ETH_SetMACConfig+0x92>
 8002514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002518:	e000      	b.n	800251c <ETH_SetMACConfig+0x94>
 800251a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800251c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	7fdb      	ldrb	r3, [r3, #31]
 8002522:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002524:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	f892 2020 	ldrb.w	r2, [r2, #32]
 800252c:	2a00      	cmp	r2, #0
 800252e:	d102      	bne.n	8002536 <ETH_SetMACConfig+0xae>
 8002530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002534:	e000      	b.n	8002538 <ETH_SetMACConfig+0xb0>
 8002536:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002538:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800253e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002546:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002548:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <ETH_SetMACConfig+0x22c>)
 800255a:	4013      	ands	r3, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	68f9      	ldr	r1, [r7, #12]
 8002562:	430b      	orrs	r3, r1
 8002564:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002572:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002574:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800257c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800257e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002586:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002588:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002590:	2a00      	cmp	r2, #0
 8002592:	d102      	bne.n	800259a <ETH_SetMACConfig+0x112>
 8002594:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002598:	e000      	b.n	800259c <ETH_SetMACConfig+0x114>
 800259a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800259c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	4b42      	ldr	r3, [pc, #264]	; (80026b8 <ETH_SetMACConfig+0x230>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	68f9      	ldr	r1, [r7, #12]
 80025b6:	430b      	orrs	r3, r1
 80025b8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <ETH_SetMACConfig+0x234>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	68f9      	ldr	r1, [r7, #12]
 80025da:	430b      	orrs	r3, r1
 80025dc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80025e4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80025f2:	2a00      	cmp	r2, #0
 80025f4:	d101      	bne.n	80025fa <ETH_SetMACConfig+0x172>
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	e000      	b.n	80025fc <ETH_SetMACConfig+0x174>
 80025fa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80025fc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002602:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800260e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002612:	4013      	ands	r3, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	68f9      	ldr	r1, [r7, #12]
 800261a:	430b      	orrs	r3, r1
 800261c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002624:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800262c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	f023 0103 	bic.w	r1, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	430a      	orrs	r2, r1
 8002646:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002652:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800266e:	2a00      	cmp	r2, #0
 8002670:	d101      	bne.n	8002676 <ETH_SetMACConfig+0x1ee>
 8002672:	2240      	movs	r2, #64	; 0x40
 8002674:	e000      	b.n	8002678 <ETH_SetMACConfig+0x1f0>
 8002676:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002678:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002680:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002682:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800268a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002698:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	00048083 	.word	0x00048083
 80026b8:	c0f88000 	.word	0xc0f88000
 80026bc:	fffffef0 	.word	0xfffffef0

080026c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b38      	ldr	r3, [pc, #224]	; (80027b8 <ETH_SetDMAConfig+0xf8>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	6811      	ldr	r1, [r2, #0]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	430b      	orrs	r3, r1
 80026e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026e6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	791b      	ldrb	r3, [r3, #4]
 80026ec:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026f2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	7b1b      	ldrb	r3, [r3, #12]
 80026f8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <ETH_SetDMAConfig+0xfc>)
 800270a:	4013      	ands	r3, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	68f9      	ldr	r1, [r7, #12]
 8002712:	430b      	orrs	r3, r1
 8002714:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002718:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	7b5b      	ldrb	r3, [r3, #13]
 800271e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002724:	4313      	orrs	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002730:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <ETH_SetDMAConfig+0x100>)
 8002736:	4013      	ands	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	68f9      	ldr	r1, [r7, #12]
 800273e:	430b      	orrs	r3, r1
 8002740:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002744:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	7d1b      	ldrb	r3, [r3, #20]
 8002750:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002752:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	7f5b      	ldrb	r3, [r3, #29]
 8002758:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002766:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <ETH_SetDMAConfig+0x104>)
 800276c:	4013      	ands	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	68f9      	ldr	r1, [r7, #12]
 8002774:	430b      	orrs	r3, r1
 8002776:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800277a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	7f1b      	ldrb	r3, [r3, #28]
 8002782:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002794:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <ETH_SetDMAConfig+0x108>)
 800279a:	4013      	ands	r3, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	68f9      	ldr	r1, [r7, #12]
 80027a2:	430b      	orrs	r3, r1
 80027a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027a8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	ffff87fd 	.word	0xffff87fd
 80027bc:	ffff2ffe 	.word	0xffff2ffe
 80027c0:	fffec000 	.word	0xfffec000
 80027c4:	ffc0efef 	.word	0xffc0efef
 80027c8:	7fc0ffff 	.word	0x7fc0ffff

080027cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b0a4      	sub	sp, #144	; 0x90
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80027da:	2300      	movs	r3, #0
 80027dc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80027f0:	2301      	movs	r3, #1
 80027f2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002802:	2301      	movs	r3, #1
 8002804:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800280c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002814:	2300      	movs	r3, #0
 8002816:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002824:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002828:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002830:	2300      	movs	r3, #0
 8002832:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002834:	2301      	movs	r3, #1
 8002836:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800283a:	2300      	movs	r3, #0
 800283c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002846:	2300      	movs	r3, #0
 8002848:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800284a:	2300      	movs	r3, #0
 800284c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800284e:	2300      	movs	r3, #0
 8002850:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002864:	2320      	movs	r3, #32
 8002866:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800286a:	2301      	movs	r3, #1
 800286c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002870:	2300      	movs	r3, #0
 8002872:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002876:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800287c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002880:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002888:	2302      	movs	r3, #2
 800288a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80028a6:	2300      	movs	r3, #0
 80028a8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff fde6 	bl	8002488 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028bc:	2301      	movs	r3, #1
 80028be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028c0:	2301      	movs	r3, #1
 80028c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80028ec:	f44f 7306 	mov.w	r3, #536	; 0x218
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028f2:	f107 0308 	add.w	r3, r7, #8
 80028f6:	4619      	mov	r1, r3
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fee1 	bl	80026c0 <ETH_SetDMAConfig>
}
 80028fe:	bf00      	nop
 8002900:	3790      	adds	r7, #144	; 0x90
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	e01d      	b.n	8002950 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68d9      	ldr	r1, [r3, #12]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2200      	movs	r2, #0
 8002930:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	3206      	adds	r2, #6
 8002946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	3301      	adds	r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d9de      	bls.n	8002914 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002964:	461a      	mov	r2, r3
 8002966:	2303      	movs	r3, #3
 8002968:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002978:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002988:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	e023      	b.n	80029ee <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6919      	ldr	r1, [r3, #16]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	440b      	add	r3, r1
 80029b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2200      	movs	r2, #0
 80029c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2200      	movs	r2, #0
 80029da:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	3212      	adds	r2, #18
 80029e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3301      	adds	r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d9d8      	bls.n	80029a6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a2e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a42:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b08d      	sub	sp, #52	; 0x34
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3318      	adds	r3, #24
 8002a64:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a96:	d007      	beq.n	8002aa8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e259      	b.n	8002f60 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d044      	beq.n	8002b42 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	4b75      	ldr	r3, [pc, #468]	; (8002c94 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ae4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d027      	beq.n	8002b42 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	041b      	lsls	r3, r3, #16
 8002afe:	431a      	orrs	r2, r3
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b30:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b40:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00e      	beq.n	8002b6c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	4b51      	ldr	r3, [pc, #324]	; (8002c98 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	6992      	ldr	r2, [r2, #24]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d105      	bne.n	8002b84 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d036      	beq.n	8002bf2 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b90:	f3bf 8f5f 	dmb	sy
}
 8002b94:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d902      	bls.n	8002bb4 <ETH_Prepare_Tx_Descriptors+0x160>
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	3b04      	subs	r3, #4
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bbc:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bd0:	d10f      	bne.n	8002bf2 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002bdc:	f3bf 8f5f 	dmb	sy
}
 8002be0:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e1b6      	b.n	8002f60 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	6852      	ldr	r2, [r2, #4]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d012      	beq.n	8002c42 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	6852      	ldr	r2, [r2, #4]
 8002c38:	0412      	lsls	r2, r2, #16
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	e008      	b.n	8002c54 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	2200      	movs	r2, #0
 8002c46:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	6a3a      	ldr	r2, [r7, #32]
 8002c52:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d021      	beq.n	8002ca4 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	04db      	lsls	r3, r3, #19
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	69d2      	ldr	r2, [r2, #28]
 8002c80:	431a      	orrs	r2, r3
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	e02e      	b.n	8002cf2 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002c94:	ffff0000 	.word	0xffff0000
 8002c98:	ffffc000 	.word	0xffffc000
 8002c9c:	c000ffff 	.word	0xc000ffff
 8002ca0:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	4b7b      	ldr	r3, [pc, #492]	; (8002e98 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	6852      	ldr	r2, [r2, #4]
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d28:	f3bf 8f5f 	dmb	sy
}
 8002d2c:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80da 	beq.w	8002efc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002d5a:	e0cf      	b.n	8002efc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d902      	bls.n	8002d7a <ETH_Prepare_Tx_Descriptors+0x326>
 8002d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d76:	3b04      	subs	r3, #4
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d82:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d9c:	d007      	beq.n	8002dae <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	3304      	adds	r3, #4
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d029      	beq.n	8002e02 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dba:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc0:	e019      	b.n	8002df6 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002dc2:	f3bf 8f5f 	dmb	sy
}
 8002dc6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d902      	bls.n	8002de6 <ETH_Prepare_Tx_Descriptors+0x392>
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	3b04      	subs	r3, #4
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dee:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df2:	3301      	adds	r3, #1
 8002df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d3e1      	bcc.n	8002dc2 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e0ae      	b.n	8002f60 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	3301      	adds	r3, #1
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <ETH_Prepare_Tx_Descriptors+0x448>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	6852      	ldr	r2, [r2, #4]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d012      	beq.n	8002e58 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	6852      	ldr	r2, [r2, #4]
 8002e4e:	0412      	lsls	r2, r2, #16
 8002e50:	431a      	orrs	r2, r3
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	609a      	str	r2, [r3, #8]
 8002e56:	e008      	b.n	8002e6a <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	6a3a      	ldr	r2, [r7, #32]
 8002e68:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d018      	beq.n	8002ea8 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	69d2      	ldr	r2, [r2, #28]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	60da      	str	r2, [r3, #12]
 8002e94:	e020      	b.n	8002ed8 <ETH_Prepare_Tx_Descriptors+0x484>
 8002e96:	bf00      	nop
 8002e98:	ffff8000 	.word	0xffff8000
 8002e9c:	ffffc000 	.word	0xffffc000
 8002ea0:	c000ffff 	.word	0xc000ffff
 8002ea4:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <ETH_Prepare_Tx_Descriptors+0x518>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	6852      	ldr	r2, [r2, #4]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	3301      	adds	r3, #1
 8002edc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ede:	f3bf 8f5f 	dmb	sy
}
 8002ee2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f47f af2b 	bne.w	8002d5c <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d006      	beq.n	8002f1a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	e005      	b.n	8002f26 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f36:	6979      	ldr	r1, [r7, #20]
 8002f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f46:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f48:	b672      	cpsid	i
}
 8002f4a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	4413      	add	r3, r2
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002f5a:	b662      	cpsie	i
}
 8002f5c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3734      	adds	r7, #52	; 0x34
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	ffff8000 	.word	0xffff8000

08002f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b089      	sub	sp, #36	; 0x24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f7e:	4b89      	ldr	r3, [pc, #548]	; (80031a4 <HAL_GPIO_Init+0x234>)
 8002f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f82:	e194      	b.n	80032ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	2101      	movs	r1, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f90:	4013      	ands	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8186 	beq.w	80032a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d005      	beq.n	8002fb4 <HAL_GPIO_Init+0x44>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d130      	bne.n	8003016 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fea:	2201      	movs	r2, #1
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	f003 0201 	and.w	r2, r3, #1
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b03      	cmp	r3, #3
 8003020:	d017      	beq.n	8003052 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d123      	bne.n	80030a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	08da      	lsrs	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3208      	adds	r2, #8
 8003066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	220f      	movs	r2, #15
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4313      	orrs	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	08da      	lsrs	r2, r3, #3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3208      	adds	r2, #8
 80030a0:	69b9      	ldr	r1, [r7, #24]
 80030a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	2203      	movs	r2, #3
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 0203 	and.w	r2, r3, #3
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80e0 	beq.w	80032a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e8:	4b2f      	ldr	r3, [pc, #188]	; (80031a8 <HAL_GPIO_Init+0x238>)
 80030ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030ee:	4a2e      	ldr	r2, [pc, #184]	; (80031a8 <HAL_GPIO_Init+0x238>)
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80030f8:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <HAL_GPIO_Init+0x238>)
 80030fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003106:	4a29      	ldr	r2, [pc, #164]	; (80031ac <HAL_GPIO_Init+0x23c>)
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	3302      	adds	r3, #2
 800310e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	220f      	movs	r2, #15
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a20      	ldr	r2, [pc, #128]	; (80031b0 <HAL_GPIO_Init+0x240>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d052      	beq.n	80031d8 <HAL_GPIO_Init+0x268>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a1f      	ldr	r2, [pc, #124]	; (80031b4 <HAL_GPIO_Init+0x244>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d031      	beq.n	800319e <HAL_GPIO_Init+0x22e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <HAL_GPIO_Init+0x248>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d02b      	beq.n	800319a <HAL_GPIO_Init+0x22a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <HAL_GPIO_Init+0x24c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d025      	beq.n	8003196 <HAL_GPIO_Init+0x226>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a1c      	ldr	r2, [pc, #112]	; (80031c0 <HAL_GPIO_Init+0x250>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01f      	beq.n	8003192 <HAL_GPIO_Init+0x222>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <HAL_GPIO_Init+0x254>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d019      	beq.n	800318e <HAL_GPIO_Init+0x21e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <HAL_GPIO_Init+0x258>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_GPIO_Init+0x21a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a19      	ldr	r2, [pc, #100]	; (80031cc <HAL_GPIO_Init+0x25c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00d      	beq.n	8003186 <HAL_GPIO_Init+0x216>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <HAL_GPIO_Init+0x260>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d007      	beq.n	8003182 <HAL_GPIO_Init+0x212>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a17      	ldr	r2, [pc, #92]	; (80031d4 <HAL_GPIO_Init+0x264>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d101      	bne.n	800317e <HAL_GPIO_Init+0x20e>
 800317a:	2309      	movs	r3, #9
 800317c:	e02d      	b.n	80031da <HAL_GPIO_Init+0x26a>
 800317e:	230a      	movs	r3, #10
 8003180:	e02b      	b.n	80031da <HAL_GPIO_Init+0x26a>
 8003182:	2308      	movs	r3, #8
 8003184:	e029      	b.n	80031da <HAL_GPIO_Init+0x26a>
 8003186:	2307      	movs	r3, #7
 8003188:	e027      	b.n	80031da <HAL_GPIO_Init+0x26a>
 800318a:	2306      	movs	r3, #6
 800318c:	e025      	b.n	80031da <HAL_GPIO_Init+0x26a>
 800318e:	2305      	movs	r3, #5
 8003190:	e023      	b.n	80031da <HAL_GPIO_Init+0x26a>
 8003192:	2304      	movs	r3, #4
 8003194:	e021      	b.n	80031da <HAL_GPIO_Init+0x26a>
 8003196:	2303      	movs	r3, #3
 8003198:	e01f      	b.n	80031da <HAL_GPIO_Init+0x26a>
 800319a:	2302      	movs	r3, #2
 800319c:	e01d      	b.n	80031da <HAL_GPIO_Init+0x26a>
 800319e:	2301      	movs	r3, #1
 80031a0:	e01b      	b.n	80031da <HAL_GPIO_Init+0x26a>
 80031a2:	bf00      	nop
 80031a4:	58000080 	.word	0x58000080
 80031a8:	58024400 	.word	0x58024400
 80031ac:	58000400 	.word	0x58000400
 80031b0:	58020000 	.word	0x58020000
 80031b4:	58020400 	.word	0x58020400
 80031b8:	58020800 	.word	0x58020800
 80031bc:	58020c00 	.word	0x58020c00
 80031c0:	58021000 	.word	0x58021000
 80031c4:	58021400 	.word	0x58021400
 80031c8:	58021800 	.word	0x58021800
 80031cc:	58021c00 	.word	0x58021c00
 80031d0:	58022000 	.word	0x58022000
 80031d4:	58022400 	.word	0x58022400
 80031d8:	2300      	movs	r3, #0
 80031da:	69fa      	ldr	r2, [r7, #28]
 80031dc:	f002 0203 	and.w	r2, r2, #3
 80031e0:	0092      	lsls	r2, r2, #2
 80031e2:	4093      	lsls	r3, r2
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031ea:	4938      	ldr	r1, [pc, #224]	; (80032cc <HAL_GPIO_Init+0x35c>)
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	089b      	lsrs	r3, r3, #2
 80031f0:	3302      	adds	r3, #2
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800321e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800324c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	3301      	adds	r3, #1
 80032ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f47f ae63 	bne.w	8002f84 <HAL_GPIO_Init+0x14>
  }
}
 80032be:	bf00      	nop
 80032c0:	bf00      	nop
 80032c2:	3724      	adds	r7, #36	; 0x24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	58000400 	.word	0x58000400

080032d0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80032d8:	4a08      	ldr	r2, [pc, #32]	; (80032fc <HAL_HSEM_FastTake+0x2c>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3320      	adds	r3, #32
 80032de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e2:	4a07      	ldr	r2, [pc, #28]	; (8003300 <HAL_HSEM_FastTake+0x30>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d101      	bne.n	80032ec <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e000      	b.n	80032ee <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	58026400 	.word	0x58026400
 8003300:	80000300 	.word	0x80000300

08003304 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800330e:	4906      	ldr	r1, [pc, #24]	; (8003328 <HAL_HSEM_Release+0x24>)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	58026400 	.word	0x58026400

0800332c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800332c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332e:	b08f      	sub	sp, #60	; 0x3c
 8003330:	af0a      	add	r7, sp, #40	; 0x28
 8003332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e116      	b.n	800356c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d106      	bne.n	800335e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7fd fd0d 	bl	8000d78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2203      	movs	r2, #3
 8003362:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d102      	bne.n	8003378 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f003 fd87 	bl	8006e90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	687e      	ldr	r6, [r7, #4]
 800338a:	466d      	mov	r5, sp
 800338c:	f106 0410 	add.w	r4, r6, #16
 8003390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003398:	e894 0003 	ldmia.w	r4, {r0, r1}
 800339c:	e885 0003 	stmia.w	r5, {r0, r1}
 80033a0:	1d33      	adds	r3, r6, #4
 80033a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033a4:	6838      	ldr	r0, [r7, #0]
 80033a6:	f003 fd05 	bl	8006db4 <USB_CoreInit>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0d7      	b.n	800356c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f003 fd75 	bl	8006eb2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]
 80033cc:	e04a      	b.n	8003464 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033ce:	7bfa      	ldrb	r2, [r7, #15]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	333d      	adds	r3, #61	; 0x3d
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	333c      	adds	r3, #60	; 0x3c
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033f6:	7bfa      	ldrb	r2, [r7, #15]
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	b298      	uxth	r0, r3
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	3344      	adds	r3, #68	; 0x44
 800340a:	4602      	mov	r2, r0
 800340c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800340e:	7bfa      	ldrb	r2, [r7, #15]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	3340      	adds	r3, #64	; 0x40
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003422:	7bfa      	ldrb	r2, [r7, #15]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	3348      	adds	r3, #72	; 0x48
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003436:	7bfa      	ldrb	r2, [r7, #15]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	334c      	adds	r3, #76	; 0x4c
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800344a:	7bfa      	ldrb	r2, [r7, #15]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	3354      	adds	r3, #84	; 0x54
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	3301      	adds	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
 8003464:	7bfa      	ldrb	r2, [r7, #15]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	429a      	cmp	r2, r3
 800346c:	d3af      	bcc.n	80033ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	e044      	b.n	80034fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034b2:	2200      	movs	r2, #0
 80034b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	3301      	adds	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
 80034fe:	7bfa      	ldrb	r2, [r7, #15]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	429a      	cmp	r2, r3
 8003506:	d3b5      	bcc.n	8003474 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	687e      	ldr	r6, [r7, #4]
 8003510:	466d      	mov	r5, sp
 8003512:	f106 0410 	add.w	r4, r6, #16
 8003516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800351a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800351c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800351e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003522:	e885 0003 	stmia.w	r5, {r0, r1}
 8003526:	1d33      	adds	r3, r6, #4
 8003528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800352a:	6838      	ldr	r0, [r7, #0]
 800352c:	f003 fd0e 	bl	8006f4c <USB_DevInit>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2202      	movs	r2, #2
 800353a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e014      	b.n	800356c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	2b01      	cmp	r3, #1
 8003558:	d102      	bne.n	8003560 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f80a 	bl	8003574 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f003 fecc 	bl	8007302 <USB_DevDisconnect>

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003574 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035a2:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	10000003 	.word	0x10000003

080035bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80035c4:	4b29      	ldr	r3, [pc, #164]	; (800366c <HAL_PWREx_ConfigSupply+0xb0>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	2b06      	cmp	r3, #6
 80035ce:	d00a      	beq.n	80035e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80035d0:	4b26      	ldr	r3, [pc, #152]	; (800366c <HAL_PWREx_ConfigSupply+0xb0>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d001      	beq.n	80035e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e040      	b.n	8003664 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	e03e      	b.n	8003664 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <HAL_PWREx_ConfigSupply+0xb0>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80035ee:	491f      	ldr	r1, [pc, #124]	; (800366c <HAL_PWREx_ConfigSupply+0xb0>)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80035f6:	f7fd ff4b 	bl	8001490 <HAL_GetTick>
 80035fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035fc:	e009      	b.n	8003612 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035fe:	f7fd ff47 	bl	8001490 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800360c:	d901      	bls.n	8003612 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e028      	b.n	8003664 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003612:	4b16      	ldr	r3, [pc, #88]	; (800366c <HAL_PWREx_ConfigSupply+0xb0>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800361a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361e:	d1ee      	bne.n	80035fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b1e      	cmp	r3, #30
 8003624:	d008      	beq.n	8003638 <HAL_PWREx_ConfigSupply+0x7c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b2e      	cmp	r3, #46	; 0x2e
 800362a:	d005      	beq.n	8003638 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b1d      	cmp	r3, #29
 8003630:	d002      	beq.n	8003638 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b2d      	cmp	r3, #45	; 0x2d
 8003636:	d114      	bne.n	8003662 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003638:	f7fd ff2a 	bl	8001490 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800363e:	e009      	b.n	8003654 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003640:	f7fd ff26 	bl	8001490 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800364e:	d901      	bls.n	8003654 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e007      	b.n	8003664 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_PWREx_ConfigSupply+0xb0>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003660:	d1ee      	bne.n	8003640 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	58024800 	.word	0x58024800

08003670 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a04      	ldr	r2, [pc, #16]	; (800368c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800367a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367e:	60d3      	str	r3, [r2, #12]
}
 8003680:	bf00      	nop
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	58024800 	.word	0x58024800

08003690 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08c      	sub	sp, #48	; 0x30
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d102      	bne.n	80036a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	f000 bc1d 	b.w	8003ede <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 8087 	beq.w	80037c0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036b2:	4b99      	ldr	r3, [pc, #612]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036bc:	4b96      	ldr	r3, [pc, #600]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	2b10      	cmp	r3, #16
 80036c6:	d007      	beq.n	80036d8 <HAL_RCC_OscConfig+0x48>
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	2b18      	cmp	r3, #24
 80036cc:	d110      	bne.n	80036f0 <HAL_RCC_OscConfig+0x60>
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d10b      	bne.n	80036f0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d8:	4b8f      	ldr	r3, [pc, #572]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d06c      	beq.n	80037be <HAL_RCC_OscConfig+0x12e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d168      	bne.n	80037be <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e3f6      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f8:	d106      	bne.n	8003708 <HAL_RCC_OscConfig+0x78>
 80036fa:	4b87      	ldr	r3, [pc, #540]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a86      	ldr	r2, [pc, #536]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e02e      	b.n	8003766 <HAL_RCC_OscConfig+0xd6>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10c      	bne.n	800372a <HAL_RCC_OscConfig+0x9a>
 8003710:	4b81      	ldr	r3, [pc, #516]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a80      	ldr	r2, [pc, #512]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 8003716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b7e      	ldr	r3, [pc, #504]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a7d      	ldr	r2, [pc, #500]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 8003722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	e01d      	b.n	8003766 <HAL_RCC_OscConfig+0xd6>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003732:	d10c      	bne.n	800374e <HAL_RCC_OscConfig+0xbe>
 8003734:	4b78      	ldr	r3, [pc, #480]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a77      	ldr	r2, [pc, #476]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 800373a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	4b75      	ldr	r3, [pc, #468]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a74      	ldr	r2, [pc, #464]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 8003746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	e00b      	b.n	8003766 <HAL_RCC_OscConfig+0xd6>
 800374e:	4b72      	ldr	r3, [pc, #456]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a71      	ldr	r2, [pc, #452]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 8003754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4b6f      	ldr	r3, [pc, #444]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a6e      	ldr	r2, [pc, #440]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 8003760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003764:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d013      	beq.n	8003796 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fd fe8f 	bl	8001490 <HAL_GetTick>
 8003772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003776:	f7fd fe8b 	bl	8001490 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b64      	cmp	r3, #100	; 0x64
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e3aa      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003788:	4b63      	ldr	r3, [pc, #396]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0xe6>
 8003794:	e014      	b.n	80037c0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003796:	f7fd fe7b 	bl	8001490 <HAL_GetTick>
 800379a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800379e:	f7fd fe77 	bl	8001490 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b64      	cmp	r3, #100	; 0x64
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e396      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037b0:	4b59      	ldr	r3, [pc, #356]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f0      	bne.n	800379e <HAL_RCC_OscConfig+0x10e>
 80037bc:	e000      	b.n	80037c0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037be:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80cb 	beq.w	8003964 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ce:	4b52      	ldr	r3, [pc, #328]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037d6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037d8:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <HAL_RCC_OscConfig+0x164>
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	2b18      	cmp	r3, #24
 80037e8:	d156      	bne.n	8003898 <HAL_RCC_OscConfig+0x208>
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d151      	bne.n	8003898 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037f4:	4b48      	ldr	r3, [pc, #288]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_OscConfig+0x17c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e368      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800380c:	4b42      	ldr	r3, [pc, #264]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 0219 	bic.w	r2, r3, #25
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	493f      	ldr	r1, [pc, #252]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800381e:	f7fd fe37 	bl	8001490 <HAL_GetTick>
 8003822:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003826:	f7fd fe33 	bl	8001490 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e352      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003838:	4b37      	ldr	r3, [pc, #220]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003844:	f7fd fe54 	bl	80014f0 <HAL_GetREVID>
 8003848:	4603      	mov	r3, r0
 800384a:	f241 0203 	movw	r2, #4099	; 0x1003
 800384e:	4293      	cmp	r3, r2
 8003850:	d817      	bhi.n	8003882 <HAL_RCC_OscConfig+0x1f2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d108      	bne.n	800386c <HAL_RCC_OscConfig+0x1dc>
 800385a:	4b2f      	ldr	r3, [pc, #188]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003862:	4a2d      	ldr	r2, [pc, #180]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 8003864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003868:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800386a:	e07b      	b.n	8003964 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386c:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	031b      	lsls	r3, r3, #12
 800387a:	4927      	ldr	r1, [pc, #156]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003880:	e070      	b.n	8003964 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003882:	4b25      	ldr	r3, [pc, #148]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	4921      	ldr	r1, [pc, #132]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003896:	e065      	b.n	8003964 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d048      	beq.n	8003932 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 0219 	bic.w	r2, r3, #25
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	491a      	ldr	r1, [pc, #104]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fd fded 	bl	8001490 <HAL_GetTick>
 80038b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ba:	f7fd fde9 	bl	8001490 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e308      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d8:	f7fd fe0a 	bl	80014f0 <HAL_GetREVID>
 80038dc:	4603      	mov	r3, r0
 80038de:	f241 0203 	movw	r2, #4099	; 0x1003
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d81a      	bhi.n	800391c <HAL_RCC_OscConfig+0x28c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b40      	cmp	r3, #64	; 0x40
 80038ec:	d108      	bne.n	8003900 <HAL_RCC_OscConfig+0x270>
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80038f6:	4a08      	ldr	r2, [pc, #32]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 80038f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fc:	6053      	str	r3, [r2, #4]
 80038fe:	e031      	b.n	8003964 <HAL_RCC_OscConfig+0x2d4>
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	031b      	lsls	r3, r3, #12
 800390e:	4902      	ldr	r1, [pc, #8]	; (8003918 <HAL_RCC_OscConfig+0x288>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
 8003914:	e026      	b.n	8003964 <HAL_RCC_OscConfig+0x2d4>
 8003916:	bf00      	nop
 8003918:	58024400 	.word	0x58024400
 800391c:	4b9a      	ldr	r3, [pc, #616]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	061b      	lsls	r3, r3, #24
 800392a:	4997      	ldr	r1, [pc, #604]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]
 8003930:	e018      	b.n	8003964 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003932:	4b95      	ldr	r3, [pc, #596]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a94      	ldr	r2, [pc, #592]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003938:	f023 0301 	bic.w	r3, r3, #1
 800393c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393e:	f7fd fda7 	bl	8001490 <HAL_GetTick>
 8003942:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003946:	f7fd fda3 	bl	8001490 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e2c2      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003958:	4b8b      	ldr	r3, [pc, #556]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f0      	bne.n	8003946 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80a9 	beq.w	8003ac4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003972:	4b85      	ldr	r3, [pc, #532]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800397a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800397c:	4b82      	ldr	r3, [pc, #520]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b08      	cmp	r3, #8
 8003986:	d007      	beq.n	8003998 <HAL_RCC_OscConfig+0x308>
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	2b18      	cmp	r3, #24
 800398c:	d13a      	bne.n	8003a04 <HAL_RCC_OscConfig+0x374>
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d135      	bne.n	8003a04 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003998:	4b7b      	ldr	r3, [pc, #492]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_OscConfig+0x320>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	2b80      	cmp	r3, #128	; 0x80
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e296      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039b0:	f7fd fd9e 	bl	80014f0 <HAL_GetREVID>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d817      	bhi.n	80039ee <HAL_RCC_OscConfig+0x35e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d108      	bne.n	80039d8 <HAL_RCC_OscConfig+0x348>
 80039c6:	4b70      	ldr	r3, [pc, #448]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80039ce:	4a6e      	ldr	r2, [pc, #440]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 80039d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039d6:	e075      	b.n	8003ac4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039d8:	4b6b      	ldr	r3, [pc, #428]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	069b      	lsls	r3, r3, #26
 80039e6:	4968      	ldr	r1, [pc, #416]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039ec:	e06a      	b.n	8003ac4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039ee:	4b66      	ldr	r3, [pc, #408]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	061b      	lsls	r3, r3, #24
 80039fc:	4962      	ldr	r1, [pc, #392]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a02:	e05f      	b.n	8003ac4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d042      	beq.n	8003a92 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a0c:	4b5e      	ldr	r3, [pc, #376]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a5d      	ldr	r2, [pc, #372]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a18:	f7fd fd3a 	bl	8001490 <HAL_GetTick>
 8003a1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003a20:	f7fd fd36 	bl	8001490 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e255      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a32:	4b55      	ldr	r3, [pc, #340]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a3e:	f7fd fd57 	bl	80014f0 <HAL_GetREVID>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d817      	bhi.n	8003a7c <HAL_RCC_OscConfig+0x3ec>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d108      	bne.n	8003a66 <HAL_RCC_OscConfig+0x3d6>
 8003a54:	4b4c      	ldr	r3, [pc, #304]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a5c:	4a4a      	ldr	r2, [pc, #296]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003a5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a62:	6053      	str	r3, [r2, #4]
 8003a64:	e02e      	b.n	8003ac4 <HAL_RCC_OscConfig+0x434>
 8003a66:	4b48      	ldr	r3, [pc, #288]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	069b      	lsls	r3, r3, #26
 8003a74:	4944      	ldr	r1, [pc, #272]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
 8003a7a:	e023      	b.n	8003ac4 <HAL_RCC_OscConfig+0x434>
 8003a7c:	4b42      	ldr	r3, [pc, #264]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	061b      	lsls	r3, r3, #24
 8003a8a:	493f      	ldr	r1, [pc, #252]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60cb      	str	r3, [r1, #12]
 8003a90:	e018      	b.n	8003ac4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a92:	4b3d      	ldr	r3, [pc, #244]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a3c      	ldr	r2, [pc, #240]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9e:	f7fd fcf7 	bl	8001490 <HAL_GetTick>
 8003aa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003aa6:	f7fd fcf3 	bl	8001490 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e212      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ab8:	4b33      	ldr	r3, [pc, #204]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d036      	beq.n	8003b3e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d019      	beq.n	8003b0c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad8:	4b2b      	ldr	r3, [pc, #172]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003adc:	4a2a      	ldr	r2, [pc, #168]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae4:	f7fd fcd4 	bl	8001490 <HAL_GetTick>
 8003ae8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aec:	f7fd fcd0 	bl	8001490 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e1ef      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003afe:	4b22      	ldr	r3, [pc, #136]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x45c>
 8003b0a:	e018      	b.n	8003b3e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b0c:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b10:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b18:	f7fd fcba 	bl	8001490 <HAL_GetTick>
 8003b1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b20:	f7fd fcb6 	bl	8001490 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e1d5      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b32:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d039      	beq.n	8003bbe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d01c      	beq.n	8003b8c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b52:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a0c      	ldr	r2, [pc, #48]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b5e:	f7fd fc97 	bl	8001490 <HAL_GetTick>
 8003b62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003b66:	f7fd fc93 	bl	8001490 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e1b2      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <HAL_RCC_OscConfig+0x4f8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0f0      	beq.n	8003b66 <HAL_RCC_OscConfig+0x4d6>
 8003b84:	e01b      	b.n	8003bbe <HAL_RCC_OscConfig+0x52e>
 8003b86:	bf00      	nop
 8003b88:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b8c:	4b9b      	ldr	r3, [pc, #620]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a9a      	ldr	r2, [pc, #616]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003b92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b98:	f7fd fc7a 	bl	8001490 <HAL_GetTick>
 8003b9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ba0:	f7fd fc76 	bl	8001490 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e195      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bb2:	4b92      	ldr	r3, [pc, #584]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 8081 	beq.w	8003cce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bcc:	4b8c      	ldr	r3, [pc, #560]	; (8003e00 <HAL_RCC_OscConfig+0x770>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a8b      	ldr	r2, [pc, #556]	; (8003e00 <HAL_RCC_OscConfig+0x770>)
 8003bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bd8:	f7fd fc5a 	bl	8001490 <HAL_GetTick>
 8003bdc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003be0:	f7fd fc56 	bl	8001490 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	; 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e175      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf2:	4b83      	ldr	r3, [pc, #524]	; (8003e00 <HAL_RCC_OscConfig+0x770>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f0      	beq.n	8003be0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d106      	bne.n	8003c14 <HAL_RCC_OscConfig+0x584>
 8003c06:	4b7d      	ldr	r3, [pc, #500]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	4a7c      	ldr	r2, [pc, #496]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6713      	str	r3, [r2, #112]	; 0x70
 8003c12:	e02d      	b.n	8003c70 <HAL_RCC_OscConfig+0x5e0>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10c      	bne.n	8003c36 <HAL_RCC_OscConfig+0x5a6>
 8003c1c:	4b77      	ldr	r3, [pc, #476]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	4a76      	ldr	r2, [pc, #472]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	6713      	str	r3, [r2, #112]	; 0x70
 8003c28:	4b74      	ldr	r3, [pc, #464]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2c:	4a73      	ldr	r2, [pc, #460]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003c2e:	f023 0304 	bic.w	r3, r3, #4
 8003c32:	6713      	str	r3, [r2, #112]	; 0x70
 8003c34:	e01c      	b.n	8003c70 <HAL_RCC_OscConfig+0x5e0>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b05      	cmp	r3, #5
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0x5c8>
 8003c3e:	4b6f      	ldr	r3, [pc, #444]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	4a6e      	ldr	r2, [pc, #440]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003c44:	f043 0304 	orr.w	r3, r3, #4
 8003c48:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4a:	4b6c      	ldr	r3, [pc, #432]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	4a6b      	ldr	r2, [pc, #428]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	6713      	str	r3, [r2, #112]	; 0x70
 8003c56:	e00b      	b.n	8003c70 <HAL_RCC_OscConfig+0x5e0>
 8003c58:	4b68      	ldr	r3, [pc, #416]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a67      	ldr	r2, [pc, #412]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003c5e:	f023 0301 	bic.w	r3, r3, #1
 8003c62:	6713      	str	r3, [r2, #112]	; 0x70
 8003c64:	4b65      	ldr	r3, [pc, #404]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c68:	4a64      	ldr	r2, [pc, #400]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003c6a:	f023 0304 	bic.w	r3, r3, #4
 8003c6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d015      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7fd fc0a 	bl	8001490 <HAL_GetTick>
 8003c7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c80:	f7fd fc06 	bl	8001490 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e123      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c96:	4b59      	ldr	r3, [pc, #356]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0ee      	beq.n	8003c80 <HAL_RCC_OscConfig+0x5f0>
 8003ca2:	e014      	b.n	8003cce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fd fbf4 	bl	8001490 <HAL_GetTick>
 8003ca8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cac:	f7fd fbf0 	bl	8001490 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e10d      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cc2:	4b4e      	ldr	r3, [pc, #312]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1ee      	bne.n	8003cac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 8102 	beq.w	8003edc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003cd8:	4b48      	ldr	r3, [pc, #288]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ce0:	2b18      	cmp	r3, #24
 8003ce2:	f000 80bd 	beq.w	8003e60 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	f040 809e 	bne.w	8003e2c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf0:	4b42      	ldr	r3, [pc, #264]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a41      	ldr	r2, [pc, #260]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfc:	f7fd fbc8 	bl	8001490 <HAL_GetTick>
 8003d00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d04:	f7fd fbc4 	bl	8001490 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0e3      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d16:	4b39      	ldr	r3, [pc, #228]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d22:	4b36      	ldr	r3, [pc, #216]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d26:	4b37      	ldr	r3, [pc, #220]	; (8003e04 <HAL_RCC_OscConfig+0x774>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d32:	0112      	lsls	r2, r2, #4
 8003d34:	430a      	orrs	r2, r1
 8003d36:	4931      	ldr	r1, [pc, #196]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	628b      	str	r3, [r1, #40]	; 0x28
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	3b01      	subs	r3, #1
 8003d42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	025b      	lsls	r3, r3, #9
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	3b01      	subs	r3, #1
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	3b01      	subs	r3, #1
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d6c:	4923      	ldr	r1, [pc, #140]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003d72:	4b22      	ldr	r3, [pc, #136]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d7e:	4b1f      	ldr	r3, [pc, #124]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d82:	4b21      	ldr	r3, [pc, #132]	; (8003e08 <HAL_RCC_OscConfig+0x778>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d8a:	00d2      	lsls	r2, r2, #3
 8003d8c:	491b      	ldr	r1, [pc, #108]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d92:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	f023 020c 	bic.w	r2, r3, #12
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4917      	ldr	r1, [pc, #92]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003da4:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	f023 0202 	bic.w	r2, r3, #2
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db0:	4912      	ldr	r1, [pc, #72]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003db6:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	4a10      	ldr	r2, [pc, #64]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	4a0a      	ldr	r2, [pc, #40]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003dda:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a04      	ldr	r2, [pc, #16]	; (8003dfc <HAL_RCC_OscConfig+0x76c>)
 8003dec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fd fb4d 	bl	8001490 <HAL_GetTick>
 8003df6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003df8:	e011      	b.n	8003e1e <HAL_RCC_OscConfig+0x78e>
 8003dfa:	bf00      	nop
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	58024800 	.word	0x58024800
 8003e04:	fffffc0c 	.word	0xfffffc0c
 8003e08:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fd fb40 	bl	8001490 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e05f      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e1e:	4b32      	ldr	r3, [pc, #200]	; (8003ee8 <HAL_RCC_OscConfig+0x858>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x77c>
 8003e2a:	e057      	b.n	8003edc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <HAL_RCC_OscConfig+0x858>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a2d      	ldr	r2, [pc, #180]	; (8003ee8 <HAL_RCC_OscConfig+0x858>)
 8003e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fd fb2a 	bl	8001490 <HAL_GetTick>
 8003e3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e40:	f7fd fb26 	bl	8001490 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e045      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e52:	4b25      	ldr	r3, [pc, #148]	; (8003ee8 <HAL_RCC_OscConfig+0x858>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1f0      	bne.n	8003e40 <HAL_RCC_OscConfig+0x7b0>
 8003e5e:	e03d      	b.n	8003edc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e60:	4b21      	ldr	r3, [pc, #132]	; (8003ee8 <HAL_RCC_OscConfig+0x858>)
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e66:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <HAL_RCC_OscConfig+0x858>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d031      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f003 0203 	and.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d12a      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d122      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d11a      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	0a5b      	lsrs	r3, r3, #9
 8003ea6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d111      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	0c1b      	lsrs	r3, r3, #16
 8003eb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d108      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	0e1b      	lsrs	r3, r3, #24
 8003eca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3730      	adds	r7, #48	; 0x30
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	58024400 	.word	0x58024400

08003eec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e19c      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f00:	4b8a      	ldr	r3, [pc, #552]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d910      	bls.n	8003f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0e:	4b87      	ldr	r3, [pc, #540]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 020f 	bic.w	r2, r3, #15
 8003f16:	4985      	ldr	r1, [pc, #532]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1e:	4b83      	ldr	r3, [pc, #524]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e184      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d010      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	4b7b      	ldr	r3, [pc, #492]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d908      	bls.n	8003f5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f4c:	4b78      	ldr	r3, [pc, #480]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	4975      	ldr	r1, [pc, #468]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d010      	beq.n	8003f8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	4b70      	ldr	r3, [pc, #448]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d908      	bls.n	8003f8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f7a:	4b6d      	ldr	r3, [pc, #436]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	496a      	ldr	r1, [pc, #424]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d010      	beq.n	8003fba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699a      	ldr	r2, [r3, #24]
 8003f9c:	4b64      	ldr	r3, [pc, #400]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d908      	bls.n	8003fba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fa8:	4b61      	ldr	r3, [pc, #388]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	495e      	ldr	r1, [pc, #376]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d010      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69da      	ldr	r2, [r3, #28]
 8003fca:	4b59      	ldr	r3, [pc, #356]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d908      	bls.n	8003fe8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003fd6:	4b56      	ldr	r3, [pc, #344]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	4953      	ldr	r1, [pc, #332]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d010      	beq.n	8004016 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	4b4d      	ldr	r3, [pc, #308]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	429a      	cmp	r2, r3
 8004002:	d908      	bls.n	8004016 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004004:	4b4a      	ldr	r3, [pc, #296]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	f023 020f 	bic.w	r2, r3, #15
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4947      	ldr	r1, [pc, #284]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8004012:	4313      	orrs	r3, r2
 8004014:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d055      	beq.n	80040ce <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004022:	4b43      	ldr	r3, [pc, #268]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	4940      	ldr	r1, [pc, #256]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8004030:	4313      	orrs	r3, r2
 8004032:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b02      	cmp	r3, #2
 800403a:	d107      	bne.n	800404c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800403c:	4b3c      	ldr	r3, [pc, #240]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d121      	bne.n	800408c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0f6      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d107      	bne.n	8004064 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004054:	4b36      	ldr	r3, [pc, #216]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d115      	bne.n	800408c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0ea      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d107      	bne.n	800407c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800406c:	4b30      	ldr	r3, [pc, #192]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d109      	bne.n	800408c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0de      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800407c:	4b2c      	ldr	r3, [pc, #176]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0d6      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800408c:	4b28      	ldr	r3, [pc, #160]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f023 0207 	bic.w	r2, r3, #7
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4925      	ldr	r1, [pc, #148]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 800409a:	4313      	orrs	r3, r2
 800409c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409e:	f7fd f9f7 	bl	8001490 <HAL_GetTick>
 80040a2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a4:	e00a      	b.n	80040bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a6:	f7fd f9f3 	bl	8001490 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e0be      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040bc:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d1eb      	bne.n	80040a6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d010      	beq.n	80040fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	4b14      	ldr	r3, [pc, #80]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d208      	bcs.n	80040fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ea:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f023 020f 	bic.w	r2, r3, #15
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	490e      	ldr	r1, [pc, #56]	; (8004130 <HAL_RCC_ClockConfig+0x244>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d214      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 020f 	bic.w	r2, r3, #15
 8004112:	4906      	ldr	r1, [pc, #24]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b04      	ldr	r3, [pc, #16]	; (800412c <HAL_RCC_ClockConfig+0x240>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d005      	beq.n	8004134 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e086      	b.n	800423a <HAL_RCC_ClockConfig+0x34e>
 800412c:	52002000 	.word	0x52002000
 8004130:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d010      	beq.n	8004162 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	4b3f      	ldr	r3, [pc, #252]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800414c:	429a      	cmp	r2, r3
 800414e:	d208      	bcs.n	8004162 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004150:	4b3c      	ldr	r3, [pc, #240]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	4939      	ldr	r1, [pc, #228]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 800415e:	4313      	orrs	r3, r2
 8004160:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d010      	beq.n	8004190 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	4b34      	ldr	r3, [pc, #208]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800417a:	429a      	cmp	r2, r3
 800417c:	d208      	bcs.n	8004190 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800417e:	4b31      	ldr	r3, [pc, #196]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	492e      	ldr	r1, [pc, #184]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 800418c:	4313      	orrs	r3, r2
 800418e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	2b00      	cmp	r3, #0
 800419a:	d010      	beq.n	80041be <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	4b28      	ldr	r3, [pc, #160]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d208      	bcs.n	80041be <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041ac:	4b25      	ldr	r3, [pc, #148]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	4922      	ldr	r1, [pc, #136]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d010      	beq.n	80041ec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d208      	bcs.n	80041ec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80041da:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	4917      	ldr	r1, [pc, #92]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041ec:	f000 f834 	bl	8004258 <HAL_RCC_GetSysClockFreq>
 80041f0:	4602      	mov	r2, r0
 80041f2:	4b14      	ldr	r3, [pc, #80]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	0a1b      	lsrs	r3, r3, #8
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	4912      	ldr	r1, [pc, #72]	; (8004248 <HAL_RCC_ClockConfig+0x35c>)
 80041fe:	5ccb      	ldrb	r3, [r1, r3]
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
 8004208:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800420a:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_RCC_ClockConfig+0x358>)
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	4a0d      	ldr	r2, [pc, #52]	; (8004248 <HAL_RCC_ClockConfig+0x35c>)
 8004214:	5cd3      	ldrb	r3, [r2, r3]
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
 8004220:	4a0a      	ldr	r2, [pc, #40]	; (800424c <HAL_RCC_ClockConfig+0x360>)
 8004222:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004224:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <HAL_RCC_ClockConfig+0x364>)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800422a:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <HAL_RCC_ClockConfig+0x368>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7fd f8e4 	bl	80013fc <HAL_InitTick>
 8004234:	4603      	mov	r3, r0
 8004236:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	58024400 	.word	0x58024400
 8004248:	08017d54 	.word	0x08017d54
 800424c:	24000004 	.word	0x24000004
 8004250:	24000000 	.word	0x24000000
 8004254:	24000008 	.word	0x24000008

08004258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004258:	b480      	push	{r7}
 800425a:	b089      	sub	sp, #36	; 0x24
 800425c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800425e:	4bb3      	ldr	r3, [pc, #716]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004266:	2b18      	cmp	r3, #24
 8004268:	f200 8155 	bhi.w	8004516 <HAL_RCC_GetSysClockFreq+0x2be>
 800426c:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <HAL_RCC_GetSysClockFreq+0x1c>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	080042d9 	.word	0x080042d9
 8004278:	08004517 	.word	0x08004517
 800427c:	08004517 	.word	0x08004517
 8004280:	08004517 	.word	0x08004517
 8004284:	08004517 	.word	0x08004517
 8004288:	08004517 	.word	0x08004517
 800428c:	08004517 	.word	0x08004517
 8004290:	08004517 	.word	0x08004517
 8004294:	080042ff 	.word	0x080042ff
 8004298:	08004517 	.word	0x08004517
 800429c:	08004517 	.word	0x08004517
 80042a0:	08004517 	.word	0x08004517
 80042a4:	08004517 	.word	0x08004517
 80042a8:	08004517 	.word	0x08004517
 80042ac:	08004517 	.word	0x08004517
 80042b0:	08004517 	.word	0x08004517
 80042b4:	08004305 	.word	0x08004305
 80042b8:	08004517 	.word	0x08004517
 80042bc:	08004517 	.word	0x08004517
 80042c0:	08004517 	.word	0x08004517
 80042c4:	08004517 	.word	0x08004517
 80042c8:	08004517 	.word	0x08004517
 80042cc:	08004517 	.word	0x08004517
 80042d0:	08004517 	.word	0x08004517
 80042d4:	0800430b 	.word	0x0800430b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042d8:	4b94      	ldr	r3, [pc, #592]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d009      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042e4:	4b91      	ldr	r3, [pc, #580]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	08db      	lsrs	r3, r3, #3
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	4a90      	ldr	r2, [pc, #576]	; (8004530 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042f0:	fa22 f303 	lsr.w	r3, r2, r3
 80042f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80042f6:	e111      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042f8:	4b8d      	ldr	r3, [pc, #564]	; (8004530 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042fa:	61bb      	str	r3, [r7, #24]
    break;
 80042fc:	e10e      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80042fe:	4b8d      	ldr	r3, [pc, #564]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004300:	61bb      	str	r3, [r7, #24]
    break;
 8004302:	e10b      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004304:	4b8c      	ldr	r3, [pc, #560]	; (8004538 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004306:	61bb      	str	r3, [r7, #24]
    break;
 8004308:	e108      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800430a:	4b88      	ldr	r3, [pc, #544]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004314:	4b85      	ldr	r3, [pc, #532]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800431e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004320:	4b82      	ldr	r3, [pc, #520]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800432a:	4b80      	ldr	r3, [pc, #512]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800432c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432e:	08db      	lsrs	r3, r3, #3
 8004330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	fb02 f303 	mul.w	r3, r2, r3
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004342:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 80e1 	beq.w	8004510 <HAL_RCC_GetSysClockFreq+0x2b8>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b02      	cmp	r3, #2
 8004352:	f000 8083 	beq.w	800445c <HAL_RCC_GetSysClockFreq+0x204>
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b02      	cmp	r3, #2
 800435a:	f200 80a1 	bhi.w	80044a0 <HAL_RCC_GetSysClockFreq+0x248>
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0x114>
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d056      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0x1c0>
 800436a:	e099      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800436c:	4b6f      	ldr	r3, [pc, #444]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d02d      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004378:	4b6c      	ldr	r3, [pc, #432]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	08db      	lsrs	r3, r3, #3
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	4a6b      	ldr	r2, [pc, #428]	; (8004530 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
 8004388:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	ee07 3a90 	vmov	s15, r3
 8004390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a2:	4b62      	ldr	r3, [pc, #392]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800453c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80043d2:	e087      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004540 <HAL_RCC_GetSysClockFreq+0x2e8>
 80043e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e6:	4b51      	ldr	r3, [pc, #324]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80043fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800453c <HAL_RCC_GetSysClockFreq+0x2e4>
 80043fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800440a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004416:	e065      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	ee07 3a90 	vmov	s15, r3
 800441e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004422:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004544 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442a:	4b40      	ldr	r3, [pc, #256]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443a:	ed97 6a02 	vldr	s12, [r7, #8]
 800443e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800453c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800444e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800445a:	e043      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	ee07 3a90 	vmov	s15, r3
 8004462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004466:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004548 <HAL_RCC_GetSysClockFreq+0x2f0>
 800446a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446e:	4b2f      	ldr	r3, [pc, #188]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004482:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800453c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800449e:	e021      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004544 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044b2:	4b1e      	ldr	r3, [pc, #120]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80044c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800453c <HAL_RCC_GetSysClockFreq+0x2e4>
 80044ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80044e4:	4b11      	ldr	r3, [pc, #68]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	0a5b      	lsrs	r3, r3, #9
 80044ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044ee:	3301      	adds	r3, #1
 80044f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	ee07 3a90 	vmov	s15, r3
 80044f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004508:	ee17 3a90 	vmov	r3, s15
 800450c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800450e:	e005      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	61bb      	str	r3, [r7, #24]
    break;
 8004514:	e002      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004516:	4b07      	ldr	r3, [pc, #28]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004518:	61bb      	str	r3, [r7, #24]
    break;
 800451a:	bf00      	nop
  }

  return sysclockfreq;
 800451c:	69bb      	ldr	r3, [r7, #24]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3724      	adds	r7, #36	; 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	58024400 	.word	0x58024400
 8004530:	03d09000 	.word	0x03d09000
 8004534:	003d0900 	.word	0x003d0900
 8004538:	007a1200 	.word	0x007a1200
 800453c:	46000000 	.word	0x46000000
 8004540:	4c742400 	.word	0x4c742400
 8004544:	4a742400 	.word	0x4a742400
 8004548:	4af42400 	.word	0x4af42400

0800454c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004552:	f7ff fe81 	bl	8004258 <HAL_RCC_GetSysClockFreq>
 8004556:	4602      	mov	r2, r0
 8004558:	4b10      	ldr	r3, [pc, #64]	; (800459c <HAL_RCC_GetHCLKFreq+0x50>)
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	0a1b      	lsrs	r3, r3, #8
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	490f      	ldr	r1, [pc, #60]	; (80045a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004564:	5ccb      	ldrb	r3, [r1, r3]
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	fa22 f303 	lsr.w	r3, r2, r3
 800456e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004570:	4b0a      	ldr	r3, [pc, #40]	; (800459c <HAL_RCC_GetHCLKFreq+0x50>)
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800457a:	5cd3      	ldrb	r3, [r2, r3]
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	fa22 f303 	lsr.w	r3, r2, r3
 8004586:	4a07      	ldr	r2, [pc, #28]	; (80045a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004588:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800458a:	4a07      	ldr	r2, [pc, #28]	; (80045a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004590:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004592:	681b      	ldr	r3, [r3, #0]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	58024400 	.word	0x58024400
 80045a0:	08017d54 	.word	0x08017d54
 80045a4:	24000004 	.word	0x24000004
 80045a8:	24000000 	.word	0x24000000

080045ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80045b0:	f7ff ffcc 	bl	800454c <HAL_RCC_GetHCLKFreq>
 80045b4:	4602      	mov	r2, r0
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	091b      	lsrs	r3, r3, #4
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	4904      	ldr	r1, [pc, #16]	; (80045d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045c2:	5ccb      	ldrb	r3, [r1, r3]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	58024400 	.word	0x58024400
 80045d4:	08017d54 	.word	0x08017d54

080045d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80045dc:	f7ff ffb6 	bl	800454c <HAL_RCC_GetHCLKFreq>
 80045e0:	4602      	mov	r2, r0
 80045e2:	4b06      	ldr	r3, [pc, #24]	; (80045fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	4904      	ldr	r1, [pc, #16]	; (8004600 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045ee:	5ccb      	ldrb	r3, [r1, r3]
 80045f0:	f003 031f 	and.w	r3, r3, #31
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	58024400 	.word	0x58024400
 8004600:	08017d54 	.word	0x08017d54

08004604 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800460c:	2300      	movs	r3, #0
 800460e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004610:	2300      	movs	r3, #0
 8004612:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d03f      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004624:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004628:	d02a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800462a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800462e:	d824      	bhi.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004630:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004634:	d018      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004636:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800463a:	d81e      	bhi.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004640:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004644:	d007      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004646:	e018      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004648:	4ba3      	ldr	r3, [pc, #652]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	4aa2      	ldr	r2, [pc, #648]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800464e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004652:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004654:	e015      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3304      	adds	r3, #4
 800465a:	2102      	movs	r1, #2
 800465c:	4618      	mov	r0, r3
 800465e:	f001 f9d5 	bl	8005a0c <RCCEx_PLL2_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004666:	e00c      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3324      	adds	r3, #36	; 0x24
 800466c:	2102      	movs	r1, #2
 800466e:	4618      	mov	r0, r3
 8004670:	f001 fa7e 	bl	8005b70 <RCCEx_PLL3_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004678:	e003      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
      break;
 800467e:	e000      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004682:	7dfb      	ldrb	r3, [r7, #23]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d109      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004688:	4b93      	ldr	r3, [pc, #588]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004694:	4990      	ldr	r1, [pc, #576]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004696:	4313      	orrs	r3, r2
 8004698:	650b      	str	r3, [r1, #80]	; 0x50
 800469a:	e001      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469c:	7dfb      	ldrb	r3, [r7, #23]
 800469e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d03d      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d826      	bhi.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80046b4:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80046b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ba:	bf00      	nop
 80046bc:	080046d1 	.word	0x080046d1
 80046c0:	080046df 	.word	0x080046df
 80046c4:	080046f1 	.word	0x080046f1
 80046c8:	08004709 	.word	0x08004709
 80046cc:	08004709 	.word	0x08004709
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046d0:	4b81      	ldr	r3, [pc, #516]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	4a80      	ldr	r2, [pc, #512]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80046d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046dc:	e015      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2100      	movs	r1, #0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 f991 	bl	8005a0c <RCCEx_PLL2_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80046ee:	e00c      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3324      	adds	r3, #36	; 0x24
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f001 fa3a 	bl	8005b70 <RCCEx_PLL3_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004700:	e003      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	75fb      	strb	r3, [r7, #23]
      break;
 8004706:	e000      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800470a:	7dfb      	ldrb	r3, [r7, #23]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004710:	4b71      	ldr	r3, [pc, #452]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004714:	f023 0207 	bic.w	r2, r3, #7
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	496e      	ldr	r1, [pc, #440]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800471e:	4313      	orrs	r3, r2
 8004720:	650b      	str	r3, [r1, #80]	; 0x50
 8004722:	e001      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004730:	2b00      	cmp	r3, #0
 8004732:	d042      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473c:	d02b      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800473e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004742:	d825      	bhi.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004744:	2bc0      	cmp	r3, #192	; 0xc0
 8004746:	d028      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004748:	2bc0      	cmp	r3, #192	; 0xc0
 800474a:	d821      	bhi.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800474c:	2b80      	cmp	r3, #128	; 0x80
 800474e:	d016      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004750:	2b80      	cmp	r3, #128	; 0x80
 8004752:	d81d      	bhi.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d007      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800475c:	e018      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800475e:	4b5e      	ldr	r3, [pc, #376]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	4a5d      	ldr	r2, [pc, #372]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004768:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800476a:	e017      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3304      	adds	r3, #4
 8004770:	2100      	movs	r1, #0
 8004772:	4618      	mov	r0, r3
 8004774:	f001 f94a 	bl	8005a0c <RCCEx_PLL2_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800477c:	e00e      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	3324      	adds	r3, #36	; 0x24
 8004782:	2100      	movs	r1, #0
 8004784:	4618      	mov	r0, r3
 8004786:	f001 f9f3 	bl	8005b70 <RCCEx_PLL3_Config>
 800478a:	4603      	mov	r3, r0
 800478c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800478e:	e005      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	75fb      	strb	r3, [r7, #23]
      break;
 8004794:	e002      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004796:	bf00      	nop
 8004798:	e000      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800479a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800479c:	7dfb      	ldrb	r3, [r7, #23]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80047a2:	4b4d      	ldr	r3, [pc, #308]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ae:	494a      	ldr	r1, [pc, #296]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	650b      	str	r3, [r1, #80]	; 0x50
 80047b4:	e001      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b6:	7dfb      	ldrb	r3, [r7, #23]
 80047b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d049      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047d0:	d030      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80047d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047d6:	d82a      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80047d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80047dc:	d02c      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80047de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80047e2:	d824      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80047e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e8:	d018      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80047ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ee:	d81e      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80047f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047f8:	d007      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80047fa:	e018      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047fc:	4b36      	ldr	r3, [pc, #216]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	4a35      	ldr	r2, [pc, #212]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004806:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004808:	e017      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3304      	adds	r3, #4
 800480e:	2100      	movs	r1, #0
 8004810:	4618      	mov	r0, r3
 8004812:	f001 f8fb 	bl	8005a0c <RCCEx_PLL2_Config>
 8004816:	4603      	mov	r3, r0
 8004818:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800481a:	e00e      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3324      	adds	r3, #36	; 0x24
 8004820:	2100      	movs	r1, #0
 8004822:	4618      	mov	r0, r3
 8004824:	f001 f9a4 	bl	8005b70 <RCCEx_PLL3_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800482c:	e005      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	75fb      	strb	r3, [r7, #23]
      break;
 8004832:	e002      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004834:	bf00      	nop
 8004836:	e000      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004840:	4b25      	ldr	r3, [pc, #148]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004844:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800484e:	4922      	ldr	r1, [pc, #136]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004850:	4313      	orrs	r3, r2
 8004852:	658b      	str	r3, [r1, #88]	; 0x58
 8004854:	e001      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004862:	2b00      	cmp	r3, #0
 8004864:	d04b      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800486c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004870:	d030      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004872:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004876:	d82a      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004878:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800487c:	d02e      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800487e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004882:	d824      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004888:	d018      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800488a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800488e:	d81e      	bhi.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004898:	d007      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800489a:	e018      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800489c:	4b0e      	ldr	r3, [pc, #56]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	4a0d      	ldr	r2, [pc, #52]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048a8:	e019      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3304      	adds	r3, #4
 80048ae:	2100      	movs	r1, #0
 80048b0:	4618      	mov	r0, r3
 80048b2:	f001 f8ab 	bl	8005a0c <RCCEx_PLL2_Config>
 80048b6:	4603      	mov	r3, r0
 80048b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80048ba:	e010      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3324      	adds	r3, #36	; 0x24
 80048c0:	2100      	movs	r1, #0
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 f954 	bl	8005b70 <RCCEx_PLL3_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80048cc:	e007      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	75fb      	strb	r3, [r7, #23]
      break;
 80048d2:	e004      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80048d4:	bf00      	nop
 80048d6:	e002      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80048d8:	58024400 	.word	0x58024400
      break;
 80048dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048de:	7dfb      	ldrb	r3, [r7, #23]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80048e4:	4b99      	ldr	r3, [pc, #612]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048f2:	4996      	ldr	r1, [pc, #600]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	658b      	str	r3, [r1, #88]	; 0x58
 80048f8:	e001      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
 80048fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d032      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490e:	2b30      	cmp	r3, #48	; 0x30
 8004910:	d01c      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004912:	2b30      	cmp	r3, #48	; 0x30
 8004914:	d817      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004916:	2b20      	cmp	r3, #32
 8004918:	d00c      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800491a:	2b20      	cmp	r3, #32
 800491c:	d813      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d016      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004922:	2b10      	cmp	r3, #16
 8004924:	d10f      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004926:	4b89      	ldr	r3, [pc, #548]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	4a88      	ldr	r2, [pc, #544]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800492c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004930:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004932:	e00e      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3304      	adds	r3, #4
 8004938:	2102      	movs	r1, #2
 800493a:	4618      	mov	r0, r3
 800493c:	f001 f866 	bl	8005a0c <RCCEx_PLL2_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004944:	e005      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	75fb      	strb	r3, [r7, #23]
      break;
 800494a:	e002      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800494c:	bf00      	nop
 800494e:	e000      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004952:	7dfb      	ldrb	r3, [r7, #23]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d109      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004958:	4b7c      	ldr	r3, [pc, #496]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800495a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004964:	4979      	ldr	r1, [pc, #484]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004966:	4313      	orrs	r3, r2
 8004968:	64cb      	str	r3, [r1, #76]	; 0x4c
 800496a:	e001      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496c:	7dfb      	ldrb	r3, [r7, #23]
 800496e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d047      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004984:	d030      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004986:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800498a:	d82a      	bhi.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800498c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004990:	d02c      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004992:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004996:	d824      	bhi.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499c:	d018      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800499e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a2:	d81e      	bhi.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80049a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ac:	d007      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80049ae:	e018      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b0:	4b66      	ldr	r3, [pc, #408]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	4a65      	ldr	r2, [pc, #404]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049bc:	e017      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3304      	adds	r3, #4
 80049c2:	2100      	movs	r1, #0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f001 f821 	bl	8005a0c <RCCEx_PLL2_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049ce:	e00e      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3324      	adds	r3, #36	; 0x24
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f001 f8ca 	bl	8005b70 <RCCEx_PLL3_Config>
 80049dc:	4603      	mov	r3, r0
 80049de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80049e0:	e005      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	75fb      	strb	r3, [r7, #23]
      break;
 80049e6:	e002      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80049e8:	bf00      	nop
 80049ea:	e000      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80049ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d109      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80049f4:	4b55      	ldr	r3, [pc, #340]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80049f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a00:	4952      	ldr	r1, [pc, #328]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	650b      	str	r3, [r1, #80]	; 0x50
 8004a06:	e001      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
 8004a0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d049      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a20:	d02e      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a26:	d828      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004a28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a2c:	d02a      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004a2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a32:	d822      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004a34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a38:	d026      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004a3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a3e:	d81c      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a44:	d010      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004a46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a4a:	d816      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01d      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a54:	d111      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 ffd5 	bl	8005a0c <RCCEx_PLL2_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a66:	e012      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3324      	adds	r3, #36	; 0x24
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 f87e 	bl	8005b70 <RCCEx_PLL3_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004a78:	e009      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a7e:	e006      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a80:	bf00      	nop
 8004a82:	e004      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a84:	bf00      	nop
 8004a86:	e002      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a88:	bf00      	nop
 8004a8a:	e000      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d109      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004a94:	4b2d      	ldr	r3, [pc, #180]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a98:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa0:	492a      	ldr	r1, [pc, #168]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	650b      	str	r3, [r1, #80]	; 0x50
 8004aa6:	e001      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
 8004aaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d04d      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ac2:	d02e      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ac8:	d828      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ace:	d02a      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad4:	d822      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004ad6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ada:	d026      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004adc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ae0:	d81c      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae6:	d010      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aec:	d816      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d01d      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004af2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004af6:	d111      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	2101      	movs	r1, #1
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 ff84 	bl	8005a0c <RCCEx_PLL2_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b08:	e012      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3324      	adds	r3, #36	; 0x24
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4618      	mov	r0, r3
 8004b12:	f001 f82d 	bl	8005b70 <RCCEx_PLL3_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004b1a:	e009      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b20:	e006      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b22:	bf00      	nop
 8004b24:	e004      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10c      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004b36:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b44:	4901      	ldr	r1, [pc, #4]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	658b      	str	r3, [r1, #88]	; 0x58
 8004b4a:	e003      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004b4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	7dfb      	ldrb	r3, [r7, #23]
 8004b52:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d02f      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b68:	d00e      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6e:	d814      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d015      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004b74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b78:	d10f      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b7a:	4baf      	ldr	r3, [pc, #700]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	4aae      	ldr	r2, [pc, #696]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b86:	e00c      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 ff3c 	bl	8005a0c <RCCEx_PLL2_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004b98:	e003      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ba8:	4ba3      	ldr	r3, [pc, #652]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bb4:	49a0      	ldr	r1, [pc, #640]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	650b      	str	r3, [r1, #80]	; 0x50
 8004bba:	e001      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbc:	7dfb      	ldrb	r3, [r7, #23]
 8004bbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d032      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d81b      	bhi.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004bd4:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004c13 	.word	0x08004c13
 8004be0:	08004bed 	.word	0x08004bed
 8004be4:	08004bfb 	.word	0x08004bfb
 8004be8:	08004c13 	.word	0x08004c13
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bec:	4b92      	ldr	r3, [pc, #584]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	4a91      	ldr	r2, [pc, #580]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004bf8:	e00c      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	2102      	movs	r1, #2
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 ff03 	bl	8005a0c <RCCEx_PLL2_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004c0a:	e003      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c10:	e000      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004c1a:	4b87      	ldr	r3, [pc, #540]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	f023 0203 	bic.w	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	4984      	ldr	r1, [pc, #528]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c2c:	e001      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2e:	7dfb      	ldrb	r3, [r7, #23]
 8004c30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 8086 	beq.w	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c40:	4b7e      	ldr	r3, [pc, #504]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a7d      	ldr	r2, [pc, #500]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c4c:	f7fc fc20 	bl	8001490 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c52:	e009      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c54:	f7fc fc1c 	bl	8001490 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d902      	bls.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	75fb      	strb	r3, [r7, #23]
        break;
 8004c66:	e005      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c68:	4b74      	ldr	r3, [pc, #464]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0ef      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d166      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004c7a:	4b6f      	ldr	r3, [pc, #444]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c84:	4053      	eors	r3, r2
 8004c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d013      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c8e:	4b6a      	ldr	r3, [pc, #424]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c96:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c98:	4b67      	ldr	r3, [pc, #412]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9c:	4a66      	ldr	r2, [pc, #408]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca4:	4b64      	ldr	r3, [pc, #400]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca8:	4a63      	ldr	r2, [pc, #396]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004cb0:	4a61      	ldr	r2, [pc, #388]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc0:	d115      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc2:	f7fc fbe5 	bl	8001490 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cc8:	e00b      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cca:	f7fc fbe1 	bl	8001490 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d902      	bls.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	75fb      	strb	r3, [r7, #23]
            break;
 8004ce0:	e005      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ce2:	4b55      	ldr	r3, [pc, #340]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0ed      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d126      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d02:	d10d      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004d04:	4b4c      	ldr	r3, [pc, #304]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d12:	0919      	lsrs	r1, r3, #4
 8004d14:	4b4a      	ldr	r3, [pc, #296]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004d16:	400b      	ands	r3, r1
 8004d18:	4947      	ldr	r1, [pc, #284]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	610b      	str	r3, [r1, #16]
 8004d1e:	e005      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004d20:	4b45      	ldr	r3, [pc, #276]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	4a44      	ldr	r2, [pc, #272]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d2a:	6113      	str	r3, [r2, #16]
 8004d2c:	4b42      	ldr	r3, [pc, #264]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3a:	493f      	ldr	r1, [pc, #252]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	670b      	str	r3, [r1, #112]	; 0x70
 8004d40:	e004      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d42:	7dfb      	ldrb	r3, [r7, #23]
 8004d44:	75bb      	strb	r3, [r7, #22]
 8004d46:	e001      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8085 	beq.w	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d5e:	2b28      	cmp	r3, #40	; 0x28
 8004d60:	d866      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004d62:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004e45 	.word	0x08004e45
 8004d6c:	08004e31 	.word	0x08004e31
 8004d70:	08004e31 	.word	0x08004e31
 8004d74:	08004e31 	.word	0x08004e31
 8004d78:	08004e31 	.word	0x08004e31
 8004d7c:	08004e31 	.word	0x08004e31
 8004d80:	08004e31 	.word	0x08004e31
 8004d84:	08004e31 	.word	0x08004e31
 8004d88:	08004e0d 	.word	0x08004e0d
 8004d8c:	08004e31 	.word	0x08004e31
 8004d90:	08004e31 	.word	0x08004e31
 8004d94:	08004e31 	.word	0x08004e31
 8004d98:	08004e31 	.word	0x08004e31
 8004d9c:	08004e31 	.word	0x08004e31
 8004da0:	08004e31 	.word	0x08004e31
 8004da4:	08004e31 	.word	0x08004e31
 8004da8:	08004e1f 	.word	0x08004e1f
 8004dac:	08004e31 	.word	0x08004e31
 8004db0:	08004e31 	.word	0x08004e31
 8004db4:	08004e31 	.word	0x08004e31
 8004db8:	08004e31 	.word	0x08004e31
 8004dbc:	08004e31 	.word	0x08004e31
 8004dc0:	08004e31 	.word	0x08004e31
 8004dc4:	08004e31 	.word	0x08004e31
 8004dc8:	08004e45 	.word	0x08004e45
 8004dcc:	08004e31 	.word	0x08004e31
 8004dd0:	08004e31 	.word	0x08004e31
 8004dd4:	08004e31 	.word	0x08004e31
 8004dd8:	08004e31 	.word	0x08004e31
 8004ddc:	08004e31 	.word	0x08004e31
 8004de0:	08004e31 	.word	0x08004e31
 8004de4:	08004e31 	.word	0x08004e31
 8004de8:	08004e45 	.word	0x08004e45
 8004dec:	08004e31 	.word	0x08004e31
 8004df0:	08004e31 	.word	0x08004e31
 8004df4:	08004e31 	.word	0x08004e31
 8004df8:	08004e31 	.word	0x08004e31
 8004dfc:	08004e31 	.word	0x08004e31
 8004e00:	08004e31 	.word	0x08004e31
 8004e04:	08004e31 	.word	0x08004e31
 8004e08:	08004e45 	.word	0x08004e45
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	2101      	movs	r1, #1
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fdfa 	bl	8005a0c <RCCEx_PLL2_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e1c:	e013      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3324      	adds	r3, #36	; 0x24
 8004e22:	2101      	movs	r1, #1
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fea3 	bl	8005b70 <RCCEx_PLL3_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004e2e:	e00a      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	75fb      	strb	r3, [r7, #23]
      break;
 8004e34:	e007      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004e36:	bf00      	nop
 8004e38:	58024400 	.word	0x58024400
 8004e3c:	58024800 	.word	0x58024800
 8004e40:	00ffffcf 	.word	0x00ffffcf
      break;
 8004e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d109      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004e4c:	4b96      	ldr	r3, [pc, #600]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e50:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e58:	4993      	ldr	r1, [pc, #588]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	654b      	str	r3, [r1, #84]	; 0x54
 8004e5e:	e001      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e60:	7dfb      	ldrb	r3, [r7, #23]
 8004e62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d038      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e74:	2b05      	cmp	r3, #5
 8004e76:	d821      	bhi.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004e78:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7e:	bf00      	nop
 8004e80:	08004ec3 	.word	0x08004ec3
 8004e84:	08004e99 	.word	0x08004e99
 8004e88:	08004eab 	.word	0x08004eab
 8004e8c:	08004ec3 	.word	0x08004ec3
 8004e90:	08004ec3 	.word	0x08004ec3
 8004e94:	08004ec3 	.word	0x08004ec3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 fdb4 	bl	8005a0c <RCCEx_PLL2_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ea8:	e00c      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3324      	adds	r3, #36	; 0x24
 8004eae:	2101      	movs	r1, #1
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fe5d 	bl	8005b70 <RCCEx_PLL3_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004eba:	e003      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec0:	e000      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004eca:	4b77      	ldr	r3, [pc, #476]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	f023 0207 	bic.w	r2, r3, #7
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed6:	4974      	ldr	r1, [pc, #464]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	654b      	str	r3, [r1, #84]	; 0x54
 8004edc:	e001      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ede:	7dfb      	ldrb	r3, [r7, #23]
 8004ee0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d03a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef4:	2b05      	cmp	r3, #5
 8004ef6:	d821      	bhi.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004ef8:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f43 	.word	0x08004f43
 8004f04:	08004f19 	.word	0x08004f19
 8004f08:	08004f2b 	.word	0x08004f2b
 8004f0c:	08004f43 	.word	0x08004f43
 8004f10:	08004f43 	.word	0x08004f43
 8004f14:	08004f43 	.word	0x08004f43
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fd74 	bl	8005a0c <RCCEx_PLL2_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f28:	e00c      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3324      	adds	r3, #36	; 0x24
 8004f2e:	2101      	movs	r1, #1
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fe1d 	bl	8005b70 <RCCEx_PLL3_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004f3a:	e003      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f40:	e000      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004f42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f44:	7dfb      	ldrb	r3, [r7, #23]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10a      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f4a:	4b57      	ldr	r3, [pc, #348]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4e:	f023 0207 	bic.w	r2, r3, #7
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f58:	4953      	ldr	r1, [pc, #332]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	658b      	str	r3, [r1, #88]	; 0x58
 8004f5e:	e001      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d04b      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f7a:	d02e      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f80:	d828      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f86:	d02a      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8c:	d822      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f92:	d026      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004f94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004f98:	d81c      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004f9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f9e:	d010      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa4:	d816      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01d      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fae:	d111      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fd28 	bl	8005a0c <RCCEx_PLL2_Config>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fc0:	e012      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3324      	adds	r3, #36	; 0x24
 8004fc6:	2102      	movs	r1, #2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 fdd1 	bl	8005b70 <RCCEx_PLL3_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004fd2:	e009      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd8:	e006      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e004      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e002      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004fe2:	bf00      	nop
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fee:	4b2e      	ldr	r3, [pc, #184]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ffc:	492a      	ldr	r1, [pc, #168]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	654b      	str	r3, [r1, #84]	; 0x54
 8005002:	e001      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005004:	7dfb      	ldrb	r3, [r7, #23]
 8005006:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d04d      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800501a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800501e:	d02e      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005020:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005024:	d828      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502a:	d02a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800502c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005030:	d822      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005032:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005036:	d026      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005038:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800503c:	d81c      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800503e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005042:	d010      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005048:	d816      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800504a:	2b00      	cmp	r3, #0
 800504c:	d01d      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800504e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005052:	d111      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fcd6 	bl	8005a0c <RCCEx_PLL2_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005064:	e012      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	3324      	adds	r3, #36	; 0x24
 800506a:	2102      	movs	r1, #2
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fd7f 	bl	8005b70 <RCCEx_PLL3_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005076:	e009      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	75fb      	strb	r3, [r7, #23]
      break;
 800507c:	e006      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800507e:	bf00      	nop
 8005080:	e004      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005082:	bf00      	nop
 8005084:	e002      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005086:	bf00      	nop
 8005088:	e000      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800508a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800508c:	7dfb      	ldrb	r3, [r7, #23]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10c      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005092:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a0:	4901      	ldr	r1, [pc, #4]	; (80050a8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	658b      	str	r3, [r1, #88]	; 0x58
 80050a6:	e003      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80050a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
 80050ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d04b      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050c6:	d02e      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80050c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80050cc:	d828      	bhi.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80050ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d2:	d02a      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80050d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d8:	d822      	bhi.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80050da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050de:	d026      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80050e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80050e4:	d81c      	bhi.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80050e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ea:	d010      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80050ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050f0:	d816      	bhi.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d01d      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80050f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fa:	d111      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3304      	adds	r3, #4
 8005100:	2100      	movs	r1, #0
 8005102:	4618      	mov	r0, r3
 8005104:	f000 fc82 	bl	8005a0c <RCCEx_PLL2_Config>
 8005108:	4603      	mov	r3, r0
 800510a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800510c:	e012      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3324      	adds	r3, #36	; 0x24
 8005112:	2102      	movs	r1, #2
 8005114:	4618      	mov	r0, r3
 8005116:	f000 fd2b 	bl	8005b70 <RCCEx_PLL3_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800511e:	e009      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	75fb      	strb	r3, [r7, #23]
      break;
 8005124:	e006      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005126:	bf00      	nop
 8005128:	e004      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800512a:	bf00      	nop
 800512c:	e002      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800512e:	bf00      	nop
 8005130:	e000      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005134:	7dfb      	ldrb	r3, [r7, #23]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800513a:	4b9d      	ldr	r3, [pc, #628]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005148:	4999      	ldr	r1, [pc, #612]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800514a:	4313      	orrs	r3, r2
 800514c:	658b      	str	r3, [r1, #88]	; 0x58
 800514e:	e001      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01a      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516a:	d10a      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3324      	adds	r3, #36	; 0x24
 8005170:	2102      	movs	r1, #2
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fcfc 	bl	8005b70 <RCCEx_PLL3_Config>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005182:	4b8b      	ldr	r3, [pc, #556]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005186:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005190:	4987      	ldr	r1, [pc, #540]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005192:	4313      	orrs	r3, r2
 8005194:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0310 	and.w	r3, r3, #16
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d01a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ac:	d10a      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3324      	adds	r3, #36	; 0x24
 80051b2:	2102      	movs	r1, #2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fcdb 	bl	8005b70 <RCCEx_PLL3_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051c4:	4b7a      	ldr	r3, [pc, #488]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d2:	4977      	ldr	r1, [pc, #476]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d034      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80051ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ee:	d01d      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80051f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f4:	d817      	bhi.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80051fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fe:	d009      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005200:	e011      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3304      	adds	r3, #4
 8005206:	2100      	movs	r1, #0
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fbff 	bl	8005a0c <RCCEx_PLL2_Config>
 800520e:	4603      	mov	r3, r0
 8005210:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005212:	e00c      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3324      	adds	r3, #36	; 0x24
 8005218:	2102      	movs	r1, #2
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fca8 	bl	8005b70 <RCCEx_PLL3_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005224:	e003      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	75fb      	strb	r3, [r7, #23]
      break;
 800522a:	e000      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800522c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800522e:	7dfb      	ldrb	r3, [r7, #23]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10a      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005234:	4b5e      	ldr	r3, [pc, #376]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005242:	495b      	ldr	r1, [pc, #364]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005244:	4313      	orrs	r3, r2
 8005246:	658b      	str	r3, [r1, #88]	; 0x58
 8005248:	e001      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524a:	7dfb      	ldrb	r3, [r7, #23]
 800524c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d033      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005260:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005264:	d01c      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005266:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800526a:	d816      	bhi.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800526c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005270:	d003      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005276:	d007      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005278:	e00f      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800527a:	4b4d      	ldr	r3, [pc, #308]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	4a4c      	ldr	r2, [pc, #304]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005286:	e00c      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3324      	adds	r3, #36	; 0x24
 800528c:	2101      	movs	r1, #1
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fc6e 	bl	8005b70 <RCCEx_PLL3_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005298:	e003      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	75fb      	strb	r3, [r7, #23]
      break;
 800529e:	e000      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80052a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052a8:	4b41      	ldr	r3, [pc, #260]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052b6:	493e      	ldr	r1, [pc, #248]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	654b      	str	r3, [r1, #84]	; 0x54
 80052bc:	e001      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052be:	7dfb      	ldrb	r3, [r7, #23]
 80052c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d029      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80052d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052da:	d007      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80052dc:	e00f      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052de:	4b34      	ldr	r3, [pc, #208]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	4a33      	ldr	r2, [pc, #204]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80052e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052ea:	e00b      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	2102      	movs	r1, #2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fb8a 	bl	8005a0c <RCCEx_PLL2_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80052fc:	e002      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	75fb      	strb	r3, [r7, #23]
      break;
 8005302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005304:	7dfb      	ldrb	r3, [r7, #23]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800530a:	4b29      	ldr	r3, [pc, #164]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800530c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005316:	4926      	ldr	r1, [pc, #152]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005318:	4313      	orrs	r3, r2
 800531a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800531c:	e001      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531e:	7dfb      	ldrb	r3, [r7, #23]
 8005320:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3324      	adds	r3, #36	; 0x24
 8005332:	2102      	movs	r1, #2
 8005334:	4618      	mov	r0, r3
 8005336:	f000 fc1b 	bl	8005b70 <RCCEx_PLL3_Config>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d033      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005358:	d017      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800535a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800535e:	d811      	bhi.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005364:	d013      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800536a:	d80b      	bhi.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d010      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005374:	d106      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005376:	4b0e      	ldr	r3, [pc, #56]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	4a0d      	ldr	r2, [pc, #52]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800537c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005380:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005382:	e007      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	75fb      	strb	r3, [r7, #23]
      break;
 8005388:	e004      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800538a:	bf00      	nop
 800538c:	e002      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800538e:	bf00      	nop
 8005390:	e000      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005392:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005394:	7dfb      	ldrb	r3, [r7, #23]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10c      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800539a:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a6:	4902      	ldr	r1, [pc, #8]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	654b      	str	r3, [r1, #84]	; 0x54
 80053ac:	e004      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80053ae:	bf00      	nop
 80053b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
 80053b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d008      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053c4:	4b31      	ldr	r3, [pc, #196]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d0:	492e      	ldr	r1, [pc, #184]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80053e2:	4b2a      	ldr	r3, [pc, #168]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80053f0:	4926      	ldr	r1, [pc, #152]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d008      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005402:	4b22      	ldr	r3, [pc, #136]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005406:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800540e:	491f      	ldr	r1, [pc, #124]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005410:	4313      	orrs	r3, r2
 8005412:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00d      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005420:	4b1a      	ldr	r3, [pc, #104]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	4a19      	ldr	r2, [pc, #100]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005426:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800542a:	6113      	str	r3, [r2, #16]
 800542c:	4b17      	ldr	r3, [pc, #92]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005436:	4915      	ldr	r1, [pc, #84]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005438:	4313      	orrs	r3, r2
 800543a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	da08      	bge.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005444:	4b11      	ldr	r3, [pc, #68]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005448:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005450:	490e      	ldr	r1, [pc, #56]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005452:	4313      	orrs	r3, r2
 8005454:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005462:	4b0a      	ldr	r3, [pc, #40]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005466:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	4906      	ldr	r1, [pc, #24]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005472:	4313      	orrs	r3, r2
 8005474:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005476:	7dbb      	ldrb	r3, [r7, #22]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	e000      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
}
 8005482:	4618      	mov	r0, r3
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	58024400 	.word	0x58024400

08005490 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005494:	f7ff f85a 	bl	800454c <HAL_RCC_GetHCLKFreq>
 8005498:	4602      	mov	r2, r0
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	4904      	ldr	r1, [pc, #16]	; (80054b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80054a6:	5ccb      	ldrb	r3, [r1, r3]
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	58024400 	.word	0x58024400
 80054b8:	08017d54 	.word	0x08017d54

080054bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80054bc:	b480      	push	{r7}
 80054be:	b089      	sub	sp, #36	; 0x24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054c4:	4ba1      	ldr	r3, [pc, #644]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80054ce:	4b9f      	ldr	r3, [pc, #636]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d2:	0b1b      	lsrs	r3, r3, #12
 80054d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80054da:	4b9c      	ldr	r3, [pc, #624]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054de:	091b      	lsrs	r3, r3, #4
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80054e6:	4b99      	ldr	r3, [pc, #612]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ea:	08db      	lsrs	r3, r3, #3
 80054ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 8111 	beq.w	800572c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b02      	cmp	r3, #2
 800550e:	f000 8083 	beq.w	8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b02      	cmp	r3, #2
 8005516:	f200 80a1 	bhi.w	800565c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d056      	beq.n	80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005526:	e099      	b.n	800565c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005528:	4b88      	ldr	r3, [pc, #544]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d02d      	beq.n	8005590 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005534:	4b85      	ldr	r3, [pc, #532]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	08db      	lsrs	r3, r3, #3
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	4a84      	ldr	r2, [pc, #528]	; (8005750 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
 8005544:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	ee07 3a90 	vmov	s15, r3
 800554c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800555e:	4b7b      	ldr	r3, [pc, #492]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800556e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005572:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800557a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800557e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800558e:	e087      	b.n	80056a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005758 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800559e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055a2:	4b6a      	ldr	r3, [pc, #424]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80055b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055d2:	e065      	b.n	80056a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800575c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055e6:	4b59      	ldr	r3, [pc, #356]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80055fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800560a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800560e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005612:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005616:	e043      	b.n	80056a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005622:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005760 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562a:	4b48      	ldr	r3, [pc, #288]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563a:	ed97 6a03 	vldr	s12, [r7, #12]
 800563e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800564e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800565a:	e021      	b.n	80056a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005666:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800575c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800566a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800566e:	4b37      	ldr	r3, [pc, #220]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005676:	ee07 3a90 	vmov	s15, r3
 800567a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800567e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005682:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005754 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800568e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800569e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80056a0:	4b2a      	ldr	r3, [pc, #168]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	0a5b      	lsrs	r3, r3, #9
 80056a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80056be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056c6:	ee17 2a90 	vmov	r2, s15
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80056ce:	4b1f      	ldr	r3, [pc, #124]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d2:	0c1b      	lsrs	r3, r3, #16
 80056d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d8:	ee07 3a90 	vmov	s15, r3
 80056dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80056ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056f4:	ee17 2a90 	vmov	r2, s15
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80056fc:	4b13      	ldr	r3, [pc, #76]	; (800574c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	0e1b      	lsrs	r3, r3, #24
 8005702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800570e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005712:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005716:	edd7 6a07 	vldr	s13, [r7, #28]
 800571a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800571e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005722:	ee17 2a90 	vmov	r2, s15
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800572a:	e008      	b.n	800573e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	609a      	str	r2, [r3, #8]
}
 800573e:	bf00      	nop
 8005740:	3724      	adds	r7, #36	; 0x24
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	58024400 	.word	0x58024400
 8005750:	03d09000 	.word	0x03d09000
 8005754:	46000000 	.word	0x46000000
 8005758:	4c742400 	.word	0x4c742400
 800575c:	4a742400 	.word	0x4a742400
 8005760:	4af42400 	.word	0x4af42400

08005764 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005764:	b480      	push	{r7}
 8005766:	b089      	sub	sp, #36	; 0x24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800576c:	4ba1      	ldr	r3, [pc, #644]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	f003 0303 	and.w	r3, r3, #3
 8005774:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005776:	4b9f      	ldr	r3, [pc, #636]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	0d1b      	lsrs	r3, r3, #20
 800577c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005780:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005782:	4b9c      	ldr	r3, [pc, #624]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	0a1b      	lsrs	r3, r3, #8
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800578e:	4b99      	ldr	r3, [pc, #612]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005792:	08db      	lsrs	r3, r3, #3
 8005794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8111 	beq.w	80059d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	f000 8083 	beq.w	80058c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	f200 80a1 	bhi.w	8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d056      	beq.n	800587c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80057ce:	e099      	b.n	8005904 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057d0:	4b88      	ldr	r3, [pc, #544]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d02d      	beq.n	8005838 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057dc:	4b85      	ldr	r3, [pc, #532]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	08db      	lsrs	r3, r3, #3
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	4a84      	ldr	r2, [pc, #528]	; (80059f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	ee07 3a90 	vmov	s15, r3
 80057f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005806:	4b7b      	ldr	r3, [pc, #492]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580e:	ee07 3a90 	vmov	s15, r3
 8005812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005816:	ed97 6a03 	vldr	s12, [r7, #12]
 800581a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800581e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800582a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800582e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005832:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005836:	e087      	b.n	8005948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005a00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584a:	4b6a      	ldr	r3, [pc, #424]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585a:	ed97 6a03 	vldr	s12, [r7, #12]
 800585e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800586e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800587a:	e065      	b.n	8005948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005886:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800588a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588e:	4b59      	ldr	r3, [pc, #356]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589e:	ed97 6a03 	vldr	s12, [r7, #12]
 80058a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058be:	e043      	b.n	8005948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80058ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d2:	4b48      	ldr	r3, [pc, #288]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058da:	ee07 3a90 	vmov	s15, r3
 80058de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005902:	e021      	b.n	8005948 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005a04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005916:	4b37      	ldr	r3, [pc, #220]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005926:	ed97 6a03 	vldr	s12, [r7, #12]
 800592a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800592e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800593a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005946:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005948:	4b2a      	ldr	r3, [pc, #168]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	0a5b      	lsrs	r3, r3, #9
 800594e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005952:	ee07 3a90 	vmov	s15, r3
 8005956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800595e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005962:	edd7 6a07 	vldr	s13, [r7, #28]
 8005966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800596a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800596e:	ee17 2a90 	vmov	r2, s15
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005976:	4b1f      	ldr	r3, [pc, #124]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	0c1b      	lsrs	r3, r3, #16
 800597c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005980:	ee07 3a90 	vmov	s15, r3
 8005984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800598c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005990:	edd7 6a07 	vldr	s13, [r7, #28]
 8005994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800599c:	ee17 2a90 	vmov	r2, s15
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80059a4:	4b13      	ldr	r3, [pc, #76]	; (80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	0e1b      	lsrs	r3, r3, #24
 80059aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80059ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059be:	edd7 6a07 	vldr	s13, [r7, #28]
 80059c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ca:	ee17 2a90 	vmov	r2, s15
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80059d2:	e008      	b.n	80059e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	609a      	str	r2, [r3, #8]
}
 80059e6:	bf00      	nop
 80059e8:	3724      	adds	r7, #36	; 0x24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	58024400 	.word	0x58024400
 80059f8:	03d09000 	.word	0x03d09000
 80059fc:	46000000 	.word	0x46000000
 8005a00:	4c742400 	.word	0x4c742400
 8005a04:	4a742400 	.word	0x4a742400
 8005a08:	4af42400 	.word	0x4af42400

08005a0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a1a:	4b53      	ldr	r3, [pc, #332]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d101      	bne.n	8005a2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e099      	b.n	8005b5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a2a:	4b4f      	ldr	r3, [pc, #316]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a4e      	ldr	r2, [pc, #312]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005a30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a36:	f7fb fd2b 	bl	8001490 <HAL_GetTick>
 8005a3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a3c:	e008      	b.n	8005a50 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a3e:	f7fb fd27 	bl	8001490 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e086      	b.n	8005b5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a50:	4b45      	ldr	r3, [pc, #276]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f0      	bne.n	8005a3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a5c:	4b42      	ldr	r3, [pc, #264]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	031b      	lsls	r3, r3, #12
 8005a6a:	493f      	ldr	r1, [pc, #252]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	628b      	str	r3, [r1, #40]	; 0x28
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	025b      	lsls	r3, r3, #9
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	041b      	lsls	r3, r3, #16
 8005a8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	061b      	lsls	r3, r3, #24
 8005a9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005aa0:	4931      	ldr	r1, [pc, #196]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005aa6:	4b30      	ldr	r3, [pc, #192]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	492d      	ldr	r1, [pc, #180]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ab8:	4b2b      	ldr	r3, [pc, #172]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	f023 0220 	bic.w	r2, r3, #32
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	4928      	ldr	r1, [pc, #160]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005aca:	4b27      	ldr	r3, [pc, #156]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ace:	4a26      	ldr	r2, [pc, #152]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005ad0:	f023 0310 	bic.w	r3, r3, #16
 8005ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005ad6:	4b24      	ldr	r3, [pc, #144]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005ad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ada:	4b24      	ldr	r3, [pc, #144]	; (8005b6c <RCCEx_PLL2_Config+0x160>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	69d2      	ldr	r2, [r2, #28]
 8005ae2:	00d2      	lsls	r2, r2, #3
 8005ae4:	4920      	ldr	r1, [pc, #128]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005aea:	4b1f      	ldr	r3, [pc, #124]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aee:	4a1e      	ldr	r2, [pc, #120]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005af0:	f043 0310 	orr.w	r3, r3, #16
 8005af4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005afc:	4b1a      	ldr	r3, [pc, #104]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	4a19      	ldr	r2, [pc, #100]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b08:	e00f      	b.n	8005b2a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d106      	bne.n	8005b1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005b10:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	4a14      	ldr	r2, [pc, #80]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b1c:	e005      	b.n	8005b2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b1e:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	4a11      	ldr	r2, [pc, #68]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b2a:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a0e      	ldr	r2, [pc, #56]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b36:	f7fb fcab 	bl	8001490 <HAL_GetTick>
 8005b3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b3c:	e008      	b.n	8005b50 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005b3e:	f7fb fca7 	bl	8001490 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e006      	b.n	8005b5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b50:	4b05      	ldr	r3, [pc, #20]	; (8005b68 <RCCEx_PLL2_Config+0x15c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0f0      	beq.n	8005b3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	58024400 	.word	0x58024400
 8005b6c:	ffff0007 	.word	0xffff0007

08005b70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b7e:	4b53      	ldr	r3, [pc, #332]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d101      	bne.n	8005b8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e099      	b.n	8005cc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b8e:	4b4f      	ldr	r3, [pc, #316]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a4e      	ldr	r2, [pc, #312]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b9a:	f7fb fc79 	bl	8001490 <HAL_GetTick>
 8005b9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005ba0:	e008      	b.n	8005bb4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ba2:	f7fb fc75 	bl	8001490 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e086      	b.n	8005cc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005bb4:	4b45      	ldr	r3, [pc, #276]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1f0      	bne.n	8005ba2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005bc0:	4b42      	ldr	r3, [pc, #264]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	051b      	lsls	r3, r3, #20
 8005bce:	493f      	ldr	r1, [pc, #252]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	628b      	str	r3, [r1, #40]	; 0x28
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	025b      	lsls	r3, r3, #9
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	041b      	lsls	r3, r3, #16
 8005bf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	061b      	lsls	r3, r3, #24
 8005c00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c04:	4931      	ldr	r1, [pc, #196]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005c0a:	4b30      	ldr	r3, [pc, #192]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	492d      	ldr	r1, [pc, #180]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c1c:	4b2b      	ldr	r3, [pc, #172]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	4928      	ldr	r1, [pc, #160]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c2e:	4b27      	ldr	r3, [pc, #156]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	4a26      	ldr	r2, [pc, #152]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c3a:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c3e:	4b24      	ldr	r3, [pc, #144]	; (8005cd0 <RCCEx_PLL3_Config+0x160>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	69d2      	ldr	r2, [r2, #28]
 8005c46:	00d2      	lsls	r2, r2, #3
 8005c48:	4920      	ldr	r1, [pc, #128]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c4e:	4b1f      	ldr	r3, [pc, #124]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c52:	4a1e      	ldr	r2, [pc, #120]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c60:	4b1a      	ldr	r3, [pc, #104]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c64:	4a19      	ldr	r2, [pc, #100]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c6c:	e00f      	b.n	8005c8e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d106      	bne.n	8005c82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c74:	4b15      	ldr	r3, [pc, #84]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	4a14      	ldr	r2, [pc, #80]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c80:	e005      	b.n	8005c8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c82:	4b12      	ldr	r3, [pc, #72]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	4a11      	ldr	r2, [pc, #68]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a0e      	ldr	r2, [pc, #56]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c9a:	f7fb fbf9 	bl	8001490 <HAL_GetTick>
 8005c9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ca0:	e008      	b.n	8005cb4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ca2:	f7fb fbf5 	bl	8001490 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e006      	b.n	8005cc2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005cb4:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <RCCEx_PLL3_Config+0x15c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0f0      	beq.n	8005ca2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	58024400 	.word	0x58024400
 8005cd0:	ffff0007 	.word	0xffff0007

08005cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e042      	b.n	8005d6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d106      	bne.n	8005cfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7fa ffd7 	bl	8000cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2224      	movs	r2, #36	; 0x24
 8005d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0201 	bic.w	r2, r2, #1
 8005d14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f82c 	bl	8005d74 <UART_SetConfig>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e022      	b.n	8005d6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fd88 	bl	8006844 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689a      	ldr	r2, [r3, #8]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fe0f 	bl	8006988 <UART_CheckIdleState>
 8005d6a:	4603      	mov	r3, r0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d78:	b092      	sub	sp, #72	; 0x48
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4bbe      	ldr	r3, [pc, #760]	; (800609c <UART_SetConfig+0x328>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005dac:	430b      	orrs	r3, r1
 8005dae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4ab3      	ldr	r2, [pc, #716]	; (80060a0 <UART_SetConfig+0x32c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d004      	beq.n	8005de0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	4baf      	ldr	r3, [pc, #700]	; (80060a4 <UART_SetConfig+0x330>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	6812      	ldr	r2, [r2, #0]
 8005dee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005df0:	430b      	orrs	r3, r1
 8005df2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	f023 010f 	bic.w	r1, r3, #15
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4aa6      	ldr	r2, [pc, #664]	; (80060a8 <UART_SetConfig+0x334>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d177      	bne.n	8005f04 <UART_SetConfig+0x190>
 8005e14:	4ba5      	ldr	r3, [pc, #660]	; (80060ac <UART_SetConfig+0x338>)
 8005e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e1c:	2b28      	cmp	r3, #40	; 0x28
 8005e1e:	d86d      	bhi.n	8005efc <UART_SetConfig+0x188>
 8005e20:	a201      	add	r2, pc, #4	; (adr r2, 8005e28 <UART_SetConfig+0xb4>)
 8005e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e26:	bf00      	nop
 8005e28:	08005ecd 	.word	0x08005ecd
 8005e2c:	08005efd 	.word	0x08005efd
 8005e30:	08005efd 	.word	0x08005efd
 8005e34:	08005efd 	.word	0x08005efd
 8005e38:	08005efd 	.word	0x08005efd
 8005e3c:	08005efd 	.word	0x08005efd
 8005e40:	08005efd 	.word	0x08005efd
 8005e44:	08005efd 	.word	0x08005efd
 8005e48:	08005ed5 	.word	0x08005ed5
 8005e4c:	08005efd 	.word	0x08005efd
 8005e50:	08005efd 	.word	0x08005efd
 8005e54:	08005efd 	.word	0x08005efd
 8005e58:	08005efd 	.word	0x08005efd
 8005e5c:	08005efd 	.word	0x08005efd
 8005e60:	08005efd 	.word	0x08005efd
 8005e64:	08005efd 	.word	0x08005efd
 8005e68:	08005edd 	.word	0x08005edd
 8005e6c:	08005efd 	.word	0x08005efd
 8005e70:	08005efd 	.word	0x08005efd
 8005e74:	08005efd 	.word	0x08005efd
 8005e78:	08005efd 	.word	0x08005efd
 8005e7c:	08005efd 	.word	0x08005efd
 8005e80:	08005efd 	.word	0x08005efd
 8005e84:	08005efd 	.word	0x08005efd
 8005e88:	08005ee5 	.word	0x08005ee5
 8005e8c:	08005efd 	.word	0x08005efd
 8005e90:	08005efd 	.word	0x08005efd
 8005e94:	08005efd 	.word	0x08005efd
 8005e98:	08005efd 	.word	0x08005efd
 8005e9c:	08005efd 	.word	0x08005efd
 8005ea0:	08005efd 	.word	0x08005efd
 8005ea4:	08005efd 	.word	0x08005efd
 8005ea8:	08005eed 	.word	0x08005eed
 8005eac:	08005efd 	.word	0x08005efd
 8005eb0:	08005efd 	.word	0x08005efd
 8005eb4:	08005efd 	.word	0x08005efd
 8005eb8:	08005efd 	.word	0x08005efd
 8005ebc:	08005efd 	.word	0x08005efd
 8005ec0:	08005efd 	.word	0x08005efd
 8005ec4:	08005efd 	.word	0x08005efd
 8005ec8:	08005ef5 	.word	0x08005ef5
 8005ecc:	2301      	movs	r3, #1
 8005ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ed2:	e222      	b.n	800631a <UART_SetConfig+0x5a6>
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eda:	e21e      	b.n	800631a <UART_SetConfig+0x5a6>
 8005edc:	2308      	movs	r3, #8
 8005ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ee2:	e21a      	b.n	800631a <UART_SetConfig+0x5a6>
 8005ee4:	2310      	movs	r3, #16
 8005ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eea:	e216      	b.n	800631a <UART_SetConfig+0x5a6>
 8005eec:	2320      	movs	r3, #32
 8005eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef2:	e212      	b.n	800631a <UART_SetConfig+0x5a6>
 8005ef4:	2340      	movs	r3, #64	; 0x40
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005efa:	e20e      	b.n	800631a <UART_SetConfig+0x5a6>
 8005efc:	2380      	movs	r3, #128	; 0x80
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f02:	e20a      	b.n	800631a <UART_SetConfig+0x5a6>
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a69      	ldr	r2, [pc, #420]	; (80060b0 <UART_SetConfig+0x33c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d130      	bne.n	8005f70 <UART_SetConfig+0x1fc>
 8005f0e:	4b67      	ldr	r3, [pc, #412]	; (80060ac <UART_SetConfig+0x338>)
 8005f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	2b05      	cmp	r3, #5
 8005f18:	d826      	bhi.n	8005f68 <UART_SetConfig+0x1f4>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <UART_SetConfig+0x1ac>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f39 	.word	0x08005f39
 8005f24:	08005f41 	.word	0x08005f41
 8005f28:	08005f49 	.word	0x08005f49
 8005f2c:	08005f51 	.word	0x08005f51
 8005f30:	08005f59 	.word	0x08005f59
 8005f34:	08005f61 	.word	0x08005f61
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3e:	e1ec      	b.n	800631a <UART_SetConfig+0x5a6>
 8005f40:	2304      	movs	r3, #4
 8005f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f46:	e1e8      	b.n	800631a <UART_SetConfig+0x5a6>
 8005f48:	2308      	movs	r3, #8
 8005f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4e:	e1e4      	b.n	800631a <UART_SetConfig+0x5a6>
 8005f50:	2310      	movs	r3, #16
 8005f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f56:	e1e0      	b.n	800631a <UART_SetConfig+0x5a6>
 8005f58:	2320      	movs	r3, #32
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f5e:	e1dc      	b.n	800631a <UART_SetConfig+0x5a6>
 8005f60:	2340      	movs	r3, #64	; 0x40
 8005f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f66:	e1d8      	b.n	800631a <UART_SetConfig+0x5a6>
 8005f68:	2380      	movs	r3, #128	; 0x80
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f6e:	e1d4      	b.n	800631a <UART_SetConfig+0x5a6>
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a4f      	ldr	r2, [pc, #316]	; (80060b4 <UART_SetConfig+0x340>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d130      	bne.n	8005fdc <UART_SetConfig+0x268>
 8005f7a:	4b4c      	ldr	r3, [pc, #304]	; (80060ac <UART_SetConfig+0x338>)
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	2b05      	cmp	r3, #5
 8005f84:	d826      	bhi.n	8005fd4 <UART_SetConfig+0x260>
 8005f86:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <UART_SetConfig+0x218>)
 8005f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8c:	08005fa5 	.word	0x08005fa5
 8005f90:	08005fad 	.word	0x08005fad
 8005f94:	08005fb5 	.word	0x08005fb5
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08005fc5 	.word	0x08005fc5
 8005fa0:	08005fcd 	.word	0x08005fcd
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005faa:	e1b6      	b.n	800631a <UART_SetConfig+0x5a6>
 8005fac:	2304      	movs	r3, #4
 8005fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb2:	e1b2      	b.n	800631a <UART_SetConfig+0x5a6>
 8005fb4:	2308      	movs	r3, #8
 8005fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fba:	e1ae      	b.n	800631a <UART_SetConfig+0x5a6>
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fc2:	e1aa      	b.n	800631a <UART_SetConfig+0x5a6>
 8005fc4:	2320      	movs	r3, #32
 8005fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fca:	e1a6      	b.n	800631a <UART_SetConfig+0x5a6>
 8005fcc:	2340      	movs	r3, #64	; 0x40
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fd2:	e1a2      	b.n	800631a <UART_SetConfig+0x5a6>
 8005fd4:	2380      	movs	r3, #128	; 0x80
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fda:	e19e      	b.n	800631a <UART_SetConfig+0x5a6>
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a35      	ldr	r2, [pc, #212]	; (80060b8 <UART_SetConfig+0x344>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d130      	bne.n	8006048 <UART_SetConfig+0x2d4>
 8005fe6:	4b31      	ldr	r3, [pc, #196]	; (80060ac <UART_SetConfig+0x338>)
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	2b05      	cmp	r3, #5
 8005ff0:	d826      	bhi.n	8006040 <UART_SetConfig+0x2cc>
 8005ff2:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <UART_SetConfig+0x284>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	08006011 	.word	0x08006011
 8005ffc:	08006019 	.word	0x08006019
 8006000:	08006021 	.word	0x08006021
 8006004:	08006029 	.word	0x08006029
 8006008:	08006031 	.word	0x08006031
 800600c:	08006039 	.word	0x08006039
 8006010:	2300      	movs	r3, #0
 8006012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006016:	e180      	b.n	800631a <UART_SetConfig+0x5a6>
 8006018:	2304      	movs	r3, #4
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601e:	e17c      	b.n	800631a <UART_SetConfig+0x5a6>
 8006020:	2308      	movs	r3, #8
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006026:	e178      	b.n	800631a <UART_SetConfig+0x5a6>
 8006028:	2310      	movs	r3, #16
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602e:	e174      	b.n	800631a <UART_SetConfig+0x5a6>
 8006030:	2320      	movs	r3, #32
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006036:	e170      	b.n	800631a <UART_SetConfig+0x5a6>
 8006038:	2340      	movs	r3, #64	; 0x40
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603e:	e16c      	b.n	800631a <UART_SetConfig+0x5a6>
 8006040:	2380      	movs	r3, #128	; 0x80
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006046:	e168      	b.n	800631a <UART_SetConfig+0x5a6>
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1b      	ldr	r2, [pc, #108]	; (80060bc <UART_SetConfig+0x348>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d142      	bne.n	80060d8 <UART_SetConfig+0x364>
 8006052:	4b16      	ldr	r3, [pc, #88]	; (80060ac <UART_SetConfig+0x338>)
 8006054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	2b05      	cmp	r3, #5
 800605c:	d838      	bhi.n	80060d0 <UART_SetConfig+0x35c>
 800605e:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <UART_SetConfig+0x2f0>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	0800607d 	.word	0x0800607d
 8006068:	08006085 	.word	0x08006085
 800606c:	0800608d 	.word	0x0800608d
 8006070:	08006095 	.word	0x08006095
 8006074:	080060c1 	.word	0x080060c1
 8006078:	080060c9 	.word	0x080060c9
 800607c:	2300      	movs	r3, #0
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006082:	e14a      	b.n	800631a <UART_SetConfig+0x5a6>
 8006084:	2304      	movs	r3, #4
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608a:	e146      	b.n	800631a <UART_SetConfig+0x5a6>
 800608c:	2308      	movs	r3, #8
 800608e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006092:	e142      	b.n	800631a <UART_SetConfig+0x5a6>
 8006094:	2310      	movs	r3, #16
 8006096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609a:	e13e      	b.n	800631a <UART_SetConfig+0x5a6>
 800609c:	cfff69f3 	.word	0xcfff69f3
 80060a0:	58000c00 	.word	0x58000c00
 80060a4:	11fff4ff 	.word	0x11fff4ff
 80060a8:	40011000 	.word	0x40011000
 80060ac:	58024400 	.word	0x58024400
 80060b0:	40004400 	.word	0x40004400
 80060b4:	40004800 	.word	0x40004800
 80060b8:	40004c00 	.word	0x40004c00
 80060bc:	40005000 	.word	0x40005000
 80060c0:	2320      	movs	r3, #32
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c6:	e128      	b.n	800631a <UART_SetConfig+0x5a6>
 80060c8:	2340      	movs	r3, #64	; 0x40
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ce:	e124      	b.n	800631a <UART_SetConfig+0x5a6>
 80060d0:	2380      	movs	r3, #128	; 0x80
 80060d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060d6:	e120      	b.n	800631a <UART_SetConfig+0x5a6>
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4acb      	ldr	r2, [pc, #812]	; (800640c <UART_SetConfig+0x698>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d176      	bne.n	80061d0 <UART_SetConfig+0x45c>
 80060e2:	4bcb      	ldr	r3, [pc, #812]	; (8006410 <UART_SetConfig+0x69c>)
 80060e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060ea:	2b28      	cmp	r3, #40	; 0x28
 80060ec:	d86c      	bhi.n	80061c8 <UART_SetConfig+0x454>
 80060ee:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <UART_SetConfig+0x380>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006199 	.word	0x08006199
 80060f8:	080061c9 	.word	0x080061c9
 80060fc:	080061c9 	.word	0x080061c9
 8006100:	080061c9 	.word	0x080061c9
 8006104:	080061c9 	.word	0x080061c9
 8006108:	080061c9 	.word	0x080061c9
 800610c:	080061c9 	.word	0x080061c9
 8006110:	080061c9 	.word	0x080061c9
 8006114:	080061a1 	.word	0x080061a1
 8006118:	080061c9 	.word	0x080061c9
 800611c:	080061c9 	.word	0x080061c9
 8006120:	080061c9 	.word	0x080061c9
 8006124:	080061c9 	.word	0x080061c9
 8006128:	080061c9 	.word	0x080061c9
 800612c:	080061c9 	.word	0x080061c9
 8006130:	080061c9 	.word	0x080061c9
 8006134:	080061a9 	.word	0x080061a9
 8006138:	080061c9 	.word	0x080061c9
 800613c:	080061c9 	.word	0x080061c9
 8006140:	080061c9 	.word	0x080061c9
 8006144:	080061c9 	.word	0x080061c9
 8006148:	080061c9 	.word	0x080061c9
 800614c:	080061c9 	.word	0x080061c9
 8006150:	080061c9 	.word	0x080061c9
 8006154:	080061b1 	.word	0x080061b1
 8006158:	080061c9 	.word	0x080061c9
 800615c:	080061c9 	.word	0x080061c9
 8006160:	080061c9 	.word	0x080061c9
 8006164:	080061c9 	.word	0x080061c9
 8006168:	080061c9 	.word	0x080061c9
 800616c:	080061c9 	.word	0x080061c9
 8006170:	080061c9 	.word	0x080061c9
 8006174:	080061b9 	.word	0x080061b9
 8006178:	080061c9 	.word	0x080061c9
 800617c:	080061c9 	.word	0x080061c9
 8006180:	080061c9 	.word	0x080061c9
 8006184:	080061c9 	.word	0x080061c9
 8006188:	080061c9 	.word	0x080061c9
 800618c:	080061c9 	.word	0x080061c9
 8006190:	080061c9 	.word	0x080061c9
 8006194:	080061c1 	.word	0x080061c1
 8006198:	2301      	movs	r3, #1
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619e:	e0bc      	b.n	800631a <UART_SetConfig+0x5a6>
 80061a0:	2304      	movs	r3, #4
 80061a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061a6:	e0b8      	b.n	800631a <UART_SetConfig+0x5a6>
 80061a8:	2308      	movs	r3, #8
 80061aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ae:	e0b4      	b.n	800631a <UART_SetConfig+0x5a6>
 80061b0:	2310      	movs	r3, #16
 80061b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061b6:	e0b0      	b.n	800631a <UART_SetConfig+0x5a6>
 80061b8:	2320      	movs	r3, #32
 80061ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061be:	e0ac      	b.n	800631a <UART_SetConfig+0x5a6>
 80061c0:	2340      	movs	r3, #64	; 0x40
 80061c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061c6:	e0a8      	b.n	800631a <UART_SetConfig+0x5a6>
 80061c8:	2380      	movs	r3, #128	; 0x80
 80061ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ce:	e0a4      	b.n	800631a <UART_SetConfig+0x5a6>
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a8f      	ldr	r2, [pc, #572]	; (8006414 <UART_SetConfig+0x6a0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d130      	bne.n	800623c <UART_SetConfig+0x4c8>
 80061da:	4b8d      	ldr	r3, [pc, #564]	; (8006410 <UART_SetConfig+0x69c>)
 80061dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	2b05      	cmp	r3, #5
 80061e4:	d826      	bhi.n	8006234 <UART_SetConfig+0x4c0>
 80061e6:	a201      	add	r2, pc, #4	; (adr r2, 80061ec <UART_SetConfig+0x478>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	08006205 	.word	0x08006205
 80061f0:	0800620d 	.word	0x0800620d
 80061f4:	08006215 	.word	0x08006215
 80061f8:	0800621d 	.word	0x0800621d
 80061fc:	08006225 	.word	0x08006225
 8006200:	0800622d 	.word	0x0800622d
 8006204:	2300      	movs	r3, #0
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620a:	e086      	b.n	800631a <UART_SetConfig+0x5a6>
 800620c:	2304      	movs	r3, #4
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006212:	e082      	b.n	800631a <UART_SetConfig+0x5a6>
 8006214:	2308      	movs	r3, #8
 8006216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800621a:	e07e      	b.n	800631a <UART_SetConfig+0x5a6>
 800621c:	2310      	movs	r3, #16
 800621e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006222:	e07a      	b.n	800631a <UART_SetConfig+0x5a6>
 8006224:	2320      	movs	r3, #32
 8006226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622a:	e076      	b.n	800631a <UART_SetConfig+0x5a6>
 800622c:	2340      	movs	r3, #64	; 0x40
 800622e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006232:	e072      	b.n	800631a <UART_SetConfig+0x5a6>
 8006234:	2380      	movs	r3, #128	; 0x80
 8006236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800623a:	e06e      	b.n	800631a <UART_SetConfig+0x5a6>
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a75      	ldr	r2, [pc, #468]	; (8006418 <UART_SetConfig+0x6a4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d130      	bne.n	80062a8 <UART_SetConfig+0x534>
 8006246:	4b72      	ldr	r3, [pc, #456]	; (8006410 <UART_SetConfig+0x69c>)
 8006248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	2b05      	cmp	r3, #5
 8006250:	d826      	bhi.n	80062a0 <UART_SetConfig+0x52c>
 8006252:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <UART_SetConfig+0x4e4>)
 8006254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006258:	08006271 	.word	0x08006271
 800625c:	08006279 	.word	0x08006279
 8006260:	08006281 	.word	0x08006281
 8006264:	08006289 	.word	0x08006289
 8006268:	08006291 	.word	0x08006291
 800626c:	08006299 	.word	0x08006299
 8006270:	2300      	movs	r3, #0
 8006272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006276:	e050      	b.n	800631a <UART_SetConfig+0x5a6>
 8006278:	2304      	movs	r3, #4
 800627a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800627e:	e04c      	b.n	800631a <UART_SetConfig+0x5a6>
 8006280:	2308      	movs	r3, #8
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006286:	e048      	b.n	800631a <UART_SetConfig+0x5a6>
 8006288:	2310      	movs	r3, #16
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628e:	e044      	b.n	800631a <UART_SetConfig+0x5a6>
 8006290:	2320      	movs	r3, #32
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006296:	e040      	b.n	800631a <UART_SetConfig+0x5a6>
 8006298:	2340      	movs	r3, #64	; 0x40
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629e:	e03c      	b.n	800631a <UART_SetConfig+0x5a6>
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a6:	e038      	b.n	800631a <UART_SetConfig+0x5a6>
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a5b      	ldr	r2, [pc, #364]	; (800641c <UART_SetConfig+0x6a8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d130      	bne.n	8006314 <UART_SetConfig+0x5a0>
 80062b2:	4b57      	ldr	r3, [pc, #348]	; (8006410 <UART_SetConfig+0x69c>)
 80062b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	2b05      	cmp	r3, #5
 80062bc:	d826      	bhi.n	800630c <UART_SetConfig+0x598>
 80062be:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <UART_SetConfig+0x550>)
 80062c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c4:	080062dd 	.word	0x080062dd
 80062c8:	080062e5 	.word	0x080062e5
 80062cc:	080062ed 	.word	0x080062ed
 80062d0:	080062f5 	.word	0x080062f5
 80062d4:	080062fd 	.word	0x080062fd
 80062d8:	08006305 	.word	0x08006305
 80062dc:	2302      	movs	r3, #2
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e2:	e01a      	b.n	800631a <UART_SetConfig+0x5a6>
 80062e4:	2304      	movs	r3, #4
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ea:	e016      	b.n	800631a <UART_SetConfig+0x5a6>
 80062ec:	2308      	movs	r3, #8
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f2:	e012      	b.n	800631a <UART_SetConfig+0x5a6>
 80062f4:	2310      	movs	r3, #16
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fa:	e00e      	b.n	800631a <UART_SetConfig+0x5a6>
 80062fc:	2320      	movs	r3, #32
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006302:	e00a      	b.n	800631a <UART_SetConfig+0x5a6>
 8006304:	2340      	movs	r3, #64	; 0x40
 8006306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800630a:	e006      	b.n	800631a <UART_SetConfig+0x5a6>
 800630c:	2380      	movs	r3, #128	; 0x80
 800630e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006312:	e002      	b.n	800631a <UART_SetConfig+0x5a6>
 8006314:	2380      	movs	r3, #128	; 0x80
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a3f      	ldr	r2, [pc, #252]	; (800641c <UART_SetConfig+0x6a8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	f040 80f8 	bne.w	8006516 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006326:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800632a:	2b20      	cmp	r3, #32
 800632c:	dc46      	bgt.n	80063bc <UART_SetConfig+0x648>
 800632e:	2b02      	cmp	r3, #2
 8006330:	f2c0 8082 	blt.w	8006438 <UART_SetConfig+0x6c4>
 8006334:	3b02      	subs	r3, #2
 8006336:	2b1e      	cmp	r3, #30
 8006338:	d87e      	bhi.n	8006438 <UART_SetConfig+0x6c4>
 800633a:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <UART_SetConfig+0x5cc>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	080063c3 	.word	0x080063c3
 8006344:	08006439 	.word	0x08006439
 8006348:	080063cb 	.word	0x080063cb
 800634c:	08006439 	.word	0x08006439
 8006350:	08006439 	.word	0x08006439
 8006354:	08006439 	.word	0x08006439
 8006358:	080063db 	.word	0x080063db
 800635c:	08006439 	.word	0x08006439
 8006360:	08006439 	.word	0x08006439
 8006364:	08006439 	.word	0x08006439
 8006368:	08006439 	.word	0x08006439
 800636c:	08006439 	.word	0x08006439
 8006370:	08006439 	.word	0x08006439
 8006374:	08006439 	.word	0x08006439
 8006378:	080063eb 	.word	0x080063eb
 800637c:	08006439 	.word	0x08006439
 8006380:	08006439 	.word	0x08006439
 8006384:	08006439 	.word	0x08006439
 8006388:	08006439 	.word	0x08006439
 800638c:	08006439 	.word	0x08006439
 8006390:	08006439 	.word	0x08006439
 8006394:	08006439 	.word	0x08006439
 8006398:	08006439 	.word	0x08006439
 800639c:	08006439 	.word	0x08006439
 80063a0:	08006439 	.word	0x08006439
 80063a4:	08006439 	.word	0x08006439
 80063a8:	08006439 	.word	0x08006439
 80063ac:	08006439 	.word	0x08006439
 80063b0:	08006439 	.word	0x08006439
 80063b4:	08006439 	.word	0x08006439
 80063b8:	0800642b 	.word	0x0800642b
 80063bc:	2b40      	cmp	r3, #64	; 0x40
 80063be:	d037      	beq.n	8006430 <UART_SetConfig+0x6bc>
 80063c0:	e03a      	b.n	8006438 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063c2:	f7ff f865 	bl	8005490 <HAL_RCCEx_GetD3PCLK1Freq>
 80063c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063c8:	e03c      	b.n	8006444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff f874 	bl	80054bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063d8:	e034      	b.n	8006444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063da:	f107 0318 	add.w	r3, r7, #24
 80063de:	4618      	mov	r0, r3
 80063e0:	f7ff f9c0 	bl	8005764 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063e8:	e02c      	b.n	8006444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063ea:	4b09      	ldr	r3, [pc, #36]	; (8006410 <UART_SetConfig+0x69c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d016      	beq.n	8006424 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063f6:	4b06      	ldr	r3, [pc, #24]	; (8006410 <UART_SetConfig+0x69c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	08db      	lsrs	r3, r3, #3
 80063fc:	f003 0303 	and.w	r3, r3, #3
 8006400:	4a07      	ldr	r2, [pc, #28]	; (8006420 <UART_SetConfig+0x6ac>)
 8006402:	fa22 f303 	lsr.w	r3, r2, r3
 8006406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006408:	e01c      	b.n	8006444 <UART_SetConfig+0x6d0>
 800640a:	bf00      	nop
 800640c:	40011400 	.word	0x40011400
 8006410:	58024400 	.word	0x58024400
 8006414:	40007800 	.word	0x40007800
 8006418:	40007c00 	.word	0x40007c00
 800641c:	58000c00 	.word	0x58000c00
 8006420:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006424:	4b9d      	ldr	r3, [pc, #628]	; (800669c <UART_SetConfig+0x928>)
 8006426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006428:	e00c      	b.n	8006444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800642a:	4b9d      	ldr	r3, [pc, #628]	; (80066a0 <UART_SetConfig+0x92c>)
 800642c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800642e:	e009      	b.n	8006444 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006436:	e005      	b.n	8006444 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006442:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 81de 	beq.w	8006808 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	4a94      	ldr	r2, [pc, #592]	; (80066a4 <UART_SetConfig+0x930>)
 8006452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006456:	461a      	mov	r2, r3
 8006458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800645a:	fbb3 f3f2 	udiv	r3, r3, r2
 800645e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	4613      	mov	r3, r2
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	4413      	add	r3, r2
 800646a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800646c:	429a      	cmp	r2, r3
 800646e:	d305      	bcc.n	800647c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006478:	429a      	cmp	r2, r3
 800647a:	d903      	bls.n	8006484 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006482:	e1c1      	b.n	8006808 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006486:	2200      	movs	r2, #0
 8006488:	60bb      	str	r3, [r7, #8]
 800648a:	60fa      	str	r2, [r7, #12]
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	4a84      	ldr	r2, [pc, #528]	; (80066a4 <UART_SetConfig+0x930>)
 8006492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006496:	b29b      	uxth	r3, r3
 8006498:	2200      	movs	r2, #0
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	607a      	str	r2, [r7, #4]
 800649e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064a6:	f7f9 ff6b 	bl	8000380 <__aeabi_uldivmod>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4610      	mov	r0, r2
 80064b0:	4619      	mov	r1, r3
 80064b2:	f04f 0200 	mov.w	r2, #0
 80064b6:	f04f 0300 	mov.w	r3, #0
 80064ba:	020b      	lsls	r3, r1, #8
 80064bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064c0:	0202      	lsls	r2, r0, #8
 80064c2:	6979      	ldr	r1, [r7, #20]
 80064c4:	6849      	ldr	r1, [r1, #4]
 80064c6:	0849      	lsrs	r1, r1, #1
 80064c8:	2000      	movs	r0, #0
 80064ca:	460c      	mov	r4, r1
 80064cc:	4605      	mov	r5, r0
 80064ce:	eb12 0804 	adds.w	r8, r2, r4
 80064d2:	eb43 0905 	adc.w	r9, r3, r5
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	469a      	mov	sl, r3
 80064de:	4693      	mov	fp, r2
 80064e0:	4652      	mov	r2, sl
 80064e2:	465b      	mov	r3, fp
 80064e4:	4640      	mov	r0, r8
 80064e6:	4649      	mov	r1, r9
 80064e8:	f7f9 ff4a 	bl	8000380 <__aeabi_uldivmod>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4613      	mov	r3, r2
 80064f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064fa:	d308      	bcc.n	800650e <UART_SetConfig+0x79a>
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006502:	d204      	bcs.n	800650e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800650a:	60da      	str	r2, [r3, #12]
 800650c:	e17c      	b.n	8006808 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006514:	e178      	b.n	8006808 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651e:	f040 80c5 	bne.w	80066ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006522:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006526:	2b20      	cmp	r3, #32
 8006528:	dc48      	bgt.n	80065bc <UART_SetConfig+0x848>
 800652a:	2b00      	cmp	r3, #0
 800652c:	db7b      	blt.n	8006626 <UART_SetConfig+0x8b2>
 800652e:	2b20      	cmp	r3, #32
 8006530:	d879      	bhi.n	8006626 <UART_SetConfig+0x8b2>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <UART_SetConfig+0x7c4>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	080065c3 	.word	0x080065c3
 800653c:	080065cb 	.word	0x080065cb
 8006540:	08006627 	.word	0x08006627
 8006544:	08006627 	.word	0x08006627
 8006548:	080065d3 	.word	0x080065d3
 800654c:	08006627 	.word	0x08006627
 8006550:	08006627 	.word	0x08006627
 8006554:	08006627 	.word	0x08006627
 8006558:	080065e3 	.word	0x080065e3
 800655c:	08006627 	.word	0x08006627
 8006560:	08006627 	.word	0x08006627
 8006564:	08006627 	.word	0x08006627
 8006568:	08006627 	.word	0x08006627
 800656c:	08006627 	.word	0x08006627
 8006570:	08006627 	.word	0x08006627
 8006574:	08006627 	.word	0x08006627
 8006578:	080065f3 	.word	0x080065f3
 800657c:	08006627 	.word	0x08006627
 8006580:	08006627 	.word	0x08006627
 8006584:	08006627 	.word	0x08006627
 8006588:	08006627 	.word	0x08006627
 800658c:	08006627 	.word	0x08006627
 8006590:	08006627 	.word	0x08006627
 8006594:	08006627 	.word	0x08006627
 8006598:	08006627 	.word	0x08006627
 800659c:	08006627 	.word	0x08006627
 80065a0:	08006627 	.word	0x08006627
 80065a4:	08006627 	.word	0x08006627
 80065a8:	08006627 	.word	0x08006627
 80065ac:	08006627 	.word	0x08006627
 80065b0:	08006627 	.word	0x08006627
 80065b4:	08006627 	.word	0x08006627
 80065b8:	08006619 	.word	0x08006619
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	d02e      	beq.n	800661e <UART_SetConfig+0x8aa>
 80065c0:	e031      	b.n	8006626 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c2:	f7fd fff3 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 80065c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065c8:	e033      	b.n	8006632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065ca:	f7fe f805 	bl	80045d8 <HAL_RCC_GetPCLK2Freq>
 80065ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80065d0:	e02f      	b.n	8006632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe ff70 	bl	80054bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065e0:	e027      	b.n	8006632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065e2:	f107 0318 	add.w	r3, r7, #24
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff f8bc 	bl	8005764 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065f0:	e01f      	b.n	8006632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065f2:	4b2d      	ldr	r3, [pc, #180]	; (80066a8 <UART_SetConfig+0x934>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d009      	beq.n	8006612 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065fe:	4b2a      	ldr	r3, [pc, #168]	; (80066a8 <UART_SetConfig+0x934>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	08db      	lsrs	r3, r3, #3
 8006604:	f003 0303 	and.w	r3, r3, #3
 8006608:	4a24      	ldr	r2, [pc, #144]	; (800669c <UART_SetConfig+0x928>)
 800660a:	fa22 f303 	lsr.w	r3, r2, r3
 800660e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006610:	e00f      	b.n	8006632 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006612:	4b22      	ldr	r3, [pc, #136]	; (800669c <UART_SetConfig+0x928>)
 8006614:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006616:	e00c      	b.n	8006632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006618:	4b21      	ldr	r3, [pc, #132]	; (80066a0 <UART_SetConfig+0x92c>)
 800661a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800661c:	e009      	b.n	8006632 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800661e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006624:	e005      	b.n	8006632 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 80e7 	beq.w	8006808 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	4a19      	ldr	r2, [pc, #100]	; (80066a4 <UART_SetConfig+0x930>)
 8006640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006644:	461a      	mov	r2, r3
 8006646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006648:	fbb3 f3f2 	udiv	r3, r3, r2
 800664c:	005a      	lsls	r2, r3, #1
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	085b      	lsrs	r3, r3, #1
 8006654:	441a      	add	r2, r3
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	fbb2 f3f3 	udiv	r3, r2, r3
 800665e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006662:	2b0f      	cmp	r3, #15
 8006664:	d916      	bls.n	8006694 <UART_SetConfig+0x920>
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800666c:	d212      	bcs.n	8006694 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006670:	b29b      	uxth	r3, r3
 8006672:	f023 030f 	bic.w	r3, r3, #15
 8006676:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667a:	085b      	lsrs	r3, r3, #1
 800667c:	b29b      	uxth	r3, r3
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	b29a      	uxth	r2, r3
 8006684:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006686:	4313      	orrs	r3, r2
 8006688:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006690:	60da      	str	r2, [r3, #12]
 8006692:	e0b9      	b.n	8006808 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800669a:	e0b5      	b.n	8006808 <UART_SetConfig+0xa94>
 800669c:	03d09000 	.word	0x03d09000
 80066a0:	003d0900 	.word	0x003d0900
 80066a4:	08017d64 	.word	0x08017d64
 80066a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80066ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	dc49      	bgt.n	8006748 <UART_SetConfig+0x9d4>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	db7c      	blt.n	80067b2 <UART_SetConfig+0xa3e>
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d87a      	bhi.n	80067b2 <UART_SetConfig+0xa3e>
 80066bc:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <UART_SetConfig+0x950>)
 80066be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c2:	bf00      	nop
 80066c4:	0800674f 	.word	0x0800674f
 80066c8:	08006757 	.word	0x08006757
 80066cc:	080067b3 	.word	0x080067b3
 80066d0:	080067b3 	.word	0x080067b3
 80066d4:	0800675f 	.word	0x0800675f
 80066d8:	080067b3 	.word	0x080067b3
 80066dc:	080067b3 	.word	0x080067b3
 80066e0:	080067b3 	.word	0x080067b3
 80066e4:	0800676f 	.word	0x0800676f
 80066e8:	080067b3 	.word	0x080067b3
 80066ec:	080067b3 	.word	0x080067b3
 80066f0:	080067b3 	.word	0x080067b3
 80066f4:	080067b3 	.word	0x080067b3
 80066f8:	080067b3 	.word	0x080067b3
 80066fc:	080067b3 	.word	0x080067b3
 8006700:	080067b3 	.word	0x080067b3
 8006704:	0800677f 	.word	0x0800677f
 8006708:	080067b3 	.word	0x080067b3
 800670c:	080067b3 	.word	0x080067b3
 8006710:	080067b3 	.word	0x080067b3
 8006714:	080067b3 	.word	0x080067b3
 8006718:	080067b3 	.word	0x080067b3
 800671c:	080067b3 	.word	0x080067b3
 8006720:	080067b3 	.word	0x080067b3
 8006724:	080067b3 	.word	0x080067b3
 8006728:	080067b3 	.word	0x080067b3
 800672c:	080067b3 	.word	0x080067b3
 8006730:	080067b3 	.word	0x080067b3
 8006734:	080067b3 	.word	0x080067b3
 8006738:	080067b3 	.word	0x080067b3
 800673c:	080067b3 	.word	0x080067b3
 8006740:	080067b3 	.word	0x080067b3
 8006744:	080067a5 	.word	0x080067a5
 8006748:	2b40      	cmp	r3, #64	; 0x40
 800674a:	d02e      	beq.n	80067aa <UART_SetConfig+0xa36>
 800674c:	e031      	b.n	80067b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800674e:	f7fd ff2d 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 8006752:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006754:	e033      	b.n	80067be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006756:	f7fd ff3f 	bl	80045d8 <HAL_RCC_GetPCLK2Freq>
 800675a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800675c:	e02f      	b.n	80067be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800675e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe feaa 	bl	80054bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800676c:	e027      	b.n	80067be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800676e:	f107 0318 	add.w	r3, r7, #24
 8006772:	4618      	mov	r0, r3
 8006774:	f7fe fff6 	bl	8005764 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800677c:	e01f      	b.n	80067be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800677e:	4b2d      	ldr	r3, [pc, #180]	; (8006834 <UART_SetConfig+0xac0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	d009      	beq.n	800679e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800678a:	4b2a      	ldr	r3, [pc, #168]	; (8006834 <UART_SetConfig+0xac0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	08db      	lsrs	r3, r3, #3
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	4a28      	ldr	r2, [pc, #160]	; (8006838 <UART_SetConfig+0xac4>)
 8006796:	fa22 f303 	lsr.w	r3, r2, r3
 800679a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800679c:	e00f      	b.n	80067be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800679e:	4b26      	ldr	r3, [pc, #152]	; (8006838 <UART_SetConfig+0xac4>)
 80067a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a2:	e00c      	b.n	80067be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067a4:	4b25      	ldr	r3, [pc, #148]	; (800683c <UART_SetConfig+0xac8>)
 80067a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a8:	e009      	b.n	80067be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067b0:	e005      	b.n	80067be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80067bc:	bf00      	nop
    }

    if (pclk != 0U)
 80067be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d021      	beq.n	8006808 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	4a1d      	ldr	r2, [pc, #116]	; (8006840 <UART_SetConfig+0xacc>)
 80067ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067ce:	461a      	mov	r2, r3
 80067d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	085b      	lsrs	r3, r3, #1
 80067dc:	441a      	add	r2, r3
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	2b0f      	cmp	r3, #15
 80067ec:	d909      	bls.n	8006802 <UART_SetConfig+0xa8e>
 80067ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f4:	d205      	bcs.n	8006802 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60da      	str	r2, [r3, #12]
 8006800:	e002      	b.n	8006808 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2201      	movs	r2, #1
 800680c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	2201      	movs	r2, #1
 8006814:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2200      	movs	r2, #0
 800681c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2200      	movs	r2, #0
 8006822:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006824:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006828:	4618      	mov	r0, r3
 800682a:	3748      	adds	r7, #72	; 0x48
 800682c:	46bd      	mov	sp, r7
 800682e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006832:	bf00      	nop
 8006834:	58024400 	.word	0x58024400
 8006838:	03d09000 	.word	0x03d09000
 800683c:	003d0900 	.word	0x003d0900
 8006840:	08017d64 	.word	0x08017d64

08006844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00a      	beq.n	800686e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fa:	f003 0320 	and.w	r3, r3, #32
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d01a      	beq.n	800695a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006942:	d10a      	bne.n	800695a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	605a      	str	r2, [r3, #4]
  }
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af02      	add	r7, sp, #8
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006998:	f7fa fd7a 	bl	8001490 <HAL_GetTick>
 800699c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0308 	and.w	r3, r3, #8
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d10e      	bne.n	80069ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f82f 	bl	8006a1e <UART_WaitOnFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e025      	b.n	8006a16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d10e      	bne.n	80069f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f819 	bl	8006a1e <UART_WaitOnFlagUntilTimeout>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e00f      	b.n	8006a16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b09c      	sub	sp, #112	; 0x70
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	603b      	str	r3, [r7, #0]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a2e:	e0a9      	b.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a36:	f000 80a5 	beq.w	8006b84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a3a:	f7fa fd29 	bl	8001490 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d140      	bne.n	8006ad2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a64:	667b      	str	r3, [r7, #100]	; 0x64
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e6      	bne.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	663b      	str	r3, [r7, #96]	; 0x60
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006aa2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006aa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006aa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e5      	bne.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e069      	b.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d051      	beq.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aee:	d149      	bne.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006af8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e6      	bne.n	8006afa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3308      	adds	r3, #8
 8006b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	e853 3f00 	ldrex	r3, [r3]
 8006b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f023 0301 	bic.w	r3, r3, #1
 8006b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3308      	adds	r3, #8
 8006b4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b4c:	623a      	str	r2, [r7, #32]
 8006b4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b50:	69f9      	ldr	r1, [r7, #28]
 8006b52:	6a3a      	ldr	r2, [r7, #32]
 8006b54:	e841 2300 	strex	r3, r2, [r1]
 8006b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1e5      	bne.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e010      	b.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	69da      	ldr	r2, [r3, #28]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	bf0c      	ite	eq
 8006b94:	2301      	moveq	r3, #1
 8006b96:	2300      	movne	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	f43f af46 	beq.w	8006a30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3770      	adds	r7, #112	; 0x70
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b085      	sub	sp, #20
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d101      	bne.n	8006bc4 <HAL_UARTEx_DisableFifoMode+0x16>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e027      	b.n	8006c14 <HAL_UARTEx_DisableFifoMode+0x66>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2224      	movs	r2, #36	; 0x24
 8006bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0201 	bic.w	r2, r2, #1
 8006bea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bf2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e02d      	b.n	8006c94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2224      	movs	r2, #36	; 0x24
 8006c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0201 	bic.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f84f 	bl	8006d18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e02d      	b.n	8006d10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2224      	movs	r2, #36	; 0x24
 8006cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0201 	bic.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f811 	bl	8006d18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d108      	bne.n	8006d3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d38:	e031      	b.n	8006d9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d3a:	2310      	movs	r3, #16
 8006d3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d3e:	2310      	movs	r3, #16
 8006d40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	0e5b      	lsrs	r3, r3, #25
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	0f5b      	lsrs	r3, r3, #29
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	7b3a      	ldrb	r2, [r7, #12]
 8006d66:	4911      	ldr	r1, [pc, #68]	; (8006dac <UARTEx_SetNbDataToProcess+0x94>)
 8006d68:	5c8a      	ldrb	r2, [r1, r2]
 8006d6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d6e:	7b3a      	ldrb	r2, [r7, #12]
 8006d70:	490f      	ldr	r1, [pc, #60]	; (8006db0 <UARTEx_SetNbDataToProcess+0x98>)
 8006d72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d74:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	7b7a      	ldrb	r2, [r7, #13]
 8006d84:	4909      	ldr	r1, [pc, #36]	; (8006dac <UARTEx_SetNbDataToProcess+0x94>)
 8006d86:	5c8a      	ldrb	r2, [r1, r2]
 8006d88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d8c:	7b7a      	ldrb	r2, [r7, #13]
 8006d8e:	4908      	ldr	r1, [pc, #32]	; (8006db0 <UARTEx_SetNbDataToProcess+0x98>)
 8006d90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d92:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d9e:	bf00      	nop
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	08017d7c 	.word	0x08017d7c
 8006db0:	08017d84 	.word	0x08017d84

08006db4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006db4:	b084      	sub	sp, #16
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	f107 001c 	add.w	r0, r7, #28
 8006dc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d120      	bne.n	8006e0e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	4b2a      	ldr	r3, [pc, #168]	; (8006e88 <USB_CoreInit+0xd4>)
 8006dde:	4013      	ands	r3, r2
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d105      	bne.n	8006e02 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 faac 	bl	8007360 <USB_CoreReset>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]
 8006e0c:	e01a      	b.n	8006e44 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 faa0 	bl	8007360 <USB_CoreReset>
 8006e20:	4603      	mov	r3, r0
 8006e22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	639a      	str	r2, [r3, #56]	; 0x38
 8006e36:	e005      	b.n	8006e44 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d116      	bne.n	8006e78 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e58:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <USB_CoreInit+0xd8>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f043 0206 	orr.w	r2, r3, #6
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f043 0220 	orr.w	r2, r3, #32
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e84:	b004      	add	sp, #16
 8006e86:	4770      	bx	lr
 8006e88:	ffbdffbf 	.word	0xffbdffbf
 8006e8c:	03ee0000 	.word	0x03ee0000

08006e90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f023 0201 	bic.w	r2, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ece:	78fb      	ldrb	r3, [r7, #3]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d115      	bne.n	8006f00 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	f7fa fae1 	bl	80014a8 <HAL_Delay>
      ms++;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fa29 	bl	8007344 <USB_GetMode>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d01e      	beq.n	8006f36 <USB_SetCurrentMode+0x84>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b31      	cmp	r3, #49	; 0x31
 8006efc:	d9f0      	bls.n	8006ee0 <USB_SetCurrentMode+0x2e>
 8006efe:	e01a      	b.n	8006f36 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d115      	bne.n	8006f32 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f12:	2001      	movs	r0, #1
 8006f14:	f7fa fac8 	bl	80014a8 <HAL_Delay>
      ms++;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fa10 	bl	8007344 <USB_GetMode>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d005      	beq.n	8006f36 <USB_SetCurrentMode+0x84>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b31      	cmp	r3, #49	; 0x31
 8006f2e:	d9f0      	bls.n	8006f12 <USB_SetCurrentMode+0x60>
 8006f30:	e001      	b.n	8006f36 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e005      	b.n	8006f42 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2b32      	cmp	r3, #50	; 0x32
 8006f3a:	d101      	bne.n	8006f40 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b086      	sub	sp, #24
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f66:	2300      	movs	r3, #0
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	e009      	b.n	8006f80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	3340      	adds	r3, #64	; 0x40
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	2200      	movs	r2, #0
 8006f78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	613b      	str	r3, [r7, #16]
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	2b0e      	cmp	r3, #14
 8006f84:	d9f2      	bls.n	8006f6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d11c      	bne.n	8006fc6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f9a:	f043 0302 	orr.w	r3, r3, #2
 8006f9e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	e005      	b.n	8006fd2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fd8:	461a      	mov	r2, r3
 8006fda:	2300      	movs	r3, #0
 8006fdc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fec:	461a      	mov	r2, r3
 8006fee:	680b      	ldr	r3, [r1, #0]
 8006ff0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d10c      	bne.n	8007012 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d104      	bne.n	8007008 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ffe:	2100      	movs	r1, #0
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f965 	bl	80072d0 <USB_SetDevSpeed>
 8007006:	e008      	b.n	800701a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007008:	2101      	movs	r1, #1
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f960 	bl	80072d0 <USB_SetDevSpeed>
 8007010:	e003      	b.n	800701a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007012:	2103      	movs	r1, #3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f95b 	bl	80072d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800701a:	2110      	movs	r1, #16
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f8f3 	bl	8007208 <USB_FlushTxFifo>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f91f 	bl	8007270 <USB_FlushRxFifo>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007042:	461a      	mov	r2, r3
 8007044:	2300      	movs	r3, #0
 8007046:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704e:	461a      	mov	r2, r3
 8007050:	2300      	movs	r3, #0
 8007052:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705a:	461a      	mov	r2, r3
 800705c:	2300      	movs	r3, #0
 800705e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007060:	2300      	movs	r3, #0
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	e043      	b.n	80070ee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800707c:	d118      	bne.n	80070b0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10a      	bne.n	800709a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007090:	461a      	mov	r2, r3
 8007092:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	e013      	b.n	80070c2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a6:	461a      	mov	r2, r3
 80070a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	e008      	b.n	80070c2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	461a      	mov	r2, r3
 80070be:	2300      	movs	r3, #0
 80070c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ce:	461a      	mov	r2, r3
 80070d0:	2300      	movs	r3, #0
 80070d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e0:	461a      	mov	r2, r3
 80070e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	3301      	adds	r3, #1
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d3b7      	bcc.n	8007066 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070f6:	2300      	movs	r3, #0
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	e043      	b.n	8007184 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800710e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007112:	d118      	bne.n	8007146 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007126:	461a      	mov	r2, r3
 8007128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	e013      	b.n	8007158 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713c:	461a      	mov	r2, r3
 800713e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	e008      	b.n	8007158 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	4413      	add	r3, r2
 800714e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007152:	461a      	mov	r2, r3
 8007154:	2300      	movs	r3, #0
 8007156:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007164:	461a      	mov	r2, r3
 8007166:	2300      	movs	r3, #0
 8007168:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007176:	461a      	mov	r2, r3
 8007178:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800717c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	3301      	adds	r3, #1
 8007182:	613b      	str	r3, [r7, #16]
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	429a      	cmp	r2, r3
 800718a:	d3b7      	bcc.n	80070fc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800719a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800719e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80071ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d105      	bne.n	80071c0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	f043 0210 	orr.w	r2, r3, #16
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	699a      	ldr	r2, [r3, #24]
 80071c4:	4b0e      	ldr	r3, [pc, #56]	; (8007200 <USB_DevInit+0x2b4>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	f043 0208 	orr.w	r2, r3, #8
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d105      	bne.n	80071f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699a      	ldr	r2, [r3, #24]
 80071e8:	4b06      	ldr	r3, [pc, #24]	; (8007204 <USB_DevInit+0x2b8>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071fc:	b004      	add	sp, #16
 80071fe:	4770      	bx	lr
 8007200:	803c3800 	.word	0x803c3800
 8007204:	40000004 	.word	0x40000004

08007208 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3301      	adds	r3, #1
 800721a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4a13      	ldr	r2, [pc, #76]	; (800726c <USB_FlushTxFifo+0x64>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d901      	bls.n	8007228 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e01b      	b.n	8007260 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	daf2      	bge.n	8007216 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	019b      	lsls	r3, r3, #6
 8007238:	f043 0220 	orr.w	r2, r3, #32
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3301      	adds	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	4a08      	ldr	r2, [pc, #32]	; (800726c <USB_FlushTxFifo+0x64>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d901      	bls.n	8007252 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e006      	b.n	8007260 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b20      	cmp	r3, #32
 800725c:	d0f0      	beq.n	8007240 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	00030d40 	.word	0x00030d40

08007270 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3301      	adds	r3, #1
 8007280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4a11      	ldr	r2, [pc, #68]	; (80072cc <USB_FlushRxFifo+0x5c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d901      	bls.n	800728e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e018      	b.n	80072c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	daf2      	bge.n	800727c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2210      	movs	r2, #16
 800729e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3301      	adds	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4a08      	ldr	r2, [pc, #32]	; (80072cc <USB_FlushRxFifo+0x5c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d901      	bls.n	80072b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e006      	b.n	80072c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	f003 0310 	and.w	r3, r3, #16
 80072ba:	2b10      	cmp	r3, #16
 80072bc:	d0f0      	beq.n	80072a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	00030d40 	.word	0x00030d40

080072d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	78fb      	ldrb	r3, [r7, #3]
 80072ea:	68f9      	ldr	r1, [r7, #12]
 80072ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072f0:	4313      	orrs	r3, r2
 80072f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800731c:	f023 0303 	bic.w	r3, r3, #3
 8007320:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007330:	f043 0302 	orr.w	r3, r3, #2
 8007334:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	f003 0301 	and.w	r3, r3, #1
}
 8007354:	4618      	mov	r0, r3
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	3301      	adds	r3, #1
 8007370:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4a13      	ldr	r2, [pc, #76]	; (80073c4 <USB_CoreReset+0x64>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d901      	bls.n	800737e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e01b      	b.n	80073b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	daf2      	bge.n	800736c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	f043 0201 	orr.w	r2, r3, #1
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3301      	adds	r3, #1
 800739a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4a09      	ldr	r2, [pc, #36]	; (80073c4 <USB_CoreReset+0x64>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d901      	bls.n	80073a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e006      	b.n	80073b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d0f0      	beq.n	8007396 <USB_CoreReset+0x36>

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	00030d40 	.word	0x00030d40

080073c8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80073ce:	f003 fda5 	bl	800af1c <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80073d2:	4b19      	ldr	r3, [pc, #100]	; (8007438 <MX_LWIP_Init+0x70>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80073d8:	4b18      	ldr	r3, [pc, #96]	; (800743c <MX_LWIP_Init+0x74>)
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80073de:	4b18      	ldr	r3, [pc, #96]	; (8007440 <MX_LWIP_Init+0x78>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80073e4:	4b17      	ldr	r3, [pc, #92]	; (8007444 <MX_LWIP_Init+0x7c>)
 80073e6:	9302      	str	r3, [sp, #8]
 80073e8:	4b17      	ldr	r3, [pc, #92]	; (8007448 <MX_LWIP_Init+0x80>)
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	2300      	movs	r3, #0
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	4b13      	ldr	r3, [pc, #76]	; (8007440 <MX_LWIP_Init+0x78>)
 80073f2:	4a12      	ldr	r2, [pc, #72]	; (800743c <MX_LWIP_Init+0x74>)
 80073f4:	4910      	ldr	r1, [pc, #64]	; (8007438 <MX_LWIP_Init+0x70>)
 80073f6:	4815      	ldr	r0, [pc, #84]	; (800744c <MX_LWIP_Init+0x84>)
 80073f8:	f005 fbac 	bl	800cb54 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80073fc:	4813      	ldr	r0, [pc, #76]	; (800744c <MX_LWIP_Init+0x84>)
 80073fe:	f005 fd63 	bl	800cec8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007402:	4b12      	ldr	r3, [pc, #72]	; (800744c <MX_LWIP_Init+0x84>)
 8007404:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007408:	089b      	lsrs	r3, r3, #2
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d003      	beq.n	800741c <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007414:	480d      	ldr	r0, [pc, #52]	; (800744c <MX_LWIP_Init+0x84>)
 8007416:	f005 fd67 	bl	800cee8 <netif_set_up>
 800741a:	e002      	b.n	8007422 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800741c:	480b      	ldr	r0, [pc, #44]	; (800744c <MX_LWIP_Init+0x84>)
 800741e:	f005 fdcf 	bl	800cfc0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007422:	490b      	ldr	r1, [pc, #44]	; (8007450 <MX_LWIP_Init+0x88>)
 8007424:	4809      	ldr	r0, [pc, #36]	; (800744c <MX_LWIP_Init+0x84>)
 8007426:	f005 fe65 	bl	800d0f4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800742a:	4808      	ldr	r0, [pc, #32]	; (800744c <MX_LWIP_Init+0x84>)
 800742c:	f000 ffca 	bl	80083c4 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007430:	bf00      	nop
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	24000750 	.word	0x24000750
 800743c:	24000754 	.word	0x24000754
 8007440:	24000758 	.word	0x24000758
 8007444:	0800a891 	.word	0x0800a891
 8007448:	0800770d 	.word	0x0800770d
 800744c:	24000718 	.word	0x24000718
 8007450:	08007455 	.word	0x08007455

08007454 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007474:	4b3f      	ldr	r3, [pc, #252]	; (8007574 <low_level_init+0x10c>)
 8007476:	4a40      	ldr	r2, [pc, #256]	; (8007578 <low_level_init+0x110>)
 8007478:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800747a:	2300      	movs	r3, #0
 800747c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800747e:	2380      	movs	r3, #128	; 0x80
 8007480:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007482:	23e1      	movs	r3, #225	; 0xe1
 8007484:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007486:	2300      	movs	r3, #0
 8007488:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800748a:	2300      	movs	r3, #0
 800748c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800748e:	2300      	movs	r3, #0
 8007490:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007492:	4a38      	ldr	r2, [pc, #224]	; (8007574 <low_level_init+0x10c>)
 8007494:	f107 0308 	add.w	r3, r7, #8
 8007498:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 800749a:	4b36      	ldr	r3, [pc, #216]	; (8007574 <low_level_init+0x10c>)
 800749c:	2200      	movs	r2, #0
 800749e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80074a0:	4b34      	ldr	r3, [pc, #208]	; (8007574 <low_level_init+0x10c>)
 80074a2:	4a36      	ldr	r2, [pc, #216]	; (800757c <low_level_init+0x114>)
 80074a4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80074a6:	4b33      	ldr	r3, [pc, #204]	; (8007574 <low_level_init+0x10c>)
 80074a8:	4a35      	ldr	r2, [pc, #212]	; (8007580 <low_level_init+0x118>)
 80074aa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80074ac:	4b31      	ldr	r3, [pc, #196]	; (8007574 <low_level_init+0x10c>)
 80074ae:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80074b2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80074b4:	482f      	ldr	r0, [pc, #188]	; (8007574 <low_level_init+0x10c>)
 80074b6:	f7fa f99b 	bl	80017f0 <HAL_ETH_Init>
 80074ba:	4603      	mov	r3, r0
 80074bc:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80074be:	2238      	movs	r2, #56	; 0x38
 80074c0:	2100      	movs	r1, #0
 80074c2:	4830      	ldr	r0, [pc, #192]	; (8007584 <low_level_init+0x11c>)
 80074c4:	f00c fb76 	bl	8013bb4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80074c8:	4b2e      	ldr	r3, [pc, #184]	; (8007584 <low_level_init+0x11c>)
 80074ca:	2221      	movs	r2, #33	; 0x21
 80074cc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80074ce:	4b2d      	ldr	r3, [pc, #180]	; (8007584 <low_level_init+0x11c>)
 80074d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80074d4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80074d6:	4b2b      	ldr	r3, [pc, #172]	; (8007584 <low_level_init+0x11c>)
 80074d8:	2200      	movs	r2, #0
 80074da:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80074dc:	482a      	ldr	r0, [pc, #168]	; (8007588 <low_level_init+0x120>)
 80074de:	f005 fa01 	bl	800c8e4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2206      	movs	r2, #6
 80074e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80074ea:	4b22      	ldr	r3, [pc, #136]	; (8007574 <low_level_init+0x10c>)
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	781a      	ldrb	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80074f6:	4b1f      	ldr	r3, [pc, #124]	; (8007574 <low_level_init+0x10c>)
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	785a      	ldrb	r2, [r3, #1]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007502:	4b1c      	ldr	r3, [pc, #112]	; (8007574 <low_level_init+0x10c>)
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	789a      	ldrb	r2, [r3, #2]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800750e:	4b19      	ldr	r3, [pc, #100]	; (8007574 <low_level_init+0x10c>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	78da      	ldrb	r2, [r3, #3]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800751a:	4b16      	ldr	r3, [pc, #88]	; (8007574 <low_level_init+0x10c>)
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	791a      	ldrb	r2, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007526:	4b13      	ldr	r3, [pc, #76]	; (8007574 <low_level_init+0x10c>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	795a      	ldrb	r2, [r3, #5]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007538:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007540:	f043 030a 	orr.w	r3, r3, #10
 8007544:	b2da      	uxtb	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800754c:	490f      	ldr	r1, [pc, #60]	; (800758c <low_level_init+0x124>)
 800754e:	4810      	ldr	r0, [pc, #64]	; (8007590 <low_level_init+0x128>)
 8007550:	f7f9 fdb7 	bl	80010c2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007554:	480e      	ldr	r0, [pc, #56]	; (8007590 <low_level_init+0x128>)
 8007556:	f7f9 fde6 	bl	8001126 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d103      	bne.n	8007568 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fa5f 	bl	8007a24 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007566:	e001      	b.n	800756c <low_level_init+0x104>
    Error_Handler();
 8007568:	f7f9 fb81 	bl	8000c6e <Error_Handler>
}
 800756c:	bf00      	nop
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	240050e8 	.word	0x240050e8
 8007578:	40028000 	.word	0x40028000
 800757c:	240000f8 	.word	0x240000f8
 8007580:	24000098 	.word	0x24000098
 8007584:	24005198 	.word	0x24005198
 8007588:	08017d8c 	.word	0x08017d8c
 800758c:	24000010 	.word	0x24000010
 8007590:	240051d0 	.word	0x240051d0

08007594 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b092      	sub	sp, #72	; 0x48
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80075ac:	f107 030c 	add.w	r3, r7, #12
 80075b0:	2230      	movs	r2, #48	; 0x30
 80075b2:	2100      	movs	r1, #0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f00c fafd 	bl	8013bb4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80075ba:	f107 030c 	add.w	r3, r7, #12
 80075be:	2230      	movs	r2, #48	; 0x30
 80075c0:	2100      	movs	r1, #0
 80075c2:	4618      	mov	r0, r3
 80075c4:	f00c faf6 	bl	8013bb4 <memset>

  for(q = p; q != NULL; q = q->next)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	643b      	str	r3, [r7, #64]	; 0x40
 80075cc:	e045      	b.n	800765a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80075ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	d902      	bls.n	80075da <low_level_output+0x46>
      return ERR_IF;
 80075d4:	f06f 030b 	mvn.w	r3, #11
 80075d8:	e055      	b.n	8007686 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80075da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075dc:	6859      	ldr	r1, [r3, #4]
 80075de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075e0:	4613      	mov	r3, r2
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	3348      	adds	r3, #72	; 0x48
 80075ea:	443b      	add	r3, r7
 80075ec:	3b3c      	subs	r3, #60	; 0x3c
 80075ee:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80075f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075f2:	895b      	ldrh	r3, [r3, #10]
 80075f4:	4619      	mov	r1, r3
 80075f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075f8:	4613      	mov	r3, r2
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	3348      	adds	r3, #72	; 0x48
 8007602:	443b      	add	r3, r7
 8007604:	3b38      	subs	r3, #56	; 0x38
 8007606:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800760a:	2b00      	cmp	r3, #0
 800760c:	d011      	beq.n	8007632 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800760e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007610:	1e5a      	subs	r2, r3, #1
 8007612:	f107 000c 	add.w	r0, r7, #12
 8007616:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007618:	460b      	mov	r3, r1
 800761a:	005b      	lsls	r3, r3, #1
 800761c:	440b      	add	r3, r1
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	18c1      	adds	r1, r0, r3
 8007622:	4613      	mov	r3, r2
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	3348      	adds	r3, #72	; 0x48
 800762c:	443b      	add	r3, r7
 800762e:	3b34      	subs	r3, #52	; 0x34
 8007630:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800763a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800763c:	4613      	mov	r3, r2
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	3348      	adds	r3, #72	; 0x48
 8007646:	443b      	add	r3, r7
 8007648:	3b34      	subs	r3, #52	; 0x34
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800764e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007650:	3301      	adds	r3, #1
 8007652:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	643b      	str	r3, [r7, #64]	; 0x40
 800765a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1b6      	bne.n	80075ce <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	891b      	ldrh	r3, [r3, #8]
 8007664:	461a      	mov	r2, r3
 8007666:	4b0a      	ldr	r3, [pc, #40]	; (8007690 <low_level_output+0xfc>)
 8007668:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800766a:	4a09      	ldr	r2, [pc, #36]	; (8007690 <low_level_output+0xfc>)
 800766c:	f107 030c 	add.w	r3, r7, #12
 8007670:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007672:	4a07      	ldr	r2, [pc, #28]	; (8007690 <low_level_output+0xfc>)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8007678:	2214      	movs	r2, #20
 800767a:	4905      	ldr	r1, [pc, #20]	; (8007690 <low_level_output+0xfc>)
 800767c:	4805      	ldr	r0, [pc, #20]	; (8007694 <low_level_output+0x100>)
 800767e:	f7fa fa4f 	bl	8001b20 <HAL_ETH_Transmit>

  return errval;
 8007682:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007686:	4618      	mov	r0, r3
 8007688:	3748      	adds	r7, #72	; 0x48
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	24005198 	.word	0x24005198
 8007694:	240050e8 	.word	0x240050e8

08007698 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80076a0:	2300      	movs	r3, #0
 80076a2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80076a4:	4b07      	ldr	r3, [pc, #28]	; (80076c4 <low_level_input+0x2c>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d105      	bne.n	80076b8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80076ac:	f107 030c 	add.w	r3, r7, #12
 80076b0:	4619      	mov	r1, r3
 80076b2:	4805      	ldr	r0, [pc, #20]	; (80076c8 <low_level_input+0x30>)
 80076b4:	f7fa facb 	bl	8001c4e <HAL_ETH_ReadData>
  }

  return p;
 80076b8:	68fb      	ldr	r3, [r7, #12]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	240050e4 	.word	0x240050e4
 80076c8:	240050e8 	.word	0x240050e8

080076cc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff ffdd 	bl	8007698 <low_level_input>
 80076de:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	4798      	blx	r3
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f006 f85c 	bl	800d7b4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1ea      	bne.n	80076d8 <ethernetif_input+0xc>
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d106      	bne.n	8007728 <ethernetif_init+0x1c>
 800771a:	4b0e      	ldr	r3, [pc, #56]	; (8007754 <ethernetif_init+0x48>)
 800771c:	f240 127b 	movw	r2, #379	; 0x17b
 8007720:	490d      	ldr	r1, [pc, #52]	; (8007758 <ethernetif_init+0x4c>)
 8007722:	480e      	ldr	r0, [pc, #56]	; (800775c <ethernetif_init+0x50>)
 8007724:	f00c fa4e 	bl	8013bc4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2273      	movs	r2, #115	; 0x73
 800772c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2274      	movs	r2, #116	; 0x74
 8007734:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a09      	ldr	r2, [pc, #36]	; (8007760 <ethernetif_init+0x54>)
 800773c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a08      	ldr	r2, [pc, #32]	; (8007764 <ethernetif_init+0x58>)
 8007742:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f7ff fe8f 	bl	8007468 <low_level_init>

  return ERR_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	08014c7c 	.word	0x08014c7c
 8007758:	08014c98 	.word	0x08014c98
 800775c:	08014ca8 	.word	0x08014ca8
 8007760:	0800a291 	.word	0x0800a291
 8007764:	08007595 	.word	0x08007595

08007768 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007774:	68f9      	ldr	r1, [r7, #12]
 8007776:	4807      	ldr	r0, [pc, #28]	; (8007794 <pbuf_free_custom+0x2c>)
 8007778:	f005 f996 	bl	800caa8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800777c:	4b06      	ldr	r3, [pc, #24]	; (8007798 <pbuf_free_custom+0x30>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d102      	bne.n	800778a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007784:	4b04      	ldr	r3, [pc, #16]	; (8007798 <pbuf_free_custom+0x30>)
 8007786:	2200      	movs	r2, #0
 8007788:	701a      	strb	r2, [r3, #0]
  }
}
 800778a:	bf00      	nop
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	08017d8c 	.word	0x08017d8c
 8007798:	240050e4 	.word	0x240050e4

0800779c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80077a0:	f7f9 fe76 	bl	8001490 <HAL_GetTick>
 80077a4:	4603      	mov	r3, r0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b090      	sub	sp, #64	; 0x40
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]
 80077bc:	605a      	str	r2, [r3, #4]
 80077be:	609a      	str	r2, [r3, #8]
 80077c0:	60da      	str	r2, [r3, #12]
 80077c2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a68      	ldr	r2, [pc, #416]	; (800796c <HAL_ETH_MspInit+0x1c0>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	f040 80ca 	bne.w	8007964 <HAL_ETH_MspInit+0x1b8>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80077d0:	4b67      	ldr	r3, [pc, #412]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 80077d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80077d6:	4a66      	ldr	r2, [pc, #408]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 80077d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80077e0:	4b63      	ldr	r3, [pc, #396]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 80077e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80077e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80077ee:	4b60      	ldr	r3, [pc, #384]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 80077f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80077f4:	4a5e      	ldr	r2, [pc, #376]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 80077f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80077fe:	4b5c      	ldr	r3, [pc, #368]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 8007800:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800780c:	4b58      	ldr	r3, [pc, #352]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 800780e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007812:	4a57      	ldr	r2, [pc, #348]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 8007814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007818:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800781c:	4b54      	ldr	r3, [pc, #336]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 800781e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007826:	623b      	str	r3, [r7, #32]
 8007828:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800782a:	4b51      	ldr	r3, [pc, #324]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 800782c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007830:	4a4f      	ldr	r2, [pc, #316]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 8007832:	f043 0310 	orr.w	r3, r3, #16
 8007836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800783a:	4b4d      	ldr	r3, [pc, #308]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 800783c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007840:	f003 0310 	and.w	r3, r3, #16
 8007844:	61fb      	str	r3, [r7, #28]
 8007846:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007848:	4b49      	ldr	r3, [pc, #292]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 800784a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800784e:	4a48      	ldr	r2, [pc, #288]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 8007850:	f043 0304 	orr.w	r3, r3, #4
 8007854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007858:	4b45      	ldr	r3, [pc, #276]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 800785a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800785e:	f003 0304 	and.w	r3, r3, #4
 8007862:	61bb      	str	r3, [r7, #24]
 8007864:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007866:	4b42      	ldr	r3, [pc, #264]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 8007868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800786c:	4a40      	ldr	r2, [pc, #256]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 800786e:	f043 0301 	orr.w	r3, r3, #1
 8007872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007876:	4b3e      	ldr	r3, [pc, #248]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 8007878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	617b      	str	r3, [r7, #20]
 8007882:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007884:	4b3a      	ldr	r3, [pc, #232]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 8007886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800788a:	4a39      	ldr	r2, [pc, #228]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 800788c:	f043 0302 	orr.w	r3, r3, #2
 8007890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007894:	4b36      	ldr	r3, [pc, #216]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 8007896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	613b      	str	r3, [r7, #16]
 80078a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80078a2:	4b33      	ldr	r3, [pc, #204]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 80078a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078a8:	4a31      	ldr	r2, [pc, #196]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 80078aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80078b2:	4b2f      	ldr	r3, [pc, #188]	; (8007970 <HAL_ETH_MspInit+0x1c4>)
 80078b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078bc:	60fb      	str	r3, [r7, #12]
 80078be:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> ETH_RXD3
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80078c0:	2304      	movs	r3, #4
 80078c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078c4:	2302      	movs	r3, #2
 80078c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c8:	2300      	movs	r3, #0
 80078ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078cc:	2300      	movs	r3, #0
 80078ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80078d0:	230b      	movs	r3, #11
 80078d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80078d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078d8:	4619      	mov	r1, r3
 80078da:	4826      	ldr	r0, [pc, #152]	; (8007974 <HAL_ETH_MspInit+0x1c8>)
 80078dc:	f7fb fb48 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80078e0:	233e      	movs	r3, #62	; 0x3e
 80078e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078e4:	2302      	movs	r3, #2
 80078e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e8:	2300      	movs	r3, #0
 80078ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078ec:	2300      	movs	r3, #0
 80078ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80078f0:	230b      	movs	r3, #11
 80078f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80078f8:	4619      	mov	r1, r3
 80078fa:	481f      	ldr	r0, [pc, #124]	; (8007978 <HAL_ETH_MspInit+0x1cc>)
 80078fc:	f7fb fb38 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8007900:	238f      	movs	r3, #143	; 0x8f
 8007902:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007904:	2302      	movs	r3, #2
 8007906:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007908:	2300      	movs	r3, #0
 800790a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800790c:	2300      	movs	r3, #0
 800790e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007910:	230b      	movs	r3, #11
 8007912:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007918:	4619      	mov	r1, r3
 800791a:	4818      	ldr	r0, [pc, #96]	; (800797c <HAL_ETH_MspInit+0x1d0>)
 800791c:	f7fb fb28 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8007920:	f242 0303 	movw	r3, #8195	; 0x2003
 8007924:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007926:	2302      	movs	r3, #2
 8007928:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792a:	2300      	movs	r3, #0
 800792c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800792e:	2300      	movs	r3, #0
 8007930:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007932:	230b      	movs	r3, #11
 8007934:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007936:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800793a:	4619      	mov	r1, r3
 800793c:	4810      	ldr	r0, [pc, #64]	; (8007980 <HAL_ETH_MspInit+0x1d4>)
 800793e:	f7fb fb17 	bl	8002f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8007942:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007946:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007948:	2302      	movs	r3, #2
 800794a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800794c:	2300      	movs	r3, #0
 800794e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007950:	2300      	movs	r3, #0
 8007952:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007954:	230b      	movs	r3, #11
 8007956:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800795c:	4619      	mov	r1, r3
 800795e:	4809      	ldr	r0, [pc, #36]	; (8007984 <HAL_ETH_MspInit+0x1d8>)
 8007960:	f7fb fb06 	bl	8002f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007964:	bf00      	nop
 8007966:	3740      	adds	r7, #64	; 0x40
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	40028000 	.word	0x40028000
 8007970:	58024400 	.word	0x58024400
 8007974:	58021000 	.word	0x58021000
 8007978:	58020800 	.word	0x58020800
 800797c:	58020000 	.word	0x58020000
 8007980:	58020400 	.word	0x58020400
 8007984:	58021800 	.word	0x58021800

08007988 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800798c:	4802      	ldr	r0, [pc, #8]	; (8007998 <ETH_PHY_IO_Init+0x10>)
 800798e:	f7fa fd23 	bl	80023d8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	bd80      	pop	{r7, pc}
 8007998:	240050e8 	.word	0x240050e8

0800799c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0
  return 0;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	68f9      	ldr	r1, [r7, #12]
 80079be:	4807      	ldr	r0, [pc, #28]	; (80079dc <ETH_PHY_IO_ReadReg+0x30>)
 80079c0:	f7fa fa73 	bl	8001eaa <HAL_ETH_ReadPHYRegister>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80079ca:	f04f 33ff 	mov.w	r3, #4294967295
 80079ce:	e000      	b.n	80079d2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	240050e8 	.word	0x240050e8

080079e0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	68f9      	ldr	r1, [r7, #12]
 80079f2:	4807      	ldr	r0, [pc, #28]	; (8007a10 <ETH_PHY_IO_WriteReg+0x30>)
 80079f4:	f7fa faae 	bl	8001f54 <HAL_ETH_WritePHYRegister>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d002      	beq.n	8007a04 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80079fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007a02:	e000      	b.n	8007a06 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	240050e8 	.word	0x240050e8

08007a14 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007a18:	f7f9 fd3a 	bl	8001490 <HAL_GetTick>
 8007a1c:	4603      	mov	r3, r0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	bd80      	pop	{r7, pc}
	...

08007a24 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b0a0      	sub	sp, #128	; 0x80
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007a2c:	f107 030c 	add.w	r3, r7, #12
 8007a30:	2264      	movs	r2, #100	; 0x64
 8007a32:	2100      	movs	r1, #0
 8007a34:	4618      	mov	r0, r3
 8007a36:	f00c f8bd 	bl	8013bb4 <memset>
  int32_t PHYLinkState = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a42:	2300      	movs	r3, #0
 8007a44:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a46:	2300      	movs	r3, #0
 8007a48:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007a4a:	483a      	ldr	r0, [pc, #232]	; (8007b34 <ethernet_link_check_state+0x110>)
 8007a4c:	f7f9 fc13 	bl	8001276 <LAN8742_GetLinkState>
 8007a50:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007a58:	089b      	lsrs	r3, r3, #2
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00c      	beq.n	8007a7e <ethernet_link_check_state+0x5a>
 8007a64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	dc09      	bgt.n	8007a7e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8007a6a:	4833      	ldr	r0, [pc, #204]	; (8007b38 <ethernet_link_check_state+0x114>)
 8007a6c:	f7fa f808 	bl	8001a80 <HAL_ETH_Stop>
    netif_set_down(netif);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f005 faa5 	bl	800cfc0 <netif_set_down>
    netif_set_link_down(netif);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f005 fb0c 	bl	800d094 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8007a7c:	e055      	b.n	8007b2a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007a84:	f003 0304 	and.w	r3, r3, #4
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d14e      	bne.n	8007b2a <ethernet_link_check_state+0x106>
 8007a8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	dd4b      	ble.n	8007b2a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8007a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a94:	3b02      	subs	r3, #2
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d82a      	bhi.n	8007af0 <ethernet_link_check_state+0xcc>
 8007a9a:	a201      	add	r2, pc, #4	; (adr r2, 8007aa0 <ethernet_link_check_state+0x7c>)
 8007a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa0:	08007ab1 	.word	0x08007ab1
 8007aa4:	08007ac3 	.word	0x08007ac3
 8007aa8:	08007ad3 	.word	0x08007ad3
 8007aac:	08007ae3 	.word	0x08007ae3
      duplex = ETH_FULLDUPLEX_MODE;
 8007ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ab4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007ab6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007aba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007abc:	2301      	movs	r3, #1
 8007abe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007ac0:	e017      	b.n	8007af2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007ac6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007aca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007acc:	2301      	movs	r3, #1
 8007ace:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007ad0:	e00f      	b.n	8007af2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8007ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ad6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007adc:	2301      	movs	r3, #1
 8007ade:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007ae0:	e007      	b.n	8007af2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007aea:	2301      	movs	r3, #1
 8007aec:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007aee:	e000      	b.n	8007af2 <ethernet_link_check_state+0xce>
      break;
 8007af0:	bf00      	nop
    if(linkchanged)
 8007af2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d018      	beq.n	8007b2a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007af8:	f107 030c 	add.w	r3, r7, #12
 8007afc:	4619      	mov	r1, r3
 8007afe:	480e      	ldr	r0, [pc, #56]	; (8007b38 <ethernet_link_check_state+0x114>)
 8007b00:	f7fa fa7c 	bl	8001ffc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b06:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8007b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b0a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007b0c:	f107 030c 	add.w	r3, r7, #12
 8007b10:	4619      	mov	r1, r3
 8007b12:	4809      	ldr	r0, [pc, #36]	; (8007b38 <ethernet_link_check_state+0x114>)
 8007b14:	f7fa fc46 	bl	80023a4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8007b18:	4807      	ldr	r0, [pc, #28]	; (8007b38 <ethernet_link_check_state+0x114>)
 8007b1a:	f7f9 ff4f 	bl	80019bc <HAL_ETH_Start>
      netif_set_up(netif);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f005 f9e2 	bl	800cee8 <netif_set_up>
      netif_set_link_up(netif);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f005 fa7d 	bl	800d024 <netif_set_link_up>
}
 8007b2a:	bf00      	nop
 8007b2c:	3780      	adds	r7, #128	; 0x80
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	240051d0 	.word	0x240051d0
 8007b38:	240050e8 	.word	0x240050e8

08007b3c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007b44:	4812      	ldr	r0, [pc, #72]	; (8007b90 <HAL_ETH_RxAllocateCallback+0x54>)
 8007b46:	f004 ff41 	bl	800c9cc <memp_malloc_pool>
 8007b4a:	60f8      	str	r0, [r7, #12]
  if (p)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d014      	beq.n	8007b7c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f103 0220 	add.w	r2, r3, #32
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4a0d      	ldr	r2, [pc, #52]	; (8007b94 <HAL_ETH_RxAllocateCallback+0x58>)
 8007b60:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007b6a:	9201      	str	r2, [sp, #4]
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2241      	movs	r2, #65	; 0x41
 8007b72:	2100      	movs	r1, #0
 8007b74:	2000      	movs	r0, #0
 8007b76:	f005 fc63 	bl	800d440 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007b7a:	e005      	b.n	8007b88 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007b7c:	4b06      	ldr	r3, [pc, #24]	; (8007b98 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007b7e:	2201      	movs	r2, #1
 8007b80:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]
}
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	08017d8c 	.word	0x08017d8c
 8007b94:	08007769 	.word	0x08007769
 8007b98:	240050e4 	.word	0x240050e4

08007b9c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b08d      	sub	sp, #52	; 0x34
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3b20      	subs	r3, #32
 8007bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8007bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bca:	887a      	ldrh	r2, [r7, #2]
 8007bcc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d103      	bne.n	8007bde <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e003      	b.n	8007be6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007be4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bea:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bf2:	e009      	b.n	8007c08 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf6:	891a      	ldrh	r2, [r3, #8]
 8007bf8:	887b      	ldrh	r3, [r7, #2]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1f2      	bne.n	8007bf4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007c0e:	887b      	ldrh	r3, [r7, #2]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	623a      	str	r2, [r7, #32]
 8007c14:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dd1d      	ble.n	8007c58 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	f003 021f 	and.w	r2, r3, #31
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	4413      	add	r3, r2
 8007c26:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007c2c:	f3bf 8f4f 	dsb	sy
}
 8007c30:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8007c32:	4a0d      	ldr	r2, [pc, #52]	; (8007c68 <HAL_ETH_RxLinkCallback+0xcc>)
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	3320      	adds	r3, #32
 8007c3e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	3b20      	subs	r3, #32
 8007c44:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	dcf2      	bgt.n	8007c32 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8007c4c:	f3bf 8f4f 	dsb	sy
}
 8007c50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007c52:	f3bf 8f6f 	isb	sy
}
 8007c56:	bf00      	nop
}
 8007c58:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007c5a:	bf00      	nop
 8007c5c:	3734      	adds	r7, #52	; 0x34
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	e000ed00 	.word	0xe000ed00

08007c6c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	4603      	mov	r3, r0
 8007c74:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007c76:	88fb      	ldrh	r3, [r7, #6]
 8007c78:	021b      	lsls	r3, r3, #8
 8007c7a:	b21a      	sxth	r2, r3
 8007c7c:	88fb      	ldrh	r3, [r7, #6]
 8007c7e:	0a1b      	lsrs	r3, r3, #8
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	b21b      	sxth	r3, r3
 8007c84:	4313      	orrs	r3, r2
 8007c86:	b21b      	sxth	r3, r3
 8007c88:	b29b      	uxth	r3, r3
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	061a      	lsls	r2, r3, #24
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007caa:	431a      	orrs	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	0a1b      	lsrs	r3, r3, #8
 8007cb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007cb4:	431a      	orrs	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	0e1b      	lsrs	r3, r3, #24
 8007cba:	4313      	orrs	r3, r2
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8007ccc:	4b20      	ldr	r3, [pc, #128]	; (8007d50 <dhcp_inc_pcb_refcount+0x88>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d133      	bne.n	8007d3c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8007cd4:	4b1f      	ldr	r3, [pc, #124]	; (8007d54 <dhcp_inc_pcb_refcount+0x8c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d005      	beq.n	8007ce8 <dhcp_inc_pcb_refcount+0x20>
 8007cdc:	4b1e      	ldr	r3, [pc, #120]	; (8007d58 <dhcp_inc_pcb_refcount+0x90>)
 8007cde:	22e5      	movs	r2, #229	; 0xe5
 8007ce0:	491e      	ldr	r1, [pc, #120]	; (8007d5c <dhcp_inc_pcb_refcount+0x94>)
 8007ce2:	481f      	ldr	r0, [pc, #124]	; (8007d60 <dhcp_inc_pcb_refcount+0x98>)
 8007ce4:	f00b ff6e 	bl	8013bc4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8007ce8:	f00b feda 	bl	8013aa0 <udp_new>
 8007cec:	4603      	mov	r3, r0
 8007cee:	4a19      	ldr	r2, [pc, #100]	; (8007d54 <dhcp_inc_pcb_refcount+0x8c>)
 8007cf0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8007cf2:	4b18      	ldr	r3, [pc, #96]	; (8007d54 <dhcp_inc_pcb_refcount+0x8c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d102      	bne.n	8007d00 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8007cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfe:	e024      	b.n	8007d4a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8007d00:	4b14      	ldr	r3, [pc, #80]	; (8007d54 <dhcp_inc_pcb_refcount+0x8c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	7a5a      	ldrb	r2, [r3, #9]
 8007d06:	4b13      	ldr	r3, [pc, #76]	; (8007d54 <dhcp_inc_pcb_refcount+0x8c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f042 0220 	orr.w	r2, r2, #32
 8007d0e:	b2d2      	uxtb	r2, r2
 8007d10:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8007d12:	4b10      	ldr	r3, [pc, #64]	; (8007d54 <dhcp_inc_pcb_refcount+0x8c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2244      	movs	r2, #68	; 0x44
 8007d18:	4912      	ldr	r1, [pc, #72]	; (8007d64 <dhcp_inc_pcb_refcount+0x9c>)
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f00b fd68 	bl	80137f0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8007d20:	4b0c      	ldr	r3, [pc, #48]	; (8007d54 <dhcp_inc_pcb_refcount+0x8c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2243      	movs	r2, #67	; 0x43
 8007d26:	490f      	ldr	r1, [pc, #60]	; (8007d64 <dhcp_inc_pcb_refcount+0x9c>)
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f00b fde9 	bl	8013900 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8007d2e:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <dhcp_inc_pcb_refcount+0x8c>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2200      	movs	r2, #0
 8007d34:	490c      	ldr	r1, [pc, #48]	; (8007d68 <dhcp_inc_pcb_refcount+0xa0>)
 8007d36:	4618      	mov	r0, r3
 8007d38:	f00b fe50 	bl	80139dc <udp_recv>
  }

  dhcp_pcb_refcount++;
 8007d3c:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <dhcp_inc_pcb_refcount+0x88>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	3301      	adds	r3, #1
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	4b02      	ldr	r3, [pc, #8]	; (8007d50 <dhcp_inc_pcb_refcount+0x88>)
 8007d46:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	2400521c 	.word	0x2400521c
 8007d54:	24005218 	.word	0x24005218
 8007d58:	08014cd0 	.word	0x08014cd0
 8007d5c:	08014d40 	.word	0x08014d40
 8007d60:	08014d68 	.word	0x08014d68
 8007d64:	08017da8 	.word	0x08017da8
 8007d68:	08009601 	.word	0x08009601

08007d6c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8007d70:	4b0e      	ldr	r3, [pc, #56]	; (8007dac <dhcp_dec_pcb_refcount+0x40>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d105      	bne.n	8007d84 <dhcp_dec_pcb_refcount+0x18>
 8007d78:	4b0d      	ldr	r3, [pc, #52]	; (8007db0 <dhcp_dec_pcb_refcount+0x44>)
 8007d7a:	22ff      	movs	r2, #255	; 0xff
 8007d7c:	490d      	ldr	r1, [pc, #52]	; (8007db4 <dhcp_dec_pcb_refcount+0x48>)
 8007d7e:	480e      	ldr	r0, [pc, #56]	; (8007db8 <dhcp_dec_pcb_refcount+0x4c>)
 8007d80:	f00b ff20 	bl	8013bc4 <iprintf>
  dhcp_pcb_refcount--;
 8007d84:	4b09      	ldr	r3, [pc, #36]	; (8007dac <dhcp_dec_pcb_refcount+0x40>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	4b07      	ldr	r3, [pc, #28]	; (8007dac <dhcp_dec_pcb_refcount+0x40>)
 8007d8e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8007d90:	4b06      	ldr	r3, [pc, #24]	; (8007dac <dhcp_dec_pcb_refcount+0x40>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d107      	bne.n	8007da8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8007d98:	4b08      	ldr	r3, [pc, #32]	; (8007dbc <dhcp_dec_pcb_refcount+0x50>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f00b fe3d 	bl	8013a1c <udp_remove>
    dhcp_pcb = NULL;
 8007da2:	4b06      	ldr	r3, [pc, #24]	; (8007dbc <dhcp_dec_pcb_refcount+0x50>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	601a      	str	r2, [r3, #0]
  }
}
 8007da8:	bf00      	nop
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	2400521c 	.word	0x2400521c
 8007db0:	08014cd0 	.word	0x08014cd0
 8007db4:	08014d90 	.word	0x08014d90
 8007db8:	08014d68 	.word	0x08014d68
 8007dbc:	24005218 	.word	0x24005218

08007dc0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8007dce:	210c      	movs	r1, #12
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f001 f857 	bl	8008e84 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8007dd6:	4b06      	ldr	r3, [pc, #24]	; (8007df0 <dhcp_handle_nak+0x30>)
 8007dd8:	4a05      	ldr	r2, [pc, #20]	; (8007df0 <dhcp_handle_nak+0x30>)
 8007dda:	4905      	ldr	r1, [pc, #20]	; (8007df0 <dhcp_handle_nak+0x30>)
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f005 f829 	bl	800ce34 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fc4a 	bl	800867c <dhcp_discover>
}
 8007de8:	bf00      	nop
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	08017da8 	.word	0x08017da8

08007df4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8007e02:	2108      	movs	r1, #8
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f001 f83d 	bl	8008e84 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	331c      	adds	r3, #28
 8007e0e:	2200      	movs	r2, #0
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f002 fb3e 	bl	800a494 <etharp_query>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	799b      	ldrb	r3, [r3, #6]
 8007e20:	2bff      	cmp	r3, #255	; 0xff
 8007e22:	d005      	beq.n	8007e30 <dhcp_check+0x3c>
    dhcp->tries++;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	799b      	ldrb	r3, [r3, #6]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8007e30:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007e34:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8007e36:	893b      	ldrh	r3, [r7, #8]
 8007e38:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8007e3c:	4a06      	ldr	r2, [pc, #24]	; (8007e58 <dhcp_check+0x64>)
 8007e3e:	fb82 1203 	smull	r1, r2, r2, r3
 8007e42:	1152      	asrs	r2, r2, #5
 8007e44:	17db      	asrs	r3, r3, #31
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	10624dd3 	.word	0x10624dd3

08007e5c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8007e6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ea0 <dhcp_handle_offer+0x44>)
 8007e6e:	789b      	ldrb	r3, [r3, #2]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d011      	beq.n	8007e98 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8007e7a:	4b0a      	ldr	r3, [pc, #40]	; (8007ea4 <dhcp_handle_offer+0x48>)
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7ff ff09 	bl	8007c96 <lwip_htonl>
 8007e84:	4602      	mov	r2, r0
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	691a      	ldr	r2, [r3, #16]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f808 	bl	8007ea8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8007e98:	bf00      	nop
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	24005210 	.word	0x24005210
 8007ea4:	240051f0 	.word	0x240051f0

08007ea8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8007ea8:	b5b0      	push	{r4, r5, r7, lr}
 8007eaa:	b08a      	sub	sp, #40	; 0x28
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d109      	bne.n	8007eca <dhcp_select+0x22>
 8007eb6:	4b71      	ldr	r3, [pc, #452]	; (800807c <dhcp_select+0x1d4>)
 8007eb8:	f240 1277 	movw	r2, #375	; 0x177
 8007ebc:	4970      	ldr	r1, [pc, #448]	; (8008080 <dhcp_select+0x1d8>)
 8007ebe:	4871      	ldr	r0, [pc, #452]	; (8008084 <dhcp_select+0x1dc>)
 8007ec0:	f00b fe80 	bl	8013bc4 <iprintf>
 8007ec4:	f06f 030f 	mvn.w	r3, #15
 8007ec8:	e0d3      	b.n	8008072 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d109      	bne.n	8007eea <dhcp_select+0x42>
 8007ed6:	4b69      	ldr	r3, [pc, #420]	; (800807c <dhcp_select+0x1d4>)
 8007ed8:	f240 1279 	movw	r2, #377	; 0x179
 8007edc:	496a      	ldr	r1, [pc, #424]	; (8008088 <dhcp_select+0x1e0>)
 8007ede:	4869      	ldr	r0, [pc, #420]	; (8008084 <dhcp_select+0x1dc>)
 8007ee0:	f00b fe70 	bl	8013bc4 <iprintf>
 8007ee4:	f06f 0305 	mvn.w	r3, #5
 8007ee8:	e0c3      	b.n	8008072 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8007eea:	2101      	movs	r1, #1
 8007eec:	69b8      	ldr	r0, [r7, #24]
 8007eee:	f000 ffc9 	bl	8008e84 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8007ef2:	f107 030c 	add.w	r3, r7, #12
 8007ef6:	2203      	movs	r2, #3
 8007ef8:	69b9      	ldr	r1, [r7, #24]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f001 fc4e 	bl	800979c <dhcp_create_msg>
 8007f00:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 8085 	beq.w	8008014 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007f10:	89b8      	ldrh	r0, [r7, #12]
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8007f18:	2302      	movs	r3, #2
 8007f1a:	2239      	movs	r2, #57	; 0x39
 8007f1c:	f000 ffcc 	bl	8008eb8 <dhcp_option>
 8007f20:	4603      	mov	r3, r0
 8007f22:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8007f24:	89b8      	ldrh	r0, [r7, #12]
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f30:	461a      	mov	r2, r3
 8007f32:	f001 f81b 	bl	8008f6c <dhcp_option_short>
 8007f36:	4603      	mov	r3, r0
 8007f38:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8007f3a:	89b8      	ldrh	r0, [r7, #12]
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8007f42:	2304      	movs	r3, #4
 8007f44:	2232      	movs	r2, #50	; 0x32
 8007f46:	f000 ffb7 	bl	8008eb8 <dhcp_option>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8007f4e:	89bc      	ldrh	r4, [r7, #12]
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff fe9b 	bl	8007c96 <lwip_htonl>
 8007f60:	4603      	mov	r3, r0
 8007f62:	461a      	mov	r2, r3
 8007f64:	4629      	mov	r1, r5
 8007f66:	4620      	mov	r0, r4
 8007f68:	f001 f832 	bl	8008fd0 <dhcp_option_long>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8007f70:	89b8      	ldrh	r0, [r7, #12]
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8007f78:	2304      	movs	r3, #4
 8007f7a:	2236      	movs	r2, #54	; 0x36
 8007f7c:	f000 ff9c 	bl	8008eb8 <dhcp_option>
 8007f80:	4603      	mov	r3, r0
 8007f82:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8007f84:	89bc      	ldrh	r4, [r7, #12]
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7ff fe80 	bl	8007c96 <lwip_htonl>
 8007f96:	4603      	mov	r3, r0
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f001 f817 	bl	8008fd0 <dhcp_option_long>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8007fa6:	89b8      	ldrh	r0, [r7, #12]
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8007fae:	2303      	movs	r3, #3
 8007fb0:	2237      	movs	r2, #55	; 0x37
 8007fb2:	f000 ff81 	bl	8008eb8 <dhcp_option>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007fba:	2300      	movs	r3, #0
 8007fbc:	77bb      	strb	r3, [r7, #30]
 8007fbe:	e00e      	b.n	8007fde <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007fc0:	89b8      	ldrh	r0, [r7, #12]
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8007fc8:	7fbb      	ldrb	r3, [r7, #30]
 8007fca:	4a30      	ldr	r2, [pc, #192]	; (800808c <dhcp_select+0x1e4>)
 8007fcc:	5cd3      	ldrb	r3, [r2, r3]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f000 ffa6 	bl	8008f20 <dhcp_option_byte>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8007fd8:	7fbb      	ldrb	r3, [r7, #30]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	77bb      	strb	r3, [r7, #30]
 8007fde:	7fbb      	ldrb	r3, [r7, #30]
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d9ed      	bls.n	8007fc0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8007fe4:	89b8      	ldrh	r0, [r7, #12]
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	33f0      	adds	r3, #240	; 0xf0
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	4619      	mov	r1, r3
 8007fee:	f001 fcab 	bl	8009948 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8007ff2:	4b27      	ldr	r3, [pc, #156]	; (8008090 <dhcp_select+0x1e8>)
 8007ff4:	6818      	ldr	r0, [r3, #0]
 8007ff6:	4b27      	ldr	r3, [pc, #156]	; (8008094 <dhcp_select+0x1ec>)
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	2343      	movs	r3, #67	; 0x43
 8008000:	4a25      	ldr	r2, [pc, #148]	; (8008098 <dhcp_select+0x1f0>)
 8008002:	6979      	ldr	r1, [r7, #20]
 8008004:	f00b fb0e 	bl	8013624 <udp_sendto_if_src>
 8008008:	4603      	mov	r3, r0
 800800a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800800c:	6978      	ldr	r0, [r7, #20]
 800800e:	f005 fbd1 	bl	800d7b4 <pbuf_free>
 8008012:	e001      	b.n	8008018 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8008014:	23ff      	movs	r3, #255	; 0xff
 8008016:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	799b      	ldrb	r3, [r3, #6]
 800801c:	2bff      	cmp	r3, #255	; 0xff
 800801e:	d005      	beq.n	800802c <dhcp_select+0x184>
    dhcp->tries++;
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	799b      	ldrb	r3, [r3, #6]
 8008024:	3301      	adds	r3, #1
 8008026:	b2da      	uxtb	r2, r3
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	799b      	ldrb	r3, [r3, #6]
 8008030:	2b05      	cmp	r3, #5
 8008032:	d80d      	bhi.n	8008050 <dhcp_select+0x1a8>
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	799b      	ldrb	r3, [r3, #6]
 8008038:	461a      	mov	r2, r3
 800803a:	2301      	movs	r3, #1
 800803c:	4093      	lsls	r3, r2
 800803e:	b29b      	uxth	r3, r3
 8008040:	461a      	mov	r2, r3
 8008042:	0152      	lsls	r2, r2, #5
 8008044:	1ad2      	subs	r2, r2, r3
 8008046:	0092      	lsls	r2, r2, #2
 8008048:	4413      	add	r3, r2
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	b29b      	uxth	r3, r3
 800804e:	e001      	b.n	8008054 <dhcp_select+0x1ac>
 8008050:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008054:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008056:	89fb      	ldrh	r3, [r7, #14]
 8008058:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800805c:	4a0f      	ldr	r2, [pc, #60]	; (800809c <dhcp_select+0x1f4>)
 800805e:	fb82 1203 	smull	r1, r2, r2, r3
 8008062:	1152      	asrs	r2, r2, #5
 8008064:	17db      	asrs	r3, r3, #31
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	b29a      	uxth	r2, r3
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800806e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3720      	adds	r7, #32
 8008076:	46bd      	mov	sp, r7
 8008078:	bdb0      	pop	{r4, r5, r7, pc}
 800807a:	bf00      	nop
 800807c:	08014cd0 	.word	0x08014cd0
 8008080:	08014db4 	.word	0x08014db4
 8008084:	08014d68 	.word	0x08014d68
 8008088:	08014dd0 	.word	0x08014dd0
 800808c:	24000024 	.word	0x24000024
 8008090:	24005218 	.word	0x24005218
 8008094:	08017da8 	.word	0x08017da8
 8008098:	08017dac 	.word	0x08017dac
 800809c:	10624dd3 	.word	0x10624dd3

080080a0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80080a6:	4b27      	ldr	r3, [pc, #156]	; (8008144 <dhcp_coarse_tmr+0xa4>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	607b      	str	r3, [r7, #4]
 80080ac:	e042      	b.n	8008134 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d039      	beq.n	800812e <dhcp_coarse_tmr+0x8e>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	795b      	ldrb	r3, [r3, #5]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d035      	beq.n	800812e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	8a9b      	ldrh	r3, [r3, #20]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d012      	beq.n	80080f0 <dhcp_coarse_tmr+0x50>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	8a5b      	ldrh	r3, [r3, #18]
 80080ce:	3301      	adds	r3, #1
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	825a      	strh	r2, [r3, #18]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	8a5a      	ldrh	r2, [r3, #18]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	8a9b      	ldrh	r3, [r3, #20]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d106      	bne.n	80080f0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fe34 	bl	8008d50 <dhcp_release_and_stop>
        dhcp_start(netif);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f96b 	bl	80083c4 <dhcp_start>
 80080ee:	e01e      	b.n	800812e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	8a1b      	ldrh	r3, [r3, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00b      	beq.n	8008110 <dhcp_coarse_tmr+0x70>
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	8a1b      	ldrh	r3, [r3, #16]
 80080fc:	1e5a      	subs	r2, r3, #1
 80080fe:	b291      	uxth	r1, r2
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	8211      	strh	r1, [r2, #16]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d103      	bne.n	8008110 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f8c7 	bl	800829c <dhcp_t2_timeout>
 800810e:	e00e      	b.n	800812e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	89db      	ldrh	r3, [r3, #14]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00a      	beq.n	800812e <dhcp_coarse_tmr+0x8e>
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	89db      	ldrh	r3, [r3, #14]
 800811c:	1e5a      	subs	r2, r3, #1
 800811e:	b291      	uxth	r1, r2
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	81d1      	strh	r1, [r2, #14]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d102      	bne.n	800812e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f888 	bl	800823e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	607b      	str	r3, [r7, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1b9      	bne.n	80080ae <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800813a:	bf00      	nop
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	24008254 	.word	0x24008254

08008148 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800814e:	4b16      	ldr	r3, [pc, #88]	; (80081a8 <dhcp_fine_tmr+0x60>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	607b      	str	r3, [r7, #4]
 8008154:	e020      	b.n	8008198 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d017      	beq.n	8008192 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	891b      	ldrh	r3, [r3, #8]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d906      	bls.n	8008178 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	891b      	ldrh	r3, [r3, #8]
 800816e:	3b01      	subs	r3, #1
 8008170:	b29a      	uxth	r2, r3
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	811a      	strh	r2, [r3, #8]
 8008176:	e00c      	b.n	8008192 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	891b      	ldrh	r3, [r3, #8]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d108      	bne.n	8008192 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	891b      	ldrh	r3, [r3, #8]
 8008184:	3b01      	subs	r3, #1
 8008186:	b29a      	uxth	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f80d 	bl	80081ac <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	607b      	str	r3, [r7, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1db      	bne.n	8008156 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800819e:	bf00      	nop
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	24008254 	.word	0x24008254

080081ac <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	795b      	ldrb	r3, [r3, #5]
 80081be:	2b0c      	cmp	r3, #12
 80081c0:	d003      	beq.n	80081ca <dhcp_timeout+0x1e>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	795b      	ldrb	r3, [r3, #5]
 80081c6:	2b06      	cmp	r3, #6
 80081c8:	d103      	bne.n	80081d2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa56 	bl	800867c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80081d0:	e031      	b.n	8008236 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	795b      	ldrb	r3, [r3, #5]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d10e      	bne.n	80081f8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	799b      	ldrb	r3, [r3, #6]
 80081de:	2b05      	cmp	r3, #5
 80081e0:	d803      	bhi.n	80081ea <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff fe60 	bl	8007ea8 <dhcp_select>
}
 80081e8:	e025      	b.n	8008236 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fdb0 	bl	8008d50 <dhcp_release_and_stop>
      dhcp_start(netif);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f8e7 	bl	80083c4 <dhcp_start>
}
 80081f6:	e01e      	b.n	8008236 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	795b      	ldrb	r3, [r3, #5]
 80081fc:	2b08      	cmp	r3, #8
 80081fe:	d10b      	bne.n	8008218 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	799b      	ldrb	r3, [r3, #6]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d803      	bhi.n	8008210 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff fdf3 	bl	8007df4 <dhcp_check>
}
 800820e:	e012      	b.n	8008236 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fad5 	bl	80087c0 <dhcp_bind>
}
 8008216:	e00e      	b.n	8008236 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	795b      	ldrb	r3, [r3, #5]
 800821c:	2b03      	cmp	r3, #3
 800821e:	d10a      	bne.n	8008236 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	799b      	ldrb	r3, [r3, #6]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d803      	bhi.n	8008230 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fcdb 	bl	8008be4 <dhcp_reboot>
}
 800822e:	e002      	b.n	8008236 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fa23 	bl	800867c <dhcp_discover>
}
 8008236:	bf00      	nop
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	795b      	ldrb	r3, [r3, #5]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d007      	beq.n	8008264 <dhcp_t1_timeout+0x26>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	795b      	ldrb	r3, [r3, #5]
 8008258:	2b0a      	cmp	r3, #10
 800825a:	d003      	beq.n	8008264 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8008260:	2b05      	cmp	r3, #5
 8008262:	d117      	bne.n	8008294 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fb85 	bl	8008974 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	899b      	ldrh	r3, [r3, #12]
 800826e:	461a      	mov	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	8a5b      	ldrh	r3, [r3, #18]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b01      	cmp	r3, #1
 8008278:	dd0c      	ble.n	8008294 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	899b      	ldrh	r3, [r3, #12]
 800827e:	461a      	mov	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	8a5b      	ldrh	r3, [r3, #18]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	da00      	bge.n	800828c <dhcp_t1_timeout+0x4e>
 800828a:	3301      	adds	r3, #1
 800828c:	105b      	asrs	r3, r3, #1
 800828e:	b29a      	uxth	r2, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8008294:	bf00      	nop
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	795b      	ldrb	r3, [r3, #5]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d00b      	beq.n	80082ca <dhcp_t2_timeout+0x2e>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	795b      	ldrb	r3, [r3, #5]
 80082b6:	2b0a      	cmp	r3, #10
 80082b8:	d007      	beq.n	80082ca <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80082be:	2b05      	cmp	r3, #5
 80082c0:	d003      	beq.n	80082ca <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	795b      	ldrb	r3, [r3, #5]
 80082c6:	2b04      	cmp	r3, #4
 80082c8:	d117      	bne.n	80082fa <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fbee 	bl	8008aac <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	8a9b      	ldrh	r3, [r3, #20]
 80082d4:	461a      	mov	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	8a5b      	ldrh	r3, [r3, #18]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b01      	cmp	r3, #1
 80082de:	dd0c      	ble.n	80082fa <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8a9b      	ldrh	r3, [r3, #20]
 80082e4:	461a      	mov	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	8a5b      	ldrh	r3, [r3, #18]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	da00      	bge.n	80082f2 <dhcp_t2_timeout+0x56>
 80082f0:	3301      	adds	r3, #1
 80082f2:	105b      	asrs	r3, r3, #1
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80082fa:	bf00      	nop
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8008320:	4b26      	ldr	r3, [pc, #152]	; (80083bc <dhcp_handle_ack+0xb8>)
 8008322:	78db      	ldrb	r3, [r3, #3]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8008328:	4b25      	ldr	r3, [pc, #148]	; (80083c0 <dhcp_handle_ack+0xbc>)
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8008330:	4b22      	ldr	r3, [pc, #136]	; (80083bc <dhcp_handle_ack+0xb8>)
 8008332:	791b      	ldrb	r3, [r3, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d004      	beq.n	8008342 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8008338:	4b21      	ldr	r3, [pc, #132]	; (80083c0 <dhcp_handle_ack+0xbc>)
 800833a:	691a      	ldr	r2, [r3, #16]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008340:	e004      	b.n	800834c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008346:	085a      	lsrs	r2, r3, #1
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800834c:	4b1b      	ldr	r3, [pc, #108]	; (80083bc <dhcp_handle_ack+0xb8>)
 800834e:	795b      	ldrb	r3, [r3, #5]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d004      	beq.n	800835e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8008354:	4b1a      	ldr	r3, [pc, #104]	; (80083c0 <dhcp_handle_ack+0xbc>)
 8008356:	695a      	ldr	r2, [r3, #20]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	631a      	str	r2, [r3, #48]	; 0x30
 800835c:	e007      	b.n	800836e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008362:	4613      	mov	r3, r2
 8008364:	00db      	lsls	r3, r3, #3
 8008366:	1a9b      	subs	r3, r3, r2
 8008368:	08da      	lsrs	r2, r3, #3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	691a      	ldr	r2, [r3, #16]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8008376:	4b11      	ldr	r3, [pc, #68]	; (80083bc <dhcp_handle_ack+0xb8>)
 8008378:	799b      	ldrb	r3, [r3, #6]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00b      	beq.n	8008396 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800837e:	4b10      	ldr	r3, [pc, #64]	; (80083c0 <dhcp_handle_ack+0xbc>)
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	4618      	mov	r0, r3
 8008384:	f7ff fc87 	bl	8007c96 <lwip_htonl>
 8008388:	4602      	mov	r2, r0
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	71da      	strb	r2, [r3, #7]
 8008394:	e002      	b.n	800839c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2200      	movs	r2, #0
 800839a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800839c:	4b07      	ldr	r3, [pc, #28]	; (80083bc <dhcp_handle_ack+0xb8>)
 800839e:	79db      	ldrb	r3, [r3, #7]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d007      	beq.n	80083b4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80083a4:	4b06      	ldr	r3, [pc, #24]	; (80083c0 <dhcp_handle_ack+0xbc>)
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7ff fc74 	bl	8007c96 <lwip_htonl>
 80083ae:	4602      	mov	r2, r0
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80083b4:	bf00      	nop
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	24005210 	.word	0x24005210
 80083c0:	240051f0 	.word	0x240051f0

080083c4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d109      	bne.n	80083e6 <dhcp_start+0x22>
 80083d2:	4b37      	ldr	r3, [pc, #220]	; (80084b0 <dhcp_start+0xec>)
 80083d4:	f240 22e7 	movw	r2, #743	; 0x2e7
 80083d8:	4936      	ldr	r1, [pc, #216]	; (80084b4 <dhcp_start+0xf0>)
 80083da:	4837      	ldr	r0, [pc, #220]	; (80084b8 <dhcp_start+0xf4>)
 80083dc:	f00b fbf2 	bl	8013bc4 <iprintf>
 80083e0:	f06f 030f 	mvn.w	r3, #15
 80083e4:	e060      	b.n	80084a8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d109      	bne.n	8008408 <dhcp_start+0x44>
 80083f4:	4b2e      	ldr	r3, [pc, #184]	; (80084b0 <dhcp_start+0xec>)
 80083f6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80083fa:	4930      	ldr	r1, [pc, #192]	; (80084bc <dhcp_start+0xf8>)
 80083fc:	482e      	ldr	r0, [pc, #184]	; (80084b8 <dhcp_start+0xf4>)
 80083fe:	f00b fbe1 	bl	8013bc4 <iprintf>
 8008402:	f06f 030f 	mvn.w	r3, #15
 8008406:	e04f      	b.n	80084a8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008412:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008416:	d202      	bcs.n	800841e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8008418:	f04f 33ff 	mov.w	r3, #4294967295
 800841c:	e044      	b.n	80084a8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10d      	bne.n	8008440 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8008424:	2034      	movs	r0, #52	; 0x34
 8008426:	f004 f963 	bl	800c6f0 <mem_malloc>
 800842a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d102      	bne.n	8008438 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8008432:	f04f 33ff 	mov.w	r3, #4294967295
 8008436:	e037      	b.n	80084a8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	625a      	str	r2, [r3, #36]	; 0x24
 800843e:	e005      	b.n	800844c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	791b      	ldrb	r3, [r3, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8008448:	f7ff fc90 	bl	8007d6c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800844c:	2234      	movs	r2, #52	; 0x34
 800844e:	2100      	movs	r1, #0
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f00b fbaf 	bl	8013bb4 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8008456:	f7ff fc37 	bl	8007cc8 <dhcp_inc_pcb_refcount>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <dhcp_start+0xa2>
    return ERR_MEM;
 8008460:	f04f 33ff 	mov.w	r3, #4294967295
 8008464:	e020      	b.n	80084a8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2201      	movs	r2, #1
 800846a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008472:	f003 0304 	and.w	r3, r3, #4
 8008476:	2b00      	cmp	r3, #0
 8008478:	d105      	bne.n	8008486 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800847a:	2102      	movs	r1, #2
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 fd01 	bl	8008e84 <dhcp_set_state>
    return ERR_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	e010      	b.n	80084a8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f8f8 	bl	800867c <dhcp_discover>
 800848c:	4603      	mov	r3, r0
 800848e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8008490:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d005      	beq.n	80084a4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fc59 	bl	8008d50 <dhcp_release_and_stop>
    return ERR_MEM;
 800849e:	f04f 33ff 	mov.w	r3, #4294967295
 80084a2:	e001      	b.n	80084a8 <dhcp_start+0xe4>
  }
  return result;
 80084a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	08014cd0 	.word	0x08014cd0
 80084b4:	08014dec 	.word	0x08014dec
 80084b8:	08014d68 	.word	0x08014d68
 80084bc:	08014e30 	.word	0x08014e30

080084c0 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084cc:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d025      	beq.n	8008520 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	795b      	ldrb	r3, [r3, #5]
 80084d8:	2b0a      	cmp	r3, #10
 80084da:	d008      	beq.n	80084ee <dhcp_network_changed+0x2e>
 80084dc:	2b0a      	cmp	r3, #10
 80084de:	dc0d      	bgt.n	80084fc <dhcp_network_changed+0x3c>
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d01f      	beq.n	8008524 <dhcp_network_changed+0x64>
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	db09      	blt.n	80084fc <dhcp_network_changed+0x3c>
 80084e8:	3b03      	subs	r3, #3
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d806      	bhi.n	80084fc <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fb75 	bl	8008be4 <dhcp_reboot>
      break;
 80084fa:	e014      	b.n	8008526 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	795b      	ldrb	r3, [r3, #5]
 8008500:	2b0c      	cmp	r3, #12
 8008502:	d906      	bls.n	8008512 <dhcp_network_changed+0x52>
 8008504:	4b09      	ldr	r3, [pc, #36]	; (800852c <dhcp_network_changed+0x6c>)
 8008506:	f240 326d 	movw	r2, #877	; 0x36d
 800850a:	4909      	ldr	r1, [pc, #36]	; (8008530 <dhcp_network_changed+0x70>)
 800850c:	4809      	ldr	r0, [pc, #36]	; (8008534 <dhcp_network_changed+0x74>)
 800850e:	f00b fb59 	bl	8013bc4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f8af 	bl	800867c <dhcp_discover>
      break;
 800851e:	e002      	b.n	8008526 <dhcp_network_changed+0x66>
    return;
 8008520:	bf00      	nop
 8008522:	e000      	b.n	8008526 <dhcp_network_changed+0x66>
      break;
 8008524:	bf00      	nop
  }
}
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	08014cd0 	.word	0x08014cd0
 8008530:	08014e54 	.word	0x08014e54
 8008534:	08014d68 	.word	0x08014d68

08008538 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d107      	bne.n	8008558 <dhcp_arp_reply+0x20>
 8008548:	4b0e      	ldr	r3, [pc, #56]	; (8008584 <dhcp_arp_reply+0x4c>)
 800854a:	f240 328b 	movw	r2, #907	; 0x38b
 800854e:	490e      	ldr	r1, [pc, #56]	; (8008588 <dhcp_arp_reply+0x50>)
 8008550:	480e      	ldr	r0, [pc, #56]	; (800858c <dhcp_arp_reply+0x54>)
 8008552:	f00b fb37 	bl	8013bc4 <iprintf>
 8008556:	e012      	b.n	800857e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00c      	beq.n	800857e <dhcp_arp_reply+0x46>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	795b      	ldrb	r3, [r3, #5]
 8008568:	2b08      	cmp	r3, #8
 800856a:	d108      	bne.n	800857e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	429a      	cmp	r2, r3
 8008576:	d102      	bne.n	800857e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f809 	bl	8008590 <dhcp_decline>
    }
  }
}
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	08014cd0 	.word	0x08014cd0
 8008588:	08014dec 	.word	0x08014dec
 800858c:	08014d68 	.word	0x08014d68

08008590 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8008590:	b5b0      	push	{r4, r5, r7, lr}
 8008592:	b08a      	sub	sp, #40	; 0x28
 8008594:	af02      	add	r7, sp, #8
 8008596:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800859e:	210c      	movs	r1, #12
 80085a0:	69b8      	ldr	r0, [r7, #24]
 80085a2:	f000 fc6f 	bl	8008e84 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80085a6:	f107 030c 	add.w	r3, r7, #12
 80085aa:	2204      	movs	r2, #4
 80085ac:	69b9      	ldr	r1, [r7, #24]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f001 f8f4 	bl	800979c <dhcp_create_msg>
 80085b4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d035      	beq.n	8008628 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80085c2:	89b8      	ldrh	r0, [r7, #12]
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80085ca:	2304      	movs	r3, #4
 80085cc:	2232      	movs	r2, #50	; 0x32
 80085ce:	f000 fc73 	bl	8008eb8 <dhcp_option>
 80085d2:	4603      	mov	r3, r0
 80085d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80085d6:	89bc      	ldrh	r4, [r7, #12]
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7ff fb57 	bl	8007c96 <lwip_htonl>
 80085e8:	4603      	mov	r3, r0
 80085ea:	461a      	mov	r2, r3
 80085ec:	4629      	mov	r1, r5
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 fcee 	bl	8008fd0 <dhcp_option_long>
 80085f4:	4603      	mov	r3, r0
 80085f6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80085f8:	89b8      	ldrh	r0, [r7, #12]
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	33f0      	adds	r3, #240	; 0xf0
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	4619      	mov	r1, r3
 8008602:	f001 f9a1 	bl	8009948 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8008606:	4b19      	ldr	r3, [pc, #100]	; (800866c <dhcp_decline+0xdc>)
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	4b19      	ldr	r3, [pc, #100]	; (8008670 <dhcp_decline+0xe0>)
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	2343      	movs	r3, #67	; 0x43
 8008614:	4a17      	ldr	r2, [pc, #92]	; (8008674 <dhcp_decline+0xe4>)
 8008616:	6979      	ldr	r1, [r7, #20]
 8008618:	f00b f804 	bl	8013624 <udp_sendto_if_src>
 800861c:	4603      	mov	r3, r0
 800861e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8008620:	6978      	ldr	r0, [r7, #20]
 8008622:	f005 f8c7 	bl	800d7b4 <pbuf_free>
 8008626:	e001      	b.n	800862c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8008628:	23ff      	movs	r3, #255	; 0xff
 800862a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	799b      	ldrb	r3, [r3, #6]
 8008630:	2bff      	cmp	r3, #255	; 0xff
 8008632:	d005      	beq.n	8008640 <dhcp_decline+0xb0>
    dhcp->tries++;
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	799b      	ldrb	r3, [r3, #6]
 8008638:	3301      	adds	r3, #1
 800863a:	b2da      	uxtb	r2, r3
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8008640:	f242 7310 	movw	r3, #10000	; 0x2710
 8008644:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008646:	89fb      	ldrh	r3, [r7, #14]
 8008648:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800864c:	4a0a      	ldr	r2, [pc, #40]	; (8008678 <dhcp_decline+0xe8>)
 800864e:	fb82 1203 	smull	r1, r2, r2, r3
 8008652:	1152      	asrs	r2, r2, #5
 8008654:	17db      	asrs	r3, r3, #31
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	b29a      	uxth	r2, r3
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800865e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3720      	adds	r7, #32
 8008666:	46bd      	mov	sp, r7
 8008668:	bdb0      	pop	{r4, r5, r7, pc}
 800866a:	bf00      	nop
 800866c:	24005218 	.word	0x24005218
 8008670:	08017da8 	.word	0x08017da8
 8008674:	08017dac 	.word	0x08017dac
 8008678:	10624dd3 	.word	0x10624dd3

0800867c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08a      	sub	sp, #40	; 0x28
 8008680:	af02      	add	r7, sp, #8
 8008682:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800868a:	2300      	movs	r3, #0
 800868c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	2200      	movs	r2, #0
 8008692:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8008694:	2106      	movs	r1, #6
 8008696:	69b8      	ldr	r0, [r7, #24]
 8008698:	f000 fbf4 	bl	8008e84 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800869c:	f107 0308 	add.w	r3, r7, #8
 80086a0:	2201      	movs	r2, #1
 80086a2:	69b9      	ldr	r1, [r7, #24]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 f879 	bl	800979c <dhcp_create_msg>
 80086aa:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d04b      	beq.n	800874a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80086b8:	8938      	ldrh	r0, [r7, #8]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80086c0:	2302      	movs	r3, #2
 80086c2:	2239      	movs	r2, #57	; 0x39
 80086c4:	f000 fbf8 	bl	8008eb8 <dhcp_option>
 80086c8:	4603      	mov	r3, r0
 80086ca:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80086cc:	8938      	ldrh	r0, [r7, #8]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086d8:	461a      	mov	r2, r3
 80086da:	f000 fc47 	bl	8008f6c <dhcp_option_short>
 80086de:	4603      	mov	r3, r0
 80086e0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80086e2:	8938      	ldrh	r0, [r7, #8]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80086ea:	2303      	movs	r3, #3
 80086ec:	2237      	movs	r2, #55	; 0x37
 80086ee:	f000 fbe3 	bl	8008eb8 <dhcp_option>
 80086f2:	4603      	mov	r3, r0
 80086f4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80086f6:	2300      	movs	r3, #0
 80086f8:	77fb      	strb	r3, [r7, #31]
 80086fa:	e00e      	b.n	800871a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80086fc:	8938      	ldrh	r0, [r7, #8]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008704:	7ffb      	ldrb	r3, [r7, #31]
 8008706:	4a29      	ldr	r2, [pc, #164]	; (80087ac <dhcp_discover+0x130>)
 8008708:	5cd3      	ldrb	r3, [r2, r3]
 800870a:	461a      	mov	r2, r3
 800870c:	f000 fc08 	bl	8008f20 <dhcp_option_byte>
 8008710:	4603      	mov	r3, r0
 8008712:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008714:	7ffb      	ldrb	r3, [r7, #31]
 8008716:	3301      	adds	r3, #1
 8008718:	77fb      	strb	r3, [r7, #31]
 800871a:	7ffb      	ldrb	r3, [r7, #31]
 800871c:	2b02      	cmp	r3, #2
 800871e:	d9ed      	bls.n	80086fc <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008720:	8938      	ldrh	r0, [r7, #8]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	33f0      	adds	r3, #240	; 0xf0
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	4619      	mov	r1, r3
 800872a:	f001 f90d 	bl	8009948 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800872e:	4b20      	ldr	r3, [pc, #128]	; (80087b0 <dhcp_discover+0x134>)
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	4b20      	ldr	r3, [pc, #128]	; (80087b4 <dhcp_discover+0x138>)
 8008734:	9301      	str	r3, [sp, #4]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	2343      	movs	r3, #67	; 0x43
 800873c:	4a1e      	ldr	r2, [pc, #120]	; (80087b8 <dhcp_discover+0x13c>)
 800873e:	6939      	ldr	r1, [r7, #16]
 8008740:	f00a ff70 	bl	8013624 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8008744:	6938      	ldr	r0, [r7, #16]
 8008746:	f005 f835 	bl	800d7b4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	799b      	ldrb	r3, [r3, #6]
 800874e:	2bff      	cmp	r3, #255	; 0xff
 8008750:	d005      	beq.n	800875e <dhcp_discover+0xe2>
    dhcp->tries++;
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	799b      	ldrb	r3, [r3, #6]
 8008756:	3301      	adds	r3, #1
 8008758:	b2da      	uxtb	r2, r3
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	799b      	ldrb	r3, [r3, #6]
 8008762:	2b05      	cmp	r3, #5
 8008764:	d80d      	bhi.n	8008782 <dhcp_discover+0x106>
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	799b      	ldrb	r3, [r3, #6]
 800876a:	461a      	mov	r2, r3
 800876c:	2301      	movs	r3, #1
 800876e:	4093      	lsls	r3, r2
 8008770:	b29b      	uxth	r3, r3
 8008772:	461a      	mov	r2, r3
 8008774:	0152      	lsls	r2, r2, #5
 8008776:	1ad2      	subs	r2, r2, r3
 8008778:	0092      	lsls	r2, r2, #2
 800877a:	4413      	add	r3, r2
 800877c:	00db      	lsls	r3, r3, #3
 800877e:	b29b      	uxth	r3, r3
 8008780:	e001      	b.n	8008786 <dhcp_discover+0x10a>
 8008782:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008786:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008788:	897b      	ldrh	r3, [r7, #10]
 800878a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800878e:	4a0b      	ldr	r2, [pc, #44]	; (80087bc <dhcp_discover+0x140>)
 8008790:	fb82 1203 	smull	r1, r2, r2, r3
 8008794:	1152      	asrs	r2, r2, #5
 8008796:	17db      	asrs	r3, r3, #31
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	b29a      	uxth	r2, r3
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80087a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3720      	adds	r7, #32
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	24000024 	.word	0x24000024
 80087b0:	24005218 	.word	0x24005218
 80087b4:	08017da8 	.word	0x08017da8
 80087b8:	08017dac 	.word	0x08017dac
 80087bc:	10624dd3 	.word	0x10624dd3

080087c0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d107      	bne.n	80087de <dhcp_bind+0x1e>
 80087ce:	4b64      	ldr	r3, [pc, #400]	; (8008960 <dhcp_bind+0x1a0>)
 80087d0:	f240 4215 	movw	r2, #1045	; 0x415
 80087d4:	4963      	ldr	r1, [pc, #396]	; (8008964 <dhcp_bind+0x1a4>)
 80087d6:	4864      	ldr	r0, [pc, #400]	; (8008968 <dhcp_bind+0x1a8>)
 80087d8:	f00b f9f4 	bl	8013bc4 <iprintf>
 80087dc:	e0bc      	b.n	8008958 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d107      	bne.n	80087fa <dhcp_bind+0x3a>
 80087ea:	4b5d      	ldr	r3, [pc, #372]	; (8008960 <dhcp_bind+0x1a0>)
 80087ec:	f240 4217 	movw	r2, #1047	; 0x417
 80087f0:	495e      	ldr	r1, [pc, #376]	; (800896c <dhcp_bind+0x1ac>)
 80087f2:	485d      	ldr	r0, [pc, #372]	; (8008968 <dhcp_bind+0x1a8>)
 80087f4:	f00b f9e6 	bl	8013bc4 <iprintf>
 80087f8:	e0ae      	b.n	8008958 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2200      	movs	r2, #0
 80087fe:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008808:	d019      	beq.n	800883e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880e:	331e      	adds	r3, #30
 8008810:	4a57      	ldr	r2, [pc, #348]	; (8008970 <dhcp_bind+0x1b0>)
 8008812:	fba2 2303 	umull	r2, r3, r2, r3
 8008816:	095b      	lsrs	r3, r3, #5
 8008818:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008820:	d302      	bcc.n	8008828 <dhcp_bind+0x68>
      timeout = 0xffff;
 8008822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008826:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	b29a      	uxth	r2, r3
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	8a9b      	ldrh	r3, [r3, #20]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d102      	bne.n	800883e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	2201      	movs	r2, #1
 800883c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008846:	d01d      	beq.n	8008884 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884c:	331e      	adds	r3, #30
 800884e:	4a48      	ldr	r2, [pc, #288]	; (8008970 <dhcp_bind+0x1b0>)
 8008850:	fba2 2303 	umull	r2, r3, r2, r3
 8008854:	095b      	lsrs	r3, r3, #5
 8008856:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800885e:	d302      	bcc.n	8008866 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8008860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008864:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	b29a      	uxth	r2, r3
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	895b      	ldrh	r3, [r3, #10]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d102      	bne.n	800887c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	2201      	movs	r2, #1
 800887a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	895a      	ldrh	r2, [r3, #10]
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888c:	d01d      	beq.n	80088ca <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008892:	331e      	adds	r3, #30
 8008894:	4a36      	ldr	r2, [pc, #216]	; (8008970 <dhcp_bind+0x1b0>)
 8008896:	fba2 2303 	umull	r2, r3, r2, r3
 800889a:	095b      	lsrs	r3, r3, #5
 800889c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088a4:	d302      	bcc.n	80088ac <dhcp_bind+0xec>
      timeout = 0xffff;
 80088a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088aa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	899b      	ldrh	r3, [r3, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d102      	bne.n	80088c2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	2201      	movs	r2, #1
 80088c0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	899a      	ldrh	r2, [r3, #12]
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	895a      	ldrh	r2, [r3, #10]
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	899b      	ldrh	r3, [r3, #12]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d306      	bcc.n	80088e4 <dhcp_bind+0x124>
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	899b      	ldrh	r3, [r3, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d002      	beq.n	80088e4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	2200      	movs	r2, #0
 80088e2:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	79db      	ldrb	r3, [r3, #7]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	6a1b      	ldr	r3, [r3, #32]
 80088f0:	613b      	str	r3, [r7, #16]
 80088f2:	e014      	b.n	800891e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	331c      	adds	r3, #28
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80088fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008900:	2b00      	cmp	r3, #0
 8008902:	db02      	blt.n	800890a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8008904:	23ff      	movs	r3, #255	; 0xff
 8008906:	613b      	str	r3, [r7, #16]
 8008908:	e009      	b.n	800891e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	2bbf      	cmp	r3, #191	; 0xbf
 800890e:	d903      	bls.n	8008918 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8008910:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008914:	613b      	str	r3, [r7, #16]
 8008916:	e002      	b.n	800891e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8008918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800891c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008922:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d108      	bne.n	800893c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	69da      	ldr	r2, [r3, #28]
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	4013      	ands	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800893a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800893c:	210a      	movs	r1, #10
 800893e:	69b8      	ldr	r0, [r7, #24]
 8008940:	f000 faa0 	bl	8008e84 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	f103 011c 	add.w	r1, r3, #28
 800894a:	f107 030c 	add.w	r3, r7, #12
 800894e:	f107 0210 	add.w	r2, r7, #16
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f004 fa6e 	bl	800ce34 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	08014cd0 	.word	0x08014cd0
 8008964:	08014e68 	.word	0x08014e68
 8008968:	08014d68 	.word	0x08014d68
 800896c:	08014e84 	.word	0x08014e84
 8008970:	88888889 	.word	0x88888889

08008974 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08a      	sub	sp, #40	; 0x28
 8008978:	af02      	add	r7, sp, #8
 800897a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8008982:	2105      	movs	r1, #5
 8008984:	69b8      	ldr	r0, [r7, #24]
 8008986:	f000 fa7d 	bl	8008e84 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800898a:	f107 030c 	add.w	r3, r7, #12
 800898e:	2203      	movs	r2, #3
 8008990:	69b9      	ldr	r1, [r7, #24]
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 ff02 	bl	800979c <dhcp_create_msg>
 8008998:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d04e      	beq.n	8008a3e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80089a6:	89b8      	ldrh	r0, [r7, #12]
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80089ae:	2302      	movs	r3, #2
 80089b0:	2239      	movs	r2, #57	; 0x39
 80089b2:	f000 fa81 	bl	8008eb8 <dhcp_option>
 80089b6:	4603      	mov	r3, r0
 80089b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80089ba:	89b8      	ldrh	r0, [r7, #12]
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c6:	461a      	mov	r2, r3
 80089c8:	f000 fad0 	bl	8008f6c <dhcp_option_short>
 80089cc:	4603      	mov	r3, r0
 80089ce:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80089d0:	89b8      	ldrh	r0, [r7, #12]
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80089d8:	2303      	movs	r3, #3
 80089da:	2237      	movs	r2, #55	; 0x37
 80089dc:	f000 fa6c 	bl	8008eb8 <dhcp_option>
 80089e0:	4603      	mov	r3, r0
 80089e2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80089e4:	2300      	movs	r3, #0
 80089e6:	77bb      	strb	r3, [r7, #30]
 80089e8:	e00e      	b.n	8008a08 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80089ea:	89b8      	ldrh	r0, [r7, #12]
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80089f2:	7fbb      	ldrb	r3, [r7, #30]
 80089f4:	4a2a      	ldr	r2, [pc, #168]	; (8008aa0 <dhcp_renew+0x12c>)
 80089f6:	5cd3      	ldrb	r3, [r2, r3]
 80089f8:	461a      	mov	r2, r3
 80089fa:	f000 fa91 	bl	8008f20 <dhcp_option_byte>
 80089fe:	4603      	mov	r3, r0
 8008a00:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008a02:	7fbb      	ldrb	r3, [r7, #30]
 8008a04:	3301      	adds	r3, #1
 8008a06:	77bb      	strb	r3, [r7, #30]
 8008a08:	7fbb      	ldrb	r3, [r7, #30]
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d9ed      	bls.n	80089ea <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008a0e:	89b8      	ldrh	r0, [r7, #12]
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	33f0      	adds	r3, #240	; 0xf0
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	4619      	mov	r1, r3
 8008a18:	f000 ff96 	bl	8009948 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008a1c:	4b21      	ldr	r3, [pc, #132]	; (8008aa4 <dhcp_renew+0x130>)
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	f103 0218 	add.w	r2, r3, #24
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	2343      	movs	r3, #67	; 0x43
 8008a2c:	6979      	ldr	r1, [r7, #20]
 8008a2e:	f00a fd85 	bl	801353c <udp_sendto_if>
 8008a32:	4603      	mov	r3, r0
 8008a34:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8008a36:	6978      	ldr	r0, [r7, #20]
 8008a38:	f004 febc 	bl	800d7b4 <pbuf_free>
 8008a3c:	e001      	b.n	8008a42 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8008a3e:	23ff      	movs	r3, #255	; 0xff
 8008a40:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	799b      	ldrb	r3, [r3, #6]
 8008a46:	2bff      	cmp	r3, #255	; 0xff
 8008a48:	d005      	beq.n	8008a56 <dhcp_renew+0xe2>
    dhcp->tries++;
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	799b      	ldrb	r3, [r3, #6]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	799b      	ldrb	r3, [r3, #6]
 8008a5a:	2b09      	cmp	r3, #9
 8008a5c:	d80a      	bhi.n	8008a74 <dhcp_renew+0x100>
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	799b      	ldrb	r3, [r3, #6]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	461a      	mov	r2, r3
 8008a66:	0152      	lsls	r2, r2, #5
 8008a68:	1ad2      	subs	r2, r2, r3
 8008a6a:	0092      	lsls	r2, r2, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	011b      	lsls	r3, r3, #4
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	e001      	b.n	8008a78 <dhcp_renew+0x104>
 8008a74:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008a78:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008a7a:	89fb      	ldrh	r3, [r7, #14]
 8008a7c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008a80:	4a09      	ldr	r2, [pc, #36]	; (8008aa8 <dhcp_renew+0x134>)
 8008a82:	fb82 1203 	smull	r1, r2, r2, r3
 8008a86:	1152      	asrs	r2, r2, #5
 8008a88:	17db      	asrs	r3, r3, #31
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008a92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3720      	adds	r7, #32
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	24000024 	.word	0x24000024
 8008aa4:	24005218 	.word	0x24005218
 8008aa8:	10624dd3 	.word	0x10624dd3

08008aac <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b08a      	sub	sp, #40	; 0x28
 8008ab0:	af02      	add	r7, sp, #8
 8008ab2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8008aba:	2104      	movs	r1, #4
 8008abc:	69b8      	ldr	r0, [r7, #24]
 8008abe:	f000 f9e1 	bl	8008e84 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008ac2:	f107 030c 	add.w	r3, r7, #12
 8008ac6:	2203      	movs	r2, #3
 8008ac8:	69b9      	ldr	r1, [r7, #24]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fe66 	bl	800979c <dhcp_create_msg>
 8008ad0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d04c      	beq.n	8008b72 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008ade:	89b8      	ldrh	r0, [r7, #12]
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	2239      	movs	r2, #57	; 0x39
 8008aea:	f000 f9e5 	bl	8008eb8 <dhcp_option>
 8008aee:	4603      	mov	r3, r0
 8008af0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008af2:	89b8      	ldrh	r0, [r7, #12]
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008afe:	461a      	mov	r2, r3
 8008b00:	f000 fa34 	bl	8008f6c <dhcp_option_short>
 8008b04:	4603      	mov	r3, r0
 8008b06:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008b08:	89b8      	ldrh	r0, [r7, #12]
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008b10:	2303      	movs	r3, #3
 8008b12:	2237      	movs	r2, #55	; 0x37
 8008b14:	f000 f9d0 	bl	8008eb8 <dhcp_option>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	77bb      	strb	r3, [r7, #30]
 8008b20:	e00e      	b.n	8008b40 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008b22:	89b8      	ldrh	r0, [r7, #12]
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008b2a:	7fbb      	ldrb	r3, [r7, #30]
 8008b2c:	4a29      	ldr	r2, [pc, #164]	; (8008bd4 <dhcp_rebind+0x128>)
 8008b2e:	5cd3      	ldrb	r3, [r2, r3]
 8008b30:	461a      	mov	r2, r3
 8008b32:	f000 f9f5 	bl	8008f20 <dhcp_option_byte>
 8008b36:	4603      	mov	r3, r0
 8008b38:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008b3a:	7fbb      	ldrb	r3, [r7, #30]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	77bb      	strb	r3, [r7, #30]
 8008b40:	7fbb      	ldrb	r3, [r7, #30]
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d9ed      	bls.n	8008b22 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008b46:	89b8      	ldrh	r0, [r7, #12]
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	33f0      	adds	r3, #240	; 0xf0
 8008b4c:	697a      	ldr	r2, [r7, #20]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	f000 fefa 	bl	8009948 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008b54:	4b20      	ldr	r3, [pc, #128]	; (8008bd8 <dhcp_rebind+0x12c>)
 8008b56:	6818      	ldr	r0, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	2343      	movs	r3, #67	; 0x43
 8008b5e:	4a1f      	ldr	r2, [pc, #124]	; (8008bdc <dhcp_rebind+0x130>)
 8008b60:	6979      	ldr	r1, [r7, #20]
 8008b62:	f00a fceb 	bl	801353c <udp_sendto_if>
 8008b66:	4603      	mov	r3, r0
 8008b68:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8008b6a:	6978      	ldr	r0, [r7, #20]
 8008b6c:	f004 fe22 	bl	800d7b4 <pbuf_free>
 8008b70:	e001      	b.n	8008b76 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8008b72:	23ff      	movs	r3, #255	; 0xff
 8008b74:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	799b      	ldrb	r3, [r3, #6]
 8008b7a:	2bff      	cmp	r3, #255	; 0xff
 8008b7c:	d005      	beq.n	8008b8a <dhcp_rebind+0xde>
    dhcp->tries++;
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	799b      	ldrb	r3, [r3, #6]
 8008b82:	3301      	adds	r3, #1
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	799b      	ldrb	r3, [r3, #6]
 8008b8e:	2b09      	cmp	r3, #9
 8008b90:	d80a      	bhi.n	8008ba8 <dhcp_rebind+0xfc>
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	799b      	ldrb	r3, [r3, #6]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	461a      	mov	r2, r3
 8008b9a:	0152      	lsls	r2, r2, #5
 8008b9c:	1ad2      	subs	r2, r2, r3
 8008b9e:	0092      	lsls	r2, r2, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	00db      	lsls	r3, r3, #3
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	e001      	b.n	8008bac <dhcp_rebind+0x100>
 8008ba8:	f242 7310 	movw	r3, #10000	; 0x2710
 8008bac:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008bae:	89fb      	ldrh	r3, [r7, #14]
 8008bb0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008bb4:	4a0a      	ldr	r2, [pc, #40]	; (8008be0 <dhcp_rebind+0x134>)
 8008bb6:	fb82 1203 	smull	r1, r2, r2, r3
 8008bba:	1152      	asrs	r2, r2, #5
 8008bbc:	17db      	asrs	r3, r3, #31
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008bc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3720      	adds	r7, #32
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	24000024 	.word	0x24000024
 8008bd8:	24005218 	.word	0x24005218
 8008bdc:	08017dac 	.word	0x08017dac
 8008be0:	10624dd3 	.word	0x10624dd3

08008be4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8008be4:	b5b0      	push	{r4, r5, r7, lr}
 8008be6:	b08a      	sub	sp, #40	; 0x28
 8008be8:	af02      	add	r7, sp, #8
 8008bea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8008bf2:	2103      	movs	r1, #3
 8008bf4:	69b8      	ldr	r0, [r7, #24]
 8008bf6:	f000 f945 	bl	8008e84 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008bfa:	f107 030c 	add.w	r3, r7, #12
 8008bfe:	2203      	movs	r2, #3
 8008c00:	69b9      	ldr	r1, [r7, #24]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fdca 	bl	800979c <dhcp_create_msg>
 8008c08:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d066      	beq.n	8008cde <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008c16:	89b8      	ldrh	r0, [r7, #12]
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008c1e:	2302      	movs	r3, #2
 8008c20:	2239      	movs	r2, #57	; 0x39
 8008c22:	f000 f949 	bl	8008eb8 <dhcp_option>
 8008c26:	4603      	mov	r3, r0
 8008c28:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8008c2a:	89b8      	ldrh	r0, [r7, #12]
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	33f0      	adds	r3, #240	; 0xf0
 8008c30:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008c34:	4619      	mov	r1, r3
 8008c36:	f000 f999 	bl	8008f6c <dhcp_option_short>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8008c3e:	89b8      	ldrh	r0, [r7, #12]
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008c46:	2304      	movs	r3, #4
 8008c48:	2232      	movs	r2, #50	; 0x32
 8008c4a:	f000 f935 	bl	8008eb8 <dhcp_option>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008c52:	89bc      	ldrh	r4, [r7, #12]
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff f819 	bl	8007c96 <lwip_htonl>
 8008c64:	4603      	mov	r3, r0
 8008c66:	461a      	mov	r2, r3
 8008c68:	4629      	mov	r1, r5
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f000 f9b0 	bl	8008fd0 <dhcp_option_long>
 8008c70:	4603      	mov	r3, r0
 8008c72:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008c74:	89b8      	ldrh	r0, [r7, #12]
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	2237      	movs	r2, #55	; 0x37
 8008c80:	f000 f91a 	bl	8008eb8 <dhcp_option>
 8008c84:	4603      	mov	r3, r0
 8008c86:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008c88:	2300      	movs	r3, #0
 8008c8a:	77bb      	strb	r3, [r7, #30]
 8008c8c:	e00e      	b.n	8008cac <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008c8e:	89b8      	ldrh	r0, [r7, #12]
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008c96:	7fbb      	ldrb	r3, [r7, #30]
 8008c98:	4a29      	ldr	r2, [pc, #164]	; (8008d40 <dhcp_reboot+0x15c>)
 8008c9a:	5cd3      	ldrb	r3, [r2, r3]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	f000 f93f 	bl	8008f20 <dhcp_option_byte>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008ca6:	7fbb      	ldrb	r3, [r7, #30]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	77bb      	strb	r3, [r7, #30]
 8008cac:	7fbb      	ldrb	r3, [r7, #30]
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d9ed      	bls.n	8008c8e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008cb2:	89b8      	ldrh	r0, [r7, #12]
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	33f0      	adds	r3, #240	; 0xf0
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	f000 fe44 	bl	8009948 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008cc0:	4b20      	ldr	r3, [pc, #128]	; (8008d44 <dhcp_reboot+0x160>)
 8008cc2:	6818      	ldr	r0, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	2343      	movs	r3, #67	; 0x43
 8008cca:	4a1f      	ldr	r2, [pc, #124]	; (8008d48 <dhcp_reboot+0x164>)
 8008ccc:	6979      	ldr	r1, [r7, #20]
 8008cce:	f00a fc35 	bl	801353c <udp_sendto_if>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8008cd6:	6978      	ldr	r0, [r7, #20]
 8008cd8:	f004 fd6c 	bl	800d7b4 <pbuf_free>
 8008cdc:	e001      	b.n	8008ce2 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8008cde:	23ff      	movs	r3, #255	; 0xff
 8008ce0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	799b      	ldrb	r3, [r3, #6]
 8008ce6:	2bff      	cmp	r3, #255	; 0xff
 8008ce8:	d005      	beq.n	8008cf6 <dhcp_reboot+0x112>
    dhcp->tries++;
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	799b      	ldrb	r3, [r3, #6]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	799b      	ldrb	r3, [r3, #6]
 8008cfa:	2b09      	cmp	r3, #9
 8008cfc:	d80a      	bhi.n	8008d14 <dhcp_reboot+0x130>
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	799b      	ldrb	r3, [r3, #6]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	461a      	mov	r2, r3
 8008d06:	0152      	lsls	r2, r2, #5
 8008d08:	1ad2      	subs	r2, r2, r3
 8008d0a:	0092      	lsls	r2, r2, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	e001      	b.n	8008d18 <dhcp_reboot+0x134>
 8008d14:	f242 7310 	movw	r3, #10000	; 0x2710
 8008d18:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008d1a:	89fb      	ldrh	r3, [r7, #14]
 8008d1c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008d20:	4a0a      	ldr	r2, [pc, #40]	; (8008d4c <dhcp_reboot+0x168>)
 8008d22:	fb82 1203 	smull	r1, r2, r2, r3
 8008d26:	1152      	asrs	r2, r2, #5
 8008d28:	17db      	asrs	r3, r3, #31
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8008d32:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3720      	adds	r7, #32
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	24000024 	.word	0x24000024
 8008d44:	24005218 	.word	0x24005218
 8008d48:	08017dac 	.word	0x08017dac
 8008d4c:	10624dd3 	.word	0x10624dd3

08008d50 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8008d50:	b5b0      	push	{r4, r5, r7, lr}
 8008d52:	b08a      	sub	sp, #40	; 0x28
 8008d54:	af02      	add	r7, sp, #8
 8008d56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 8084 	beq.w	8008e6e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	795b      	ldrb	r3, [r3, #5]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f000 8081 	beq.w	8008e72 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	2200      	movs	r2, #0
 8008d86:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	2200      	movs	r2, #0
 8008d92:	631a      	str	r2, [r3, #48]	; 0x30
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	2200      	movs	r2, #0
 8008da8:	829a      	strh	r2, [r3, #20]
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	8a9a      	ldrh	r2, [r3, #20]
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	825a      	strh	r2, [r3, #18]
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	8a5a      	ldrh	r2, [r3, #18]
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	821a      	strh	r2, [r3, #16]
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	8a1a      	ldrh	r2, [r3, #16]
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fdee 	bl	80099a4 <dhcp_supplied_address>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d03b      	beq.n	8008e46 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8008dce:	f107 030e 	add.w	r3, r7, #14
 8008dd2:	2207      	movs	r2, #7
 8008dd4:	69f9      	ldr	r1, [r7, #28]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fce0 	bl	800979c <dhcp_create_msg>
 8008ddc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d030      	beq.n	8008e46 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8008dea:	89f8      	ldrh	r0, [r7, #14]
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8008df2:	2304      	movs	r3, #4
 8008df4:	2236      	movs	r2, #54	; 0x36
 8008df6:	f000 f85f 	bl	8008eb8 <dhcp_option>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8008dfe:	89fc      	ldrh	r4, [r7, #14]
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7fe ff44 	bl	8007c96 <lwip_htonl>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	461a      	mov	r2, r3
 8008e12:	4629      	mov	r1, r5
 8008e14:	4620      	mov	r0, r4
 8008e16:	f000 f8db 	bl	8008fd0 <dhcp_option_long>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008e1e:	89f8      	ldrh	r0, [r7, #14]
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	33f0      	adds	r3, #240	; 0xf0
 8008e24:	69ba      	ldr	r2, [r7, #24]
 8008e26:	4619      	mov	r1, r3
 8008e28:	f000 fd8e 	bl	8009948 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008e2c:	4b13      	ldr	r3, [pc, #76]	; (8008e7c <dhcp_release_and_stop+0x12c>)
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	f107 0210 	add.w	r2, r7, #16
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	2343      	movs	r3, #67	; 0x43
 8008e3a:	69b9      	ldr	r1, [r7, #24]
 8008e3c:	f00a fb7e 	bl	801353c <udp_sendto_if>
      pbuf_free(p_out);
 8008e40:	69b8      	ldr	r0, [r7, #24]
 8008e42:	f004 fcb7 	bl	800d7b4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8008e46:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <dhcp_release_and_stop+0x130>)
 8008e48:	4a0d      	ldr	r2, [pc, #52]	; (8008e80 <dhcp_release_and_stop+0x130>)
 8008e4a:	490d      	ldr	r1, [pc, #52]	; (8008e80 <dhcp_release_and_stop+0x130>)
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f003 fff1 	bl	800ce34 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8008e52:	2100      	movs	r1, #0
 8008e54:	69f8      	ldr	r0, [r7, #28]
 8008e56:	f000 f815 	bl	8008e84 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	791b      	ldrb	r3, [r3, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d008      	beq.n	8008e74 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8008e62:	f7fe ff83 	bl	8007d6c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	711a      	strb	r2, [r3, #4]
 8008e6c:	e002      	b.n	8008e74 <dhcp_release_and_stop+0x124>
    return;
 8008e6e:	bf00      	nop
 8008e70:	e000      	b.n	8008e74 <dhcp_release_and_stop+0x124>
    return;
 8008e72:	bf00      	nop
  }
}
 8008e74:	3720      	adds	r7, #32
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bdb0      	pop	{r4, r5, r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	24005218 	.word	0x24005218
 8008e80:	08017da8 	.word	0x08017da8

08008e84 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	795b      	ldrb	r3, [r3, #5]
 8008e94:	78fa      	ldrb	r2, [r7, #3]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d008      	beq.n	8008eac <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	78fa      	ldrb	r2, [r7, #3]
 8008e9e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	811a      	strh	r2, [r3, #8]
  }
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6039      	str	r1, [r7, #0]
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	80fb      	strh	r3, [r7, #6]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	717b      	strb	r3, [r7, #5]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8008ed0:	88fa      	ldrh	r2, [r7, #6]
 8008ed2:	793b      	ldrb	r3, [r7, #4]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	3302      	adds	r3, #2
 8008ed8:	2b44      	cmp	r3, #68	; 0x44
 8008eda:	d906      	bls.n	8008eea <dhcp_option+0x32>
 8008edc:	4b0d      	ldr	r3, [pc, #52]	; (8008f14 <dhcp_option+0x5c>)
 8008ede:	f240 529a 	movw	r2, #1434	; 0x59a
 8008ee2:	490d      	ldr	r1, [pc, #52]	; (8008f18 <dhcp_option+0x60>)
 8008ee4:	480d      	ldr	r0, [pc, #52]	; (8008f1c <dhcp_option+0x64>)
 8008ee6:	f00a fe6d 	bl	8013bc4 <iprintf>
  options[options_out_len++] = option_type;
 8008eea:	88fb      	ldrh	r3, [r7, #6]
 8008eec:	1c5a      	adds	r2, r3, #1
 8008eee:	80fa      	strh	r2, [r7, #6]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	797a      	ldrb	r2, [r7, #5]
 8008ef8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8008efa:	88fb      	ldrh	r3, [r7, #6]
 8008efc:	1c5a      	adds	r2, r3, #1
 8008efe:	80fa      	strh	r2, [r7, #6]
 8008f00:	461a      	mov	r2, r3
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	4413      	add	r3, r2
 8008f06:	793a      	ldrb	r2, [r7, #4]
 8008f08:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8008f0a:	88fb      	ldrh	r3, [r7, #6]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	08014cd0 	.word	0x08014cd0
 8008f18:	08014e9c 	.word	0x08014e9c
 8008f1c:	08014d68 	.word	0x08014d68

08008f20 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	4603      	mov	r3, r0
 8008f28:	6039      	str	r1, [r7, #0]
 8008f2a:	80fb      	strh	r3, [r7, #6]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8008f30:	88fb      	ldrh	r3, [r7, #6]
 8008f32:	2b43      	cmp	r3, #67	; 0x43
 8008f34:	d906      	bls.n	8008f44 <dhcp_option_byte+0x24>
 8008f36:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <dhcp_option_byte+0x40>)
 8008f38:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8008f3c:	4909      	ldr	r1, [pc, #36]	; (8008f64 <dhcp_option_byte+0x44>)
 8008f3e:	480a      	ldr	r0, [pc, #40]	; (8008f68 <dhcp_option_byte+0x48>)
 8008f40:	f00a fe40 	bl	8013bc4 <iprintf>
  options[options_out_len++] = value;
 8008f44:	88fb      	ldrh	r3, [r7, #6]
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	80fa      	strh	r2, [r7, #6]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	4413      	add	r3, r2
 8008f50:	797a      	ldrb	r2, [r7, #5]
 8008f52:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8008f54:	88fb      	ldrh	r3, [r7, #6]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	08014cd0 	.word	0x08014cd0
 8008f64:	08014ee0 	.word	0x08014ee0
 8008f68:	08014d68 	.word	0x08014d68

08008f6c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	6039      	str	r1, [r7, #0]
 8008f76:	80fb      	strh	r3, [r7, #6]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8008f7c:	88fb      	ldrh	r3, [r7, #6]
 8008f7e:	3302      	adds	r3, #2
 8008f80:	2b44      	cmp	r3, #68	; 0x44
 8008f82:	d906      	bls.n	8008f92 <dhcp_option_short+0x26>
 8008f84:	4b0f      	ldr	r3, [pc, #60]	; (8008fc4 <dhcp_option_short+0x58>)
 8008f86:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8008f8a:	490f      	ldr	r1, [pc, #60]	; (8008fc8 <dhcp_option_short+0x5c>)
 8008f8c:	480f      	ldr	r0, [pc, #60]	; (8008fcc <dhcp_option_short+0x60>)
 8008f8e:	f00a fe19 	bl	8013bc4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8008f92:	88bb      	ldrh	r3, [r7, #4]
 8008f94:	0a1b      	lsrs	r3, r3, #8
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	88fb      	ldrh	r3, [r7, #6]
 8008f9a:	1c59      	adds	r1, r3, #1
 8008f9c:	80f9      	strh	r1, [r7, #6]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	440b      	add	r3, r1
 8008fa4:	b2d2      	uxtb	r2, r2
 8008fa6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8008fa8:	88fb      	ldrh	r3, [r7, #6]
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	80fa      	strh	r2, [r7, #6]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	88ba      	ldrh	r2, [r7, #4]
 8008fb6:	b2d2      	uxtb	r2, r2
 8008fb8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8008fba:	88fb      	ldrh	r3, [r7, #6]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	08014cd0 	.word	0x08014cd0
 8008fc8:	08014f18 	.word	0x08014f18
 8008fcc:	08014d68 	.word	0x08014d68

08008fd0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
 8008fdc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8008fde:	89fb      	ldrh	r3, [r7, #14]
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	2b44      	cmp	r3, #68	; 0x44
 8008fe4:	d906      	bls.n	8008ff4 <dhcp_option_long+0x24>
 8008fe6:	4b19      	ldr	r3, [pc, #100]	; (800904c <dhcp_option_long+0x7c>)
 8008fe8:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8008fec:	4918      	ldr	r1, [pc, #96]	; (8009050 <dhcp_option_long+0x80>)
 8008fee:	4819      	ldr	r0, [pc, #100]	; (8009054 <dhcp_option_long+0x84>)
 8008ff0:	f00a fde8 	bl	8013bc4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	0e1a      	lsrs	r2, r3, #24
 8008ff8:	89fb      	ldrh	r3, [r7, #14]
 8008ffa:	1c59      	adds	r1, r3, #1
 8008ffc:	81f9      	strh	r1, [r7, #14]
 8008ffe:	4619      	mov	r1, r3
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	440b      	add	r3, r1
 8009004:	b2d2      	uxtb	r2, r2
 8009006:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	0c1a      	lsrs	r2, r3, #16
 800900c:	89fb      	ldrh	r3, [r7, #14]
 800900e:	1c59      	adds	r1, r3, #1
 8009010:	81f9      	strh	r1, [r7, #14]
 8009012:	4619      	mov	r1, r3
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	440b      	add	r3, r1
 8009018:	b2d2      	uxtb	r2, r2
 800901a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	0a1a      	lsrs	r2, r3, #8
 8009020:	89fb      	ldrh	r3, [r7, #14]
 8009022:	1c59      	adds	r1, r3, #1
 8009024:	81f9      	strh	r1, [r7, #14]
 8009026:	4619      	mov	r1, r3
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	440b      	add	r3, r1
 800902c:	b2d2      	uxtb	r2, r2
 800902e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8009030:	89fb      	ldrh	r3, [r7, #14]
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	81fa      	strh	r2, [r7, #14]
 8009036:	461a      	mov	r2, r3
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	4413      	add	r3, r2
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	b2d2      	uxtb	r2, r2
 8009040:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8009042:	89fb      	ldrh	r3, [r7, #14]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	08014cd0 	.word	0x08014cd0
 8009050:	08014f54 	.word	0x08014f54
 8009054:	08014d68 	.word	0x08014d68

08009058 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b090      	sub	sp, #64	; 0x40
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8009062:	2300      	movs	r3, #0
 8009064:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8009066:	2300      	movs	r3, #0
 8009068:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800906a:	2208      	movs	r2, #8
 800906c:	2100      	movs	r1, #0
 800906e:	48b5      	ldr	r0, [pc, #724]	; (8009344 <dhcp_parse_reply+0x2ec>)
 8009070:	f00a fda0 	bl	8013bb4 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	895b      	ldrh	r3, [r3, #10]
 8009078:	2b2b      	cmp	r3, #43	; 0x2b
 800907a:	d802      	bhi.n	8009082 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800907c:	f06f 0301 	mvn.w	r3, #1
 8009080:	e2a7      	b.n	80095d2 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8009088:	23f0      	movs	r3, #240	; 0xf0
 800908a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	891b      	ldrh	r3, [r3, #8]
 8009090:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8009096:	e00c      	b.n	80090b2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8009098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909a:	895b      	ldrh	r3, [r3, #10]
 800909c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	895b      	ldrh	r3, [r3, #10]
 80090a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80090ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d004      	beq.n	80090c2 <dhcp_parse_reply+0x6a>
 80090b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ba:	895b      	ldrh	r3, [r3, #10]
 80090bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80090be:	429a      	cmp	r2, r3
 80090c0:	d2ea      	bcs.n	8009098 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80090c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d102      	bne.n	80090ce <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80090c8:	f06f 0301 	mvn.w	r3, #1
 80090cc:	e281      	b.n	80095d2 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80090ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80090d0:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80090d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80090d4:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80090d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80090dc:	e239      	b.n	8009552 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80090de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80090e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090e2:	4413      	add	r3, r2
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80090e8:	2300      	movs	r3, #0
 80090ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80090ee:	f04f 33ff 	mov.w	r3, #4294967295
 80090f2:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80090f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80090f6:	3302      	adds	r3, #2
 80090f8:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80090fa:	8bfa      	ldrh	r2, [r7, #30]
 80090fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80090fe:	429a      	cmp	r2, r3
 8009100:	d202      	bcs.n	8009108 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8009102:	f06f 0301 	mvn.w	r3, #1
 8009106:	e264      	b.n	80095d2 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8009108:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800910a:	3301      	adds	r3, #1
 800910c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800910e:	8952      	ldrh	r2, [r2, #10]
 8009110:	4293      	cmp	r3, r2
 8009112:	da07      	bge.n	8009124 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8009114:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009116:	3301      	adds	r3, #1
 8009118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800911a:	4413      	add	r3, r2
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009122:	e00b      	b.n	800913c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8009124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d004      	beq.n	8009136 <dhcp_parse_reply+0xde>
 800912c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	e000      	b.n	8009138 <dhcp_parse_reply+0xe0>
 8009136:	2300      	movs	r3, #0
 8009138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800913c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009140:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8009144:	7dfb      	ldrb	r3, [r7, #23]
 8009146:	2b3b      	cmp	r3, #59	; 0x3b
 8009148:	f200 812c 	bhi.w	80093a4 <dhcp_parse_reply+0x34c>
 800914c:	a201      	add	r2, pc, #4	; (adr r2, 8009154 <dhcp_parse_reply+0xfc>)
 800914e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009152:	bf00      	nop
 8009154:	08009245 	.word	0x08009245
 8009158:	08009255 	.word	0x08009255
 800915c:	080093a5 	.word	0x080093a5
 8009160:	08009277 	.word	0x08009277
 8009164:	080093a5 	.word	0x080093a5
 8009168:	080093a5 	.word	0x080093a5
 800916c:	080093a5 	.word	0x080093a5
 8009170:	080093a5 	.word	0x080093a5
 8009174:	080093a5 	.word	0x080093a5
 8009178:	080093a5 	.word	0x080093a5
 800917c:	080093a5 	.word	0x080093a5
 8009180:	080093a5 	.word	0x080093a5
 8009184:	080093a5 	.word	0x080093a5
 8009188:	080093a5 	.word	0x080093a5
 800918c:	080093a5 	.word	0x080093a5
 8009190:	080093a5 	.word	0x080093a5
 8009194:	080093a5 	.word	0x080093a5
 8009198:	080093a5 	.word	0x080093a5
 800919c:	080093a5 	.word	0x080093a5
 80091a0:	080093a5 	.word	0x080093a5
 80091a4:	080093a5 	.word	0x080093a5
 80091a8:	080093a5 	.word	0x080093a5
 80091ac:	080093a5 	.word	0x080093a5
 80091b0:	080093a5 	.word	0x080093a5
 80091b4:	080093a5 	.word	0x080093a5
 80091b8:	080093a5 	.word	0x080093a5
 80091bc:	080093a5 	.word	0x080093a5
 80091c0:	080093a5 	.word	0x080093a5
 80091c4:	080093a5 	.word	0x080093a5
 80091c8:	080093a5 	.word	0x080093a5
 80091cc:	080093a5 	.word	0x080093a5
 80091d0:	080093a5 	.word	0x080093a5
 80091d4:	080093a5 	.word	0x080093a5
 80091d8:	080093a5 	.word	0x080093a5
 80091dc:	080093a5 	.word	0x080093a5
 80091e0:	080093a5 	.word	0x080093a5
 80091e4:	080093a5 	.word	0x080093a5
 80091e8:	080093a5 	.word	0x080093a5
 80091ec:	080093a5 	.word	0x080093a5
 80091f0:	080093a5 	.word	0x080093a5
 80091f4:	080093a5 	.word	0x080093a5
 80091f8:	080093a5 	.word	0x080093a5
 80091fc:	080093a5 	.word	0x080093a5
 8009200:	080093a5 	.word	0x080093a5
 8009204:	080093a5 	.word	0x080093a5
 8009208:	080093a5 	.word	0x080093a5
 800920c:	080093a5 	.word	0x080093a5
 8009210:	080093a5 	.word	0x080093a5
 8009214:	080093a5 	.word	0x080093a5
 8009218:	080093a5 	.word	0x080093a5
 800921c:	080093a5 	.word	0x080093a5
 8009220:	080092a3 	.word	0x080092a3
 8009224:	080092c5 	.word	0x080092c5
 8009228:	08009301 	.word	0x08009301
 800922c:	08009323 	.word	0x08009323
 8009230:	080093a5 	.word	0x080093a5
 8009234:	080093a5 	.word	0x080093a5
 8009238:	080093a5 	.word	0x080093a5
 800923c:	08009361 	.word	0x08009361
 8009240:	08009383 	.word	0x08009383
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8009244:	2300      	movs	r3, #0
 8009246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800924a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800924e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8009252:	e0ab      	b.n	80093ac <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009258:	2b04      	cmp	r3, #4
 800925a:	d009      	beq.n	8009270 <dhcp_parse_reply+0x218>
 800925c:	4b3a      	ldr	r3, [pc, #232]	; (8009348 <dhcp_parse_reply+0x2f0>)
 800925e:	f240 622e 	movw	r2, #1582	; 0x62e
 8009262:	493a      	ldr	r1, [pc, #232]	; (800934c <dhcp_parse_reply+0x2f4>)
 8009264:	483a      	ldr	r0, [pc, #232]	; (8009350 <dhcp_parse_reply+0x2f8>)
 8009266:	f00a fcad 	bl	8013bc4 <iprintf>
 800926a:	f06f 0305 	mvn.w	r3, #5
 800926e:	e1b0      	b.n	80095d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8009270:	2306      	movs	r3, #6
 8009272:	623b      	str	r3, [r7, #32]
        break;
 8009274:	e09a      	b.n	80093ac <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8009276:	2304      	movs	r3, #4
 8009278:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800927c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009284:	429a      	cmp	r2, r3
 8009286:	d209      	bcs.n	800929c <dhcp_parse_reply+0x244>
 8009288:	4b2f      	ldr	r3, [pc, #188]	; (8009348 <dhcp_parse_reply+0x2f0>)
 800928a:	f240 6233 	movw	r2, #1587	; 0x633
 800928e:	4931      	ldr	r1, [pc, #196]	; (8009354 <dhcp_parse_reply+0x2fc>)
 8009290:	482f      	ldr	r0, [pc, #188]	; (8009350 <dhcp_parse_reply+0x2f8>)
 8009292:	f00a fc97 	bl	8013bc4 <iprintf>
 8009296:	f06f 0305 	mvn.w	r3, #5
 800929a:	e19a      	b.n	80095d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800929c:	2307      	movs	r3, #7
 800929e:	623b      	str	r3, [r7, #32]
        break;
 80092a0:	e084      	b.n	80093ac <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80092a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	d009      	beq.n	80092be <dhcp_parse_reply+0x266>
 80092aa:	4b27      	ldr	r3, [pc, #156]	; (8009348 <dhcp_parse_reply+0x2f0>)
 80092ac:	f240 6241 	movw	r2, #1601	; 0x641
 80092b0:	4926      	ldr	r1, [pc, #152]	; (800934c <dhcp_parse_reply+0x2f4>)
 80092b2:	4827      	ldr	r0, [pc, #156]	; (8009350 <dhcp_parse_reply+0x2f8>)
 80092b4:	f00a fc86 	bl	8013bc4 <iprintf>
 80092b8:	f06f 0305 	mvn.w	r3, #5
 80092bc:	e189      	b.n	80095d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80092be:	2303      	movs	r3, #3
 80092c0:	623b      	str	r3, [r7, #32]
        break;
 80092c2:	e073      	b.n	80093ac <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80092c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d009      	beq.n	80092e0 <dhcp_parse_reply+0x288>
 80092cc:	4b1e      	ldr	r3, [pc, #120]	; (8009348 <dhcp_parse_reply+0x2f0>)
 80092ce:	f240 624f 	movw	r2, #1615	; 0x64f
 80092d2:	4921      	ldr	r1, [pc, #132]	; (8009358 <dhcp_parse_reply+0x300>)
 80092d4:	481e      	ldr	r0, [pc, #120]	; (8009350 <dhcp_parse_reply+0x2f8>)
 80092d6:	f00a fc75 	bl	8013bc4 <iprintf>
 80092da:	f06f 0305 	mvn.w	r3, #5
 80092de:	e178      	b.n	80095d2 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80092e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80092e2:	2bf0      	cmp	r3, #240	; 0xf0
 80092e4:	d009      	beq.n	80092fa <dhcp_parse_reply+0x2a2>
 80092e6:	4b18      	ldr	r3, [pc, #96]	; (8009348 <dhcp_parse_reply+0x2f0>)
 80092e8:	f240 6251 	movw	r2, #1617	; 0x651
 80092ec:	491b      	ldr	r1, [pc, #108]	; (800935c <dhcp_parse_reply+0x304>)
 80092ee:	4818      	ldr	r0, [pc, #96]	; (8009350 <dhcp_parse_reply+0x2f8>)
 80092f0:	f00a fc68 	bl	8013bc4 <iprintf>
 80092f4:	f06f 0305 	mvn.w	r3, #5
 80092f8:	e16b      	b.n	80095d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80092fa:	2300      	movs	r3, #0
 80092fc:	623b      	str	r3, [r7, #32]
        break;
 80092fe:	e055      	b.n	80093ac <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8009300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009304:	2b01      	cmp	r3, #1
 8009306:	d009      	beq.n	800931c <dhcp_parse_reply+0x2c4>
 8009308:	4b0f      	ldr	r3, [pc, #60]	; (8009348 <dhcp_parse_reply+0x2f0>)
 800930a:	f240 6255 	movw	r2, #1621	; 0x655
 800930e:	4912      	ldr	r1, [pc, #72]	; (8009358 <dhcp_parse_reply+0x300>)
 8009310:	480f      	ldr	r0, [pc, #60]	; (8009350 <dhcp_parse_reply+0x2f8>)
 8009312:	f00a fc57 	bl	8013bc4 <iprintf>
 8009316:	f06f 0305 	mvn.w	r3, #5
 800931a:	e15a      	b.n	80095d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800931c:	2301      	movs	r3, #1
 800931e:	623b      	str	r3, [r7, #32]
        break;
 8009320:	e044      	b.n	80093ac <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009326:	2b04      	cmp	r3, #4
 8009328:	d009      	beq.n	800933e <dhcp_parse_reply+0x2e6>
 800932a:	4b07      	ldr	r3, [pc, #28]	; (8009348 <dhcp_parse_reply+0x2f0>)
 800932c:	f240 6259 	movw	r2, #1625	; 0x659
 8009330:	4906      	ldr	r1, [pc, #24]	; (800934c <dhcp_parse_reply+0x2f4>)
 8009332:	4807      	ldr	r0, [pc, #28]	; (8009350 <dhcp_parse_reply+0x2f8>)
 8009334:	f00a fc46 	bl	8013bc4 <iprintf>
 8009338:	f06f 0305 	mvn.w	r3, #5
 800933c:	e149      	b.n	80095d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800933e:	2302      	movs	r3, #2
 8009340:	623b      	str	r3, [r7, #32]
        break;
 8009342:	e033      	b.n	80093ac <dhcp_parse_reply+0x354>
 8009344:	24005210 	.word	0x24005210
 8009348:	08014cd0 	.word	0x08014cd0
 800934c:	08014f90 	.word	0x08014f90
 8009350:	08014d68 	.word	0x08014d68
 8009354:	08014f9c 	.word	0x08014f9c
 8009358:	08014fb0 	.word	0x08014fb0
 800935c:	08014fbc 	.word	0x08014fbc
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009364:	2b04      	cmp	r3, #4
 8009366:	d009      	beq.n	800937c <dhcp_parse_reply+0x324>
 8009368:	4b9c      	ldr	r3, [pc, #624]	; (80095dc <dhcp_parse_reply+0x584>)
 800936a:	f240 625d 	movw	r2, #1629	; 0x65d
 800936e:	499c      	ldr	r1, [pc, #624]	; (80095e0 <dhcp_parse_reply+0x588>)
 8009370:	489c      	ldr	r0, [pc, #624]	; (80095e4 <dhcp_parse_reply+0x58c>)
 8009372:	f00a fc27 	bl	8013bc4 <iprintf>
 8009376:	f06f 0305 	mvn.w	r3, #5
 800937a:	e12a      	b.n	80095d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800937c:	2304      	movs	r3, #4
 800937e:	623b      	str	r3, [r7, #32]
        break;
 8009380:	e014      	b.n	80093ac <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8009382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009386:	2b04      	cmp	r3, #4
 8009388:	d009      	beq.n	800939e <dhcp_parse_reply+0x346>
 800938a:	4b94      	ldr	r3, [pc, #592]	; (80095dc <dhcp_parse_reply+0x584>)
 800938c:	f240 6261 	movw	r2, #1633	; 0x661
 8009390:	4993      	ldr	r1, [pc, #588]	; (80095e0 <dhcp_parse_reply+0x588>)
 8009392:	4894      	ldr	r0, [pc, #592]	; (80095e4 <dhcp_parse_reply+0x58c>)
 8009394:	f00a fc16 	bl	8013bc4 <iprintf>
 8009398:	f06f 0305 	mvn.w	r3, #5
 800939c:	e119      	b.n	80095d2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800939e:	2305      	movs	r3, #5
 80093a0:	623b      	str	r3, [r7, #32]
        break;
 80093a2:	e003      	b.n	80093ac <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 80093a4:	2300      	movs	r3, #0
 80093a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80093aa:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d103      	bne.n	80093ba <dhcp_parse_reply+0x362>
      offset++;
 80093b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80093b4:	3301      	adds	r3, #1
 80093b6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80093b8:	e0a1      	b.n	80094fe <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80093ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80093bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093c0:	4413      	add	r3, r2
 80093c2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80093c6:	4293      	cmp	r3, r2
 80093c8:	dd02      	ble.n	80093d0 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 80093ca:	f06f 0301 	mvn.w	r3, #1
 80093ce:	e100      	b.n	80095d2 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 80093d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80093d8:	4413      	add	r3, r2
 80093da:	b29b      	uxth	r3, r3
 80093dc:	3302      	adds	r3, #2
 80093de:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80093e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 808a 	beq.w	80094fe <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	db02      	blt.n	80093fa <dhcp_parse_reply+0x3a2>
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	2b07      	cmp	r3, #7
 80093f8:	dd06      	ble.n	8009408 <dhcp_parse_reply+0x3b0>
 80093fa:	4b78      	ldr	r3, [pc, #480]	; (80095dc <dhcp_parse_reply+0x584>)
 80093fc:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8009400:	4979      	ldr	r1, [pc, #484]	; (80095e8 <dhcp_parse_reply+0x590>)
 8009402:	4878      	ldr	r0, [pc, #480]	; (80095e4 <dhcp_parse_reply+0x58c>)
 8009404:	f00a fbde 	bl	8013bc4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8009408:	4a78      	ldr	r2, [pc, #480]	; (80095ec <dhcp_parse_reply+0x594>)
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	4413      	add	r3, r2
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d174      	bne.n	80094fe <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8009414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009418:	2b04      	cmp	r3, #4
 800941a:	bf28      	it	cs
 800941c:	2304      	movcs	r3, #4
 800941e:	b2db      	uxtb	r3, r3
 8009420:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8009422:	8bfb      	ldrh	r3, [r7, #30]
 8009424:	8aba      	ldrh	r2, [r7, #20]
 8009426:	f107 0108 	add.w	r1, r7, #8
 800942a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800942c:	f004 fbbc 	bl	800dba8 <pbuf_copy_partial>
 8009430:	4603      	mov	r3, r0
 8009432:	461a      	mov	r2, r3
 8009434:	8abb      	ldrh	r3, [r7, #20]
 8009436:	4293      	cmp	r3, r2
 8009438:	d002      	beq.n	8009440 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 800943a:	f06f 0301 	mvn.w	r3, #1
 800943e:	e0c8      	b.n	80095d2 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8009440:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009444:	2b04      	cmp	r3, #4
 8009446:	d933      	bls.n	80094b0 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8009448:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800944c:	f003 0303 	and.w	r3, r3, #3
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d009      	beq.n	800946a <dhcp_parse_reply+0x412>
 8009456:	4b61      	ldr	r3, [pc, #388]	; (80095dc <dhcp_parse_reply+0x584>)
 8009458:	f240 6281 	movw	r2, #1665	; 0x681
 800945c:	4964      	ldr	r1, [pc, #400]	; (80095f0 <dhcp_parse_reply+0x598>)
 800945e:	4861      	ldr	r0, [pc, #388]	; (80095e4 <dhcp_parse_reply+0x58c>)
 8009460:	f00a fbb0 	bl	8013bc4 <iprintf>
 8009464:	f06f 0305 	mvn.w	r3, #5
 8009468:	e0b3      	b.n	80095d2 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 800946a:	4a60      	ldr	r2, [pc, #384]	; (80095ec <dhcp_parse_reply+0x594>)
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	4413      	add	r3, r2
 8009470:	2201      	movs	r2, #1
 8009472:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	4618      	mov	r0, r3
 8009478:	f7fe fc0d 	bl	8007c96 <lwip_htonl>
 800947c:	4602      	mov	r2, r0
 800947e:	495d      	ldr	r1, [pc, #372]	; (80095f4 <dhcp_parse_reply+0x59c>)
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8009486:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800948a:	3b04      	subs	r3, #4
 800948c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8009490:	8bfb      	ldrh	r3, [r7, #30]
 8009492:	3304      	adds	r3, #4
 8009494:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8009496:	8a7a      	ldrh	r2, [r7, #18]
 8009498:	8bfb      	ldrh	r3, [r7, #30]
 800949a:	429a      	cmp	r2, r3
 800949c:	d202      	bcs.n	80094a4 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 800949e:	f06f 0301 	mvn.w	r3, #1
 80094a2:	e096      	b.n	80095d2 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80094a4:	8a7b      	ldrh	r3, [r7, #18]
 80094a6:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	3301      	adds	r3, #1
 80094ac:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80094ae:	e79e      	b.n	80093ee <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80094b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80094b4:	2b04      	cmp	r3, #4
 80094b6:	d106      	bne.n	80094c6 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fe fbeb 	bl	8007c96 <lwip_htonl>
 80094c0:	4603      	mov	r3, r0
 80094c2:	60bb      	str	r3, [r7, #8]
 80094c4:	e011      	b.n	80094ea <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80094c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d009      	beq.n	80094e2 <dhcp_parse_reply+0x48a>
 80094ce:	4b43      	ldr	r3, [pc, #268]	; (80095dc <dhcp_parse_reply+0x584>)
 80094d0:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80094d4:	4948      	ldr	r1, [pc, #288]	; (80095f8 <dhcp_parse_reply+0x5a0>)
 80094d6:	4843      	ldr	r0, [pc, #268]	; (80095e4 <dhcp_parse_reply+0x58c>)
 80094d8:	f00a fb74 	bl	8013bc4 <iprintf>
 80094dc:	f06f 0305 	mvn.w	r3, #5
 80094e0:	e077      	b.n	80095d2 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80094e2:	f107 0308 	add.w	r3, r7, #8
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80094ea:	4a40      	ldr	r2, [pc, #256]	; (80095ec <dhcp_parse_reply+0x594>)
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	4413      	add	r3, r2
 80094f0:	2201      	movs	r2, #1
 80094f2:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	493f      	ldr	r1, [pc, #252]	; (80095f4 <dhcp_parse_reply+0x59c>)
 80094f8:	6a3b      	ldr	r3, [r7, #32]
 80094fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80094fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009500:	895b      	ldrh	r3, [r3, #10]
 8009502:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009504:	429a      	cmp	r2, r3
 8009506:	d324      	bcc.n	8009552 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8009508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950a:	895b      	ldrh	r3, [r3, #10]
 800950c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	895b      	ldrh	r3, [r3, #10]
 8009516:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800951c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800951e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009520:	429a      	cmp	r2, r3
 8009522:	d213      	bcs.n	800954c <dhcp_parse_reply+0x4f4>
        q = q->next;
 8009524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	2b00      	cmp	r3, #0
 800952e:	d109      	bne.n	8009544 <dhcp_parse_reply+0x4ec>
 8009530:	4b2a      	ldr	r3, [pc, #168]	; (80095dc <dhcp_parse_reply+0x584>)
 8009532:	f240 629d 	movw	r2, #1693	; 0x69d
 8009536:	4931      	ldr	r1, [pc, #196]	; (80095fc <dhcp_parse_reply+0x5a4>)
 8009538:	482a      	ldr	r0, [pc, #168]	; (80095e4 <dhcp_parse_reply+0x58c>)
 800953a:	f00a fb43 	bl	8013bc4 <iprintf>
 800953e:	f06f 0305 	mvn.w	r3, #5
 8009542:	e046      	b.n	80095d2 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800954a:	e002      	b.n	8009552 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800954c:	f06f 0301 	mvn.w	r3, #1
 8009550:	e03f      	b.n	80095d2 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8009552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00a      	beq.n	800956e <dhcp_parse_reply+0x516>
 8009558:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800955a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800955c:	429a      	cmp	r2, r3
 800955e:	d206      	bcs.n	800956e <dhcp_parse_reply+0x516>
 8009560:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009562:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009564:	4413      	add	r3, r2
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	2bff      	cmp	r3, #255	; 0xff
 800956a:	f47f adb8 	bne.w	80090de <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800956e:	4b1f      	ldr	r3, [pc, #124]	; (80095ec <dhcp_parse_reply+0x594>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d018      	beq.n	80095a8 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009576:	4b1f      	ldr	r3, [pc, #124]	; (80095f4 <dhcp_parse_reply+0x59c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800957c:	4b1b      	ldr	r3, [pc, #108]	; (80095ec <dhcp_parse_reply+0x594>)
 800957e:	2200      	movs	r2, #0
 8009580:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b01      	cmp	r3, #1
 8009586:	d102      	bne.n	800958e <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8009588:	2301      	movs	r3, #1
 800958a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800958c:	e00c      	b.n	80095a8 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b02      	cmp	r3, #2
 8009592:	d102      	bne.n	800959a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8009594:	2301      	movs	r3, #1
 8009596:	62bb      	str	r3, [r7, #40]	; 0x28
 8009598:	e006      	b.n	80095a8 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2b03      	cmp	r3, #3
 800959e:	d103      	bne.n	80095a8 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 80095a0:	2301      	movs	r3, #1
 80095a2:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80095a4:	2301      	movs	r3, #1
 80095a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80095a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d006      	beq.n	80095bc <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80095b2:	236c      	movs	r3, #108	; 0x6c
 80095b4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80095b6:	23ec      	movs	r3, #236	; 0xec
 80095b8:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80095ba:	e56a      	b.n	8009092 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d006      	beq.n	80095d0 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80095c2:	2300      	movs	r3, #0
 80095c4:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80095c6:	232c      	movs	r3, #44	; 0x2c
 80095c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80095ca:	236c      	movs	r3, #108	; 0x6c
 80095cc:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80095ce:	e560      	b.n	8009092 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3740      	adds	r7, #64	; 0x40
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	08014cd0 	.word	0x08014cd0
 80095e0:	08014f90 	.word	0x08014f90
 80095e4:	08014d68 	.word	0x08014d68
 80095e8:	08014fd4 	.word	0x08014fd4
 80095ec:	24005210 	.word	0x24005210
 80095f0:	08014fe8 	.word	0x08014fe8
 80095f4:	240051f0 	.word	0x240051f0
 80095f8:	08015000 	.word	0x08015000
 80095fc:	08015014 	.word	0x08015014

08009600 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b08a      	sub	sp, #40	; 0x28
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
 800960c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800960e:	4b60      	ldr	r3, [pc, #384]	; (8009790 <dhcp_recv+0x190>)
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	2b00      	cmp	r3, #0
 8009624:	f000 809d 	beq.w	8009762 <dhcp_recv+0x162>
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	791b      	ldrb	r3, [r3, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 8098 	beq.w	8009762 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	895b      	ldrh	r3, [r3, #10]
 8009636:	2b2b      	cmp	r3, #43	; 0x2b
 8009638:	f240 8095 	bls.w	8009766 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	2b02      	cmp	r3, #2
 8009642:	f040 8092 	bne.w	800976a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8009646:	2300      	movs	r3, #0
 8009648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800964c:	e012      	b.n	8009674 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800964e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009652:	6a3a      	ldr	r2, [r7, #32]
 8009654:	4413      	add	r3, r2
 8009656:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800965a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800965e:	69b9      	ldr	r1, [r7, #24]
 8009660:	440b      	add	r3, r1
 8009662:	7f1b      	ldrb	r3, [r3, #28]
 8009664:	429a      	cmp	r2, r3
 8009666:	f040 8082 	bne.w	800976e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800966a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800966e:	3301      	adds	r3, #1
 8009670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800967a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800967e:	429a      	cmp	r2, r3
 8009680:	d203      	bcs.n	800968a <dhcp_recv+0x8a>
 8009682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009686:	2b05      	cmp	r3, #5
 8009688:	d9e1      	bls.n	800964e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe fb01 	bl	8007c96 <lwip_htonl>
 8009694:	4602      	mov	r2, r0
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	429a      	cmp	r2, r3
 800969c:	d169      	bne.n	8009772 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800969e:	69f9      	ldr	r1, [r7, #28]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7ff fcd9 	bl	8009058 <dhcp_parse_reply>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d164      	bne.n	8009776 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80096ac:	4b39      	ldr	r3, [pc, #228]	; (8009794 <dhcp_recv+0x194>)
 80096ae:	785b      	ldrb	r3, [r3, #1]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d062      	beq.n	800977a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80096ba:	4b37      	ldr	r3, [pc, #220]	; (8009798 <dhcp_recv+0x198>)
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80096c0:	7cfb      	ldrb	r3, [r7, #19]
 80096c2:	2b05      	cmp	r3, #5
 80096c4:	d12a      	bne.n	800971c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	795b      	ldrb	r3, [r3, #5]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d112      	bne.n	80096f4 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80096ce:	6979      	ldr	r1, [r7, #20]
 80096d0:	6a38      	ldr	r0, [r7, #32]
 80096d2:	f7fe fe17 	bl	8008304 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80096dc:	f003 0308 	and.w	r3, r3, #8
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d003      	beq.n	80096ec <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80096e4:	6a38      	ldr	r0, [r7, #32]
 80096e6:	f7fe fb85 	bl	8007df4 <dhcp_check>
 80096ea:	e049      	b.n	8009780 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80096ec:	6a38      	ldr	r0, [r7, #32]
 80096ee:	f7ff f867 	bl	80087c0 <dhcp_bind>
 80096f2:	e045      	b.n	8009780 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	795b      	ldrb	r3, [r3, #5]
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d007      	beq.n	800970c <dhcp_recv+0x10c>
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	795b      	ldrb	r3, [r3, #5]
 8009700:	2b04      	cmp	r3, #4
 8009702:	d003      	beq.n	800970c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8009708:	2b05      	cmp	r3, #5
 800970a:	d139      	bne.n	8009780 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800970c:	6979      	ldr	r1, [r7, #20]
 800970e:	6a38      	ldr	r0, [r7, #32]
 8009710:	f7fe fdf8 	bl	8008304 <dhcp_handle_ack>
      dhcp_bind(netif);
 8009714:	6a38      	ldr	r0, [r7, #32]
 8009716:	f7ff f853 	bl	80087c0 <dhcp_bind>
 800971a:	e031      	b.n	8009780 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800971c:	7cfb      	ldrb	r3, [r7, #19]
 800971e:	2b06      	cmp	r3, #6
 8009720:	d113      	bne.n	800974a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8009726:	2b03      	cmp	r3, #3
 8009728:	d00b      	beq.n	8009742 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	795b      	ldrb	r3, [r3, #5]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d007      	beq.n	8009742 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8009736:	2b04      	cmp	r3, #4
 8009738:	d003      	beq.n	8009742 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	795b      	ldrb	r3, [r3, #5]
 800973e:	2b05      	cmp	r3, #5
 8009740:	d103      	bne.n	800974a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8009742:	6a38      	ldr	r0, [r7, #32]
 8009744:	f7fe fb3c 	bl	8007dc0 <dhcp_handle_nak>
 8009748:	e01a      	b.n	8009780 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800974a:	7cfb      	ldrb	r3, [r7, #19]
 800974c:	2b02      	cmp	r3, #2
 800974e:	d116      	bne.n	800977e <dhcp_recv+0x17e>
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	795b      	ldrb	r3, [r3, #5]
 8009754:	2b06      	cmp	r3, #6
 8009756:	d112      	bne.n	800977e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8009758:	6979      	ldr	r1, [r7, #20]
 800975a:	6a38      	ldr	r0, [r7, #32]
 800975c:	f7fe fb7e 	bl	8007e5c <dhcp_handle_offer>
 8009760:	e00e      	b.n	8009780 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8009762:	bf00      	nop
 8009764:	e00c      	b.n	8009780 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8009766:	bf00      	nop
 8009768:	e00a      	b.n	8009780 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800976a:	bf00      	nop
 800976c:	e008      	b.n	8009780 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800976e:	bf00      	nop
 8009770:	e006      	b.n	8009780 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8009772:	bf00      	nop
 8009774:	e004      	b.n	8009780 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8009776:	bf00      	nop
 8009778:	e002      	b.n	8009780 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800977a:	bf00      	nop
 800977c:	e000      	b.n	8009780 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800977e:	bf00      	nop
  pbuf_free(p);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f004 f817 	bl	800d7b4 <pbuf_free>
}
 8009786:	bf00      	nop
 8009788:	3728      	adds	r7, #40	; 0x28
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	24005318 	.word	0x24005318
 8009794:	24005210 	.word	0x24005210
 8009798:	240051f0 	.word	0x240051f0

0800979c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b088      	sub	sp, #32
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	4613      	mov	r3, r2
 80097aa:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d108      	bne.n	80097c4 <dhcp_create_msg+0x28>
 80097b2:	4b5f      	ldr	r3, [pc, #380]	; (8009930 <dhcp_create_msg+0x194>)
 80097b4:	f240 7269 	movw	r2, #1897	; 0x769
 80097b8:	495e      	ldr	r1, [pc, #376]	; (8009934 <dhcp_create_msg+0x198>)
 80097ba:	485f      	ldr	r0, [pc, #380]	; (8009938 <dhcp_create_msg+0x19c>)
 80097bc:	f00a fa02 	bl	8013bc4 <iprintf>
 80097c0:	2300      	movs	r3, #0
 80097c2:	e0b1      	b.n	8009928 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d108      	bne.n	80097dc <dhcp_create_msg+0x40>
 80097ca:	4b59      	ldr	r3, [pc, #356]	; (8009930 <dhcp_create_msg+0x194>)
 80097cc:	f240 726a 	movw	r2, #1898	; 0x76a
 80097d0:	495a      	ldr	r1, [pc, #360]	; (800993c <dhcp_create_msg+0x1a0>)
 80097d2:	4859      	ldr	r0, [pc, #356]	; (8009938 <dhcp_create_msg+0x19c>)
 80097d4:	f00a f9f6 	bl	8013bc4 <iprintf>
 80097d8:	2300      	movs	r3, #0
 80097da:	e0a5      	b.n	8009928 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80097dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80097e0:	f44f 719a 	mov.w	r1, #308	; 0x134
 80097e4:	2036      	movs	r0, #54	; 0x36
 80097e6:	f003 fd01 	bl	800d1ec <pbuf_alloc>
 80097ea:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80097f2:	2300      	movs	r3, #0
 80097f4:	e098      	b.n	8009928 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	895b      	ldrh	r3, [r3, #10]
 80097fa:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80097fe:	d206      	bcs.n	800980e <dhcp_create_msg+0x72>
 8009800:	4b4b      	ldr	r3, [pc, #300]	; (8009930 <dhcp_create_msg+0x194>)
 8009802:	f240 7271 	movw	r2, #1905	; 0x771
 8009806:	494e      	ldr	r1, [pc, #312]	; (8009940 <dhcp_create_msg+0x1a4>)
 8009808:	484b      	ldr	r0, [pc, #300]	; (8009938 <dhcp_create_msg+0x19c>)
 800980a:	f00a f9db 	bl	8013bc4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	2b03      	cmp	r3, #3
 8009812:	d103      	bne.n	800981c <dhcp_create_msg+0x80>
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	795b      	ldrb	r3, [r3, #5]
 8009818:	2b03      	cmp	r3, #3
 800981a:	d10d      	bne.n	8009838 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	799b      	ldrb	r3, [r3, #6]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d105      	bne.n	8009830 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8009824:	f00a f9e6 	bl	8013bf4 <rand>
 8009828:	4603      	mov	r3, r0
 800982a:	461a      	mov	r2, r3
 800982c:	4b45      	ldr	r3, [pc, #276]	; (8009944 <dhcp_create_msg+0x1a8>)
 800982e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8009830:	4b44      	ldr	r3, [pc, #272]	; (8009944 <dhcp_create_msg+0x1a8>)
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800983e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8009842:	2100      	movs	r1, #0
 8009844:	6978      	ldr	r0, [r7, #20]
 8009846:	f00a f9b5 	bl	8013bb4 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2201      	movs	r2, #1
 800984e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	2201      	movs	r2, #1
 8009854:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4618      	mov	r0, r3
 8009866:	f7fe fa16 	bl	8007c96 <lwip_htonl>
 800986a:	4602      	mov	r2, r0
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8009870:	79fb      	ldrb	r3, [r7, #7]
 8009872:	2b08      	cmp	r3, #8
 8009874:	d010      	beq.n	8009898 <dhcp_create_msg+0xfc>
 8009876:	79fb      	ldrb	r3, [r7, #7]
 8009878:	2b04      	cmp	r3, #4
 800987a:	d00d      	beq.n	8009898 <dhcp_create_msg+0xfc>
 800987c:	79fb      	ldrb	r3, [r7, #7]
 800987e:	2b07      	cmp	r3, #7
 8009880:	d00a      	beq.n	8009898 <dhcp_create_msg+0xfc>
 8009882:	79fb      	ldrb	r3, [r7, #7]
 8009884:	2b03      	cmp	r3, #3
 8009886:	d10c      	bne.n	80098a2 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800988c:	2b05      	cmp	r3, #5
 800988e:	d003      	beq.n	8009898 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	795b      	ldrb	r3, [r3, #5]
 8009894:	2b04      	cmp	r3, #4
 8009896:	d104      	bne.n	80098a2 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	3304      	adds	r3, #4
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80098a2:	2300      	movs	r3, #0
 80098a4:	83fb      	strh	r3, [r7, #30]
 80098a6:	e00c      	b.n	80098c2 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80098a8:	8bfa      	ldrh	r2, [r7, #30]
 80098aa:	8bfb      	ldrh	r3, [r7, #30]
 80098ac:	68f9      	ldr	r1, [r7, #12]
 80098ae:	440a      	add	r2, r1
 80098b0:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	4413      	add	r3, r2
 80098b8:	460a      	mov	r2, r1
 80098ba:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80098bc:	8bfb      	ldrh	r3, [r7, #30]
 80098be:	3301      	adds	r3, #1
 80098c0:	83fb      	strh	r3, [r7, #30]
 80098c2:	8bfb      	ldrh	r3, [r7, #30]
 80098c4:	2b05      	cmp	r3, #5
 80098c6:	d9ef      	bls.n	80098a8 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80098d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80098d4:	2200      	movs	r2, #0
 80098d6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80098da:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80098de:	2200      	movs	r2, #0
 80098e0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80098e4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80098e8:	2200      	movs	r2, #0
 80098ea:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80098ee:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80098f8:	2301      	movs	r3, #1
 80098fa:	2235      	movs	r2, #53	; 0x35
 80098fc:	2000      	movs	r0, #0
 80098fe:	f7ff fadb 	bl	8008eb8 <dhcp_option>
 8009902:	4603      	mov	r3, r0
 8009904:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800990c:	79fa      	ldrb	r2, [r7, #7]
 800990e:	8a7b      	ldrh	r3, [r7, #18]
 8009910:	4618      	mov	r0, r3
 8009912:	f7ff fb05 	bl	8008f20 <dhcp_option_byte>
 8009916:	4603      	mov	r3, r0
 8009918:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	8a7a      	ldrh	r2, [r7, #18]
 8009924:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8009926:	69bb      	ldr	r3, [r7, #24]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3720      	adds	r7, #32
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	08014cd0 	.word	0x08014cd0
 8009934:	08015028 	.word	0x08015028
 8009938:	08014d68 	.word	0x08014d68
 800993c:	08015048 	.word	0x08015048
 8009940:	08015068 	.word	0x08015068
 8009944:	24005220 	.word	0x24005220

08009948 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	4603      	mov	r3, r0
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8009956:	89fb      	ldrh	r3, [r7, #14]
 8009958:	1c5a      	adds	r2, r3, #1
 800995a:	81fa      	strh	r2, [r7, #14]
 800995c:	461a      	mov	r2, r3
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	4413      	add	r3, r2
 8009962:	22ff      	movs	r2, #255	; 0xff
 8009964:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8009966:	e007      	b.n	8009978 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8009968:	89fb      	ldrh	r3, [r7, #14]
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	81fa      	strh	r2, [r7, #14]
 800996e:	461a      	mov	r2, r3
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	4413      	add	r3, r2
 8009974:	2200      	movs	r2, #0
 8009976:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8009978:	89fb      	ldrh	r3, [r7, #14]
 800997a:	2b43      	cmp	r3, #67	; 0x43
 800997c:	d904      	bls.n	8009988 <dhcp_option_trailer+0x40>
 800997e:	89fb      	ldrh	r3, [r7, #14]
 8009980:	f003 0303 	and.w	r3, r3, #3
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <dhcp_option_trailer+0x46>
 8009988:	89fb      	ldrh	r3, [r7, #14]
 800998a:	2b43      	cmp	r3, #67	; 0x43
 800998c:	d9ec      	bls.n	8009968 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800998e:	89fb      	ldrh	r3, [r7, #14]
 8009990:	33f0      	adds	r3, #240	; 0xf0
 8009992:	b29b      	uxth	r3, r3
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f003 fd86 	bl	800d4a8 <pbuf_realloc>
}
 800999c:	bf00      	nop
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d017      	beq.n	80099e2 <dhcp_supplied_address+0x3e>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d013      	beq.n	80099e2 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099be:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	795b      	ldrb	r3, [r3, #5]
 80099c4:	2b0a      	cmp	r3, #10
 80099c6:	d007      	beq.n	80099d8 <dhcp_supplied_address+0x34>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	795b      	ldrb	r3, [r3, #5]
 80099cc:	2b05      	cmp	r3, #5
 80099ce:	d003      	beq.n	80099d8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80099d4:	2b04      	cmp	r3, #4
 80099d6:	d101      	bne.n	80099dc <dhcp_supplied_address+0x38>
 80099d8:	2301      	movs	r3, #1
 80099da:	e000      	b.n	80099de <dhcp_supplied_address+0x3a>
 80099dc:	2300      	movs	r3, #0
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	e000      	b.n	80099e4 <dhcp_supplied_address+0x40>
  }
  return 0;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3714      	adds	r7, #20
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80099f8:	4915      	ldr	r1, [pc, #84]	; (8009a50 <etharp_free_entry+0x60>)
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	4613      	mov	r3, r2
 80099fe:	005b      	lsls	r3, r3, #1
 8009a00:	4413      	add	r3, r2
 8009a02:	00db      	lsls	r3, r3, #3
 8009a04:	440b      	add	r3, r1
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d013      	beq.n	8009a34 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009a0c:	4910      	ldr	r1, [pc, #64]	; (8009a50 <etharp_free_entry+0x60>)
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	4613      	mov	r3, r2
 8009a12:	005b      	lsls	r3, r3, #1
 8009a14:	4413      	add	r3, r2
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	440b      	add	r3, r1
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f003 fec9 	bl	800d7b4 <pbuf_free>
    arp_table[i].q = NULL;
 8009a22:	490b      	ldr	r1, [pc, #44]	; (8009a50 <etharp_free_entry+0x60>)
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	4613      	mov	r3, r2
 8009a28:	005b      	lsls	r3, r3, #1
 8009a2a:	4413      	add	r3, r2
 8009a2c:	00db      	lsls	r3, r3, #3
 8009a2e:	440b      	add	r3, r1
 8009a30:	2200      	movs	r2, #0
 8009a32:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8009a34:	4906      	ldr	r1, [pc, #24]	; (8009a50 <etharp_free_entry+0x60>)
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	005b      	lsls	r3, r3, #1
 8009a3c:	4413      	add	r3, r2
 8009a3e:	00db      	lsls	r3, r3, #3
 8009a40:	440b      	add	r3, r1
 8009a42:	3314      	adds	r3, #20
 8009a44:	2200      	movs	r2, #0
 8009a46:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8009a48:	bf00      	nop
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	24005224 	.word	0x24005224

08009a54 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	607b      	str	r3, [r7, #4]
 8009a5e:	e096      	b.n	8009b8e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8009a60:	494f      	ldr	r1, [pc, #316]	; (8009ba0 <etharp_tmr+0x14c>)
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	4613      	mov	r3, r2
 8009a66:	005b      	lsls	r3, r3, #1
 8009a68:	4413      	add	r3, r2
 8009a6a:	00db      	lsls	r3, r3, #3
 8009a6c:	440b      	add	r3, r1
 8009a6e:	3314      	adds	r3, #20
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8009a74:	78fb      	ldrb	r3, [r7, #3]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 8086 	beq.w	8009b88 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8009a7c:	4948      	ldr	r1, [pc, #288]	; (8009ba0 <etharp_tmr+0x14c>)
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	4613      	mov	r3, r2
 8009a82:	005b      	lsls	r3, r3, #1
 8009a84:	4413      	add	r3, r2
 8009a86:	00db      	lsls	r3, r3, #3
 8009a88:	440b      	add	r3, r1
 8009a8a:	3312      	adds	r3, #18
 8009a8c:	881b      	ldrh	r3, [r3, #0]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	b298      	uxth	r0, r3
 8009a92:	4943      	ldr	r1, [pc, #268]	; (8009ba0 <etharp_tmr+0x14c>)
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	4613      	mov	r3, r2
 8009a98:	005b      	lsls	r3, r3, #1
 8009a9a:	4413      	add	r3, r2
 8009a9c:	00db      	lsls	r3, r3, #3
 8009a9e:	440b      	add	r3, r1
 8009aa0:	3312      	adds	r3, #18
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009aa6:	493e      	ldr	r1, [pc, #248]	; (8009ba0 <etharp_tmr+0x14c>)
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	4413      	add	r3, r2
 8009ab0:	00db      	lsls	r3, r3, #3
 8009ab2:	440b      	add	r3, r1
 8009ab4:	3312      	adds	r3, #18
 8009ab6:	881b      	ldrh	r3, [r3, #0]
 8009ab8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009abc:	d215      	bcs.n	8009aea <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009abe:	4938      	ldr	r1, [pc, #224]	; (8009ba0 <etharp_tmr+0x14c>)
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	005b      	lsls	r3, r3, #1
 8009ac6:	4413      	add	r3, r2
 8009ac8:	00db      	lsls	r3, r3, #3
 8009aca:	440b      	add	r3, r1
 8009acc:	3314      	adds	r3, #20
 8009ace:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d10e      	bne.n	8009af2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8009ad4:	4932      	ldr	r1, [pc, #200]	; (8009ba0 <etharp_tmr+0x14c>)
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	4413      	add	r3, r2
 8009ade:	00db      	lsls	r3, r3, #3
 8009ae0:	440b      	add	r3, r1
 8009ae2:	3312      	adds	r3, #18
 8009ae4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009ae6:	2b04      	cmp	r3, #4
 8009ae8:	d903      	bls.n	8009af2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7ff ff80 	bl	80099f0 <etharp_free_entry>
 8009af0:	e04a      	b.n	8009b88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8009af2:	492b      	ldr	r1, [pc, #172]	; (8009ba0 <etharp_tmr+0x14c>)
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	4613      	mov	r3, r2
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	4413      	add	r3, r2
 8009afc:	00db      	lsls	r3, r3, #3
 8009afe:	440b      	add	r3, r1
 8009b00:	3314      	adds	r3, #20
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	2b03      	cmp	r3, #3
 8009b06:	d10a      	bne.n	8009b1e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009b08:	4925      	ldr	r1, [pc, #148]	; (8009ba0 <etharp_tmr+0x14c>)
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	005b      	lsls	r3, r3, #1
 8009b10:	4413      	add	r3, r2
 8009b12:	00db      	lsls	r3, r3, #3
 8009b14:	440b      	add	r3, r1
 8009b16:	3314      	adds	r3, #20
 8009b18:	2204      	movs	r2, #4
 8009b1a:	701a      	strb	r2, [r3, #0]
 8009b1c:	e034      	b.n	8009b88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8009b1e:	4920      	ldr	r1, [pc, #128]	; (8009ba0 <etharp_tmr+0x14c>)
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	4613      	mov	r3, r2
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	4413      	add	r3, r2
 8009b28:	00db      	lsls	r3, r3, #3
 8009b2a:	440b      	add	r3, r1
 8009b2c:	3314      	adds	r3, #20
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	2b04      	cmp	r3, #4
 8009b32:	d10a      	bne.n	8009b4a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009b34:	491a      	ldr	r1, [pc, #104]	; (8009ba0 <etharp_tmr+0x14c>)
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	005b      	lsls	r3, r3, #1
 8009b3c:	4413      	add	r3, r2
 8009b3e:	00db      	lsls	r3, r3, #3
 8009b40:	440b      	add	r3, r1
 8009b42:	3314      	adds	r3, #20
 8009b44:	2202      	movs	r2, #2
 8009b46:	701a      	strb	r2, [r3, #0]
 8009b48:	e01e      	b.n	8009b88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009b4a:	4915      	ldr	r1, [pc, #84]	; (8009ba0 <etharp_tmr+0x14c>)
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	4413      	add	r3, r2
 8009b54:	00db      	lsls	r3, r3, #3
 8009b56:	440b      	add	r3, r1
 8009b58:	3314      	adds	r3, #20
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d113      	bne.n	8009b88 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8009b60:	490f      	ldr	r1, [pc, #60]	; (8009ba0 <etharp_tmr+0x14c>)
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	4613      	mov	r3, r2
 8009b66:	005b      	lsls	r3, r3, #1
 8009b68:	4413      	add	r3, r2
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	440b      	add	r3, r1
 8009b6e:	3308      	adds	r3, #8
 8009b70:	6818      	ldr	r0, [r3, #0]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	4613      	mov	r3, r2
 8009b76:	005b      	lsls	r3, r3, #1
 8009b78:	4413      	add	r3, r2
 8009b7a:	00db      	lsls	r3, r3, #3
 8009b7c:	4a08      	ldr	r2, [pc, #32]	; (8009ba0 <etharp_tmr+0x14c>)
 8009b7e:	4413      	add	r3, r2
 8009b80:	3304      	adds	r3, #4
 8009b82:	4619      	mov	r1, r3
 8009b84:	f000 fe72 	bl	800a86c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	607b      	str	r3, [r7, #4]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2b09      	cmp	r3, #9
 8009b92:	f77f af65 	ble.w	8009a60 <etharp_tmr+0xc>
      }
    }
  }
}
 8009b96:	bf00      	nop
 8009b98:	bf00      	nop
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	24005224 	.word	0x24005224

08009ba4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b08a      	sub	sp, #40	; 0x28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	460b      	mov	r3, r1
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8009bb2:	230a      	movs	r3, #10
 8009bb4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009bb6:	230a      	movs	r3, #10
 8009bb8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8009bba:	230a      	movs	r3, #10
 8009bbc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8009bc2:	230a      	movs	r3, #10
 8009bc4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	83bb      	strh	r3, [r7, #28]
 8009bca:	2300      	movs	r3, #0
 8009bcc:	837b      	strh	r3, [r7, #26]
 8009bce:	2300      	movs	r3, #0
 8009bd0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	843b      	strh	r3, [r7, #32]
 8009bd6:	e0ae      	b.n	8009d36 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8009bd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009bdc:	49a6      	ldr	r1, [pc, #664]	; (8009e78 <etharp_find_entry+0x2d4>)
 8009bde:	4613      	mov	r3, r2
 8009be0:	005b      	lsls	r3, r3, #1
 8009be2:	4413      	add	r3, r2
 8009be4:	00db      	lsls	r3, r3, #3
 8009be6:	440b      	add	r3, r1
 8009be8:	3314      	adds	r3, #20
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009bee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009bf2:	2b0a      	cmp	r3, #10
 8009bf4:	d105      	bne.n	8009c02 <etharp_find_entry+0x5e>
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d102      	bne.n	8009c02 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8009bfc:	8c3b      	ldrh	r3, [r7, #32]
 8009bfe:	847b      	strh	r3, [r7, #34]	; 0x22
 8009c00:	e095      	b.n	8009d2e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8009c02:	7dfb      	ldrb	r3, [r7, #23]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f000 8092 	beq.w	8009d2e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8009c0a:	7dfb      	ldrb	r3, [r7, #23]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d009      	beq.n	8009c24 <etharp_find_entry+0x80>
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d806      	bhi.n	8009c24 <etharp_find_entry+0x80>
 8009c16:	4b99      	ldr	r3, [pc, #612]	; (8009e7c <etharp_find_entry+0x2d8>)
 8009c18:	f240 1223 	movw	r2, #291	; 0x123
 8009c1c:	4998      	ldr	r1, [pc, #608]	; (8009e80 <etharp_find_entry+0x2dc>)
 8009c1e:	4899      	ldr	r0, [pc, #612]	; (8009e84 <etharp_find_entry+0x2e0>)
 8009c20:	f009 ffd0 	bl	8013bc4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d020      	beq.n	8009c6c <etharp_find_entry+0xc8>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6819      	ldr	r1, [r3, #0]
 8009c2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009c32:	4891      	ldr	r0, [pc, #580]	; (8009e78 <etharp_find_entry+0x2d4>)
 8009c34:	4613      	mov	r3, r2
 8009c36:	005b      	lsls	r3, r3, #1
 8009c38:	4413      	add	r3, r2
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	4403      	add	r3, r0
 8009c3e:	3304      	adds	r3, #4
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4299      	cmp	r1, r3
 8009c44:	d112      	bne.n	8009c6c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00c      	beq.n	8009c66 <etharp_find_entry+0xc2>
 8009c4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009c50:	4989      	ldr	r1, [pc, #548]	; (8009e78 <etharp_find_entry+0x2d4>)
 8009c52:	4613      	mov	r3, r2
 8009c54:	005b      	lsls	r3, r3, #1
 8009c56:	4413      	add	r3, r2
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	440b      	add	r3, r1
 8009c5c:	3308      	adds	r3, #8
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d102      	bne.n	8009c6c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8009c66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009c6a:	e100      	b.n	8009e6e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d140      	bne.n	8009cf4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8009c72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009c76:	4980      	ldr	r1, [pc, #512]	; (8009e78 <etharp_find_entry+0x2d4>)
 8009c78:	4613      	mov	r3, r2
 8009c7a:	005b      	lsls	r3, r3, #1
 8009c7c:	4413      	add	r3, r2
 8009c7e:	00db      	lsls	r3, r3, #3
 8009c80:	440b      	add	r3, r1
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d01a      	beq.n	8009cbe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8009c88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009c8c:	497a      	ldr	r1, [pc, #488]	; (8009e78 <etharp_find_entry+0x2d4>)
 8009c8e:	4613      	mov	r3, r2
 8009c90:	005b      	lsls	r3, r3, #1
 8009c92:	4413      	add	r3, r2
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	440b      	add	r3, r1
 8009c98:	3312      	adds	r3, #18
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	8bba      	ldrh	r2, [r7, #28]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d845      	bhi.n	8009d2e <etharp_find_entry+0x18a>
            old_queue = i;
 8009ca2:	8c3b      	ldrh	r3, [r7, #32]
 8009ca4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8009ca6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009caa:	4973      	ldr	r1, [pc, #460]	; (8009e78 <etharp_find_entry+0x2d4>)
 8009cac:	4613      	mov	r3, r2
 8009cae:	005b      	lsls	r3, r3, #1
 8009cb0:	4413      	add	r3, r2
 8009cb2:	00db      	lsls	r3, r3, #3
 8009cb4:	440b      	add	r3, r1
 8009cb6:	3312      	adds	r3, #18
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	83bb      	strh	r3, [r7, #28]
 8009cbc:	e037      	b.n	8009d2e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8009cbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009cc2:	496d      	ldr	r1, [pc, #436]	; (8009e78 <etharp_find_entry+0x2d4>)
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	005b      	lsls	r3, r3, #1
 8009cc8:	4413      	add	r3, r2
 8009cca:	00db      	lsls	r3, r3, #3
 8009ccc:	440b      	add	r3, r1
 8009cce:	3312      	adds	r3, #18
 8009cd0:	881b      	ldrh	r3, [r3, #0]
 8009cd2:	8b7a      	ldrh	r2, [r7, #26]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d82a      	bhi.n	8009d2e <etharp_find_entry+0x18a>
            old_pending = i;
 8009cd8:	8c3b      	ldrh	r3, [r7, #32]
 8009cda:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8009cdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009ce0:	4965      	ldr	r1, [pc, #404]	; (8009e78 <etharp_find_entry+0x2d4>)
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	4413      	add	r3, r2
 8009ce8:	00db      	lsls	r3, r3, #3
 8009cea:	440b      	add	r3, r1
 8009cec:	3312      	adds	r3, #18
 8009cee:	881b      	ldrh	r3, [r3, #0]
 8009cf0:	837b      	strh	r3, [r7, #26]
 8009cf2:	e01c      	b.n	8009d2e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8009cf4:	7dfb      	ldrb	r3, [r7, #23]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d919      	bls.n	8009d2e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8009cfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009cfe:	495e      	ldr	r1, [pc, #376]	; (8009e78 <etharp_find_entry+0x2d4>)
 8009d00:	4613      	mov	r3, r2
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	4413      	add	r3, r2
 8009d06:	00db      	lsls	r3, r3, #3
 8009d08:	440b      	add	r3, r1
 8009d0a:	3312      	adds	r3, #18
 8009d0c:	881b      	ldrh	r3, [r3, #0]
 8009d0e:	8b3a      	ldrh	r2, [r7, #24]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d80c      	bhi.n	8009d2e <etharp_find_entry+0x18a>
            old_stable = i;
 8009d14:	8c3b      	ldrh	r3, [r7, #32]
 8009d16:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8009d18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009d1c:	4956      	ldr	r1, [pc, #344]	; (8009e78 <etharp_find_entry+0x2d4>)
 8009d1e:	4613      	mov	r3, r2
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	4413      	add	r3, r2
 8009d24:	00db      	lsls	r3, r3, #3
 8009d26:	440b      	add	r3, r1
 8009d28:	3312      	adds	r3, #18
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009d2e:	8c3b      	ldrh	r3, [r7, #32]
 8009d30:	3301      	adds	r3, #1
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	843b      	strh	r3, [r7, #32]
 8009d36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009d3a:	2b09      	cmp	r3, #9
 8009d3c:	f77f af4c 	ble.w	8009bd8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8009d40:	7afb      	ldrb	r3, [r7, #11]
 8009d42:	f003 0302 	and.w	r3, r3, #2
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d108      	bne.n	8009d5c <etharp_find_entry+0x1b8>
 8009d4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009d4e:	2b0a      	cmp	r3, #10
 8009d50:	d107      	bne.n	8009d62 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8009d52:	7afb      	ldrb	r3, [r7, #11]
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d102      	bne.n	8009d62 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8009d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d60:	e085      	b.n	8009e6e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8009d62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009d66:	2b09      	cmp	r3, #9
 8009d68:	dc02      	bgt.n	8009d70 <etharp_find_entry+0x1cc>
    i = empty;
 8009d6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009d6c:	843b      	strh	r3, [r7, #32]
 8009d6e:	e039      	b.n	8009de4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8009d70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009d74:	2b09      	cmp	r3, #9
 8009d76:	dc14      	bgt.n	8009da2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8009d78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d7a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8009d7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009d80:	493d      	ldr	r1, [pc, #244]	; (8009e78 <etharp_find_entry+0x2d4>)
 8009d82:	4613      	mov	r3, r2
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	4413      	add	r3, r2
 8009d88:	00db      	lsls	r3, r3, #3
 8009d8a:	440b      	add	r3, r1
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d018      	beq.n	8009dc4 <etharp_find_entry+0x220>
 8009d92:	4b3a      	ldr	r3, [pc, #232]	; (8009e7c <etharp_find_entry+0x2d8>)
 8009d94:	f240 126d 	movw	r2, #365	; 0x16d
 8009d98:	493b      	ldr	r1, [pc, #236]	; (8009e88 <etharp_find_entry+0x2e4>)
 8009d9a:	483a      	ldr	r0, [pc, #232]	; (8009e84 <etharp_find_entry+0x2e0>)
 8009d9c:	f009 ff12 	bl	8013bc4 <iprintf>
 8009da0:	e010      	b.n	8009dc4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8009da2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009da6:	2b09      	cmp	r3, #9
 8009da8:	dc02      	bgt.n	8009db0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8009daa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009dac:	843b      	strh	r3, [r7, #32]
 8009dae:	e009      	b.n	8009dc4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8009db0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009db4:	2b09      	cmp	r3, #9
 8009db6:	dc02      	bgt.n	8009dbe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8009db8:	8bfb      	ldrh	r3, [r7, #30]
 8009dba:	843b      	strh	r3, [r7, #32]
 8009dbc:	e002      	b.n	8009dc4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8009dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8009dc2:	e054      	b.n	8009e6e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009dc4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009dc8:	2b09      	cmp	r3, #9
 8009dca:	dd06      	ble.n	8009dda <etharp_find_entry+0x236>
 8009dcc:	4b2b      	ldr	r3, [pc, #172]	; (8009e7c <etharp_find_entry+0x2d8>)
 8009dce:	f240 127f 	movw	r2, #383	; 0x17f
 8009dd2:	492e      	ldr	r1, [pc, #184]	; (8009e8c <etharp_find_entry+0x2e8>)
 8009dd4:	482b      	ldr	r0, [pc, #172]	; (8009e84 <etharp_find_entry+0x2e0>)
 8009dd6:	f009 fef5 	bl	8013bc4 <iprintf>
    etharp_free_entry(i);
 8009dda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7ff fe06 	bl	80099f0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009de4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009de8:	2b09      	cmp	r3, #9
 8009dea:	dd06      	ble.n	8009dfa <etharp_find_entry+0x256>
 8009dec:	4b23      	ldr	r3, [pc, #140]	; (8009e7c <etharp_find_entry+0x2d8>)
 8009dee:	f240 1283 	movw	r2, #387	; 0x183
 8009df2:	4926      	ldr	r1, [pc, #152]	; (8009e8c <etharp_find_entry+0x2e8>)
 8009df4:	4823      	ldr	r0, [pc, #140]	; (8009e84 <etharp_find_entry+0x2e0>)
 8009df6:	f009 fee5 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8009dfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009dfe:	491e      	ldr	r1, [pc, #120]	; (8009e78 <etharp_find_entry+0x2d4>)
 8009e00:	4613      	mov	r3, r2
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	4413      	add	r3, r2
 8009e06:	00db      	lsls	r3, r3, #3
 8009e08:	440b      	add	r3, r1
 8009e0a:	3314      	adds	r3, #20
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d006      	beq.n	8009e20 <etharp_find_entry+0x27c>
 8009e12:	4b1a      	ldr	r3, [pc, #104]	; (8009e7c <etharp_find_entry+0x2d8>)
 8009e14:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8009e18:	491d      	ldr	r1, [pc, #116]	; (8009e90 <etharp_find_entry+0x2ec>)
 8009e1a:	481a      	ldr	r0, [pc, #104]	; (8009e84 <etharp_find_entry+0x2e0>)
 8009e1c:	f009 fed2 	bl	8013bc4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00b      	beq.n	8009e3e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8009e26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6819      	ldr	r1, [r3, #0]
 8009e2e:	4812      	ldr	r0, [pc, #72]	; (8009e78 <etharp_find_entry+0x2d4>)
 8009e30:	4613      	mov	r3, r2
 8009e32:	005b      	lsls	r3, r3, #1
 8009e34:	4413      	add	r3, r2
 8009e36:	00db      	lsls	r3, r3, #3
 8009e38:	4403      	add	r3, r0
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8009e3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009e42:	490d      	ldr	r1, [pc, #52]	; (8009e78 <etharp_find_entry+0x2d4>)
 8009e44:	4613      	mov	r3, r2
 8009e46:	005b      	lsls	r3, r3, #1
 8009e48:	4413      	add	r3, r2
 8009e4a:	00db      	lsls	r3, r3, #3
 8009e4c:	440b      	add	r3, r1
 8009e4e:	3312      	adds	r3, #18
 8009e50:	2200      	movs	r2, #0
 8009e52:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8009e54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009e58:	4907      	ldr	r1, [pc, #28]	; (8009e78 <etharp_find_entry+0x2d4>)
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	005b      	lsls	r3, r3, #1
 8009e5e:	4413      	add	r3, r2
 8009e60:	00db      	lsls	r3, r3, #3
 8009e62:	440b      	add	r3, r1
 8009e64:	3308      	adds	r3, #8
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8009e6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3728      	adds	r7, #40	; 0x28
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	24005224 	.word	0x24005224
 8009e7c:	080150a8 	.word	0x080150a8
 8009e80:	08015118 	.word	0x08015118
 8009e84:	08015158 	.word	0x08015158
 8009e88:	08015180 	.word	0x08015180
 8009e8c:	08015198 	.word	0x08015198
 8009e90:	080151ac 	.word	0x080151ac

08009e94 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b088      	sub	sp, #32
 8009e98:	af02      	add	r7, sp, #8
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009ea8:	2b06      	cmp	r3, #6
 8009eaa:	d006      	beq.n	8009eba <etharp_update_arp_entry+0x26>
 8009eac:	4b48      	ldr	r3, [pc, #288]	; (8009fd0 <etharp_update_arp_entry+0x13c>)
 8009eae:	f240 12a9 	movw	r2, #425	; 0x1a9
 8009eb2:	4948      	ldr	r1, [pc, #288]	; (8009fd4 <etharp_update_arp_entry+0x140>)
 8009eb4:	4848      	ldr	r0, [pc, #288]	; (8009fd8 <etharp_update_arp_entry+0x144>)
 8009eb6:	f009 fe85 	bl	8013bc4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d012      	beq.n	8009ee6 <etharp_update_arp_entry+0x52>
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00e      	beq.n	8009ee6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68f9      	ldr	r1, [r7, #12]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f001 faee 	bl	800b4b0 <ip4_addr_isbroadcast_u32>
 8009ed4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d105      	bne.n	8009ee6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009ee2:	2be0      	cmp	r3, #224	; 0xe0
 8009ee4:	d102      	bne.n	8009eec <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009ee6:	f06f 030f 	mvn.w	r3, #15
 8009eea:	e06c      	b.n	8009fc6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8009eec:	78fb      	ldrb	r3, [r7, #3]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	68b8      	ldr	r0, [r7, #8]
 8009ef4:	f7ff fe56 	bl	8009ba4 <etharp_find_entry>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8009efc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	da02      	bge.n	8009f0a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8009f04:	8afb      	ldrh	r3, [r7, #22]
 8009f06:	b25b      	sxtb	r3, r3
 8009f08:	e05d      	b.n	8009fc6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8009f0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009f0e:	4933      	ldr	r1, [pc, #204]	; (8009fdc <etharp_update_arp_entry+0x148>)
 8009f10:	4613      	mov	r3, r2
 8009f12:	005b      	lsls	r3, r3, #1
 8009f14:	4413      	add	r3, r2
 8009f16:	00db      	lsls	r3, r3, #3
 8009f18:	440b      	add	r3, r1
 8009f1a:	3314      	adds	r3, #20
 8009f1c:	2202      	movs	r2, #2
 8009f1e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8009f20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009f24:	492d      	ldr	r1, [pc, #180]	; (8009fdc <etharp_update_arp_entry+0x148>)
 8009f26:	4613      	mov	r3, r2
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	4413      	add	r3, r2
 8009f2c:	00db      	lsls	r3, r3, #3
 8009f2e:	440b      	add	r3, r1
 8009f30:	3308      	adds	r3, #8
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8009f36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	005b      	lsls	r3, r3, #1
 8009f3e:	4413      	add	r3, r2
 8009f40:	00db      	lsls	r3, r3, #3
 8009f42:	3308      	adds	r3, #8
 8009f44:	4a25      	ldr	r2, [pc, #148]	; (8009fdc <etharp_update_arp_entry+0x148>)
 8009f46:	4413      	add	r3, r2
 8009f48:	3304      	adds	r3, #4
 8009f4a:	2206      	movs	r2, #6
 8009f4c:	6879      	ldr	r1, [r7, #4]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f009 fe22 	bl	8013b98 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8009f54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009f58:	4920      	ldr	r1, [pc, #128]	; (8009fdc <etharp_update_arp_entry+0x148>)
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	005b      	lsls	r3, r3, #1
 8009f5e:	4413      	add	r3, r2
 8009f60:	00db      	lsls	r3, r3, #3
 8009f62:	440b      	add	r3, r1
 8009f64:	3312      	adds	r3, #18
 8009f66:	2200      	movs	r2, #0
 8009f68:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8009f6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009f6e:	491b      	ldr	r1, [pc, #108]	; (8009fdc <etharp_update_arp_entry+0x148>)
 8009f70:	4613      	mov	r3, r2
 8009f72:	005b      	lsls	r3, r3, #1
 8009f74:	4413      	add	r3, r2
 8009f76:	00db      	lsls	r3, r3, #3
 8009f78:	440b      	add	r3, r1
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d021      	beq.n	8009fc4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8009f80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009f84:	4915      	ldr	r1, [pc, #84]	; (8009fdc <etharp_update_arp_entry+0x148>)
 8009f86:	4613      	mov	r3, r2
 8009f88:	005b      	lsls	r3, r3, #1
 8009f8a:	4413      	add	r3, r2
 8009f8c:	00db      	lsls	r3, r3, #3
 8009f8e:	440b      	add	r3, r1
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8009f94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009f98:	4910      	ldr	r1, [pc, #64]	; (8009fdc <etharp_update_arp_entry+0x148>)
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	4413      	add	r3, r2
 8009fa0:	00db      	lsls	r3, r3, #3
 8009fa2:	440b      	add	r3, r1
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8009fae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6939      	ldr	r1, [r7, #16]
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 fcf7 	bl	800a9ac <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8009fbe:	6938      	ldr	r0, [r7, #16]
 8009fc0:	f003 fbf8 	bl	800d7b4 <pbuf_free>
  }
  return ERR_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3718      	adds	r7, #24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	080150a8 	.word	0x080150a8
 8009fd4:	080151d8 	.word	0x080151d8
 8009fd8:	08015158 	.word	0x08015158
 8009fdc:	24005224 	.word	0x24005224

08009fe0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009fe8:	2300      	movs	r3, #0
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	e01e      	b.n	800a02c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8009fee:	4913      	ldr	r1, [pc, #76]	; (800a03c <etharp_cleanup_netif+0x5c>)
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	4413      	add	r3, r2
 8009ff8:	00db      	lsls	r3, r3, #3
 8009ffa:	440b      	add	r3, r1
 8009ffc:	3314      	adds	r3, #20
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800a002:	7afb      	ldrb	r3, [r7, #11]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00e      	beq.n	800a026 <etharp_cleanup_netif+0x46>
 800a008:	490c      	ldr	r1, [pc, #48]	; (800a03c <etharp_cleanup_netif+0x5c>)
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	4613      	mov	r3, r2
 800a00e:	005b      	lsls	r3, r3, #1
 800a010:	4413      	add	r3, r2
 800a012:	00db      	lsls	r3, r3, #3
 800a014:	440b      	add	r3, r1
 800a016:	3308      	adds	r3, #8
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d102      	bne.n	800a026 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f7ff fce5 	bl	80099f0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3301      	adds	r3, #1
 800a02a:	60fb      	str	r3, [r7, #12]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b09      	cmp	r3, #9
 800a030:	dddd      	ble.n	8009fee <etharp_cleanup_netif+0xe>
    }
  }
}
 800a032:	bf00      	nop
 800a034:	bf00      	nop
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	24005224 	.word	0x24005224

0800a040 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800a040:	b5b0      	push	{r4, r5, r7, lr}
 800a042:	b08a      	sub	sp, #40	; 0x28
 800a044:	af04      	add	r7, sp, #16
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d107      	bne.n	800a060 <etharp_input+0x20>
 800a050:	4b3f      	ldr	r3, [pc, #252]	; (800a150 <etharp_input+0x110>)
 800a052:	f240 228a 	movw	r2, #650	; 0x28a
 800a056:	493f      	ldr	r1, [pc, #252]	; (800a154 <etharp_input+0x114>)
 800a058:	483f      	ldr	r0, [pc, #252]	; (800a158 <etharp_input+0x118>)
 800a05a:	f009 fdb3 	bl	8013bc4 <iprintf>
 800a05e:	e074      	b.n	800a14a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a070:	d10c      	bne.n	800a08c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a076:	2b06      	cmp	r3, #6
 800a078:	d108      	bne.n	800a08c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a07e:	2b04      	cmp	r3, #4
 800a080:	d104      	bne.n	800a08c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	885b      	ldrh	r3, [r3, #2]
 800a086:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a088:	2b08      	cmp	r3, #8
 800a08a:	d003      	beq.n	800a094 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f003 fb91 	bl	800d7b4 <pbuf_free>
    return;
 800a092:	e05a      	b.n	800a14a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	330e      	adds	r3, #14
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	3318      	adds	r3, #24
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d102      	bne.n	800a0b4 <etharp_input+0x74>
    for_us = 0;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	75fb      	strb	r3, [r7, #23]
 800a0b2:	e009      	b.n	800a0c8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	3304      	adds	r3, #4
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	bf0c      	ite	eq
 800a0c0:	2301      	moveq	r3, #1
 800a0c2:	2300      	movne	r3, #0
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	f103 0208 	add.w	r2, r3, #8
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <etharp_input+0x98>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e000      	b.n	800a0da <etharp_input+0x9a>
 800a0d8:	2302      	movs	r3, #2
 800a0da:	f107 010c 	add.w	r1, r7, #12
 800a0de:	6838      	ldr	r0, [r7, #0]
 800a0e0:	f7ff fed8 	bl	8009e94 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	88db      	ldrh	r3, [r3, #6]
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ee:	d003      	beq.n	800a0f8 <etharp_input+0xb8>
 800a0f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0f4:	d01e      	beq.n	800a134 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800a0f6:	e025      	b.n	800a144 <etharp_input+0x104>
      if (for_us) {
 800a0f8:	7dfb      	ldrb	r3, [r7, #23]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d021      	beq.n	800a142 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800a114:	693a      	ldr	r2, [r7, #16]
 800a116:	3208      	adds	r2, #8
        etharp_raw(netif,
 800a118:	2102      	movs	r1, #2
 800a11a:	9103      	str	r1, [sp, #12]
 800a11c:	f107 010c 	add.w	r1, r7, #12
 800a120:	9102      	str	r1, [sp, #8]
 800a122:	9201      	str	r2, [sp, #4]
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	462b      	mov	r3, r5
 800a128:	4622      	mov	r2, r4
 800a12a:	4601      	mov	r1, r0
 800a12c:	6838      	ldr	r0, [r7, #0]
 800a12e:	f000 faef 	bl	800a710 <etharp_raw>
      break;
 800a132:	e006      	b.n	800a142 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800a134:	f107 030c 	add.w	r3, r7, #12
 800a138:	4619      	mov	r1, r3
 800a13a:	6838      	ldr	r0, [r7, #0]
 800a13c:	f7fe f9fc 	bl	8008538 <dhcp_arp_reply>
      break;
 800a140:	e000      	b.n	800a144 <etharp_input+0x104>
      break;
 800a142:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f003 fb35 	bl	800d7b4 <pbuf_free>
}
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bdb0      	pop	{r4, r5, r7, pc}
 800a150:	080150a8 	.word	0x080150a8
 800a154:	08015230 	.word	0x08015230
 800a158:	08015158 	.word	0x08015158

0800a15c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af02      	add	r7, sp, #8
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	4613      	mov	r3, r2
 800a168:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a16a:	79fa      	ldrb	r2, [r7, #7]
 800a16c:	4944      	ldr	r1, [pc, #272]	; (800a280 <etharp_output_to_arp_index+0x124>)
 800a16e:	4613      	mov	r3, r2
 800a170:	005b      	lsls	r3, r3, #1
 800a172:	4413      	add	r3, r2
 800a174:	00db      	lsls	r3, r3, #3
 800a176:	440b      	add	r3, r1
 800a178:	3314      	adds	r3, #20
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d806      	bhi.n	800a18e <etharp_output_to_arp_index+0x32>
 800a180:	4b40      	ldr	r3, [pc, #256]	; (800a284 <etharp_output_to_arp_index+0x128>)
 800a182:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a186:	4940      	ldr	r1, [pc, #256]	; (800a288 <etharp_output_to_arp_index+0x12c>)
 800a188:	4840      	ldr	r0, [pc, #256]	; (800a28c <etharp_output_to_arp_index+0x130>)
 800a18a:	f009 fd1b 	bl	8013bc4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a18e:	79fa      	ldrb	r2, [r7, #7]
 800a190:	493b      	ldr	r1, [pc, #236]	; (800a280 <etharp_output_to_arp_index+0x124>)
 800a192:	4613      	mov	r3, r2
 800a194:	005b      	lsls	r3, r3, #1
 800a196:	4413      	add	r3, r2
 800a198:	00db      	lsls	r3, r3, #3
 800a19a:	440b      	add	r3, r1
 800a19c:	3314      	adds	r3, #20
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d153      	bne.n	800a24c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800a1a4:	79fa      	ldrb	r2, [r7, #7]
 800a1a6:	4936      	ldr	r1, [pc, #216]	; (800a280 <etharp_output_to_arp_index+0x124>)
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	005b      	lsls	r3, r3, #1
 800a1ac:	4413      	add	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	440b      	add	r3, r1
 800a1b2:	3312      	adds	r3, #18
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800a1ba:	d919      	bls.n	800a1f0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800a1bc:	79fa      	ldrb	r2, [r7, #7]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	4413      	add	r3, r2
 800a1c4:	00db      	lsls	r3, r3, #3
 800a1c6:	4a2e      	ldr	r2, [pc, #184]	; (800a280 <etharp_output_to_arp_index+0x124>)
 800a1c8:	4413      	add	r3, r2
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 fb4c 	bl	800a86c <etharp_request>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d138      	bne.n	800a24c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a1da:	79fa      	ldrb	r2, [r7, #7]
 800a1dc:	4928      	ldr	r1, [pc, #160]	; (800a280 <etharp_output_to_arp_index+0x124>)
 800a1de:	4613      	mov	r3, r2
 800a1e0:	005b      	lsls	r3, r3, #1
 800a1e2:	4413      	add	r3, r2
 800a1e4:	00db      	lsls	r3, r3, #3
 800a1e6:	440b      	add	r3, r1
 800a1e8:	3314      	adds	r3, #20
 800a1ea:	2203      	movs	r2, #3
 800a1ec:	701a      	strb	r2, [r3, #0]
 800a1ee:	e02d      	b.n	800a24c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800a1f0:	79fa      	ldrb	r2, [r7, #7]
 800a1f2:	4923      	ldr	r1, [pc, #140]	; (800a280 <etharp_output_to_arp_index+0x124>)
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	4413      	add	r3, r2
 800a1fa:	00db      	lsls	r3, r3, #3
 800a1fc:	440b      	add	r3, r1
 800a1fe:	3312      	adds	r3, #18
 800a200:	881b      	ldrh	r3, [r3, #0]
 800a202:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800a206:	d321      	bcc.n	800a24c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800a208:	79fa      	ldrb	r2, [r7, #7]
 800a20a:	4613      	mov	r3, r2
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	4413      	add	r3, r2
 800a210:	00db      	lsls	r3, r3, #3
 800a212:	4a1b      	ldr	r2, [pc, #108]	; (800a280 <etharp_output_to_arp_index+0x124>)
 800a214:	4413      	add	r3, r2
 800a216:	1d19      	adds	r1, r3, #4
 800a218:	79fa      	ldrb	r2, [r7, #7]
 800a21a:	4613      	mov	r3, r2
 800a21c:	005b      	lsls	r3, r3, #1
 800a21e:	4413      	add	r3, r2
 800a220:	00db      	lsls	r3, r3, #3
 800a222:	3308      	adds	r3, #8
 800a224:	4a16      	ldr	r2, [pc, #88]	; (800a280 <etharp_output_to_arp_index+0x124>)
 800a226:	4413      	add	r3, r2
 800a228:	3304      	adds	r3, #4
 800a22a:	461a      	mov	r2, r3
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 fafb 	bl	800a828 <etharp_request_dst>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d109      	bne.n	800a24c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800a238:	79fa      	ldrb	r2, [r7, #7]
 800a23a:	4911      	ldr	r1, [pc, #68]	; (800a280 <etharp_output_to_arp_index+0x124>)
 800a23c:	4613      	mov	r3, r2
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	4413      	add	r3, r2
 800a242:	00db      	lsls	r3, r3, #3
 800a244:	440b      	add	r3, r1
 800a246:	3314      	adds	r3, #20
 800a248:	2203      	movs	r2, #3
 800a24a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800a252:	79fa      	ldrb	r2, [r7, #7]
 800a254:	4613      	mov	r3, r2
 800a256:	005b      	lsls	r3, r3, #1
 800a258:	4413      	add	r3, r2
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	3308      	adds	r3, #8
 800a25e:	4a08      	ldr	r2, [pc, #32]	; (800a280 <etharp_output_to_arp_index+0x124>)
 800a260:	4413      	add	r3, r2
 800a262:	3304      	adds	r3, #4
 800a264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a268:	9200      	str	r2, [sp, #0]
 800a26a:	460a      	mov	r2, r1
 800a26c:	68b9      	ldr	r1, [r7, #8]
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f000 fb9c 	bl	800a9ac <ethernet_output>
 800a274:	4603      	mov	r3, r0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	24005224 	.word	0x24005224
 800a284:	080150a8 	.word	0x080150a8
 800a288:	08015250 	.word	0x08015250
 800a28c:	08015158 	.word	0x08015158

0800a290 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b08a      	sub	sp, #40	; 0x28
 800a294:	af02      	add	r7, sp, #8
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d106      	bne.n	800a2b4 <etharp_output+0x24>
 800a2a6:	4b73      	ldr	r3, [pc, #460]	; (800a474 <etharp_output+0x1e4>)
 800a2a8:	f240 321e 	movw	r2, #798	; 0x31e
 800a2ac:	4972      	ldr	r1, [pc, #456]	; (800a478 <etharp_output+0x1e8>)
 800a2ae:	4873      	ldr	r0, [pc, #460]	; (800a47c <etharp_output+0x1ec>)
 800a2b0:	f009 fc88 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d106      	bne.n	800a2c8 <etharp_output+0x38>
 800a2ba:	4b6e      	ldr	r3, [pc, #440]	; (800a474 <etharp_output+0x1e4>)
 800a2bc:	f240 321f 	movw	r2, #799	; 0x31f
 800a2c0:	496f      	ldr	r1, [pc, #444]	; (800a480 <etharp_output+0x1f0>)
 800a2c2:	486e      	ldr	r0, [pc, #440]	; (800a47c <etharp_output+0x1ec>)
 800a2c4:	f009 fc7e 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d106      	bne.n	800a2dc <etharp_output+0x4c>
 800a2ce:	4b69      	ldr	r3, [pc, #420]	; (800a474 <etharp_output+0x1e4>)
 800a2d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a2d4:	496b      	ldr	r1, [pc, #428]	; (800a484 <etharp_output+0x1f4>)
 800a2d6:	4869      	ldr	r0, [pc, #420]	; (800a47c <etharp_output+0x1ec>)
 800a2d8:	f009 fc74 	bl	8013bc4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68f9      	ldr	r1, [r7, #12]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f001 f8e4 	bl	800b4b0 <ip4_addr_isbroadcast_u32>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d002      	beq.n	800a2f4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800a2ee:	4b66      	ldr	r3, [pc, #408]	; (800a488 <etharp_output+0x1f8>)
 800a2f0:	61fb      	str	r3, [r7, #28]
 800a2f2:	e0af      	b.n	800a454 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2fc:	2be0      	cmp	r3, #224	; 0xe0
 800a2fe:	d118      	bne.n	800a332 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800a300:	2301      	movs	r3, #1
 800a302:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800a304:	2300      	movs	r3, #0
 800a306:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800a308:	235e      	movs	r3, #94	; 0x5e
 800a30a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	3301      	adds	r3, #1
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a316:	b2db      	uxtb	r3, r3
 800a318:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	3302      	adds	r3, #2
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	3303      	adds	r3, #3
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800a32a:	f107 0310 	add.w	r3, r7, #16
 800a32e:	61fb      	str	r3, [r7, #28]
 800a330:	e090      	b.n	800a454 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	3304      	adds	r3, #4
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	405a      	eors	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	3308      	adds	r3, #8
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4013      	ands	r3, r2
 800a346:	2b00      	cmp	r3, #0
 800a348:	d012      	beq.n	800a370 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800a350:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a354:	4293      	cmp	r3, r2
 800a356:	d00b      	beq.n	800a370 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	330c      	adds	r3, #12
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d003      	beq.n	800a36a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	330c      	adds	r3, #12
 800a366:	61bb      	str	r3, [r7, #24]
 800a368:	e002      	b.n	800a370 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800a36a:	f06f 0303 	mvn.w	r3, #3
 800a36e:	e07d      	b.n	800a46c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a370:	4b46      	ldr	r3, [pc, #280]	; (800a48c <etharp_output+0x1fc>)
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	4619      	mov	r1, r3
 800a376:	4a46      	ldr	r2, [pc, #280]	; (800a490 <etharp_output+0x200>)
 800a378:	460b      	mov	r3, r1
 800a37a:	005b      	lsls	r3, r3, #1
 800a37c:	440b      	add	r3, r1
 800a37e:	00db      	lsls	r3, r3, #3
 800a380:	4413      	add	r3, r2
 800a382:	3314      	adds	r3, #20
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	2b01      	cmp	r3, #1
 800a388:	d925      	bls.n	800a3d6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800a38a:	4b40      	ldr	r3, [pc, #256]	; (800a48c <etharp_output+0x1fc>)
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	4619      	mov	r1, r3
 800a390:	4a3f      	ldr	r2, [pc, #252]	; (800a490 <etharp_output+0x200>)
 800a392:	460b      	mov	r3, r1
 800a394:	005b      	lsls	r3, r3, #1
 800a396:	440b      	add	r3, r1
 800a398:	00db      	lsls	r3, r3, #3
 800a39a:	4413      	add	r3, r2
 800a39c:	3308      	adds	r3, #8
 800a39e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d117      	bne.n	800a3d6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	4b38      	ldr	r3, [pc, #224]	; (800a48c <etharp_output+0x1fc>)
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	4937      	ldr	r1, [pc, #220]	; (800a490 <etharp_output+0x200>)
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	005b      	lsls	r3, r3, #1
 800a3b6:	4403      	add	r3, r0
 800a3b8:	00db      	lsls	r3, r3, #3
 800a3ba:	440b      	add	r3, r1
 800a3bc:	3304      	adds	r3, #4
 800a3be:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d108      	bne.n	800a3d6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800a3c4:	4b31      	ldr	r3, [pc, #196]	; (800a48c <etharp_output+0x1fc>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	68b9      	ldr	r1, [r7, #8]
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f7ff fec5 	bl	800a15c <etharp_output_to_arp_index>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	e04a      	b.n	800a46c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	75fb      	strb	r3, [r7, #23]
 800a3da:	e031      	b.n	800a440 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a3dc:	7dfa      	ldrb	r2, [r7, #23]
 800a3de:	492c      	ldr	r1, [pc, #176]	; (800a490 <etharp_output+0x200>)
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	005b      	lsls	r3, r3, #1
 800a3e4:	4413      	add	r3, r2
 800a3e6:	00db      	lsls	r3, r3, #3
 800a3e8:	440b      	add	r3, r1
 800a3ea:	3314      	adds	r3, #20
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d923      	bls.n	800a43a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800a3f2:	7dfa      	ldrb	r2, [r7, #23]
 800a3f4:	4926      	ldr	r1, [pc, #152]	; (800a490 <etharp_output+0x200>)
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	005b      	lsls	r3, r3, #1
 800a3fa:	4413      	add	r3, r2
 800a3fc:	00db      	lsls	r3, r3, #3
 800a3fe:	440b      	add	r3, r1
 800a400:	3308      	adds	r3, #8
 800a402:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	429a      	cmp	r2, r3
 800a408:	d117      	bne.n	800a43a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	6819      	ldr	r1, [r3, #0]
 800a40e:	7dfa      	ldrb	r2, [r7, #23]
 800a410:	481f      	ldr	r0, [pc, #124]	; (800a490 <etharp_output+0x200>)
 800a412:	4613      	mov	r3, r2
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	4413      	add	r3, r2
 800a418:	00db      	lsls	r3, r3, #3
 800a41a:	4403      	add	r3, r0
 800a41c:	3304      	adds	r3, #4
 800a41e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800a420:	4299      	cmp	r1, r3
 800a422:	d10a      	bne.n	800a43a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800a424:	4a19      	ldr	r2, [pc, #100]	; (800a48c <etharp_output+0x1fc>)
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800a42a:	7dfb      	ldrb	r3, [r7, #23]
 800a42c:	461a      	mov	r2, r3
 800a42e:	68b9      	ldr	r1, [r7, #8]
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f7ff fe93 	bl	800a15c <etharp_output_to_arp_index>
 800a436:	4603      	mov	r3, r0
 800a438:	e018      	b.n	800a46c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
 800a43c:	3301      	adds	r3, #1
 800a43e:	75fb      	strb	r3, [r7, #23]
 800a440:	7dfb      	ldrb	r3, [r7, #23]
 800a442:	2b09      	cmp	r3, #9
 800a444:	d9ca      	bls.n	800a3dc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800a446:	68ba      	ldr	r2, [r7, #8]
 800a448:	69b9      	ldr	r1, [r7, #24]
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f000 f822 	bl	800a494 <etharp_query>
 800a450:	4603      	mov	r3, r0
 800a452:	e00b      	b.n	800a46c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800a45a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	68b9      	ldr	r1, [r7, #8]
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f000 faa1 	bl	800a9ac <ethernet_output>
 800a46a:	4603      	mov	r3, r0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3720      	adds	r7, #32
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	080150a8 	.word	0x080150a8
 800a478:	08015230 	.word	0x08015230
 800a47c:	08015158 	.word	0x08015158
 800a480:	08015280 	.word	0x08015280
 800a484:	08015220 	.word	0x08015220
 800a488:	08017d98 	.word	0x08017d98
 800a48c:	24005314 	.word	0x24005314
 800a490:	24005224 	.word	0x24005224

0800a494 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b08c      	sub	sp, #48	; 0x30
 800a498:	af02      	add	r7, sp, #8
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	332a      	adds	r3, #42	; 0x2a
 800a4a4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800a4a6:	23ff      	movs	r3, #255	; 0xff
 800a4a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68f9      	ldr	r1, [r7, #12]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 fffa 	bl	800b4b0 <ip4_addr_isbroadcast_u32>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10c      	bne.n	800a4dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800a4ca:	2be0      	cmp	r3, #224	; 0xe0
 800a4cc:	d006      	beq.n	800a4dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d003      	beq.n	800a4dc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d102      	bne.n	800a4e2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a4dc:	f06f 030f 	mvn.w	r3, #15
 800a4e0:	e101      	b.n	800a6e6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	2101      	movs	r1, #1
 800a4e6:	68b8      	ldr	r0, [r7, #8]
 800a4e8:	f7ff fb5c 	bl	8009ba4 <etharp_find_entry>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800a4f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	da02      	bge.n	800a4fe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800a4f8:	8a7b      	ldrh	r3, [r7, #18]
 800a4fa:	b25b      	sxtb	r3, r3
 800a4fc:	e0f3      	b.n	800a6e6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800a4fe:	8a7b      	ldrh	r3, [r7, #18]
 800a500:	2b7e      	cmp	r3, #126	; 0x7e
 800a502:	d906      	bls.n	800a512 <etharp_query+0x7e>
 800a504:	4b7a      	ldr	r3, [pc, #488]	; (800a6f0 <etharp_query+0x25c>)
 800a506:	f240 32c1 	movw	r2, #961	; 0x3c1
 800a50a:	497a      	ldr	r1, [pc, #488]	; (800a6f4 <etharp_query+0x260>)
 800a50c:	487a      	ldr	r0, [pc, #488]	; (800a6f8 <etharp_query+0x264>)
 800a50e:	f009 fb59 	bl	8013bc4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800a512:	8a7b      	ldrh	r3, [r7, #18]
 800a514:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800a516:	7c7a      	ldrb	r2, [r7, #17]
 800a518:	4978      	ldr	r1, [pc, #480]	; (800a6fc <etharp_query+0x268>)
 800a51a:	4613      	mov	r3, r2
 800a51c:	005b      	lsls	r3, r3, #1
 800a51e:	4413      	add	r3, r2
 800a520:	00db      	lsls	r3, r3, #3
 800a522:	440b      	add	r3, r1
 800a524:	3314      	adds	r3, #20
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d115      	bne.n	800a558 <etharp_query+0xc4>
    is_new_entry = 1;
 800a52c:	2301      	movs	r3, #1
 800a52e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800a530:	7c7a      	ldrb	r2, [r7, #17]
 800a532:	4972      	ldr	r1, [pc, #456]	; (800a6fc <etharp_query+0x268>)
 800a534:	4613      	mov	r3, r2
 800a536:	005b      	lsls	r3, r3, #1
 800a538:	4413      	add	r3, r2
 800a53a:	00db      	lsls	r3, r3, #3
 800a53c:	440b      	add	r3, r1
 800a53e:	3314      	adds	r3, #20
 800a540:	2201      	movs	r2, #1
 800a542:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800a544:	7c7a      	ldrb	r2, [r7, #17]
 800a546:	496d      	ldr	r1, [pc, #436]	; (800a6fc <etharp_query+0x268>)
 800a548:	4613      	mov	r3, r2
 800a54a:	005b      	lsls	r3, r3, #1
 800a54c:	4413      	add	r3, r2
 800a54e:	00db      	lsls	r3, r3, #3
 800a550:	440b      	add	r3, r1
 800a552:	3308      	adds	r3, #8
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800a558:	7c7a      	ldrb	r2, [r7, #17]
 800a55a:	4968      	ldr	r1, [pc, #416]	; (800a6fc <etharp_query+0x268>)
 800a55c:	4613      	mov	r3, r2
 800a55e:	005b      	lsls	r3, r3, #1
 800a560:	4413      	add	r3, r2
 800a562:	00db      	lsls	r3, r3, #3
 800a564:	440b      	add	r3, r1
 800a566:	3314      	adds	r3, #20
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d011      	beq.n	800a592 <etharp_query+0xfe>
 800a56e:	7c7a      	ldrb	r2, [r7, #17]
 800a570:	4962      	ldr	r1, [pc, #392]	; (800a6fc <etharp_query+0x268>)
 800a572:	4613      	mov	r3, r2
 800a574:	005b      	lsls	r3, r3, #1
 800a576:	4413      	add	r3, r2
 800a578:	00db      	lsls	r3, r3, #3
 800a57a:	440b      	add	r3, r1
 800a57c:	3314      	adds	r3, #20
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d806      	bhi.n	800a592 <etharp_query+0xfe>
 800a584:	4b5a      	ldr	r3, [pc, #360]	; (800a6f0 <etharp_query+0x25c>)
 800a586:	f240 32cd 	movw	r2, #973	; 0x3cd
 800a58a:	495d      	ldr	r1, [pc, #372]	; (800a700 <etharp_query+0x26c>)
 800a58c:	485a      	ldr	r0, [pc, #360]	; (800a6f8 <etharp_query+0x264>)
 800a58e:	f009 fb19 	bl	8013bc4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800a592:	6a3b      	ldr	r3, [r7, #32]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d102      	bne.n	800a59e <etharp_query+0x10a>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d10c      	bne.n	800a5b8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800a59e:	68b9      	ldr	r1, [r7, #8]
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f000 f963 	bl	800a86c <etharp_request>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d102      	bne.n	800a5b8 <etharp_query+0x124>
      return result;
 800a5b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a5b6:	e096      	b.n	800a6e6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d106      	bne.n	800a5cc <etharp_query+0x138>
 800a5be:	4b4c      	ldr	r3, [pc, #304]	; (800a6f0 <etharp_query+0x25c>)
 800a5c0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800a5c4:	494f      	ldr	r1, [pc, #316]	; (800a704 <etharp_query+0x270>)
 800a5c6:	484c      	ldr	r0, [pc, #304]	; (800a6f8 <etharp_query+0x264>)
 800a5c8:	f009 fafc 	bl	8013bc4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800a5cc:	7c7a      	ldrb	r2, [r7, #17]
 800a5ce:	494b      	ldr	r1, [pc, #300]	; (800a6fc <etharp_query+0x268>)
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	4413      	add	r3, r2
 800a5d6:	00db      	lsls	r3, r3, #3
 800a5d8:	440b      	add	r3, r1
 800a5da:	3314      	adds	r3, #20
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d917      	bls.n	800a612 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800a5e2:	4a49      	ldr	r2, [pc, #292]	; (800a708 <etharp_query+0x274>)
 800a5e4:	7c7b      	ldrb	r3, [r7, #17]
 800a5e6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800a5e8:	7c7a      	ldrb	r2, [r7, #17]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	005b      	lsls	r3, r3, #1
 800a5ee:	4413      	add	r3, r2
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	3308      	adds	r3, #8
 800a5f4:	4a41      	ldr	r2, [pc, #260]	; (800a6fc <etharp_query+0x268>)
 800a5f6:	4413      	add	r3, r2
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5fe:	9200      	str	r2, [sp, #0]
 800a600:	697a      	ldr	r2, [r7, #20]
 800a602:	6879      	ldr	r1, [r7, #4]
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 f9d1 	bl	800a9ac <ethernet_output>
 800a60a:	4603      	mov	r3, r0
 800a60c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a610:	e067      	b.n	800a6e2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a612:	7c7a      	ldrb	r2, [r7, #17]
 800a614:	4939      	ldr	r1, [pc, #228]	; (800a6fc <etharp_query+0x268>)
 800a616:	4613      	mov	r3, r2
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	4413      	add	r3, r2
 800a61c:	00db      	lsls	r3, r3, #3
 800a61e:	440b      	add	r3, r1
 800a620:	3314      	adds	r3, #20
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d15c      	bne.n	800a6e2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800a628:	2300      	movs	r3, #0
 800a62a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800a630:	e01c      	b.n	800a66c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	895a      	ldrh	r2, [r3, #10]
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	891b      	ldrh	r3, [r3, #8]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d10a      	bne.n	800a654 <etharp_query+0x1c0>
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d006      	beq.n	800a654 <etharp_query+0x1c0>
 800a646:	4b2a      	ldr	r3, [pc, #168]	; (800a6f0 <etharp_query+0x25c>)
 800a648:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800a64c:	492f      	ldr	r1, [pc, #188]	; (800a70c <etharp_query+0x278>)
 800a64e:	482a      	ldr	r0, [pc, #168]	; (800a6f8 <etharp_query+0x264>)
 800a650:	f009 fab8 	bl	8013bc4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	7b1b      	ldrb	r3, [r3, #12]
 800a658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d002      	beq.n	800a666 <etharp_query+0x1d2>
        copy_needed = 1;
 800a660:	2301      	movs	r3, #1
 800a662:	61bb      	str	r3, [r7, #24]
        break;
 800a664:	e005      	b.n	800a672 <etharp_query+0x1de>
      }
      p = p->next;
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1df      	bne.n	800a632 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d007      	beq.n	800a688 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800a67e:	200e      	movs	r0, #14
 800a680:	f003 fb04 	bl	800dc8c <pbuf_clone>
 800a684:	61f8      	str	r0, [r7, #28]
 800a686:	e004      	b.n	800a692 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800a68c:	69f8      	ldr	r0, [r7, #28]
 800a68e:	f003 f931 	bl	800d8f4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d021      	beq.n	800a6dc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800a698:	7c7a      	ldrb	r2, [r7, #17]
 800a69a:	4918      	ldr	r1, [pc, #96]	; (800a6fc <etharp_query+0x268>)
 800a69c:	4613      	mov	r3, r2
 800a69e:	005b      	lsls	r3, r3, #1
 800a6a0:	4413      	add	r3, r2
 800a6a2:	00db      	lsls	r3, r3, #3
 800a6a4:	440b      	add	r3, r1
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00a      	beq.n	800a6c2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800a6ac:	7c7a      	ldrb	r2, [r7, #17]
 800a6ae:	4913      	ldr	r1, [pc, #76]	; (800a6fc <etharp_query+0x268>)
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	005b      	lsls	r3, r3, #1
 800a6b4:	4413      	add	r3, r2
 800a6b6:	00db      	lsls	r3, r3, #3
 800a6b8:	440b      	add	r3, r1
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f003 f879 	bl	800d7b4 <pbuf_free>
      }
      arp_table[i].q = p;
 800a6c2:	7c7a      	ldrb	r2, [r7, #17]
 800a6c4:	490d      	ldr	r1, [pc, #52]	; (800a6fc <etharp_query+0x268>)
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	005b      	lsls	r3, r3, #1
 800a6ca:	4413      	add	r3, r2
 800a6cc:	00db      	lsls	r3, r3, #3
 800a6ce:	440b      	add	r3, r1
 800a6d0:	69fa      	ldr	r2, [r7, #28]
 800a6d2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a6da:	e002      	b.n	800a6e2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800a6dc:	23ff      	movs	r3, #255	; 0xff
 800a6de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800a6e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3728      	adds	r7, #40	; 0x28
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	080150a8 	.word	0x080150a8
 800a6f4:	0801528c 	.word	0x0801528c
 800a6f8:	08015158 	.word	0x08015158
 800a6fc:	24005224 	.word	0x24005224
 800a700:	0801529c 	.word	0x0801529c
 800a704:	08015280 	.word	0x08015280
 800a708:	24005314 	.word	0x24005314
 800a70c:	080152c4 	.word	0x080152c4

0800a710 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b08a      	sub	sp, #40	; 0x28
 800a714:	af02      	add	r7, sp, #8
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
 800a71c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d106      	bne.n	800a736 <etharp_raw+0x26>
 800a728:	4b3a      	ldr	r3, [pc, #232]	; (800a814 <etharp_raw+0x104>)
 800a72a:	f240 4257 	movw	r2, #1111	; 0x457
 800a72e:	493a      	ldr	r1, [pc, #232]	; (800a818 <etharp_raw+0x108>)
 800a730:	483a      	ldr	r0, [pc, #232]	; (800a81c <etharp_raw+0x10c>)
 800a732:	f009 fa47 	bl	8013bc4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800a736:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a73a:	211c      	movs	r1, #28
 800a73c:	200e      	movs	r0, #14
 800a73e:	f002 fd55 	bl	800d1ec <pbuf_alloc>
 800a742:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800a744:	69bb      	ldr	r3, [r7, #24]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d102      	bne.n	800a750 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800a74a:	f04f 33ff 	mov.w	r3, #4294967295
 800a74e:	e05d      	b.n	800a80c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	895b      	ldrh	r3, [r3, #10]
 800a754:	2b1b      	cmp	r3, #27
 800a756:	d806      	bhi.n	800a766 <etharp_raw+0x56>
 800a758:	4b2e      	ldr	r3, [pc, #184]	; (800a814 <etharp_raw+0x104>)
 800a75a:	f240 4262 	movw	r2, #1122	; 0x462
 800a75e:	4930      	ldr	r1, [pc, #192]	; (800a820 <etharp_raw+0x110>)
 800a760:	482e      	ldr	r0, [pc, #184]	; (800a81c <etharp_raw+0x10c>)
 800a762:	f009 fa2f 	bl	8013bc4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800a76c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fd fa7c 	bl	8007c6c <lwip_htons>
 800a774:	4603      	mov	r3, r0
 800a776:	461a      	mov	r2, r3
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a782:	2b06      	cmp	r3, #6
 800a784:	d006      	beq.n	800a794 <etharp_raw+0x84>
 800a786:	4b23      	ldr	r3, [pc, #140]	; (800a814 <etharp_raw+0x104>)
 800a788:	f240 4269 	movw	r2, #1129	; 0x469
 800a78c:	4925      	ldr	r1, [pc, #148]	; (800a824 <etharp_raw+0x114>)
 800a78e:	4823      	ldr	r0, [pc, #140]	; (800a81c <etharp_raw+0x10c>)
 800a790:	f009 fa18 	bl	8013bc4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	3308      	adds	r3, #8
 800a798:	2206      	movs	r2, #6
 800a79a:	6839      	ldr	r1, [r7, #0]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f009 f9fb 	bl	8013b98 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	3312      	adds	r3, #18
 800a7a6:	2206      	movs	r2, #6
 800a7a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f009 f9f4 	bl	8013b98 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	330e      	adds	r3, #14
 800a7b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7b6:	6812      	ldr	r2, [r2, #0]
 800a7b8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	3318      	adds	r3, #24
 800a7be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7c0:	6812      	ldr	r2, [r2, #0]
 800a7c2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	701a      	strb	r2, [r3, #0]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f042 0201 	orr.w	r2, r2, #1
 800a7d0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f042 0208 	orr.w	r2, r2, #8
 800a7da:	709a      	strb	r2, [r3, #2]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	2206      	movs	r2, #6
 800a7e4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	2204      	movs	r2, #4
 800a7ea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800a7ec:	f640 0306 	movw	r3, #2054	; 0x806
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	69b9      	ldr	r1, [r7, #24]
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 f8d7 	bl	800a9ac <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800a7fe:	69b8      	ldr	r0, [r7, #24]
 800a800:	f002 ffd8 	bl	800d7b4 <pbuf_free>
  p = NULL;
 800a804:	2300      	movs	r3, #0
 800a806:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800a808:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3720      	adds	r7, #32
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	080150a8 	.word	0x080150a8
 800a818:	08015230 	.word	0x08015230
 800a81c:	08015158 	.word	0x08015158
 800a820:	080152e0 	.word	0x080152e0
 800a824:	08015314 	.word	0x08015314

0800a828 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b088      	sub	sp, #32
 800a82c:	af04      	add	r7, sp, #16
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a844:	2201      	movs	r2, #1
 800a846:	9203      	str	r2, [sp, #12]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	9202      	str	r2, [sp, #8]
 800a84c:	4a06      	ldr	r2, [pc, #24]	; (800a868 <etharp_request_dst+0x40>)
 800a84e:	9201      	str	r2, [sp, #4]
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	4603      	mov	r3, r0
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f7ff ff5a 	bl	800a710 <etharp_raw>
 800a85c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	08017da0 	.word	0x08017da0

0800a86c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800a876:	4a05      	ldr	r2, [pc, #20]	; (800a88c <etharp_request+0x20>)
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7ff ffd4 	bl	800a828 <etharp_request_dst>
 800a880:	4603      	mov	r3, r0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	08017d98 	.word	0x08017d98

0800a890 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800a89a:	230e      	movs	r3, #14
 800a89c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	895b      	ldrh	r3, [r3, #10]
 800a8a2:	2b0e      	cmp	r3, #14
 800a8a4:	d96e      	bls.n	800a984 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	7bdb      	ldrb	r3, [r3, #15]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d106      	bne.n	800a8bc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	b2da      	uxtb	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	7b1a      	ldrb	r2, [r3, #12]
 800a8c6:	7b5b      	ldrb	r3, [r3, #13]
 800a8c8:	021b      	lsls	r3, r3, #8
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	f003 0301 	and.w	r3, r3, #1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d023      	beq.n	800a922 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d10f      	bne.n	800a902 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	785b      	ldrb	r3, [r3, #1]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d11b      	bne.n	800a922 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a8ee:	2b5e      	cmp	r3, #94	; 0x5e
 800a8f0:	d117      	bne.n	800a922 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	7b5b      	ldrb	r3, [r3, #13]
 800a8f6:	f043 0310 	orr.w	r3, r3, #16
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	735a      	strb	r2, [r3, #13]
 800a900:	e00f      	b.n	800a922 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	2206      	movs	r2, #6
 800a906:	4928      	ldr	r1, [pc, #160]	; (800a9a8 <ethernet_input+0x118>)
 800a908:	4618      	mov	r0, r3
 800a90a:	f009 f935 	bl	8013b78 <memcmp>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d106      	bne.n	800a922 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	7b5b      	ldrb	r3, [r3, #13]
 800a918:	f043 0308 	orr.w	r3, r3, #8
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800a922:	89fb      	ldrh	r3, [r7, #14]
 800a924:	2b08      	cmp	r3, #8
 800a926:	d003      	beq.n	800a930 <ethernet_input+0xa0>
 800a928:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800a92c:	d014      	beq.n	800a958 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800a92e:	e032      	b.n	800a996 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a936:	f003 0308 	and.w	r3, r3, #8
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d024      	beq.n	800a988 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a93e:	8afb      	ldrh	r3, [r7, #22]
 800a940:	4619      	mov	r1, r3
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f002 feb0 	bl	800d6a8 <pbuf_remove_header>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d11e      	bne.n	800a98c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fb93 	bl	800b07c <ip4_input>
      break;
 800a956:	e013      	b.n	800a980 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a95e:	f003 0308 	and.w	r3, r3, #8
 800a962:	2b00      	cmp	r3, #0
 800a964:	d014      	beq.n	800a990 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a966:	8afb      	ldrh	r3, [r7, #22]
 800a968:	4619      	mov	r1, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f002 fe9c 	bl	800d6a8 <pbuf_remove_header>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10e      	bne.n	800a994 <ethernet_input+0x104>
        etharp_input(p, netif);
 800a976:	6839      	ldr	r1, [r7, #0]
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7ff fb61 	bl	800a040 <etharp_input>
      break;
 800a97e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	e00c      	b.n	800a99e <ethernet_input+0x10e>
    goto free_and_return;
 800a984:	bf00      	nop
 800a986:	e006      	b.n	800a996 <ethernet_input+0x106>
        goto free_and_return;
 800a988:	bf00      	nop
 800a98a:	e004      	b.n	800a996 <ethernet_input+0x106>
        goto free_and_return;
 800a98c:	bf00      	nop
 800a98e:	e002      	b.n	800a996 <ethernet_input+0x106>
        goto free_and_return;
 800a990:	bf00      	nop
 800a992:	e000      	b.n	800a996 <ethernet_input+0x106>
        goto free_and_return;
 800a994:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f002 ff0c 	bl	800d7b4 <pbuf_free>
  return ERR_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3718      	adds	r7, #24
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	08017d98 	.word	0x08017d98

0800a9ac <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
 800a9b8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800a9ba:	8c3b      	ldrh	r3, [r7, #32]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fd f955 	bl	8007c6c <lwip_htons>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800a9c6:	210e      	movs	r1, #14
 800a9c8:	68b8      	ldr	r0, [r7, #8]
 800a9ca:	f002 fe5d 	bl	800d688 <pbuf_add_header>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d125      	bne.n	800aa20 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	8afa      	ldrh	r2, [r7, #22]
 800a9de:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	2206      	movs	r2, #6
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f009 f8d6 	bl	8013b98 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	3306      	adds	r3, #6
 800a9f0:	2206      	movs	r2, #6
 800a9f2:	6879      	ldr	r1, [r7, #4]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f009 f8cf 	bl	8013b98 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa00:	2b06      	cmp	r3, #6
 800aa02:	d006      	beq.n	800aa12 <ethernet_output+0x66>
 800aa04:	4b0a      	ldr	r3, [pc, #40]	; (800aa30 <ethernet_output+0x84>)
 800aa06:	f44f 7299 	mov.w	r2, #306	; 0x132
 800aa0a:	490a      	ldr	r1, [pc, #40]	; (800aa34 <ethernet_output+0x88>)
 800aa0c:	480a      	ldr	r0, [pc, #40]	; (800aa38 <ethernet_output+0x8c>)
 800aa0e:	f009 f8d9 	bl	8013bc4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	68b9      	ldr	r1, [r7, #8]
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	4798      	blx	r3
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	e002      	b.n	800aa26 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800aa20:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800aa22:	f06f 0301 	mvn.w	r3, #1
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3718      	adds	r7, #24
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	08015358 	.word	0x08015358
 800aa34:	080153c8 	.word	0x080153c8
 800aa38:	080153fc 	.word	0x080153fc

0800aa3c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b08e      	sub	sp, #56	; 0x38
 800aa40:	af04      	add	r7, sp, #16
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800aa46:	4b87      	ldr	r3, [pc, #540]	; (800ac64 <icmp_input+0x228>)
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	f003 030f 	and.w	r3, r3, #15
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800aa5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa5e:	2b13      	cmp	r3, #19
 800aa60:	f240 80e8 	bls.w	800ac34 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	895b      	ldrh	r3, [r3, #10]
 800aa68:	2b03      	cmp	r3, #3
 800aa6a:	f240 80e5 	bls.w	800ac38 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800aa78:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 80d2 	beq.w	800ac26 <icmp_input+0x1ea>
 800aa82:	2b08      	cmp	r3, #8
 800aa84:	f040 80d2 	bne.w	800ac2c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800aa88:	4b77      	ldr	r3, [pc, #476]	; (800ac68 <icmp_input+0x22c>)
 800aa8a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800aa8c:	4b75      	ldr	r3, [pc, #468]	; (800ac64 <icmp_input+0x228>)
 800aa8e:	695b      	ldr	r3, [r3, #20]
 800aa90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa94:	2be0      	cmp	r3, #224	; 0xe0
 800aa96:	f000 80d6 	beq.w	800ac46 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800aa9a:	4b72      	ldr	r3, [pc, #456]	; (800ac64 <icmp_input+0x228>)
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	4a71      	ldr	r2, [pc, #452]	; (800ac64 <icmp_input+0x228>)
 800aaa0:	6812      	ldr	r2, [r2, #0]
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f000 fd03 	bl	800b4b0 <ip4_addr_isbroadcast_u32>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f040 80cc 	bne.w	800ac4a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	891b      	ldrh	r3, [r3, #8]
 800aab6:	2b07      	cmp	r3, #7
 800aab8:	f240 80c0 	bls.w	800ac3c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 f9e0 	bl	800ae82 <inet_chksum_pbuf>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d003      	beq.n	800aad0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f002 fe73 	bl	800d7b4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800aace:	e0c5      	b.n	800ac5c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800aad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aad2:	330e      	adds	r3, #14
 800aad4:	4619      	mov	r1, r3
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f002 fdd6 	bl	800d688 <pbuf_add_header>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d04b      	beq.n	800ab7a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	891a      	ldrh	r2, [r3, #8]
 800aae6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aae8:	4413      	add	r3, r2
 800aaea:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	891b      	ldrh	r3, [r3, #8]
 800aaf0:	8b7a      	ldrh	r2, [r7, #26]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	f0c0 80ab 	bcc.w	800ac4e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800aaf8:	8b7b      	ldrh	r3, [r7, #26]
 800aafa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aafe:	4619      	mov	r1, r3
 800ab00:	200e      	movs	r0, #14
 800ab02:	f002 fb73 	bl	800d1ec <pbuf_alloc>
 800ab06:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f000 80a1 	beq.w	800ac52 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	895b      	ldrh	r3, [r3, #10]
 800ab14:	461a      	mov	r2, r3
 800ab16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab18:	3308      	adds	r3, #8
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d203      	bcs.n	800ab26 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ab1e:	6978      	ldr	r0, [r7, #20]
 800ab20:	f002 fe48 	bl	800d7b4 <pbuf_free>
          goto icmperr;
 800ab24:	e096      	b.n	800ac54 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ab2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f009 f832 	bl	8013b98 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ab34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab36:	4619      	mov	r1, r3
 800ab38:	6978      	ldr	r0, [r7, #20]
 800ab3a:	f002 fdb5 	bl	800d6a8 <pbuf_remove_header>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d009      	beq.n	800ab58 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ab44:	4b49      	ldr	r3, [pc, #292]	; (800ac6c <icmp_input+0x230>)
 800ab46:	22b6      	movs	r2, #182	; 0xb6
 800ab48:	4949      	ldr	r1, [pc, #292]	; (800ac70 <icmp_input+0x234>)
 800ab4a:	484a      	ldr	r0, [pc, #296]	; (800ac74 <icmp_input+0x238>)
 800ab4c:	f009 f83a 	bl	8013bc4 <iprintf>
          pbuf_free(r);
 800ab50:	6978      	ldr	r0, [r7, #20]
 800ab52:	f002 fe2f 	bl	800d7b4 <pbuf_free>
          goto icmperr;
 800ab56:	e07d      	b.n	800ac54 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ab58:	6879      	ldr	r1, [r7, #4]
 800ab5a:	6978      	ldr	r0, [r7, #20]
 800ab5c:	f002 ff52 	bl	800da04 <pbuf_copy>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d003      	beq.n	800ab6e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ab66:	6978      	ldr	r0, [r7, #20]
 800ab68:	f002 fe24 	bl	800d7b4 <pbuf_free>
          goto icmperr;
 800ab6c:	e072      	b.n	800ac54 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f002 fe20 	bl	800d7b4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	607b      	str	r3, [r7, #4]
 800ab78:	e00f      	b.n	800ab9a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ab7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab7c:	330e      	adds	r3, #14
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f002 fd91 	bl	800d6a8 <pbuf_remove_header>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d006      	beq.n	800ab9a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ab8c:	4b37      	ldr	r3, [pc, #220]	; (800ac6c <icmp_input+0x230>)
 800ab8e:	22c7      	movs	r2, #199	; 0xc7
 800ab90:	4939      	ldr	r1, [pc, #228]	; (800ac78 <icmp_input+0x23c>)
 800ab92:	4838      	ldr	r0, [pc, #224]	; (800ac74 <icmp_input+0x238>)
 800ab94:	f009 f816 	bl	8013bc4 <iprintf>
          goto icmperr;
 800ab98:	e05c      	b.n	800ac54 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800aba0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aba2:	4619      	mov	r1, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f002 fd6f 	bl	800d688 <pbuf_add_header>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d13c      	bne.n	800ac2a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800abbe:	4b29      	ldr	r3, [pc, #164]	; (800ac64 <icmp_input+0x228>)
 800abc0:	691a      	ldr	r2, [r3, #16]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	2200      	movs	r2, #0
 800abca:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	885b      	ldrh	r3, [r3, #2]
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d907      	bls.n	800abea <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	885b      	ldrh	r3, [r3, #2]
 800abde:	b29b      	uxth	r3, r3
 800abe0:	3309      	adds	r3, #9
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	805a      	strh	r2, [r3, #2]
 800abe8:	e006      	b.n	800abf8 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	885b      	ldrh	r3, [r3, #2]
 800abee:	b29b      	uxth	r3, r3
 800abf0:	3308      	adds	r3, #8
 800abf2:	b29a      	uxth	r2, r3
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	22ff      	movs	r2, #255	; 0xff
 800abfc:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2200      	movs	r2, #0
 800ac02:	729a      	strb	r2, [r3, #10]
 800ac04:	2200      	movs	r2, #0
 800ac06:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	9302      	str	r3, [sp, #8]
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	9301      	str	r3, [sp, #4]
 800ac10:	2300      	movs	r3, #0
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	23ff      	movs	r3, #255	; 0xff
 800ac16:	2200      	movs	r2, #0
 800ac18:	69f9      	ldr	r1, [r7, #28]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fb70 	bl	800b300 <ip4_output_if>
 800ac20:	4603      	mov	r3, r0
 800ac22:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ac24:	e001      	b.n	800ac2a <icmp_input+0x1ee>
      break;
 800ac26:	bf00      	nop
 800ac28:	e000      	b.n	800ac2c <icmp_input+0x1f0>
      break;
 800ac2a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f002 fdc1 	bl	800d7b4 <pbuf_free>
  return;
 800ac32:	e013      	b.n	800ac5c <icmp_input+0x220>
    goto lenerr;
 800ac34:	bf00      	nop
 800ac36:	e002      	b.n	800ac3e <icmp_input+0x202>
    goto lenerr;
 800ac38:	bf00      	nop
 800ac3a:	e000      	b.n	800ac3e <icmp_input+0x202>
        goto lenerr;
 800ac3c:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f002 fdb8 	bl	800d7b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ac44:	e00a      	b.n	800ac5c <icmp_input+0x220>
        goto icmperr;
 800ac46:	bf00      	nop
 800ac48:	e004      	b.n	800ac54 <icmp_input+0x218>
        goto icmperr;
 800ac4a:	bf00      	nop
 800ac4c:	e002      	b.n	800ac54 <icmp_input+0x218>
          goto icmperr;
 800ac4e:	bf00      	nop
 800ac50:	e000      	b.n	800ac54 <icmp_input+0x218>
          goto icmperr;
 800ac52:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f002 fdad 	bl	800d7b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ac5a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ac5c:	3728      	adds	r7, #40	; 0x28
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	24005318 	.word	0x24005318
 800ac68:	2400532c 	.word	0x2400532c
 800ac6c:	08015424 	.word	0x08015424
 800ac70:	08015494 	.word	0x08015494
 800ac74:	080154cc 	.word	0x080154cc
 800ac78:	080154f4 	.word	0x080154f4

0800ac7c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ac88:	78fb      	ldrb	r3, [r7, #3]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	2103      	movs	r1, #3
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f814 	bl	800acbc <icmp_send_response>
}
 800ac94:	bf00      	nop
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	460b      	mov	r3, r1
 800aca6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800aca8:	78fb      	ldrb	r3, [r7, #3]
 800acaa:	461a      	mov	r2, r3
 800acac:	210b      	movs	r1, #11
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f804 	bl	800acbc <icmp_send_response>
}
 800acb4:	bf00      	nop
 800acb6:	3708      	adds	r7, #8
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b08c      	sub	sp, #48	; 0x30
 800acc0:	af04      	add	r7, sp, #16
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	460b      	mov	r3, r1
 800acc6:	70fb      	strb	r3, [r7, #3]
 800acc8:	4613      	mov	r3, r2
 800acca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800accc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800acd0:	2124      	movs	r1, #36	; 0x24
 800acd2:	2022      	movs	r0, #34	; 0x22
 800acd4:	f002 fa8a 	bl	800d1ec <pbuf_alloc>
 800acd8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d056      	beq.n	800ad8e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	895b      	ldrh	r3, [r3, #10]
 800ace4:	2b23      	cmp	r3, #35	; 0x23
 800ace6:	d806      	bhi.n	800acf6 <icmp_send_response+0x3a>
 800ace8:	4b2b      	ldr	r3, [pc, #172]	; (800ad98 <icmp_send_response+0xdc>)
 800acea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800acee:	492b      	ldr	r1, [pc, #172]	; (800ad9c <icmp_send_response+0xe0>)
 800acf0:	482b      	ldr	r0, [pc, #172]	; (800ada0 <icmp_send_response+0xe4>)
 800acf2:	f008 ff67 	bl	8013bc4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	78fa      	ldrb	r2, [r7, #3]
 800ad06:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	78ba      	ldrb	r2, [r7, #2]
 800ad0c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2200      	movs	r2, #0
 800ad12:	711a      	strb	r2, [r3, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	719a      	strb	r2, [r3, #6]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	f103 0008 	add.w	r0, r3, #8
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	221c      	movs	r2, #28
 800ad30:	4619      	mov	r1, r3
 800ad32:	f008 ff31 	bl	8013b98 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ad3c:	f107 030c 	add.w	r3, r7, #12
 800ad40:	4618      	mov	r0, r3
 800ad42:	f000 f901 	bl	800af48 <ip4_route>
 800ad46:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d01b      	beq.n	800ad86 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2200      	movs	r2, #0
 800ad52:	709a      	strb	r2, [r3, #2]
 800ad54:	2200      	movs	r2, #0
 800ad56:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	895b      	ldrh	r3, [r3, #10]
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	6978      	ldr	r0, [r7, #20]
 800ad60:	f000 f87d 	bl	800ae5e <inet_chksum>
 800ad64:	4603      	mov	r3, r0
 800ad66:	461a      	mov	r2, r3
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ad6c:	f107 020c 	add.w	r2, r7, #12
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	9302      	str	r3, [sp, #8]
 800ad74:	2301      	movs	r3, #1
 800ad76:	9301      	str	r3, [sp, #4]
 800ad78:	2300      	movs	r3, #0
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	23ff      	movs	r3, #255	; 0xff
 800ad7e:	2100      	movs	r1, #0
 800ad80:	69f8      	ldr	r0, [r7, #28]
 800ad82:	f000 fabd 	bl	800b300 <ip4_output_if>
  }
  pbuf_free(q);
 800ad86:	69f8      	ldr	r0, [r7, #28]
 800ad88:	f002 fd14 	bl	800d7b4 <pbuf_free>
 800ad8c:	e000      	b.n	800ad90 <icmp_send_response+0xd4>
    return;
 800ad8e:	bf00      	nop
}
 800ad90:	3720      	adds	r7, #32
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	08015424 	.word	0x08015424
 800ad9c:	08015528 	.word	0x08015528
 800ada0:	080154cc 	.word	0x080154cc

0800ada4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b089      	sub	sp, #36	; 0x24
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800adb2:	2300      	movs	r3, #0
 800adb4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	f003 0301 	and.w	r3, r3, #1
 800adc0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00d      	beq.n	800ade4 <lwip_standard_chksum+0x40>
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	dd0a      	ble.n	800ade4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800adce:	69fa      	ldr	r2, [r7, #28]
 800add0:	1c53      	adds	r3, r2, #1
 800add2:	61fb      	str	r3, [r7, #28]
 800add4:	f107 030e 	add.w	r3, r7, #14
 800add8:	3301      	adds	r3, #1
 800adda:	7812      	ldrb	r2, [r2, #0]
 800addc:	701a      	strb	r2, [r3, #0]
    len--;
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	3b01      	subs	r3, #1
 800ade2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800ade8:	e00a      	b.n	800ae00 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	1c9a      	adds	r2, r3, #2
 800adee:	61ba      	str	r2, [r7, #24]
 800adf0:	881b      	ldrh	r3, [r3, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	4413      	add	r3, r2
 800adf8:	617b      	str	r3, [r7, #20]
    len -= 2;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	3b02      	subs	r3, #2
 800adfe:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	dcf1      	bgt.n	800adea <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	dd04      	ble.n	800ae16 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800ae0c:	f107 030e 	add.w	r3, r7, #14
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	7812      	ldrb	r2, [r2, #0]
 800ae14:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800ae16:	89fb      	ldrh	r3, [r7, #14]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	0c1a      	lsrs	r2, r3, #16
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	4413      	add	r3, r2
 800ae2a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	0c1a      	lsrs	r2, r3, #16
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	4413      	add	r3, r2
 800ae36:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d007      	beq.n	800ae4e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	021b      	lsls	r3, r3, #8
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	0a1b      	lsrs	r3, r3, #8
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	b29b      	uxth	r3, r3
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3724      	adds	r7, #36	; 0x24
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr

0800ae5e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b082      	sub	sp, #8
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	460b      	mov	r3, r1
 800ae68:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800ae6a:	887b      	ldrh	r3, [r7, #2]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7ff ff98 	bl	800ada4 <lwip_standard_chksum>
 800ae74:	4603      	mov	r3, r0
 800ae76:	43db      	mvns	r3, r3
 800ae78:	b29b      	uxth	r3, r3
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b086      	sub	sp, #24
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	613b      	str	r3, [r7, #16]
 800ae96:	e02b      	b.n	800aef0 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	895b      	ldrh	r3, [r3, #10]
 800aea0:	4619      	mov	r1, r3
 800aea2:	4610      	mov	r0, r2
 800aea4:	f7ff ff7e 	bl	800ada4 <lwip_standard_chksum>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	461a      	mov	r2, r3
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	4413      	add	r3, r2
 800aeb0:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	0c1a      	lsrs	r2, r3, #16
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	4413      	add	r3, r2
 800aebc:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	895b      	ldrh	r3, [r3, #10]
 800aec2:	f003 0301 	and.w	r3, r3, #1
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00e      	beq.n	800aeea <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	bf0c      	ite	eq
 800aed2:	2301      	moveq	r3, #1
 800aed4:	2300      	movne	r3, #0
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	021b      	lsls	r3, r3, #8
 800aede:	b29a      	uxth	r2, r3
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	0a1b      	lsrs	r3, r3, #8
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	4313      	orrs	r3, r2
 800aee8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	613b      	str	r3, [r7, #16]
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1d0      	bne.n	800ae98 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d007      	beq.n	800af0c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	021b      	lsls	r3, r3, #8
 800af00:	b29a      	uxth	r2, r3
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	0a1b      	lsrs	r3, r3, #8
 800af06:	b2db      	uxtb	r3, r3
 800af08:	4313      	orrs	r3, r2
 800af0a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	43db      	mvns	r3, r3
 800af12:	b29b      	uxth	r3, r3
}
 800af14:	4618      	mov	r0, r3
 800af16:	3718      	adds	r7, #24
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800af22:	2300      	movs	r3, #0
 800af24:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800af26:	f001 fa09 	bl	800c33c <mem_init>
  memp_init();
 800af2a:	f001 fd0b 	bl	800c944 <memp_init>
  pbuf_init();
  netif_init();
 800af2e:	f001 fe09 	bl	800cb44 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800af32:	f008 f941 	bl	80131b8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800af36:	f002 fedb 	bl	800dcf0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800af3a:	f008 f8f5 	bl	8013128 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800af3e:	bf00      	nop
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
	...

0800af48 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800af50:	4b33      	ldr	r3, [pc, #204]	; (800b020 <ip4_route+0xd8>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	60fb      	str	r3, [r7, #12]
 800af56:	e036      	b.n	800afc6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800af5e:	f003 0301 	and.w	r3, r3, #1
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b00      	cmp	r3, #0
 800af66:	d02b      	beq.n	800afc0 <ip4_route+0x78>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800af6e:	089b      	lsrs	r3, r3, #2
 800af70:	f003 0301 	and.w	r3, r3, #1
 800af74:	b2db      	uxtb	r3, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	d022      	beq.n	800afc0 <ip4_route+0x78>
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	3304      	adds	r3, #4
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d01d      	beq.n	800afc0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	3304      	adds	r3, #4
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	405a      	eors	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	3308      	adds	r3, #8
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4013      	ands	r3, r2
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d101      	bne.n	800afa0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	e038      	b.n	800b012 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800afa6:	f003 0302 	and.w	r3, r3, #2
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d108      	bne.n	800afc0 <ip4_route+0x78>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	330c      	adds	r3, #12
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d101      	bne.n	800afc0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	e028      	b.n	800b012 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	60fb      	str	r3, [r7, #12]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1c5      	bne.n	800af58 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800afcc:	4b15      	ldr	r3, [pc, #84]	; (800b024 <ip4_route+0xdc>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d01a      	beq.n	800b00a <ip4_route+0xc2>
 800afd4:	4b13      	ldr	r3, [pc, #76]	; (800b024 <ip4_route+0xdc>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800afdc:	f003 0301 	and.w	r3, r3, #1
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d012      	beq.n	800b00a <ip4_route+0xc2>
 800afe4:	4b0f      	ldr	r3, [pc, #60]	; (800b024 <ip4_route+0xdc>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800afec:	f003 0304 	and.w	r3, r3, #4
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00a      	beq.n	800b00a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800aff4:	4b0b      	ldr	r3, [pc, #44]	; (800b024 <ip4_route+0xdc>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	3304      	adds	r3, #4
 800affa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800affc:	2b00      	cmp	r3, #0
 800affe:	d004      	beq.n	800b00a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	b2db      	uxtb	r3, r3
 800b006:	2b7f      	cmp	r3, #127	; 0x7f
 800b008:	d101      	bne.n	800b00e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800b00a:	2300      	movs	r3, #0
 800b00c:	e001      	b.n	800b012 <ip4_route+0xca>
  }

  return netif_default;
 800b00e:	4b05      	ldr	r3, [pc, #20]	; (800b024 <ip4_route+0xdc>)
 800b010:	681b      	ldr	r3, [r3, #0]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3714      	adds	r7, #20
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop
 800b020:	24008254 	.word	0x24008254
 800b024:	24008258 	.word	0x24008258

0800b028 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d016      	beq.n	800b06e <ip4_input_accept+0x46>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	3304      	adds	r3, #4
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d011      	beq.n	800b06e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b04a:	4b0b      	ldr	r3, [pc, #44]	; (800b078 <ip4_input_accept+0x50>)
 800b04c:	695a      	ldr	r2, [r3, #20]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	3304      	adds	r3, #4
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	429a      	cmp	r2, r3
 800b056:	d008      	beq.n	800b06a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800b058:	4b07      	ldr	r3, [pc, #28]	; (800b078 <ip4_input_accept+0x50>)
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	6879      	ldr	r1, [r7, #4]
 800b05e:	4618      	mov	r0, r3
 800b060:	f000 fa26 	bl	800b4b0 <ip4_addr_isbroadcast_u32>
 800b064:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800b06a:	2301      	movs	r3, #1
 800b06c:	e000      	b.n	800b070 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	24005318 	.word	0x24005318

0800b07c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b088      	sub	sp, #32
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800b086:	2301      	movs	r3, #1
 800b088:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	091b      	lsrs	r3, r3, #4
 800b096:	b2db      	uxtb	r3, r3
 800b098:	2b04      	cmp	r3, #4
 800b09a:	d004      	beq.n	800b0a6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f002 fb89 	bl	800d7b4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	e123      	b.n	800b2ee <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	f003 030f 	and.w	r3, r3, #15
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	885b      	ldrh	r3, [r3, #2]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7fc fdd5 	bl	8007c6c <lwip_htons>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	891b      	ldrh	r3, [r3, #8]
 800b0ca:	8a3a      	ldrh	r2, [r7, #16]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d204      	bcs.n	800b0da <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800b0d0:	8a3b      	ldrh	r3, [r7, #16]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f002 f9e7 	bl	800d4a8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	895b      	ldrh	r3, [r3, #10]
 800b0de:	8a7a      	ldrh	r2, [r7, #18]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d807      	bhi.n	800b0f4 <ip4_input+0x78>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	891b      	ldrh	r3, [r3, #8]
 800b0e8:	8a3a      	ldrh	r2, [r7, #16]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d802      	bhi.n	800b0f4 <ip4_input+0x78>
 800b0ee:	8a7b      	ldrh	r3, [r7, #18]
 800b0f0:	2b13      	cmp	r3, #19
 800b0f2:	d804      	bhi.n	800b0fe <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f002 fb5d 	bl	800d7b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	e0f7      	b.n	800b2ee <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	4a7d      	ldr	r2, [pc, #500]	; (800b2f8 <ip4_input+0x27c>)
 800b104:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	4a7b      	ldr	r2, [pc, #492]	; (800b2f8 <ip4_input+0x27c>)
 800b10c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b10e:	4b7a      	ldr	r3, [pc, #488]	; (800b2f8 <ip4_input+0x27c>)
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b116:	2be0      	cmp	r3, #224	; 0xe0
 800b118:	d112      	bne.n	800b140 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b120:	f003 0301 	and.w	r3, r3, #1
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	d007      	beq.n	800b13a <ip4_input+0xbe>
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	3304      	adds	r3, #4
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <ip4_input+0xbe>
      netif = inp;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	61bb      	str	r3, [r7, #24]
 800b138:	e02a      	b.n	800b190 <ip4_input+0x114>
    } else {
      netif = NULL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	61bb      	str	r3, [r7, #24]
 800b13e:	e027      	b.n	800b190 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800b140:	6838      	ldr	r0, [r7, #0]
 800b142:	f7ff ff71 	bl	800b028 <ip4_input_accept>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <ip4_input+0xd6>
      netif = inp;
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	61bb      	str	r3, [r7, #24]
 800b150:	e01e      	b.n	800b190 <ip4_input+0x114>
    } else {
      netif = NULL;
 800b152:	2300      	movs	r3, #0
 800b154:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800b156:	4b68      	ldr	r3, [pc, #416]	; (800b2f8 <ip4_input+0x27c>)
 800b158:	695b      	ldr	r3, [r3, #20]
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	2b7f      	cmp	r3, #127	; 0x7f
 800b15e:	d017      	beq.n	800b190 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800b160:	4b66      	ldr	r3, [pc, #408]	; (800b2fc <ip4_input+0x280>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	61bb      	str	r3, [r7, #24]
 800b166:	e00e      	b.n	800b186 <ip4_input+0x10a>
          if (netif == inp) {
 800b168:	69ba      	ldr	r2, [r7, #24]
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d006      	beq.n	800b17e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800b170:	69b8      	ldr	r0, [r7, #24]
 800b172:	f7ff ff59 	bl	800b028 <ip4_input_accept>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d108      	bne.n	800b18e <ip4_input+0x112>
 800b17c:	e000      	b.n	800b180 <ip4_input+0x104>
            continue;
 800b17e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	61bb      	str	r3, [r7, #24]
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1ed      	bne.n	800b168 <ip4_input+0xec>
 800b18c:	e000      	b.n	800b190 <ip4_input+0x114>
            break;
 800b18e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d111      	bne.n	800b1ba <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	7a5b      	ldrb	r3, [r3, #9]
 800b19a:	2b11      	cmp	r3, #17
 800b19c:	d10d      	bne.n	800b1ba <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800b19e:	8a7b      	ldrh	r3, [r7, #18]
 800b1a0:	69fa      	ldr	r2, [r7, #28]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	885b      	ldrh	r3, [r3, #2]
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800b1b0:	d103      	bne.n	800b1ba <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d017      	beq.n	800b1f0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800b1c0:	4b4d      	ldr	r3, [pc, #308]	; (800b2f8 <ip4_input+0x27c>)
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d013      	beq.n	800b1f0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b1c8:	4b4b      	ldr	r3, [pc, #300]	; (800b2f8 <ip4_input+0x27c>)
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 f96e 	bl	800b4b0 <ip4_addr_isbroadcast_u32>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d105      	bne.n	800b1e6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800b1da:	4b47      	ldr	r3, [pc, #284]	; (800b2f8 <ip4_input+0x27c>)
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b1e2:	2be0      	cmp	r3, #224	; 0xe0
 800b1e4:	d104      	bne.n	800b1f0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f002 fae4 	bl	800d7b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	e07e      	b.n	800b2ee <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d104      	bne.n	800b200 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f002 fadc 	bl	800d7b4 <pbuf_free>
    return ERR_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	e076      	b.n	800b2ee <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	88db      	ldrh	r3, [r3, #6]
 800b204:	b29b      	uxth	r3, r3
 800b206:	461a      	mov	r2, r3
 800b208:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800b20c:	4013      	ands	r3, r2
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00b      	beq.n	800b22a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fc92 	bl	800bb3c <ip4_reass>
 800b218:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <ip4_input+0x1a8>
      return ERR_OK;
 800b220:	2300      	movs	r3, #0
 800b222:	e064      	b.n	800b2ee <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800b22a:	4a33      	ldr	r2, [pc, #204]	; (800b2f8 <ip4_input+0x27c>)
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800b230:	4a31      	ldr	r2, [pc, #196]	; (800b2f8 <ip4_input+0x27c>)
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b236:	4a30      	ldr	r2, [pc, #192]	; (800b2f8 <ip4_input+0x27c>)
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	f003 030f 	and.w	r3, r3, #15
 800b244:	b2db      	uxtb	r3, r3
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	b29a      	uxth	r2, r3
 800b24c:	4b2a      	ldr	r3, [pc, #168]	; (800b2f8 <ip4_input+0x27c>)
 800b24e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800b250:	8a7b      	ldrh	r3, [r7, #18]
 800b252:	4619      	mov	r1, r3
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f002 fa27 	bl	800d6a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	7a5b      	ldrb	r3, [r3, #9]
 800b25e:	2b11      	cmp	r3, #17
 800b260:	d006      	beq.n	800b270 <ip4_input+0x1f4>
 800b262:	2b11      	cmp	r3, #17
 800b264:	dc13      	bgt.n	800b28e <ip4_input+0x212>
 800b266:	2b01      	cmp	r3, #1
 800b268:	d00c      	beq.n	800b284 <ip4_input+0x208>
 800b26a:	2b06      	cmp	r3, #6
 800b26c:	d005      	beq.n	800b27a <ip4_input+0x1fe>
 800b26e:	e00e      	b.n	800b28e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f008 f84e 	bl	8013314 <udp_input>
        break;
 800b278:	e026      	b.n	800b2c8 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800b27a:	6839      	ldr	r1, [r7, #0]
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f004 f8d1 	bl	800f424 <tcp_input>
        break;
 800b282:	e021      	b.n	800b2c8 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7ff fbd8 	bl	800aa3c <icmp_input>
        break;
 800b28c:	e01c      	b.n	800b2c8 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b28e:	4b1a      	ldr	r3, [pc, #104]	; (800b2f8 <ip4_input+0x27c>)
 800b290:	695b      	ldr	r3, [r3, #20]
 800b292:	69b9      	ldr	r1, [r7, #24]
 800b294:	4618      	mov	r0, r3
 800b296:	f000 f90b 	bl	800b4b0 <ip4_addr_isbroadcast_u32>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d10f      	bne.n	800b2c0 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b2a0:	4b15      	ldr	r3, [pc, #84]	; (800b2f8 <ip4_input+0x27c>)
 800b2a2:	695b      	ldr	r3, [r3, #20]
 800b2a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b2a8:	2be0      	cmp	r3, #224	; 0xe0
 800b2aa:	d009      	beq.n	800b2c0 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800b2ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f002 fa6b 	bl	800d78e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800b2b8:	2102      	movs	r1, #2
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f7ff fcde 	bl	800ac7c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f002 fa77 	bl	800d7b4 <pbuf_free>
        break;
 800b2c6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800b2c8:	4b0b      	ldr	r3, [pc, #44]	; (800b2f8 <ip4_input+0x27c>)
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800b2ce:	4b0a      	ldr	r3, [pc, #40]	; (800b2f8 <ip4_input+0x27c>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800b2d4:	4b08      	ldr	r3, [pc, #32]	; (800b2f8 <ip4_input+0x27c>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800b2da:	4b07      	ldr	r3, [pc, #28]	; (800b2f8 <ip4_input+0x27c>)
 800b2dc:	2200      	movs	r2, #0
 800b2de:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800b2e0:	4b05      	ldr	r3, [pc, #20]	; (800b2f8 <ip4_input+0x27c>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800b2e6:	4b04      	ldr	r3, [pc, #16]	; (800b2f8 <ip4_input+0x27c>)
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3720      	adds	r7, #32
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	24005318 	.word	0x24005318
 800b2fc:	24008254 	.word	0x24008254

0800b300 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08a      	sub	sp, #40	; 0x28
 800b304:	af04      	add	r7, sp, #16
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
 800b30c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d009      	beq.n	800b32c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <ip4_output_if+0x26>
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d102      	bne.n	800b32c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800b326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b328:	3304      	adds	r3, #4
 800b32a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800b32c:	78fa      	ldrb	r2, [r7, #3]
 800b32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b330:	9302      	str	r3, [sp, #8]
 800b332:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b336:	9301      	str	r3, [sp, #4]
 800b338:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	4613      	mov	r3, r2
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	6979      	ldr	r1, [r7, #20]
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f000 f805 	bl	800b354 <ip4_output_if_src>
 800b34a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b088      	sub	sp, #32
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
 800b360:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	7b9b      	ldrb	r3, [r3, #14]
 800b366:	2b01      	cmp	r3, #1
 800b368:	d006      	beq.n	800b378 <ip4_output_if_src+0x24>
 800b36a:	4b4b      	ldr	r3, [pc, #300]	; (800b498 <ip4_output_if_src+0x144>)
 800b36c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800b370:	494a      	ldr	r1, [pc, #296]	; (800b49c <ip4_output_if_src+0x148>)
 800b372:	484b      	ldr	r0, [pc, #300]	; (800b4a0 <ip4_output_if_src+0x14c>)
 800b374:	f008 fc26 	bl	8013bc4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d060      	beq.n	800b440 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800b37e:	2314      	movs	r3, #20
 800b380:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800b382:	2114      	movs	r1, #20
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f002 f97f 	bl	800d688 <pbuf_add_header>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d002      	beq.n	800b396 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b390:	f06f 0301 	mvn.w	r3, #1
 800b394:	e07c      	b.n	800b490 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	895b      	ldrh	r3, [r3, #10]
 800b3a0:	2b13      	cmp	r3, #19
 800b3a2:	d806      	bhi.n	800b3b2 <ip4_output_if_src+0x5e>
 800b3a4:	4b3c      	ldr	r3, [pc, #240]	; (800b498 <ip4_output_if_src+0x144>)
 800b3a6:	f44f 7262 	mov.w	r2, #904	; 0x388
 800b3aa:	493e      	ldr	r1, [pc, #248]	; (800b4a4 <ip4_output_if_src+0x150>)
 800b3ac:	483c      	ldr	r0, [pc, #240]	; (800b4a0 <ip4_output_if_src+0x14c>)
 800b3ae:	f008 fc09 	bl	8013bc4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	78fa      	ldrb	r2, [r7, #3]
 800b3b6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b3be:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800b3c8:	8b7b      	ldrh	r3, [r7, #26]
 800b3ca:	089b      	lsrs	r3, r3, #2
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3d4:	b2da      	uxtb	r2, r3
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b3e0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	891b      	ldrh	r3, [r3, #8]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fc fc40 	bl	8007c6c <lwip_htons>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	719a      	strb	r2, [r3, #6]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800b3fe:	4b2a      	ldr	r3, [pc, #168]	; (800b4a8 <ip4_output_if_src+0x154>)
 800b400:	881b      	ldrh	r3, [r3, #0]
 800b402:	4618      	mov	r0, r3
 800b404:	f7fc fc32 	bl	8007c6c <lwip_htons>
 800b408:	4603      	mov	r3, r0
 800b40a:	461a      	mov	r2, r3
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800b410:	4b25      	ldr	r3, [pc, #148]	; (800b4a8 <ip4_output_if_src+0x154>)
 800b412:	881b      	ldrh	r3, [r3, #0]
 800b414:	3301      	adds	r3, #1
 800b416:	b29a      	uxth	r2, r3
 800b418:	4b23      	ldr	r3, [pc, #140]	; (800b4a8 <ip4_output_if_src+0x154>)
 800b41a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d104      	bne.n	800b42c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800b422:	4b22      	ldr	r3, [pc, #136]	; (800b4ac <ip4_output_if_src+0x158>)
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	60da      	str	r2, [r3, #12]
 800b42a:	e003      	b.n	800b434 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	69fb      	ldr	r3, [r7, #28]
 800b432:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	2200      	movs	r2, #0
 800b438:	729a      	strb	r2, [r3, #10]
 800b43a:	2200      	movs	r2, #0
 800b43c:	72da      	strb	r2, [r3, #11]
 800b43e:	e00f      	b.n	800b460 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	895b      	ldrh	r3, [r3, #10]
 800b444:	2b13      	cmp	r3, #19
 800b446:	d802      	bhi.n	800b44e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b448:	f06f 0301 	mvn.w	r3, #1
 800b44c:	e020      	b.n	800b490 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	691b      	ldr	r3, [r3, #16]
 800b458:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800b45a:	f107 0314 	add.w	r3, r7, #20
 800b45e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800b460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00c      	beq.n	800b482 <ip4_output_if_src+0x12e>
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	891a      	ldrh	r2, [r3, #8]
 800b46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b470:	429a      	cmp	r2, r3
 800b472:	d906      	bls.n	800b482 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f000 fd53 	bl	800bf24 <ip4_frag>
 800b47e:	4603      	mov	r3, r0
 800b480:	e006      	b.n	800b490 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	695b      	ldr	r3, [r3, #20]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	68f9      	ldr	r1, [r7, #12]
 800b48a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b48c:	4798      	blx	r3
 800b48e:	4603      	mov	r3, r0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3720      	adds	r7, #32
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	08015554 	.word	0x08015554
 800b49c:	080155c4 	.word	0x080155c4
 800b4a0:	080155d0 	.word	0x080155d0
 800b4a4:	080155f8 	.word	0x080155f8
 800b4a8:	24005330 	.word	0x24005330
 800b4ac:	08017da8 	.word	0x08017da8

0800b4b0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c4:	d002      	beq.n	800b4cc <ip4_addr_isbroadcast_u32+0x1c>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e02a      	b.n	800b526 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b4d6:	f003 0302 	and.w	r3, r3, #2
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d101      	bne.n	800b4e2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e021      	b.n	800b526 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	3304      	adds	r3, #4
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d101      	bne.n	800b4f2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	e019      	b.n	800b526 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	3304      	adds	r3, #4
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	405a      	eors	r2, r3
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	3308      	adds	r3, #8
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4013      	ands	r3, r2
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10d      	bne.n	800b524 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	3308      	adds	r3, #8
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	43da      	mvns	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	3308      	adds	r3, #8
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d101      	bne.n	800b524 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800b520:	2301      	movs	r3, #1
 800b522:	e000      	b.n	800b526 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800b524:	2300      	movs	r3, #0
  }
}
 800b526:	4618      	mov	r0, r3
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
	...

0800b534 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800b53a:	2300      	movs	r3, #0
 800b53c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800b53e:	4b12      	ldr	r3, [pc, #72]	; (800b588 <ip_reass_tmr+0x54>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800b544:	e018      	b.n	800b578 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	7fdb      	ldrb	r3, [r3, #31]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d00b      	beq.n	800b566 <ip_reass_tmr+0x32>
      r->timer--;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	7fdb      	ldrb	r3, [r3, #31]
 800b552:	3b01      	subs	r3, #1
 800b554:	b2da      	uxtb	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	60fb      	str	r3, [r7, #12]
 800b564:	e008      	b.n	800b578 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800b570:	68b9      	ldr	r1, [r7, #8]
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 f80a 	bl	800b58c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1e3      	bne.n	800b546 <ip_reass_tmr+0x12>
    }
  }
}
 800b57e:	bf00      	nop
 800b580:	bf00      	nop
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	24005334 	.word	0x24005334

0800b58c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b088      	sub	sp, #32
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d105      	bne.n	800b5ae <ip_reass_free_complete_datagram+0x22>
 800b5a2:	4b45      	ldr	r3, [pc, #276]	; (800b6b8 <ip_reass_free_complete_datagram+0x12c>)
 800b5a4:	22ab      	movs	r2, #171	; 0xab
 800b5a6:	4945      	ldr	r1, [pc, #276]	; (800b6bc <ip_reass_free_complete_datagram+0x130>)
 800b5a8:	4845      	ldr	r0, [pc, #276]	; (800b6c0 <ip_reass_free_complete_datagram+0x134>)
 800b5aa:	f008 fb0b 	bl	8013bc4 <iprintf>
  if (prev != NULL) {
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00a      	beq.n	800b5ca <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d005      	beq.n	800b5ca <ip_reass_free_complete_datagram+0x3e>
 800b5be:	4b3e      	ldr	r3, [pc, #248]	; (800b6b8 <ip_reass_free_complete_datagram+0x12c>)
 800b5c0:	22ad      	movs	r2, #173	; 0xad
 800b5c2:	4940      	ldr	r1, [pc, #256]	; (800b6c4 <ip_reass_free_complete_datagram+0x138>)
 800b5c4:	483e      	ldr	r0, [pc, #248]	; (800b6c0 <ip_reass_free_complete_datagram+0x134>)
 800b5c6:	f008 fafd 	bl	8013bc4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	889b      	ldrh	r3, [r3, #4]
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d12a      	bne.n	800b632 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800b5ea:	69bb      	ldr	r3, [r7, #24]
 800b5ec:	6858      	ldr	r0, [r3, #4]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	3308      	adds	r3, #8
 800b5f2:	2214      	movs	r2, #20
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	f008 facf 	bl	8013b98 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	69b8      	ldr	r0, [r7, #24]
 800b5fe:	f7ff fb4d 	bl	800ac9c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800b602:	69b8      	ldr	r0, [r7, #24]
 800b604:	f002 f95e 	bl	800d8c4 <pbuf_clen>
 800b608:	4603      	mov	r3, r0
 800b60a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b60c:	8bfa      	ldrh	r2, [r7, #30]
 800b60e:	8a7b      	ldrh	r3, [r7, #18]
 800b610:	4413      	add	r3, r2
 800b612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b616:	db05      	blt.n	800b624 <ip_reass_free_complete_datagram+0x98>
 800b618:	4b27      	ldr	r3, [pc, #156]	; (800b6b8 <ip_reass_free_complete_datagram+0x12c>)
 800b61a:	22bc      	movs	r2, #188	; 0xbc
 800b61c:	492a      	ldr	r1, [pc, #168]	; (800b6c8 <ip_reass_free_complete_datagram+0x13c>)
 800b61e:	4828      	ldr	r0, [pc, #160]	; (800b6c0 <ip_reass_free_complete_datagram+0x134>)
 800b620:	f008 fad0 	bl	8013bc4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800b624:	8bfa      	ldrh	r2, [r7, #30]
 800b626:	8a7b      	ldrh	r3, [r7, #18]
 800b628:	4413      	add	r3, r2
 800b62a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800b62c:	69b8      	ldr	r0, [r7, #24]
 800b62e:	f002 f8c1 	bl	800d7b4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800b638:	e01f      	b.n	800b67a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f002 f93a 	bl	800d8c4 <pbuf_clen>
 800b650:	4603      	mov	r3, r0
 800b652:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800b654:	8bfa      	ldrh	r2, [r7, #30]
 800b656:	8a7b      	ldrh	r3, [r7, #18]
 800b658:	4413      	add	r3, r2
 800b65a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b65e:	db05      	blt.n	800b66c <ip_reass_free_complete_datagram+0xe0>
 800b660:	4b15      	ldr	r3, [pc, #84]	; (800b6b8 <ip_reass_free_complete_datagram+0x12c>)
 800b662:	22cc      	movs	r2, #204	; 0xcc
 800b664:	4918      	ldr	r1, [pc, #96]	; (800b6c8 <ip_reass_free_complete_datagram+0x13c>)
 800b666:	4816      	ldr	r0, [pc, #88]	; (800b6c0 <ip_reass_free_complete_datagram+0x134>)
 800b668:	f008 faac 	bl	8013bc4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800b66c:	8bfa      	ldrh	r2, [r7, #30]
 800b66e:	8a7b      	ldrh	r3, [r7, #18]
 800b670:	4413      	add	r3, r2
 800b672:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f002 f89d 	bl	800d7b4 <pbuf_free>
  while (p != NULL) {
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1dc      	bne.n	800b63a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800b680:	6839      	ldr	r1, [r7, #0]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f8c2 	bl	800b80c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800b688:	4b10      	ldr	r3, [pc, #64]	; (800b6cc <ip_reass_free_complete_datagram+0x140>)
 800b68a:	881b      	ldrh	r3, [r3, #0]
 800b68c:	8bfa      	ldrh	r2, [r7, #30]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d905      	bls.n	800b69e <ip_reass_free_complete_datagram+0x112>
 800b692:	4b09      	ldr	r3, [pc, #36]	; (800b6b8 <ip_reass_free_complete_datagram+0x12c>)
 800b694:	22d2      	movs	r2, #210	; 0xd2
 800b696:	490e      	ldr	r1, [pc, #56]	; (800b6d0 <ip_reass_free_complete_datagram+0x144>)
 800b698:	4809      	ldr	r0, [pc, #36]	; (800b6c0 <ip_reass_free_complete_datagram+0x134>)
 800b69a:	f008 fa93 	bl	8013bc4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800b69e:	4b0b      	ldr	r3, [pc, #44]	; (800b6cc <ip_reass_free_complete_datagram+0x140>)
 800b6a0:	881a      	ldrh	r2, [r3, #0]
 800b6a2:	8bfb      	ldrh	r3, [r7, #30]
 800b6a4:	1ad3      	subs	r3, r2, r3
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	4b08      	ldr	r3, [pc, #32]	; (800b6cc <ip_reass_free_complete_datagram+0x140>)
 800b6aa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800b6ac:	8bfb      	ldrh	r3, [r7, #30]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3720      	adds	r7, #32
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	08015628 	.word	0x08015628
 800b6bc:	0801569c 	.word	0x0801569c
 800b6c0:	080156a8 	.word	0x080156a8
 800b6c4:	080156d0 	.word	0x080156d0
 800b6c8:	080156e4 	.word	0x080156e4
 800b6cc:	24005338 	.word	0x24005338
 800b6d0:	08015704 	.word	0x08015704

0800b6d4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b08a      	sub	sp, #40	; 0x28
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800b6f2:	4b28      	ldr	r3, [pc, #160]	; (800b794 <ip_reass_remove_oldest_datagram+0xc0>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b6f8:	e030      	b.n	800b75c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fc:	695a      	ldr	r2, [r3, #20]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	429a      	cmp	r2, r3
 800b704:	d10c      	bne.n	800b720 <ip_reass_remove_oldest_datagram+0x4c>
 800b706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b708:	699a      	ldr	r2, [r3, #24]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d106      	bne.n	800b720 <ip_reass_remove_oldest_datagram+0x4c>
 800b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b714:	899a      	ldrh	r2, [r3, #12]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	889b      	ldrh	r3, [r3, #4]
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d014      	beq.n	800b74a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	3301      	adds	r3, #1
 800b724:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d104      	bne.n	800b736 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800b72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	61bb      	str	r3, [r7, #24]
 800b734:	e009      	b.n	800b74a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800b736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b738:	7fda      	ldrb	r2, [r3, #31]
 800b73a:	6a3b      	ldr	r3, [r7, #32]
 800b73c:	7fdb      	ldrb	r3, [r3, #31]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d803      	bhi.n	800b74a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800b742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b744:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800b74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d001      	beq.n	800b756 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800b752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b754:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800b756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800b75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1cb      	bne.n	800b6fa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800b762:	6a3b      	ldr	r3, [r7, #32]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d008      	beq.n	800b77a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800b768:	69b9      	ldr	r1, [r7, #24]
 800b76a:	6a38      	ldr	r0, [r7, #32]
 800b76c:	f7ff ff0e 	bl	800b58c <ip_reass_free_complete_datagram>
 800b770:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	4413      	add	r3, r2
 800b778:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	429a      	cmp	r2, r3
 800b780:	da02      	bge.n	800b788 <ip_reass_remove_oldest_datagram+0xb4>
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	2b01      	cmp	r3, #1
 800b786:	dcac      	bgt.n	800b6e2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800b788:	697b      	ldr	r3, [r7, #20]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3728      	adds	r7, #40	; 0x28
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	24005334 	.word	0x24005334

0800b798 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b7a2:	2004      	movs	r0, #4
 800b7a4:	f001 f934 	bl	800ca10 <memp_malloc>
 800b7a8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d110      	bne.n	800b7d2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800b7b0:	6839      	ldr	r1, [r7, #0]
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f7ff ff8e 	bl	800b6d4 <ip_reass_remove_oldest_datagram>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	dc03      	bgt.n	800b7c8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800b7c0:	2004      	movs	r0, #4
 800b7c2:	f001 f925 	bl	800ca10 <memp_malloc>
 800b7c6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	e016      	b.n	800b800 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800b7d2:	2220      	movs	r2, #32
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f008 f9ec 	bl	8013bb4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	220f      	movs	r2, #15
 800b7e0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800b7e2:	4b09      	ldr	r3, [pc, #36]	; (800b808 <ip_reass_enqueue_new_datagram+0x70>)
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800b7ea:	4a07      	ldr	r2, [pc, #28]	; (800b808 <ip_reass_enqueue_new_datagram+0x70>)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	3308      	adds	r3, #8
 800b7f4:	2214      	movs	r2, #20
 800b7f6:	6879      	ldr	r1, [r7, #4]
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f008 f9cd 	bl	8013b98 <memcpy>
  return ipr;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	24005334 	.word	0x24005334

0800b80c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800b816:	4b10      	ldr	r3, [pc, #64]	; (800b858 <ip_reass_dequeue_datagram+0x4c>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d104      	bne.n	800b82a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a0c      	ldr	r2, [pc, #48]	; (800b858 <ip_reass_dequeue_datagram+0x4c>)
 800b826:	6013      	str	r3, [r2, #0]
 800b828:	e00d      	b.n	800b846 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d106      	bne.n	800b83e <ip_reass_dequeue_datagram+0x32>
 800b830:	4b0a      	ldr	r3, [pc, #40]	; (800b85c <ip_reass_dequeue_datagram+0x50>)
 800b832:	f240 1245 	movw	r2, #325	; 0x145
 800b836:	490a      	ldr	r1, [pc, #40]	; (800b860 <ip_reass_dequeue_datagram+0x54>)
 800b838:	480a      	ldr	r0, [pc, #40]	; (800b864 <ip_reass_dequeue_datagram+0x58>)
 800b83a:	f008 f9c3 	bl	8013bc4 <iprintf>
    prev->next = ipr->next;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800b846:	6879      	ldr	r1, [r7, #4]
 800b848:	2004      	movs	r0, #4
 800b84a:	f001 f951 	bl	800caf0 <memp_free>
}
 800b84e:	bf00      	nop
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	24005334 	.word	0x24005334
 800b85c:	08015628 	.word	0x08015628
 800b860:	08015728 	.word	0x08015728
 800b864:	080156a8 	.word	0x080156a8

0800b868 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b08c      	sub	sp, #48	; 0x30
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800b874:	2300      	movs	r3, #0
 800b876:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800b878:	2301      	movs	r3, #1
 800b87a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	885b      	ldrh	r3, [r3, #2]
 800b886:	b29b      	uxth	r3, r3
 800b888:	4618      	mov	r0, r3
 800b88a:	f7fc f9ef 	bl	8007c6c <lwip_htons>
 800b88e:	4603      	mov	r3, r0
 800b890:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	f003 030f 	and.w	r3, r3, #15
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800b8a0:	7e7b      	ldrb	r3, [r7, #25]
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	8b7a      	ldrh	r2, [r7, #26]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d202      	bcs.n	800b8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b8aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ae:	e135      	b.n	800bb1c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800b8b0:	7e7b      	ldrb	r3, [r7, #25]
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	8b7a      	ldrh	r2, [r7, #26]
 800b8b6:	1ad3      	subs	r3, r2, r3
 800b8b8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800b8ba:	69fb      	ldr	r3, [r7, #28]
 800b8bc:	88db      	ldrh	r3, [r3, #6]
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7fc f9d3 	bl	8007c6c <lwip_htons>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	00db      	lsls	r3, r3, #3
 800b8d0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800b8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8da:	2200      	movs	r2, #0
 800b8dc:	701a      	strb	r2, [r3, #0]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	705a      	strb	r2, [r3, #1]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	709a      	strb	r2, [r3, #2]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800b8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ec:	8afa      	ldrh	r2, [r7, #22]
 800b8ee:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800b8f0:	8afa      	ldrh	r2, [r7, #22]
 800b8f2:	8b7b      	ldrh	r3, [r7, #26]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800b8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fe:	88db      	ldrh	r3, [r3, #6]
 800b900:	b29b      	uxth	r3, r3
 800b902:	8afa      	ldrh	r2, [r7, #22]
 800b904:	429a      	cmp	r2, r3
 800b906:	d902      	bls.n	800b90e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b908:	f04f 33ff 	mov.w	r3, #4294967295
 800b90c:	e106      	b.n	800bb1c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	627b      	str	r3, [r7, #36]	; 0x24
 800b914:	e068      	b.n	800b9e8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800b91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91e:	889b      	ldrh	r3, [r3, #4]
 800b920:	b29a      	uxth	r2, r3
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	889b      	ldrh	r3, [r3, #4]
 800b926:	b29b      	uxth	r3, r3
 800b928:	429a      	cmp	r2, r3
 800b92a:	d235      	bcs.n	800b998 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800b92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b930:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800b932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b934:	2b00      	cmp	r3, #0
 800b936:	d020      	beq.n	800b97a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800b938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93a:	889b      	ldrh	r3, [r3, #4]
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b940:	88db      	ldrh	r3, [r3, #6]
 800b942:	b29b      	uxth	r3, r3
 800b944:	429a      	cmp	r2, r3
 800b946:	d307      	bcc.n	800b958 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800b948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94a:	88db      	ldrh	r3, [r3, #6]
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	889b      	ldrh	r3, [r3, #4]
 800b952:	b29b      	uxth	r3, r3
 800b954:	429a      	cmp	r2, r3
 800b956:	d902      	bls.n	800b95e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b958:	f04f 33ff 	mov.w	r3, #4294967295
 800b95c:	e0de      	b.n	800bb1c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800b95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800b964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b966:	88db      	ldrh	r3, [r3, #6]
 800b968:	b29a      	uxth	r2, r3
 800b96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96c:	889b      	ldrh	r3, [r3, #4]
 800b96e:	b29b      	uxth	r3, r3
 800b970:	429a      	cmp	r2, r3
 800b972:	d03d      	beq.n	800b9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800b974:	2300      	movs	r3, #0
 800b976:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800b978:	e03a      	b.n	800b9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800b97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97c:	88db      	ldrh	r3, [r3, #6]
 800b97e:	b29a      	uxth	r2, r3
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	889b      	ldrh	r3, [r3, #4]
 800b984:	b29b      	uxth	r3, r3
 800b986:	429a      	cmp	r2, r3
 800b988:	d902      	bls.n	800b990 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b98a:	f04f 33ff 	mov.w	r3, #4294967295
 800b98e:	e0c5      	b.n	800bb1c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	605a      	str	r2, [r3, #4]
      break;
 800b996:	e02b      	b.n	800b9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800b998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99a:	889b      	ldrh	r3, [r3, #4]
 800b99c:	b29a      	uxth	r2, r3
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	889b      	ldrh	r3, [r3, #4]
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d102      	bne.n	800b9ae <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ac:	e0b6      	b.n	800bb1c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800b9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b0:	889b      	ldrh	r3, [r3, #4]
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	88db      	ldrh	r3, [r3, #6]
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d202      	bcs.n	800b9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b9be:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c2:	e0ab      	b.n	800bb1c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800b9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d009      	beq.n	800b9de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	88db      	ldrh	r3, [r3, #6]
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	889b      	ldrh	r3, [r3, #4]
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d001      	beq.n	800b9de <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d193      	bne.n	800b916 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800b9ee:	e000      	b.n	800b9f2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800b9f0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d12d      	bne.n	800ba54 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800b9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d01c      	beq.n	800ba38 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	88db      	ldrh	r3, [r3, #6]
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba06:	889b      	ldrh	r3, [r3, #4]
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d906      	bls.n	800ba1c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800ba0e:	4b45      	ldr	r3, [pc, #276]	; (800bb24 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ba10:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800ba14:	4944      	ldr	r1, [pc, #272]	; (800bb28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ba16:	4845      	ldr	r0, [pc, #276]	; (800bb2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ba18:	f008 f8d4 	bl	8013bc4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ba1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ba22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba24:	88db      	ldrh	r3, [r3, #6]
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba2a:	889b      	ldrh	r3, [r3, #4]
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d010      	beq.n	800ba54 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ba32:	2300      	movs	r3, #0
 800ba34:	623b      	str	r3, [r7, #32]
 800ba36:	e00d      	b.n	800ba54 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d006      	beq.n	800ba4e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ba40:	4b38      	ldr	r3, [pc, #224]	; (800bb24 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ba42:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800ba46:	493a      	ldr	r1, [pc, #232]	; (800bb30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ba48:	4838      	ldr	r0, [pc, #224]	; (800bb2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ba4a:	f008 f8bb 	bl	8013bc4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	68ba      	ldr	r2, [r7, #8]
 800ba52:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d105      	bne.n	800ba66 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	7f9b      	ldrb	r3, [r3, #30]
 800ba5e:	f003 0301 	and.w	r3, r3, #1
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d059      	beq.n	800bb1a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ba66:	6a3b      	ldr	r3, [r7, #32]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d04f      	beq.n	800bb0c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d006      	beq.n	800ba82 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	889b      	ldrh	r3, [r3, #4]
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d002      	beq.n	800ba88 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ba82:	2300      	movs	r3, #0
 800ba84:	623b      	str	r3, [r7, #32]
 800ba86:	e041      	b.n	800bb0c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ba88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800ba8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ba92:	e012      	b.n	800baba <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800ba9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9c:	88db      	ldrh	r3, [r3, #6]
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa2:	889b      	ldrh	r3, [r3, #4]
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d002      	beq.n	800bab0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	623b      	str	r3, [r7, #32]
            break;
 800baae:	e007      	b.n	800bac0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800bab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800bab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1e9      	bne.n	800ba94 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800bac0:	6a3b      	ldr	r3, [r7, #32]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d022      	beq.n	800bb0c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d106      	bne.n	800badc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800bace:	4b15      	ldr	r3, [pc, #84]	; (800bb24 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bad0:	f240 12df 	movw	r2, #479	; 0x1df
 800bad4:	4917      	ldr	r1, [pc, #92]	; (800bb34 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800bad6:	4815      	ldr	r0, [pc, #84]	; (800bb2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bad8:	f008 f874 	bl	8013bc4 <iprintf>
          LWIP_ASSERT("sanity check",
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d106      	bne.n	800baf6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800bae8:	4b0e      	ldr	r3, [pc, #56]	; (800bb24 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800baea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800baee:	4911      	ldr	r1, [pc, #68]	; (800bb34 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800baf0:	480e      	ldr	r0, [pc, #56]	; (800bb2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800baf2:	f008 f867 	bl	8013bc4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800baf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d006      	beq.n	800bb0c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800bafe:	4b09      	ldr	r3, [pc, #36]	; (800bb24 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bb00:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800bb04:	490c      	ldr	r1, [pc, #48]	; (800bb38 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800bb06:	4809      	ldr	r0, [pc, #36]	; (800bb2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bb08:	f008 f85c 	bl	8013bc4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800bb0c:	6a3b      	ldr	r3, [r7, #32]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	bf14      	ite	ne
 800bb12:	2301      	movne	r3, #1
 800bb14:	2300      	moveq	r3, #0
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	e000      	b.n	800bb1c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800bb1a:	2300      	movs	r3, #0
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3730      	adds	r7, #48	; 0x30
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	08015628 	.word	0x08015628
 800bb28:	08015744 	.word	0x08015744
 800bb2c:	080156a8 	.word	0x080156a8
 800bb30:	08015764 	.word	0x08015764
 800bb34:	0801579c 	.word	0x0801579c
 800bb38:	080157ac 	.word	0x080157ac

0800bb3c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b08e      	sub	sp, #56	; 0x38
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800bb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	f003 030f 	and.w	r3, r3, #15
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	2b14      	cmp	r3, #20
 800bb5a:	f040 8171 	bne.w	800be40 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800bb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb60:	88db      	ldrh	r3, [r3, #6]
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fc f881 	bl	8007c6c <lwip_htons>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	00db      	lsls	r3, r3, #3
 800bb74:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800bb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb78:	885b      	ldrh	r3, [r3, #2]
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fc f875 	bl	8007c6c <lwip_htons>
 800bb82:	4603      	mov	r3, r0
 800bb84:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800bb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	f003 030f 	and.w	r3, r3, #15
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800bb96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	f0c0 8150 	bcc.w	800be44 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800bba4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bbac:	1ad3      	subs	r3, r2, r3
 800bbae:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f001 fe87 	bl	800d8c4 <pbuf_clen>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800bbba:	4b8c      	ldr	r3, [pc, #560]	; (800bdec <ip4_reass+0x2b0>)
 800bbbc:	881b      	ldrh	r3, [r3, #0]
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	8c3b      	ldrh	r3, [r7, #32]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	2b0a      	cmp	r3, #10
 800bbc6:	dd10      	ble.n	800bbea <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bbc8:	8c3b      	ldrh	r3, [r7, #32]
 800bbca:	4619      	mov	r1, r3
 800bbcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbce:	f7ff fd81 	bl	800b6d4 <ip_reass_remove_oldest_datagram>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 8137 	beq.w	800be48 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800bbda:	4b84      	ldr	r3, [pc, #528]	; (800bdec <ip4_reass+0x2b0>)
 800bbdc:	881b      	ldrh	r3, [r3, #0]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	8c3b      	ldrh	r3, [r7, #32]
 800bbe2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800bbe4:	2b0a      	cmp	r3, #10
 800bbe6:	f300 812f 	bgt.w	800be48 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800bbea:	4b81      	ldr	r3, [pc, #516]	; (800bdf0 <ip4_reass+0x2b4>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	633b      	str	r3, [r7, #48]	; 0x30
 800bbf0:	e015      	b.n	800bc1e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800bbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf4:	695a      	ldr	r2, [r3, #20]
 800bbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d10c      	bne.n	800bc18 <ip4_reass+0xdc>
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc00:	699a      	ldr	r2, [r3, #24]
 800bc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc04:	691b      	ldr	r3, [r3, #16]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d106      	bne.n	800bc18 <ip4_reass+0xdc>
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0c:	899a      	ldrh	r2, [r3, #12]
 800bc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc10:	889b      	ldrh	r3, [r3, #4]
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d006      	beq.n	800bc26 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800bc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	633b      	str	r3, [r7, #48]	; 0x30
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1e6      	bne.n	800bbf2 <ip4_reass+0xb6>
 800bc24:	e000      	b.n	800bc28 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800bc26:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800bc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d109      	bne.n	800bc42 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800bc2e:	8c3b      	ldrh	r3, [r7, #32]
 800bc30:	4619      	mov	r1, r3
 800bc32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc34:	f7ff fdb0 	bl	800b798 <ip_reass_enqueue_new_datagram>
 800bc38:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d11c      	bne.n	800bc7a <ip4_reass+0x13e>
      goto nullreturn;
 800bc40:	e105      	b.n	800be4e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800bc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc44:	88db      	ldrh	r3, [r3, #6]
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7fc f80f 	bl	8007c6c <lwip_htons>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d110      	bne.n	800bc7a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800bc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5a:	89db      	ldrh	r3, [r3, #14]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fc f805 	bl	8007c6c <lwip_htons>
 800bc62:	4603      	mov	r3, r0
 800bc64:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d006      	beq.n	800bc7a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6e:	3308      	adds	r3, #8
 800bc70:	2214      	movs	r2, #20
 800bc72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc74:	4618      	mov	r0, r3
 800bc76:	f007 ff8f 	bl	8013b98 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800bc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7c:	88db      	ldrh	r3, [r3, #6]
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	f003 0320 	and.w	r3, r3, #32
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	bf0c      	ite	eq
 800bc88:	2301      	moveq	r3, #1
 800bc8a:	2300      	movne	r3, #0
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00e      	beq.n	800bcb4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800bc96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bc98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc9a:	4413      	add	r3, r2
 800bc9c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800bc9e:	8b7a      	ldrh	r2, [r7, #26]
 800bca0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bca2:	429a      	cmp	r2, r3
 800bca4:	f0c0 80a0 	bcc.w	800bde8 <ip4_reass+0x2ac>
 800bca8:	8b7b      	ldrh	r3, [r7, #26]
 800bcaa:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	f200 809a 	bhi.w	800bde8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800bcb4:	69fa      	ldr	r2, [r7, #28]
 800bcb6:	6879      	ldr	r1, [r7, #4]
 800bcb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcba:	f7ff fdd5 	bl	800b868 <ip_reass_chain_frag_into_datagram_and_validate>
 800bcbe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc6:	f000 809b 	beq.w	800be00 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800bcca:	4b48      	ldr	r3, [pc, #288]	; (800bdec <ip4_reass+0x2b0>)
 800bccc:	881a      	ldrh	r2, [r3, #0]
 800bcce:	8c3b      	ldrh	r3, [r7, #32]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	4b45      	ldr	r3, [pc, #276]	; (800bdec <ip4_reass+0x2b0>)
 800bcd6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00d      	beq.n	800bcfa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800bcde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bce0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bce2:	4413      	add	r3, r2
 800bce4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800bce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce8:	8a7a      	ldrh	r2, [r7, #18]
 800bcea:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800bcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcee:	7f9b      	ldrb	r3, [r3, #30]
 800bcf0:	f043 0301 	orr.w	r3, r3, #1
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d171      	bne.n	800bde4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800bd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd02:	8b9b      	ldrh	r3, [r3, #28]
 800bd04:	3314      	adds	r3, #20
 800bd06:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800bd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800bd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800bd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1c:	3308      	adds	r3, #8
 800bd1e:	2214      	movs	r2, #20
 800bd20:	4619      	mov	r1, r3
 800bd22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd24:	f007 ff38 	bl	8013b98 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800bd28:	8a3b      	ldrh	r3, [r7, #16]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fb ff9e 	bl	8007c6c <lwip_htons>
 800bd30:	4603      	mov	r3, r0
 800bd32:	461a      	mov	r2, r3
 800bd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd36:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800bd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	719a      	strb	r2, [r3, #6]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd44:	2200      	movs	r2, #0
 800bd46:	729a      	strb	r2, [r3, #10]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800bd52:	e00d      	b.n	800bd70 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800bd54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800bd5a:	2114      	movs	r1, #20
 800bd5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bd5e:	f001 fca3 	bl	800d6a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800bd62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f001 fde7 	bl	800d938 <pbuf_cat>
      r = iprh->next_pbuf;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800bd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1ee      	bne.n	800bd54 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800bd76:	4b1e      	ldr	r3, [pc, #120]	; (800bdf0 <ip4_reass+0x2b4>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d102      	bne.n	800bd86 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800bd80:	2300      	movs	r3, #0
 800bd82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd84:	e010      	b.n	800bda8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bd86:	4b1a      	ldr	r3, [pc, #104]	; (800bdf0 <ip4_reass+0x2b4>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd8c:	e007      	b.n	800bd9e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800bd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d006      	beq.n	800bda6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800bd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1f4      	bne.n	800bd8e <ip4_reass+0x252>
 800bda4:	e000      	b.n	800bda8 <ip4_reass+0x26c>
          break;
 800bda6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800bda8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdac:	f7ff fd2e 	bl	800b80c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f001 fd87 	bl	800d8c4 <pbuf_clen>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800bdba:	4b0c      	ldr	r3, [pc, #48]	; (800bdec <ip4_reass+0x2b0>)
 800bdbc:	881b      	ldrh	r3, [r3, #0]
 800bdbe:	8c3a      	ldrh	r2, [r7, #32]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d906      	bls.n	800bdd2 <ip4_reass+0x296>
 800bdc4:	4b0b      	ldr	r3, [pc, #44]	; (800bdf4 <ip4_reass+0x2b8>)
 800bdc6:	f240 229b 	movw	r2, #667	; 0x29b
 800bdca:	490b      	ldr	r1, [pc, #44]	; (800bdf8 <ip4_reass+0x2bc>)
 800bdcc:	480b      	ldr	r0, [pc, #44]	; (800bdfc <ip4_reass+0x2c0>)
 800bdce:	f007 fef9 	bl	8013bc4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800bdd2:	4b06      	ldr	r3, [pc, #24]	; (800bdec <ip4_reass+0x2b0>)
 800bdd4:	881a      	ldrh	r2, [r3, #0]
 800bdd6:	8c3b      	ldrh	r3, [r7, #32]
 800bdd8:	1ad3      	subs	r3, r2, r3
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	4b03      	ldr	r3, [pc, #12]	; (800bdec <ip4_reass+0x2b0>)
 800bdde:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	e038      	b.n	800be56 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800bde4:	2300      	movs	r3, #0
 800bde6:	e036      	b.n	800be56 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800bde8:	bf00      	nop
 800bdea:	e00a      	b.n	800be02 <ip4_reass+0x2c6>
 800bdec:	24005338 	.word	0x24005338
 800bdf0:	24005334 	.word	0x24005334
 800bdf4:	08015628 	.word	0x08015628
 800bdf8:	080157d0 	.word	0x080157d0
 800bdfc:	080156a8 	.word	0x080156a8
    goto nullreturn_ipr;
 800be00:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	2b00      	cmp	r3, #0
 800be06:	d106      	bne.n	800be16 <ip4_reass+0x2da>
 800be08:	4b15      	ldr	r3, [pc, #84]	; (800be60 <ip4_reass+0x324>)
 800be0a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800be0e:	4915      	ldr	r1, [pc, #84]	; (800be64 <ip4_reass+0x328>)
 800be10:	4815      	ldr	r0, [pc, #84]	; (800be68 <ip4_reass+0x32c>)
 800be12:	f007 fed7 	bl	8013bc4 <iprintf>
  if (ipr->p == NULL) {
 800be16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d116      	bne.n	800be4c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800be1e:	4b13      	ldr	r3, [pc, #76]	; (800be6c <ip4_reass+0x330>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be24:	429a      	cmp	r2, r3
 800be26:	d006      	beq.n	800be36 <ip4_reass+0x2fa>
 800be28:	4b0d      	ldr	r3, [pc, #52]	; (800be60 <ip4_reass+0x324>)
 800be2a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800be2e:	4910      	ldr	r1, [pc, #64]	; (800be70 <ip4_reass+0x334>)
 800be30:	480d      	ldr	r0, [pc, #52]	; (800be68 <ip4_reass+0x32c>)
 800be32:	f007 fec7 	bl	8013bc4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800be36:	2100      	movs	r1, #0
 800be38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be3a:	f7ff fce7 	bl	800b80c <ip_reass_dequeue_datagram>
 800be3e:	e006      	b.n	800be4e <ip4_reass+0x312>
    goto nullreturn;
 800be40:	bf00      	nop
 800be42:	e004      	b.n	800be4e <ip4_reass+0x312>
    goto nullreturn;
 800be44:	bf00      	nop
 800be46:	e002      	b.n	800be4e <ip4_reass+0x312>
      goto nullreturn;
 800be48:	bf00      	nop
 800be4a:	e000      	b.n	800be4e <ip4_reass+0x312>
  }

nullreturn:
 800be4c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f001 fcb0 	bl	800d7b4 <pbuf_free>
  return NULL;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3738      	adds	r7, #56	; 0x38
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	08015628 	.word	0x08015628
 800be64:	080157ec 	.word	0x080157ec
 800be68:	080156a8 	.word	0x080156a8
 800be6c:	24005334 	.word	0x24005334
 800be70:	080157f8 	.word	0x080157f8

0800be74 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800be78:	2005      	movs	r0, #5
 800be7a:	f000 fdc9 	bl	800ca10 <memp_malloc>
 800be7e:	4603      	mov	r3, r0
}
 800be80:	4618      	mov	r0, r3
 800be82:	bd80      	pop	{r7, pc}

0800be84 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d106      	bne.n	800bea0 <ip_frag_free_pbuf_custom_ref+0x1c>
 800be92:	4b07      	ldr	r3, [pc, #28]	; (800beb0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800be94:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800be98:	4906      	ldr	r1, [pc, #24]	; (800beb4 <ip_frag_free_pbuf_custom_ref+0x30>)
 800be9a:	4807      	ldr	r0, [pc, #28]	; (800beb8 <ip_frag_free_pbuf_custom_ref+0x34>)
 800be9c:	f007 fe92 	bl	8013bc4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800bea0:	6879      	ldr	r1, [r7, #4]
 800bea2:	2005      	movs	r0, #5
 800bea4:	f000 fe24 	bl	800caf0 <memp_free>
}
 800bea8:	bf00      	nop
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	08015628 	.word	0x08015628
 800beb4:	08015818 	.word	0x08015818
 800beb8:	080156a8 	.word	0x080156a8

0800bebc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d106      	bne.n	800bedc <ipfrag_free_pbuf_custom+0x20>
 800bece:	4b11      	ldr	r3, [pc, #68]	; (800bf14 <ipfrag_free_pbuf_custom+0x58>)
 800bed0:	f240 22ce 	movw	r2, #718	; 0x2ce
 800bed4:	4910      	ldr	r1, [pc, #64]	; (800bf18 <ipfrag_free_pbuf_custom+0x5c>)
 800bed6:	4811      	ldr	r0, [pc, #68]	; (800bf1c <ipfrag_free_pbuf_custom+0x60>)
 800bed8:	f007 fe74 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d006      	beq.n	800bef2 <ipfrag_free_pbuf_custom+0x36>
 800bee4:	4b0b      	ldr	r3, [pc, #44]	; (800bf14 <ipfrag_free_pbuf_custom+0x58>)
 800bee6:	f240 22cf 	movw	r2, #719	; 0x2cf
 800beea:	490d      	ldr	r1, [pc, #52]	; (800bf20 <ipfrag_free_pbuf_custom+0x64>)
 800beec:	480b      	ldr	r0, [pc, #44]	; (800bf1c <ipfrag_free_pbuf_custom+0x60>)
 800beee:	f007 fe69 	bl	8013bc4 <iprintf>
  if (pcr->original != NULL) {
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	695b      	ldr	r3, [r3, #20]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d004      	beq.n	800bf04 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	695b      	ldr	r3, [r3, #20]
 800befe:	4618      	mov	r0, r3
 800bf00:	f001 fc58 	bl	800d7b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f7ff ffbd 	bl	800be84 <ip_frag_free_pbuf_custom_ref>
}
 800bf0a:	bf00      	nop
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	08015628 	.word	0x08015628
 800bf18:	08015824 	.word	0x08015824
 800bf1c:	080156a8 	.word	0x080156a8
 800bf20:	08015830 	.word	0x08015830

0800bf24 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b094      	sub	sp, #80	; 0x50
 800bf28:	af02      	add	r7, sp, #8
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800bf30:	2300      	movs	r3, #0
 800bf32:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf3a:	3b14      	subs	r3, #20
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	da00      	bge.n	800bf42 <ip4_frag+0x1e>
 800bf40:	3307      	adds	r3, #7
 800bf42:	10db      	asrs	r3, r3, #3
 800bf44:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800bf46:	2314      	movs	r3, #20
 800bf48:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800bf50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf52:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800bf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	f003 030f 	and.w	r3, r3, #15
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	2b14      	cmp	r3, #20
 800bf64:	d002      	beq.n	800bf6c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800bf66:	f06f 0305 	mvn.w	r3, #5
 800bf6a:	e110      	b.n	800c18e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	895b      	ldrh	r3, [r3, #10]
 800bf70:	2b13      	cmp	r3, #19
 800bf72:	d809      	bhi.n	800bf88 <ip4_frag+0x64>
 800bf74:	4b88      	ldr	r3, [pc, #544]	; (800c198 <ip4_frag+0x274>)
 800bf76:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800bf7a:	4988      	ldr	r1, [pc, #544]	; (800c19c <ip4_frag+0x278>)
 800bf7c:	4888      	ldr	r0, [pc, #544]	; (800c1a0 <ip4_frag+0x27c>)
 800bf7e:	f007 fe21 	bl	8013bc4 <iprintf>
 800bf82:	f06f 0305 	mvn.w	r3, #5
 800bf86:	e102      	b.n	800c18e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8a:	88db      	ldrh	r3, [r3, #6]
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fb fe6c 	bl	8007c6c <lwip_htons>
 800bf94:	4603      	mov	r3, r0
 800bf96:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800bf98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bf9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800bfa2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bfa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bfa8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	891b      	ldrh	r3, [r3, #8]
 800bfae:	3b14      	subs	r3, #20
 800bfb0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800bfb4:	e0e1      	b.n	800c17a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800bfb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bfb8:	00db      	lsls	r3, r3, #3
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	bf28      	it	cs
 800bfc4:	4613      	movcs	r3, r2
 800bfc6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800bfc8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bfcc:	2114      	movs	r1, #20
 800bfce:	200e      	movs	r0, #14
 800bfd0:	f001 f90c 	bl	800d1ec <pbuf_alloc>
 800bfd4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f000 80d5 	beq.w	800c188 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800bfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe0:	895b      	ldrh	r3, [r3, #10]
 800bfe2:	2b13      	cmp	r3, #19
 800bfe4:	d806      	bhi.n	800bff4 <ip4_frag+0xd0>
 800bfe6:	4b6c      	ldr	r3, [pc, #432]	; (800c198 <ip4_frag+0x274>)
 800bfe8:	f44f 7249 	mov.w	r2, #804	; 0x324
 800bfec:	496d      	ldr	r1, [pc, #436]	; (800c1a4 <ip4_frag+0x280>)
 800bfee:	486c      	ldr	r0, [pc, #432]	; (800c1a0 <ip4_frag+0x27c>)
 800bff0:	f007 fde8 	bl	8013bc4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff6:	685b      	ldr	r3, [r3, #4]
 800bff8:	2214      	movs	r2, #20
 800bffa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bffc:	4618      	mov	r0, r3
 800bffe:	f007 fdcb 	bl	8013b98 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800c008:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c00a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800c00e:	e064      	b.n	800c0da <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	895a      	ldrh	r2, [r3, #10]
 800c014:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c016:	1ad3      	subs	r3, r2, r3
 800c018:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	895b      	ldrh	r3, [r3, #10]
 800c01e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c020:	429a      	cmp	r2, r3
 800c022:	d906      	bls.n	800c032 <ip4_frag+0x10e>
 800c024:	4b5c      	ldr	r3, [pc, #368]	; (800c198 <ip4_frag+0x274>)
 800c026:	f240 322d 	movw	r2, #813	; 0x32d
 800c02a:	495f      	ldr	r1, [pc, #380]	; (800c1a8 <ip4_frag+0x284>)
 800c02c:	485c      	ldr	r0, [pc, #368]	; (800c1a0 <ip4_frag+0x27c>)
 800c02e:	f007 fdc9 	bl	8013bc4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c032:	8bfa      	ldrh	r2, [r7, #30]
 800c034:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c038:	4293      	cmp	r3, r2
 800c03a:	bf28      	it	cs
 800c03c:	4613      	movcs	r3, r2
 800c03e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800c042:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c046:	2b00      	cmp	r3, #0
 800c048:	d105      	bne.n	800c056 <ip4_frag+0x132>
        poff = 0;
 800c04a:	2300      	movs	r3, #0
 800c04c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	60fb      	str	r3, [r7, #12]
        continue;
 800c054:	e041      	b.n	800c0da <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c056:	f7ff ff0d 	bl	800be74 <ip_frag_alloc_pbuf_custom_ref>
 800c05a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800c05c:	69bb      	ldr	r3, [r7, #24]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d103      	bne.n	800c06a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800c062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c064:	f001 fba6 	bl	800d7b4 <pbuf_free>
        goto memerr;
 800c068:	e08f      	b.n	800c18a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c06a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c070:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c072:	4413      	add	r3, r2
 800c074:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800c078:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800c07c:	9201      	str	r2, [sp, #4]
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	4603      	mov	r3, r0
 800c082:	2241      	movs	r2, #65	; 0x41
 800c084:	2000      	movs	r0, #0
 800c086:	f001 f9db 	bl	800d440 <pbuf_alloced_custom>
 800c08a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d106      	bne.n	800c0a0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800c092:	69b8      	ldr	r0, [r7, #24]
 800c094:	f7ff fef6 	bl	800be84 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800c098:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c09a:	f001 fb8b 	bl	800d7b4 <pbuf_free>
        goto memerr;
 800c09e:	e074      	b.n	800c18a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f001 fc27 	bl	800d8f4 <pbuf_ref>
      pcr->original = p;
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	4a3f      	ldr	r2, [pc, #252]	; (800c1ac <ip4_frag+0x288>)
 800c0b0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800c0b2:	6979      	ldr	r1, [r7, #20]
 800c0b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0b6:	f001 fc3f 	bl	800d938 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800c0ba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800c0be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800c0c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d004      	beq.n	800c0da <ip4_frag+0x1b6>
        poff = 0;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800c0da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d196      	bne.n	800c010 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800c0e2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c0e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c0e8:	4413      	add	r3, r2
 800c0ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0f0:	f1a3 0213 	sub.w	r2, r3, #19
 800c0f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	bfcc      	ite	gt
 800c0fc:	2301      	movgt	r3, #1
 800c0fe:	2300      	movle	r3, #0
 800c100:	b2db      	uxtb	r3, r3
 800c102:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800c104:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c108:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c10c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800c10e:	6a3b      	ldr	r3, [r7, #32]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d002      	beq.n	800c11a <ip4_frag+0x1f6>
 800c114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c116:	2b00      	cmp	r3, #0
 800c118:	d003      	beq.n	800c122 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800c11a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c11c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c120:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800c122:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c124:	4618      	mov	r0, r3
 800c126:	f7fb fda1 	bl	8007c6c <lwip_htons>
 800c12a:	4603      	mov	r3, r0
 800c12c:	461a      	mov	r2, r3
 800c12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c130:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800c132:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c134:	3314      	adds	r3, #20
 800c136:	b29b      	uxth	r3, r3
 800c138:	4618      	mov	r0, r3
 800c13a:	f7fb fd97 	bl	8007c6c <lwip_htons>
 800c13e:	4603      	mov	r3, r0
 800c140:	461a      	mov	r2, r3
 800c142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c144:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	2200      	movs	r2, #0
 800c14a:	729a      	strb	r2, [r3, #10]
 800c14c:	2200      	movs	r2, #0
 800c14e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	695b      	ldr	r3, [r3, #20]
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c158:	68b8      	ldr	r0, [r7, #8]
 800c15a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800c15c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c15e:	f001 fb29 	bl	800d7b4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800c162:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c166:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c168:	1ad3      	subs	r3, r2, r3
 800c16a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800c16e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c172:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c174:	4413      	add	r3, r2
 800c176:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800c17a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f47f af19 	bne.w	800bfb6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800c184:	2300      	movs	r3, #0
 800c186:	e002      	b.n	800c18e <ip4_frag+0x26a>
      goto memerr;
 800c188:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800c18a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3748      	adds	r7, #72	; 0x48
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	08015628 	.word	0x08015628
 800c19c:	0801583c 	.word	0x0801583c
 800c1a0:	080156a8 	.word	0x080156a8
 800c1a4:	08015858 	.word	0x08015858
 800c1a8:	08015878 	.word	0x08015878
 800c1ac:	0800bebd 	.word	0x0800bebd

0800c1b0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c1ba:	4b05      	ldr	r3, [pc, #20]	; (800c1d0 <ptr_to_mem+0x20>)
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	88fb      	ldrh	r3, [r7, #6]
 800c1c0:	4413      	add	r3, r2
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	2400533c 	.word	0x2400533c

0800c1d4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c1dc:	4b05      	ldr	r3, [pc, #20]	; (800c1f4 <mem_to_ptr+0x20>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	1ad3      	subs	r3, r2, r3
 800c1e4:	b29b      	uxth	r3, r3
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop
 800c1f4:	2400533c 	.word	0x2400533c

0800c1f8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c1f8:	b590      	push	{r4, r7, lr}
 800c1fa:	b085      	sub	sp, #20
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c200:	4b45      	ldr	r3, [pc, #276]	; (800c318 <plug_holes+0x120>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	429a      	cmp	r2, r3
 800c208:	d206      	bcs.n	800c218 <plug_holes+0x20>
 800c20a:	4b44      	ldr	r3, [pc, #272]	; (800c31c <plug_holes+0x124>)
 800c20c:	f240 12df 	movw	r2, #479	; 0x1df
 800c210:	4943      	ldr	r1, [pc, #268]	; (800c320 <plug_holes+0x128>)
 800c212:	4844      	ldr	r0, [pc, #272]	; (800c324 <plug_holes+0x12c>)
 800c214:	f007 fcd6 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c218:	4b43      	ldr	r3, [pc, #268]	; (800c328 <plug_holes+0x130>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	687a      	ldr	r2, [r7, #4]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d306      	bcc.n	800c230 <plug_holes+0x38>
 800c222:	4b3e      	ldr	r3, [pc, #248]	; (800c31c <plug_holes+0x124>)
 800c224:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c228:	4940      	ldr	r1, [pc, #256]	; (800c32c <plug_holes+0x134>)
 800c22a:	483e      	ldr	r0, [pc, #248]	; (800c324 <plug_holes+0x12c>)
 800c22c:	f007 fcca 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	791b      	ldrb	r3, [r3, #4]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d006      	beq.n	800c246 <plug_holes+0x4e>
 800c238:	4b38      	ldr	r3, [pc, #224]	; (800c31c <plug_holes+0x124>)
 800c23a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c23e:	493c      	ldr	r1, [pc, #240]	; (800c330 <plug_holes+0x138>)
 800c240:	4838      	ldr	r0, [pc, #224]	; (800c324 <plug_holes+0x12c>)
 800c242:	f007 fcbf 	bl	8013bc4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	881b      	ldrh	r3, [r3, #0]
 800c24a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c24e:	d906      	bls.n	800c25e <plug_holes+0x66>
 800c250:	4b32      	ldr	r3, [pc, #200]	; (800c31c <plug_holes+0x124>)
 800c252:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c256:	4937      	ldr	r1, [pc, #220]	; (800c334 <plug_holes+0x13c>)
 800c258:	4832      	ldr	r0, [pc, #200]	; (800c324 <plug_holes+0x12c>)
 800c25a:	f007 fcb3 	bl	8013bc4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	881b      	ldrh	r3, [r3, #0]
 800c262:	4618      	mov	r0, r3
 800c264:	f7ff ffa4 	bl	800c1b0 <ptr_to_mem>
 800c268:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d024      	beq.n	800c2bc <plug_holes+0xc4>
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	791b      	ldrb	r3, [r3, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d120      	bne.n	800c2bc <plug_holes+0xc4>
 800c27a:	4b2b      	ldr	r3, [pc, #172]	; (800c328 <plug_holes+0x130>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	429a      	cmp	r2, r3
 800c282:	d01b      	beq.n	800c2bc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c284:	4b2c      	ldr	r3, [pc, #176]	; (800c338 <plug_holes+0x140>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d102      	bne.n	800c294 <plug_holes+0x9c>
      lfree = mem;
 800c28e:	4a2a      	ldr	r2, [pc, #168]	; (800c338 <plug_holes+0x140>)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	881a      	ldrh	r2, [r3, #0]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	881b      	ldrh	r3, [r3, #0]
 800c2a0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c2a4:	d00a      	beq.n	800c2bc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	881b      	ldrh	r3, [r3, #0]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7ff ff80 	bl	800c1b0 <ptr_to_mem>
 800c2b0:	4604      	mov	r4, r0
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f7ff ff8e 	bl	800c1d4 <mem_to_ptr>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	885b      	ldrh	r3, [r3, #2]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7ff ff75 	bl	800c1b0 <ptr_to_mem>
 800c2c6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c2c8:	68ba      	ldr	r2, [r7, #8]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d01f      	beq.n	800c310 <plug_holes+0x118>
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	791b      	ldrb	r3, [r3, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d11b      	bne.n	800c310 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c2d8:	4b17      	ldr	r3, [pc, #92]	; (800c338 <plug_holes+0x140>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d102      	bne.n	800c2e8 <plug_holes+0xf0>
      lfree = pmem;
 800c2e2:	4a15      	ldr	r2, [pc, #84]	; (800c338 <plug_holes+0x140>)
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	881a      	ldrh	r2, [r3, #0]
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	881b      	ldrh	r3, [r3, #0]
 800c2f4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c2f8:	d00a      	beq.n	800c310 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	881b      	ldrh	r3, [r3, #0]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7ff ff56 	bl	800c1b0 <ptr_to_mem>
 800c304:	4604      	mov	r4, r0
 800c306:	68b8      	ldr	r0, [r7, #8]
 800c308:	f7ff ff64 	bl	800c1d4 <mem_to_ptr>
 800c30c:	4603      	mov	r3, r0
 800c30e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c310:	bf00      	nop
 800c312:	3714      	adds	r7, #20
 800c314:	46bd      	mov	sp, r7
 800c316:	bd90      	pop	{r4, r7, pc}
 800c318:	2400533c 	.word	0x2400533c
 800c31c:	08015888 	.word	0x08015888
 800c320:	080158f0 	.word	0x080158f0
 800c324:	08015908 	.word	0x08015908
 800c328:	24005340 	.word	0x24005340
 800c32c:	08015930 	.word	0x08015930
 800c330:	0801594c 	.word	0x0801594c
 800c334:	08015968 	.word	0x08015968
 800c338:	24005344 	.word	0x24005344

0800c33c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c342:	4b16      	ldr	r3, [pc, #88]	; (800c39c <mem_init+0x60>)
 800c344:	4a16      	ldr	r2, [pc, #88]	; (800c3a0 <mem_init+0x64>)
 800c346:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c348:	4b14      	ldr	r3, [pc, #80]	; (800c39c <mem_init+0x60>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c354:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c362:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800c366:	f7ff ff23 	bl	800c1b0 <ptr_to_mem>
 800c36a:	4603      	mov	r3, r0
 800c36c:	4a0d      	ldr	r2, [pc, #52]	; (800c3a4 <mem_init+0x68>)
 800c36e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c370:	4b0c      	ldr	r3, [pc, #48]	; (800c3a4 <mem_init+0x68>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	2201      	movs	r2, #1
 800c376:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c378:	4b0a      	ldr	r3, [pc, #40]	; (800c3a4 <mem_init+0x68>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c380:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c382:	4b08      	ldr	r3, [pc, #32]	; (800c3a4 <mem_init+0x68>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c38a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c38c:	4b03      	ldr	r3, [pc, #12]	; (800c39c <mem_init+0x60>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a05      	ldr	r2, [pc, #20]	; (800c3a8 <mem_init+0x6c>)
 800c392:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c394:	bf00      	nop
 800c396:	3708      	adds	r7, #8
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	2400533c 	.word	0x2400533c
 800c3a0:	30044000 	.word	0x30044000
 800c3a4:	24005340 	.word	0x24005340
 800c3a8:	24005344 	.word	0x24005344

0800c3ac <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b086      	sub	sp, #24
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f7ff ff0d 	bl	800c1d4 <mem_to_ptr>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	881b      	ldrh	r3, [r3, #0]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7ff fef4 	bl	800c1b0 <ptr_to_mem>
 800c3c8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	885b      	ldrh	r3, [r3, #2]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7ff feee 	bl	800c1b0 <ptr_to_mem>
 800c3d4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	881b      	ldrh	r3, [r3, #0]
 800c3da:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c3de:	d818      	bhi.n	800c412 <mem_link_valid+0x66>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	885b      	ldrh	r3, [r3, #2]
 800c3e4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c3e8:	d813      	bhi.n	800c412 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c3ee:	8afa      	ldrh	r2, [r7, #22]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d004      	beq.n	800c3fe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	881b      	ldrh	r3, [r3, #0]
 800c3f8:	8afa      	ldrh	r2, [r7, #22]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d109      	bne.n	800c412 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c3fe:	4b08      	ldr	r3, [pc, #32]	; (800c420 <mem_link_valid+0x74>)
 800c400:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c402:	693a      	ldr	r2, [r7, #16]
 800c404:	429a      	cmp	r2, r3
 800c406:	d006      	beq.n	800c416 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	885b      	ldrh	r3, [r3, #2]
 800c40c:	8afa      	ldrh	r2, [r7, #22]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d001      	beq.n	800c416 <mem_link_valid+0x6a>
    return 0;
 800c412:	2300      	movs	r3, #0
 800c414:	e000      	b.n	800c418 <mem_link_valid+0x6c>
  }
  return 1;
 800c416:	2301      	movs	r3, #1
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3718      	adds	r7, #24
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	24005340 	.word	0x24005340

0800c424 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d04c      	beq.n	800c4cc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f003 0303 	and.w	r3, r3, #3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d007      	beq.n	800c44c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c43c:	4b25      	ldr	r3, [pc, #148]	; (800c4d4 <mem_free+0xb0>)
 800c43e:	f240 2273 	movw	r2, #627	; 0x273
 800c442:	4925      	ldr	r1, [pc, #148]	; (800c4d8 <mem_free+0xb4>)
 800c444:	4825      	ldr	r0, [pc, #148]	; (800c4dc <mem_free+0xb8>)
 800c446:	f007 fbbd 	bl	8013bc4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c44a:	e040      	b.n	800c4ce <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	3b08      	subs	r3, #8
 800c450:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c452:	4b23      	ldr	r3, [pc, #140]	; (800c4e0 <mem_free+0xbc>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d306      	bcc.n	800c46a <mem_free+0x46>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f103 020c 	add.w	r2, r3, #12
 800c462:	4b20      	ldr	r3, [pc, #128]	; (800c4e4 <mem_free+0xc0>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	429a      	cmp	r2, r3
 800c468:	d907      	bls.n	800c47a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c46a:	4b1a      	ldr	r3, [pc, #104]	; (800c4d4 <mem_free+0xb0>)
 800c46c:	f240 227f 	movw	r2, #639	; 0x27f
 800c470:	491d      	ldr	r1, [pc, #116]	; (800c4e8 <mem_free+0xc4>)
 800c472:	481a      	ldr	r0, [pc, #104]	; (800c4dc <mem_free+0xb8>)
 800c474:	f007 fba6 	bl	8013bc4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c478:	e029      	b.n	800c4ce <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	791b      	ldrb	r3, [r3, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d107      	bne.n	800c492 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c482:	4b14      	ldr	r3, [pc, #80]	; (800c4d4 <mem_free+0xb0>)
 800c484:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c488:	4918      	ldr	r1, [pc, #96]	; (800c4ec <mem_free+0xc8>)
 800c48a:	4814      	ldr	r0, [pc, #80]	; (800c4dc <mem_free+0xb8>)
 800c48c:	f007 fb9a 	bl	8013bc4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c490:	e01d      	b.n	800c4ce <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f7ff ff8a 	bl	800c3ac <mem_link_valid>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d107      	bne.n	800c4ae <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c49e:	4b0d      	ldr	r3, [pc, #52]	; (800c4d4 <mem_free+0xb0>)
 800c4a0:	f240 2295 	movw	r2, #661	; 0x295
 800c4a4:	4912      	ldr	r1, [pc, #72]	; (800c4f0 <mem_free+0xcc>)
 800c4a6:	480d      	ldr	r0, [pc, #52]	; (800c4dc <mem_free+0xb8>)
 800c4a8:	f007 fb8c 	bl	8013bc4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c4ac:	e00f      	b.n	800c4ce <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c4b4:	4b0f      	ldr	r3, [pc, #60]	; (800c4f4 <mem_free+0xd0>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d202      	bcs.n	800c4c4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c4be:	4a0d      	ldr	r2, [pc, #52]	; (800c4f4 <mem_free+0xd0>)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f7ff fe97 	bl	800c1f8 <plug_holes>
 800c4ca:	e000      	b.n	800c4ce <mem_free+0xaa>
    return;
 800c4cc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	08015888 	.word	0x08015888
 800c4d8:	08015994 	.word	0x08015994
 800c4dc:	08015908 	.word	0x08015908
 800c4e0:	2400533c 	.word	0x2400533c
 800c4e4:	24005340 	.word	0x24005340
 800c4e8:	080159b8 	.word	0x080159b8
 800c4ec:	080159d4 	.word	0x080159d4
 800c4f0:	080159fc 	.word	0x080159fc
 800c4f4:	24005344 	.word	0x24005344

0800c4f8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b088      	sub	sp, #32
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	460b      	mov	r3, r1
 800c502:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c504:	887b      	ldrh	r3, [r7, #2]
 800c506:	3303      	adds	r3, #3
 800c508:	b29b      	uxth	r3, r3
 800c50a:	f023 0303 	bic.w	r3, r3, #3
 800c50e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c510:	8bfb      	ldrh	r3, [r7, #30]
 800c512:	2b0b      	cmp	r3, #11
 800c514:	d801      	bhi.n	800c51a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c516:	230c      	movs	r3, #12
 800c518:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c51a:	8bfb      	ldrh	r3, [r7, #30]
 800c51c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c520:	d803      	bhi.n	800c52a <mem_trim+0x32>
 800c522:	8bfa      	ldrh	r2, [r7, #30]
 800c524:	887b      	ldrh	r3, [r7, #2]
 800c526:	429a      	cmp	r2, r3
 800c528:	d201      	bcs.n	800c52e <mem_trim+0x36>
    return NULL;
 800c52a:	2300      	movs	r3, #0
 800c52c:	e0cc      	b.n	800c6c8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c52e:	4b68      	ldr	r3, [pc, #416]	; (800c6d0 <mem_trim+0x1d8>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	429a      	cmp	r2, r3
 800c536:	d304      	bcc.n	800c542 <mem_trim+0x4a>
 800c538:	4b66      	ldr	r3, [pc, #408]	; (800c6d4 <mem_trim+0x1dc>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d306      	bcc.n	800c550 <mem_trim+0x58>
 800c542:	4b65      	ldr	r3, [pc, #404]	; (800c6d8 <mem_trim+0x1e0>)
 800c544:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c548:	4964      	ldr	r1, [pc, #400]	; (800c6dc <mem_trim+0x1e4>)
 800c54a:	4865      	ldr	r0, [pc, #404]	; (800c6e0 <mem_trim+0x1e8>)
 800c54c:	f007 fb3a 	bl	8013bc4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c550:	4b5f      	ldr	r3, [pc, #380]	; (800c6d0 <mem_trim+0x1d8>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	429a      	cmp	r2, r3
 800c558:	d304      	bcc.n	800c564 <mem_trim+0x6c>
 800c55a:	4b5e      	ldr	r3, [pc, #376]	; (800c6d4 <mem_trim+0x1dc>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	429a      	cmp	r2, r3
 800c562:	d301      	bcc.n	800c568 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	e0af      	b.n	800c6c8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	3b08      	subs	r3, #8
 800c56c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c56e:	69b8      	ldr	r0, [r7, #24]
 800c570:	f7ff fe30 	bl	800c1d4 <mem_to_ptr>
 800c574:	4603      	mov	r3, r0
 800c576:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c578:	69bb      	ldr	r3, [r7, #24]
 800c57a:	881a      	ldrh	r2, [r3, #0]
 800c57c:	8afb      	ldrh	r3, [r7, #22]
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	b29b      	uxth	r3, r3
 800c582:	3b08      	subs	r3, #8
 800c584:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c586:	8bfa      	ldrh	r2, [r7, #30]
 800c588:	8abb      	ldrh	r3, [r7, #20]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d906      	bls.n	800c59c <mem_trim+0xa4>
 800c58e:	4b52      	ldr	r3, [pc, #328]	; (800c6d8 <mem_trim+0x1e0>)
 800c590:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c594:	4953      	ldr	r1, [pc, #332]	; (800c6e4 <mem_trim+0x1ec>)
 800c596:	4852      	ldr	r0, [pc, #328]	; (800c6e0 <mem_trim+0x1e8>)
 800c598:	f007 fb14 	bl	8013bc4 <iprintf>
  if (newsize > size) {
 800c59c:	8bfa      	ldrh	r2, [r7, #30]
 800c59e:	8abb      	ldrh	r3, [r7, #20]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d901      	bls.n	800c5a8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	e08f      	b.n	800c6c8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c5a8:	8bfa      	ldrh	r2, [r7, #30]
 800c5aa:	8abb      	ldrh	r3, [r7, #20]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d101      	bne.n	800c5b4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	e089      	b.n	800c6c8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	881b      	ldrh	r3, [r3, #0]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7ff fdf9 	bl	800c1b0 <ptr_to_mem>
 800c5be:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	791b      	ldrb	r3, [r3, #4]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d13f      	bne.n	800c648 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c5c8:	69bb      	ldr	r3, [r7, #24]
 800c5ca:	881b      	ldrh	r3, [r3, #0]
 800c5cc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c5d0:	d106      	bne.n	800c5e0 <mem_trim+0xe8>
 800c5d2:	4b41      	ldr	r3, [pc, #260]	; (800c6d8 <mem_trim+0x1e0>)
 800c5d4:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c5d8:	4943      	ldr	r1, [pc, #268]	; (800c6e8 <mem_trim+0x1f0>)
 800c5da:	4841      	ldr	r0, [pc, #260]	; (800c6e0 <mem_trim+0x1e8>)
 800c5dc:	f007 faf2 	bl	8013bc4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	881b      	ldrh	r3, [r3, #0]
 800c5e4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c5e6:	8afa      	ldrh	r2, [r7, #22]
 800c5e8:	8bfb      	ldrh	r3, [r7, #30]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	3308      	adds	r3, #8
 800c5f0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c5f2:	4b3e      	ldr	r3, [pc, #248]	; (800c6ec <mem_trim+0x1f4>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	693a      	ldr	r2, [r7, #16]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d106      	bne.n	800c60a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c5fc:	89fb      	ldrh	r3, [r7, #14]
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7ff fdd6 	bl	800c1b0 <ptr_to_mem>
 800c604:	4603      	mov	r3, r0
 800c606:	4a39      	ldr	r2, [pc, #228]	; (800c6ec <mem_trim+0x1f4>)
 800c608:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c60a:	89fb      	ldrh	r3, [r7, #14]
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7ff fdcf 	bl	800c1b0 <ptr_to_mem>
 800c612:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	2200      	movs	r2, #0
 800c618:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	89ba      	ldrh	r2, [r7, #12]
 800c61e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	8afa      	ldrh	r2, [r7, #22]
 800c624:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	89fa      	ldrh	r2, [r7, #14]
 800c62a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	881b      	ldrh	r3, [r3, #0]
 800c630:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c634:	d047      	beq.n	800c6c6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	881b      	ldrh	r3, [r3, #0]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7ff fdb8 	bl	800c1b0 <ptr_to_mem>
 800c640:	4602      	mov	r2, r0
 800c642:	89fb      	ldrh	r3, [r7, #14]
 800c644:	8053      	strh	r3, [r2, #2]
 800c646:	e03e      	b.n	800c6c6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c648:	8bfb      	ldrh	r3, [r7, #30]
 800c64a:	f103 0214 	add.w	r2, r3, #20
 800c64e:	8abb      	ldrh	r3, [r7, #20]
 800c650:	429a      	cmp	r2, r3
 800c652:	d838      	bhi.n	800c6c6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c654:	8afa      	ldrh	r2, [r7, #22]
 800c656:	8bfb      	ldrh	r3, [r7, #30]
 800c658:	4413      	add	r3, r2
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	3308      	adds	r3, #8
 800c65e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	881b      	ldrh	r3, [r3, #0]
 800c664:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c668:	d106      	bne.n	800c678 <mem_trim+0x180>
 800c66a:	4b1b      	ldr	r3, [pc, #108]	; (800c6d8 <mem_trim+0x1e0>)
 800c66c:	f240 3216 	movw	r2, #790	; 0x316
 800c670:	491d      	ldr	r1, [pc, #116]	; (800c6e8 <mem_trim+0x1f0>)
 800c672:	481b      	ldr	r0, [pc, #108]	; (800c6e0 <mem_trim+0x1e8>)
 800c674:	f007 faa6 	bl	8013bc4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c678:	89fb      	ldrh	r3, [r7, #14]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7ff fd98 	bl	800c1b0 <ptr_to_mem>
 800c680:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c682:	4b1a      	ldr	r3, [pc, #104]	; (800c6ec <mem_trim+0x1f4>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	693a      	ldr	r2, [r7, #16]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d202      	bcs.n	800c692 <mem_trim+0x19a>
      lfree = mem2;
 800c68c:	4a17      	ldr	r2, [pc, #92]	; (800c6ec <mem_trim+0x1f4>)
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	2200      	movs	r2, #0
 800c696:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	881a      	ldrh	r2, [r3, #0]
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	8afa      	ldrh	r2, [r7, #22]
 800c6a4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	89fa      	ldrh	r2, [r7, #14]
 800c6aa:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	881b      	ldrh	r3, [r3, #0]
 800c6b0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c6b4:	d007      	beq.n	800c6c6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	881b      	ldrh	r3, [r3, #0]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7ff fd78 	bl	800c1b0 <ptr_to_mem>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	89fb      	ldrh	r3, [r7, #14]
 800c6c4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c6c6:	687b      	ldr	r3, [r7, #4]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3720      	adds	r7, #32
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	2400533c 	.word	0x2400533c
 800c6d4:	24005340 	.word	0x24005340
 800c6d8:	08015888 	.word	0x08015888
 800c6dc:	08015a30 	.word	0x08015a30
 800c6e0:	08015908 	.word	0x08015908
 800c6e4:	08015a48 	.word	0x08015a48
 800c6e8:	08015a68 	.word	0x08015a68
 800c6ec:	24005344 	.word	0x24005344

0800c6f0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b088      	sub	sp, #32
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c6fa:	88fb      	ldrh	r3, [r7, #6]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d101      	bne.n	800c704 <mem_malloc+0x14>
    return NULL;
 800c700:	2300      	movs	r3, #0
 800c702:	e0d9      	b.n	800c8b8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c704:	88fb      	ldrh	r3, [r7, #6]
 800c706:	3303      	adds	r3, #3
 800c708:	b29b      	uxth	r3, r3
 800c70a:	f023 0303 	bic.w	r3, r3, #3
 800c70e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c710:	8bbb      	ldrh	r3, [r7, #28]
 800c712:	2b0b      	cmp	r3, #11
 800c714:	d801      	bhi.n	800c71a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c716:	230c      	movs	r3, #12
 800c718:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c71a:	8bbb      	ldrh	r3, [r7, #28]
 800c71c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c720:	d803      	bhi.n	800c72a <mem_malloc+0x3a>
 800c722:	8bba      	ldrh	r2, [r7, #28]
 800c724:	88fb      	ldrh	r3, [r7, #6]
 800c726:	429a      	cmp	r2, r3
 800c728:	d201      	bcs.n	800c72e <mem_malloc+0x3e>
    return NULL;
 800c72a:	2300      	movs	r3, #0
 800c72c:	e0c4      	b.n	800c8b8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c72e:	4b64      	ldr	r3, [pc, #400]	; (800c8c0 <mem_malloc+0x1d0>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4618      	mov	r0, r3
 800c734:	f7ff fd4e 	bl	800c1d4 <mem_to_ptr>
 800c738:	4603      	mov	r3, r0
 800c73a:	83fb      	strh	r3, [r7, #30]
 800c73c:	e0b4      	b.n	800c8a8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c73e:	8bfb      	ldrh	r3, [r7, #30]
 800c740:	4618      	mov	r0, r3
 800c742:	f7ff fd35 	bl	800c1b0 <ptr_to_mem>
 800c746:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	791b      	ldrb	r3, [r3, #4]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f040 80a4 	bne.w	800c89a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	881b      	ldrh	r3, [r3, #0]
 800c756:	461a      	mov	r2, r3
 800c758:	8bfb      	ldrh	r3, [r7, #30]
 800c75a:	1ad3      	subs	r3, r2, r3
 800c75c:	f1a3 0208 	sub.w	r2, r3, #8
 800c760:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c762:	429a      	cmp	r2, r3
 800c764:	f0c0 8099 	bcc.w	800c89a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	881b      	ldrh	r3, [r3, #0]
 800c76c:	461a      	mov	r2, r3
 800c76e:	8bfb      	ldrh	r3, [r7, #30]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	f1a3 0208 	sub.w	r2, r3, #8
 800c776:	8bbb      	ldrh	r3, [r7, #28]
 800c778:	3314      	adds	r3, #20
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d333      	bcc.n	800c7e6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c77e:	8bfa      	ldrh	r2, [r7, #30]
 800c780:	8bbb      	ldrh	r3, [r7, #28]
 800c782:	4413      	add	r3, r2
 800c784:	b29b      	uxth	r3, r3
 800c786:	3308      	adds	r3, #8
 800c788:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c78a:	8a7b      	ldrh	r3, [r7, #18]
 800c78c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c790:	d106      	bne.n	800c7a0 <mem_malloc+0xb0>
 800c792:	4b4c      	ldr	r3, [pc, #304]	; (800c8c4 <mem_malloc+0x1d4>)
 800c794:	f240 3287 	movw	r2, #903	; 0x387
 800c798:	494b      	ldr	r1, [pc, #300]	; (800c8c8 <mem_malloc+0x1d8>)
 800c79a:	484c      	ldr	r0, [pc, #304]	; (800c8cc <mem_malloc+0x1dc>)
 800c79c:	f007 fa12 	bl	8013bc4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c7a0:	8a7b      	ldrh	r3, [r7, #18]
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7ff fd04 	bl	800c1b0 <ptr_to_mem>
 800c7a8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	881a      	ldrh	r2, [r3, #0]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	8bfa      	ldrh	r2, [r7, #30]
 800c7bc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	8a7a      	ldrh	r2, [r7, #18]
 800c7c2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c7d2:	d00b      	beq.n	800c7ec <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	881b      	ldrh	r3, [r3, #0]
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7ff fce9 	bl	800c1b0 <ptr_to_mem>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	8a7b      	ldrh	r3, [r7, #18]
 800c7e2:	8053      	strh	r3, [r2, #2]
 800c7e4:	e002      	b.n	800c7ec <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c7ec:	4b34      	ldr	r3, [pc, #208]	; (800c8c0 <mem_malloc+0x1d0>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	697a      	ldr	r2, [r7, #20]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d127      	bne.n	800c846 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800c7f6:	4b32      	ldr	r3, [pc, #200]	; (800c8c0 <mem_malloc+0x1d0>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c7fc:	e005      	b.n	800c80a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	4618      	mov	r0, r3
 800c804:	f7ff fcd4 	bl	800c1b0 <ptr_to_mem>
 800c808:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	791b      	ldrb	r3, [r3, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d004      	beq.n	800c81c <mem_malloc+0x12c>
 800c812:	4b2f      	ldr	r3, [pc, #188]	; (800c8d0 <mem_malloc+0x1e0>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	69ba      	ldr	r2, [r7, #24]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d1f0      	bne.n	800c7fe <mem_malloc+0x10e>
          }
          lfree = cur;
 800c81c:	4a28      	ldr	r2, [pc, #160]	; (800c8c0 <mem_malloc+0x1d0>)
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c822:	4b27      	ldr	r3, [pc, #156]	; (800c8c0 <mem_malloc+0x1d0>)
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	4b2a      	ldr	r3, [pc, #168]	; (800c8d0 <mem_malloc+0x1e0>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d00b      	beq.n	800c846 <mem_malloc+0x156>
 800c82e:	4b24      	ldr	r3, [pc, #144]	; (800c8c0 <mem_malloc+0x1d0>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	791b      	ldrb	r3, [r3, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d006      	beq.n	800c846 <mem_malloc+0x156>
 800c838:	4b22      	ldr	r3, [pc, #136]	; (800c8c4 <mem_malloc+0x1d4>)
 800c83a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c83e:	4925      	ldr	r1, [pc, #148]	; (800c8d4 <mem_malloc+0x1e4>)
 800c840:	4822      	ldr	r0, [pc, #136]	; (800c8cc <mem_malloc+0x1dc>)
 800c842:	f007 f9bf 	bl	8013bc4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c846:	8bba      	ldrh	r2, [r7, #28]
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	4413      	add	r3, r2
 800c84c:	3308      	adds	r3, #8
 800c84e:	4a20      	ldr	r2, [pc, #128]	; (800c8d0 <mem_malloc+0x1e0>)
 800c850:	6812      	ldr	r2, [r2, #0]
 800c852:	4293      	cmp	r3, r2
 800c854:	d906      	bls.n	800c864 <mem_malloc+0x174>
 800c856:	4b1b      	ldr	r3, [pc, #108]	; (800c8c4 <mem_malloc+0x1d4>)
 800c858:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c85c:	491e      	ldr	r1, [pc, #120]	; (800c8d8 <mem_malloc+0x1e8>)
 800c85e:	481b      	ldr	r0, [pc, #108]	; (800c8cc <mem_malloc+0x1dc>)
 800c860:	f007 f9b0 	bl	8013bc4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	f003 0303 	and.w	r3, r3, #3
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d006      	beq.n	800c87c <mem_malloc+0x18c>
 800c86e:	4b15      	ldr	r3, [pc, #84]	; (800c8c4 <mem_malloc+0x1d4>)
 800c870:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c874:	4919      	ldr	r1, [pc, #100]	; (800c8dc <mem_malloc+0x1ec>)
 800c876:	4815      	ldr	r0, [pc, #84]	; (800c8cc <mem_malloc+0x1dc>)
 800c878:	f007 f9a4 	bl	8013bc4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	f003 0303 	and.w	r3, r3, #3
 800c882:	2b00      	cmp	r3, #0
 800c884:	d006      	beq.n	800c894 <mem_malloc+0x1a4>
 800c886:	4b0f      	ldr	r3, [pc, #60]	; (800c8c4 <mem_malloc+0x1d4>)
 800c888:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c88c:	4914      	ldr	r1, [pc, #80]	; (800c8e0 <mem_malloc+0x1f0>)
 800c88e:	480f      	ldr	r0, [pc, #60]	; (800c8cc <mem_malloc+0x1dc>)
 800c890:	f007 f998 	bl	8013bc4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	3308      	adds	r3, #8
 800c898:	e00e      	b.n	800c8b8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800c89a:	8bfb      	ldrh	r3, [r7, #30]
 800c89c:	4618      	mov	r0, r3
 800c89e:	f7ff fc87 	bl	800c1b0 <ptr_to_mem>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c8a8:	8bfa      	ldrh	r2, [r7, #30]
 800c8aa:	8bbb      	ldrh	r3, [r7, #28]
 800c8ac:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	f4ff af44 	bcc.w	800c73e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c8b6:	2300      	movs	r3, #0
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3720      	adds	r7, #32
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	24005344 	.word	0x24005344
 800c8c4:	08015888 	.word	0x08015888
 800c8c8:	08015a68 	.word	0x08015a68
 800c8cc:	08015908 	.word	0x08015908
 800c8d0:	24005340 	.word	0x24005340
 800c8d4:	08015a7c 	.word	0x08015a7c
 800c8d8:	08015a98 	.word	0x08015a98
 800c8dc:	08015ac8 	.word	0x08015ac8
 800c8e0:	08015af8 	.word	0x08015af8

0800c8e4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	3303      	adds	r3, #3
 800c8fa:	f023 0303 	bic.w	r3, r3, #3
 800c8fe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c900:	2300      	movs	r3, #0
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	e011      	b.n	800c92a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	881b      	ldrh	r3, [r3, #0]
 800c91c:	461a      	mov	r2, r3
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	4413      	add	r3, r2
 800c922:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	3301      	adds	r3, #1
 800c928:	60fb      	str	r3, [r7, #12]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	885b      	ldrh	r3, [r3, #2]
 800c92e:	461a      	mov	r2, r3
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	4293      	cmp	r3, r2
 800c934:	dbe7      	blt.n	800c906 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c936:	bf00      	nop
 800c938:	bf00      	nop
 800c93a:	3714      	adds	r7, #20
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr

0800c944 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c94a:	2300      	movs	r3, #0
 800c94c:	80fb      	strh	r3, [r7, #6]
 800c94e:	e009      	b.n	800c964 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c950:	88fb      	ldrh	r3, [r7, #6]
 800c952:	4a08      	ldr	r2, [pc, #32]	; (800c974 <memp_init+0x30>)
 800c954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c958:	4618      	mov	r0, r3
 800c95a:	f7ff ffc3 	bl	800c8e4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c95e:	88fb      	ldrh	r3, [r7, #6]
 800c960:	3301      	adds	r3, #1
 800c962:	80fb      	strh	r3, [r7, #6]
 800c964:	88fb      	ldrh	r3, [r7, #6]
 800c966:	2b08      	cmp	r3, #8
 800c968:	d9f2      	bls.n	800c950 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c96a:	bf00      	nop
 800c96c:	bf00      	nop
 800c96e:	3708      	adds	r7, #8
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	08017e1c 	.word	0x08017e1c

0800c978 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d012      	beq.n	800c9b4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	68fa      	ldr	r2, [r7, #12]
 800c994:	6812      	ldr	r2, [r2, #0]
 800c996:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f003 0303 	and.w	r3, r3, #3
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d006      	beq.n	800c9b0 <do_memp_malloc_pool+0x38>
 800c9a2:	4b07      	ldr	r3, [pc, #28]	; (800c9c0 <do_memp_malloc_pool+0x48>)
 800c9a4:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c9a8:	4906      	ldr	r1, [pc, #24]	; (800c9c4 <do_memp_malloc_pool+0x4c>)
 800c9aa:	4807      	ldr	r0, [pc, #28]	; (800c9c8 <do_memp_malloc_pool+0x50>)
 800c9ac:	f007 f90a 	bl	8013bc4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	e000      	b.n	800c9b6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	08015b1c 	.word	0x08015b1c
 800c9c4:	08015b88 	.word	0x08015b88
 800c9c8:	08015bac 	.word	0x08015bac

0800c9cc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d106      	bne.n	800c9e8 <memp_malloc_pool+0x1c>
 800c9da:	4b0a      	ldr	r3, [pc, #40]	; (800ca04 <memp_malloc_pool+0x38>)
 800c9dc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c9e0:	4909      	ldr	r1, [pc, #36]	; (800ca08 <memp_malloc_pool+0x3c>)
 800c9e2:	480a      	ldr	r0, [pc, #40]	; (800ca0c <memp_malloc_pool+0x40>)
 800c9e4:	f007 f8ee 	bl	8013bc4 <iprintf>
  if (desc == NULL) {
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d101      	bne.n	800c9f2 <memp_malloc_pool+0x26>
    return NULL;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	e003      	b.n	800c9fa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f7ff ffc0 	bl	800c978 <do_memp_malloc_pool>
 800c9f8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3708      	adds	r7, #8
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	08015b1c 	.word	0x08015b1c
 800ca08:	08015bd4 	.word	0x08015bd4
 800ca0c:	08015bac 	.word	0x08015bac

0800ca10 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	4603      	mov	r3, r0
 800ca18:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ca1a:	79fb      	ldrb	r3, [r7, #7]
 800ca1c:	2b08      	cmp	r3, #8
 800ca1e:	d908      	bls.n	800ca32 <memp_malloc+0x22>
 800ca20:	4b0a      	ldr	r3, [pc, #40]	; (800ca4c <memp_malloc+0x3c>)
 800ca22:	f240 1257 	movw	r2, #343	; 0x157
 800ca26:	490a      	ldr	r1, [pc, #40]	; (800ca50 <memp_malloc+0x40>)
 800ca28:	480a      	ldr	r0, [pc, #40]	; (800ca54 <memp_malloc+0x44>)
 800ca2a:	f007 f8cb 	bl	8013bc4 <iprintf>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	e008      	b.n	800ca44 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ca32:	79fb      	ldrb	r3, [r7, #7]
 800ca34:	4a08      	ldr	r2, [pc, #32]	; (800ca58 <memp_malloc+0x48>)
 800ca36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7ff ff9c 	bl	800c978 <do_memp_malloc_pool>
 800ca40:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ca42:	68fb      	ldr	r3, [r7, #12]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3710      	adds	r7, #16
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	08015b1c 	.word	0x08015b1c
 800ca50:	08015be8 	.word	0x08015be8
 800ca54:	08015bac 	.word	0x08015bac
 800ca58:	08017e1c 	.word	0x08017e1c

0800ca5c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	f003 0303 	and.w	r3, r3, #3
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d006      	beq.n	800ca7e <do_memp_free_pool+0x22>
 800ca70:	4b0a      	ldr	r3, [pc, #40]	; (800ca9c <do_memp_free_pool+0x40>)
 800ca72:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ca76:	490a      	ldr	r1, [pc, #40]	; (800caa0 <do_memp_free_pool+0x44>)
 800ca78:	480a      	ldr	r0, [pc, #40]	; (800caa4 <do_memp_free_pool+0x48>)
 800ca7a:	f007 f8a3 	bl	8013bc4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800ca94:	bf00      	nop
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	08015b1c 	.word	0x08015b1c
 800caa0:	08015c08 	.word	0x08015c08
 800caa4:	08015bac 	.word	0x08015bac

0800caa8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d106      	bne.n	800cac6 <memp_free_pool+0x1e>
 800cab8:	4b0a      	ldr	r3, [pc, #40]	; (800cae4 <memp_free_pool+0x3c>)
 800caba:	f240 1295 	movw	r2, #405	; 0x195
 800cabe:	490a      	ldr	r1, [pc, #40]	; (800cae8 <memp_free_pool+0x40>)
 800cac0:	480a      	ldr	r0, [pc, #40]	; (800caec <memp_free_pool+0x44>)
 800cac2:	f007 f87f 	bl	8013bc4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d007      	beq.n	800cadc <memp_free_pool+0x34>
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d004      	beq.n	800cadc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800cad2:	6839      	ldr	r1, [r7, #0]
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f7ff ffc1 	bl	800ca5c <do_memp_free_pool>
 800cada:	e000      	b.n	800cade <memp_free_pool+0x36>
    return;
 800cadc:	bf00      	nop
}
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	08015b1c 	.word	0x08015b1c
 800cae8:	08015bd4 	.word	0x08015bd4
 800caec:	08015bac 	.word	0x08015bac

0800caf0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	4603      	mov	r3, r0
 800caf8:	6039      	str	r1, [r7, #0]
 800cafa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cafc:	79fb      	ldrb	r3, [r7, #7]
 800cafe:	2b08      	cmp	r3, #8
 800cb00:	d907      	bls.n	800cb12 <memp_free+0x22>
 800cb02:	4b0c      	ldr	r3, [pc, #48]	; (800cb34 <memp_free+0x44>)
 800cb04:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800cb08:	490b      	ldr	r1, [pc, #44]	; (800cb38 <memp_free+0x48>)
 800cb0a:	480c      	ldr	r0, [pc, #48]	; (800cb3c <memp_free+0x4c>)
 800cb0c:	f007 f85a 	bl	8013bc4 <iprintf>
 800cb10:	e00c      	b.n	800cb2c <memp_free+0x3c>

  if (mem == NULL) {
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d008      	beq.n	800cb2a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cb18:	79fb      	ldrb	r3, [r7, #7]
 800cb1a:	4a09      	ldr	r2, [pc, #36]	; (800cb40 <memp_free+0x50>)
 800cb1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb20:	6839      	ldr	r1, [r7, #0]
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7ff ff9a 	bl	800ca5c <do_memp_free_pool>
 800cb28:	e000      	b.n	800cb2c <memp_free+0x3c>
    return;
 800cb2a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	08015b1c 	.word	0x08015b1c
 800cb38:	08015c28 	.word	0x08015c28
 800cb3c:	08015bac 	.word	0x08015bac
 800cb40:	08017e1c 	.word	0x08017e1c

0800cb44 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cb44:	b480      	push	{r7}
 800cb46:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cb48:	bf00      	nop
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr
	...

0800cb54 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b086      	sub	sp, #24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	607a      	str	r2, [r7, #4]
 800cb60:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d108      	bne.n	800cb7a <netif_add+0x26>
 800cb68:	4b5b      	ldr	r3, [pc, #364]	; (800ccd8 <netif_add+0x184>)
 800cb6a:	f240 1227 	movw	r2, #295	; 0x127
 800cb6e:	495b      	ldr	r1, [pc, #364]	; (800ccdc <netif_add+0x188>)
 800cb70:	485b      	ldr	r0, [pc, #364]	; (800cce0 <netif_add+0x18c>)
 800cb72:	f007 f827 	bl	8013bc4 <iprintf>
 800cb76:	2300      	movs	r3, #0
 800cb78:	e0a9      	b.n	800ccce <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d108      	bne.n	800cb92 <netif_add+0x3e>
 800cb80:	4b55      	ldr	r3, [pc, #340]	; (800ccd8 <netif_add+0x184>)
 800cb82:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cb86:	4957      	ldr	r1, [pc, #348]	; (800cce4 <netif_add+0x190>)
 800cb88:	4855      	ldr	r0, [pc, #340]	; (800cce0 <netif_add+0x18c>)
 800cb8a:	f007 f81b 	bl	8013bc4 <iprintf>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	e09d      	b.n	800ccce <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d101      	bne.n	800cb9c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cb98:	4b53      	ldr	r3, [pc, #332]	; (800cce8 <netif_add+0x194>)
 800cb9a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d101      	bne.n	800cba6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cba2:	4b51      	ldr	r3, [pc, #324]	; (800cce8 <netif_add+0x194>)
 800cba4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d101      	bne.n	800cbb0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cbac:	4b4e      	ldr	r3, [pc, #312]	; (800cce8 <netif_add+0x194>)
 800cbae:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	4a49      	ldr	r2, [pc, #292]	; (800ccec <netif_add+0x198>)
 800cbc6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	3324      	adds	r3, #36	; 0x24
 800cbda:	2204      	movs	r2, #4
 800cbdc:	2100      	movs	r1, #0
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f006 ffe8 	bl	8013bb4 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6a3a      	ldr	r2, [r7, #32]
 800cbee:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cbf0:	4b3f      	ldr	r3, [pc, #252]	; (800ccf0 <netif_add+0x19c>)
 800cbf2:	781a      	ldrb	r2, [r3, #0]
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbfe:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	68b9      	ldr	r1, [r7, #8]
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f000 f914 	bl	800ce34 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0e:	68f8      	ldr	r0, [r7, #12]
 800cc10:	4798      	blx	r3
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d001      	beq.n	800cc1c <netif_add+0xc8>
    return NULL;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	e058      	b.n	800ccce <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc22:	2bff      	cmp	r3, #255	; 0xff
 800cc24:	d103      	bne.n	800cc2e <netif_add+0xda>
        netif->num = 0;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cc32:	4b30      	ldr	r3, [pc, #192]	; (800ccf4 <netif_add+0x1a0>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	617b      	str	r3, [r7, #20]
 800cc38:	e02b      	b.n	800cc92 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cc3a:	697a      	ldr	r2, [r7, #20]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d106      	bne.n	800cc50 <netif_add+0xfc>
 800cc42:	4b25      	ldr	r3, [pc, #148]	; (800ccd8 <netif_add+0x184>)
 800cc44:	f240 128b 	movw	r2, #395	; 0x18b
 800cc48:	492b      	ldr	r1, [pc, #172]	; (800ccf8 <netif_add+0x1a4>)
 800cc4a:	4825      	ldr	r0, [pc, #148]	; (800cce0 <netif_add+0x18c>)
 800cc4c:	f006 ffba 	bl	8013bc4 <iprintf>
        num_netifs++;
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	3301      	adds	r3, #1
 800cc54:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	2bff      	cmp	r3, #255	; 0xff
 800cc5a:	dd06      	ble.n	800cc6a <netif_add+0x116>
 800cc5c:	4b1e      	ldr	r3, [pc, #120]	; (800ccd8 <netif_add+0x184>)
 800cc5e:	f240 128d 	movw	r2, #397	; 0x18d
 800cc62:	4926      	ldr	r1, [pc, #152]	; (800ccfc <netif_add+0x1a8>)
 800cc64:	481e      	ldr	r0, [pc, #120]	; (800cce0 <netif_add+0x18c>)
 800cc66:	f006 ffad 	bl	8013bc4 <iprintf>
        if (netif2->num == netif->num) {
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d108      	bne.n	800cc8c <netif_add+0x138>
          netif->num++;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc80:	3301      	adds	r3, #1
 800cc82:	b2da      	uxtb	r2, r3
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800cc8a:	e005      	b.n	800cc98 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	617b      	str	r3, [r7, #20]
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d1d0      	bne.n	800cc3a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1be      	bne.n	800cc1c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cca4:	2bfe      	cmp	r3, #254	; 0xfe
 800cca6:	d103      	bne.n	800ccb0 <netif_add+0x15c>
    netif_num = 0;
 800cca8:	4b11      	ldr	r3, [pc, #68]	; (800ccf0 <netif_add+0x19c>)
 800ccaa:	2200      	movs	r2, #0
 800ccac:	701a      	strb	r2, [r3, #0]
 800ccae:	e006      	b.n	800ccbe <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	b2da      	uxtb	r2, r3
 800ccba:	4b0d      	ldr	r3, [pc, #52]	; (800ccf0 <netif_add+0x19c>)
 800ccbc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ccbe:	4b0d      	ldr	r3, [pc, #52]	; (800ccf4 <netif_add+0x1a0>)
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ccc6:	4a0b      	ldr	r2, [pc, #44]	; (800ccf4 <netif_add+0x1a0>)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cccc:	68fb      	ldr	r3, [r7, #12]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3718      	adds	r7, #24
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	08015c44 	.word	0x08015c44
 800ccdc:	08015d10 	.word	0x08015d10
 800cce0:	08015ccc 	.word	0x08015ccc
 800cce4:	08015d2c 	.word	0x08015d2c
 800cce8:	08017da8 	.word	0x08017da8
 800ccec:	0800d117 	.word	0x0800d117
 800ccf0:	2400825c 	.word	0x2400825c
 800ccf4:	24008254 	.word	0x24008254
 800ccf8:	08015d50 	.word	0x08015d50
 800ccfc:	08015d64 	.word	0x08015d64

0800cd00 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cd0a:	6839      	ldr	r1, [r7, #0]
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f002 fb37 	bl	800f380 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cd12:	6839      	ldr	r1, [r7, #0]
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f006 fedb 	bl	8013ad0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cd1a:	bf00      	nop
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
	...

0800cd24 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b086      	sub	sp, #24
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d106      	bne.n	800cd44 <netif_do_set_ipaddr+0x20>
 800cd36:	4b1d      	ldr	r3, [pc, #116]	; (800cdac <netif_do_set_ipaddr+0x88>)
 800cd38:	f240 12cb 	movw	r2, #459	; 0x1cb
 800cd3c:	491c      	ldr	r1, [pc, #112]	; (800cdb0 <netif_do_set_ipaddr+0x8c>)
 800cd3e:	481d      	ldr	r0, [pc, #116]	; (800cdb4 <netif_do_set_ipaddr+0x90>)
 800cd40:	f006 ff40 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d106      	bne.n	800cd58 <netif_do_set_ipaddr+0x34>
 800cd4a:	4b18      	ldr	r3, [pc, #96]	; (800cdac <netif_do_set_ipaddr+0x88>)
 800cd4c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cd50:	4917      	ldr	r1, [pc, #92]	; (800cdb0 <netif_do_set_ipaddr+0x8c>)
 800cd52:	4818      	ldr	r0, [pc, #96]	; (800cdb4 <netif_do_set_ipaddr+0x90>)
 800cd54:	f006 ff36 	bl	8013bc4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	3304      	adds	r3, #4
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d01c      	beq.n	800cda0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cd76:	f107 0314 	add.w	r3, r7, #20
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7ff ffbf 	bl	800cd00 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d002      	beq.n	800cd8e <netif_do_set_ipaddr+0x6a>
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	e000      	b.n	800cd90 <netif_do_set_ipaddr+0x6c>
 800cd8e:	2300      	movs	r3, #0
 800cd90:	68fa      	ldr	r2, [r7, #12]
 800cd92:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cd94:	2101      	movs	r1, #1
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f000 f8d2 	bl	800cf40 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e000      	b.n	800cda2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cda0:	2300      	movs	r3, #0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3718      	adds	r7, #24
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	08015c44 	.word	0x08015c44
 800cdb0:	08015d94 	.word	0x08015d94
 800cdb4:	08015ccc 	.word	0x08015ccc

0800cdb8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	3308      	adds	r3, #8
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d00a      	beq.n	800cde8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <netif_do_set_netmask+0x26>
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	e000      	b.n	800cde0 <netif_do_set_netmask+0x28>
 800cdde:	2300      	movs	r3, #0
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cde4:	2301      	movs	r3, #1
 800cde6:	e000      	b.n	800cdea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3714      	adds	r7, #20
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr

0800cdf6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cdf6:	b480      	push	{r7}
 800cdf8:	b085      	sub	sp, #20
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	60f8      	str	r0, [r7, #12]
 800cdfe:	60b9      	str	r1, [r7, #8]
 800ce00:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	681a      	ldr	r2, [r3, #0]
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	330c      	adds	r3, #12
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d00a      	beq.n	800ce26 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d002      	beq.n	800ce1c <netif_do_set_gw+0x26>
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	e000      	b.n	800ce1e <netif_do_set_gw+0x28>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	68fa      	ldr	r2, [r7, #12]
 800ce20:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ce22:	2301      	movs	r3, #1
 800ce24:	e000      	b.n	800ce28 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ce26:	2300      	movs	r3, #0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3714      	adds	r7, #20
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b088      	sub	sp, #32
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
 800ce40:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ce42:	2300      	movs	r3, #0
 800ce44:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ce46:	2300      	movs	r3, #0
 800ce48:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d101      	bne.n	800ce54 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ce50:	4b1c      	ldr	r3, [pc, #112]	; (800cec4 <netif_set_addr+0x90>)
 800ce52:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d101      	bne.n	800ce5e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ce5a:	4b1a      	ldr	r3, [pc, #104]	; (800cec4 <netif_set_addr+0x90>)
 800ce5c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d101      	bne.n	800ce68 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ce64:	4b17      	ldr	r3, [pc, #92]	; (800cec4 <netif_set_addr+0x90>)
 800ce66:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d003      	beq.n	800ce76 <netif_set_addr+0x42>
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d101      	bne.n	800ce7a <netif_set_addr+0x46>
 800ce76:	2301      	movs	r3, #1
 800ce78:	e000      	b.n	800ce7c <netif_set_addr+0x48>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d006      	beq.n	800ce92 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ce84:	f107 0310 	add.w	r3, r7, #16
 800ce88:	461a      	mov	r2, r3
 800ce8a:	68b9      	ldr	r1, [r7, #8]
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f7ff ff49 	bl	800cd24 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ce92:	69fa      	ldr	r2, [r7, #28]
 800ce94:	6879      	ldr	r1, [r7, #4]
 800ce96:	68f8      	ldr	r0, [r7, #12]
 800ce98:	f7ff ff8e 	bl	800cdb8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ce9c:	69ba      	ldr	r2, [r7, #24]
 800ce9e:	6839      	ldr	r1, [r7, #0]
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	f7ff ffa8 	bl	800cdf6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d106      	bne.n	800ceba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ceac:	f107 0310 	add.w	r3, r7, #16
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	68b9      	ldr	r1, [r7, #8]
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f7ff ff35 	bl	800cd24 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ceba:	bf00      	nop
 800cebc:	3720      	adds	r7, #32
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	08017da8 	.word	0x08017da8

0800cec8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ced0:	4a04      	ldr	r2, [pc, #16]	; (800cee4 <netif_set_default+0x1c>)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ced6:	bf00      	nop
 800ced8:	370c      	adds	r7, #12
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	24008258 	.word	0x24008258

0800cee8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d107      	bne.n	800cf06 <netif_set_up+0x1e>
 800cef6:	4b0f      	ldr	r3, [pc, #60]	; (800cf34 <netif_set_up+0x4c>)
 800cef8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800cefc:	490e      	ldr	r1, [pc, #56]	; (800cf38 <netif_set_up+0x50>)
 800cefe:	480f      	ldr	r0, [pc, #60]	; (800cf3c <netif_set_up+0x54>)
 800cf00:	f006 fe60 	bl	8013bc4 <iprintf>
 800cf04:	e013      	b.n	800cf2e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf0c:	f003 0301 	and.w	r3, r3, #1
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d10c      	bne.n	800cf2e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf1a:	f043 0301 	orr.w	r3, r3, #1
 800cf1e:	b2da      	uxtb	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cf26:	2103      	movs	r1, #3
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 f809 	bl	800cf40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	08015c44 	.word	0x08015c44
 800cf38:	08015e04 	.word	0x08015e04
 800cf3c:	08015ccc 	.word	0x08015ccc

0800cf40 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	460b      	mov	r3, r1
 800cf4a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d106      	bne.n	800cf60 <netif_issue_reports+0x20>
 800cf52:	4b18      	ldr	r3, [pc, #96]	; (800cfb4 <netif_issue_reports+0x74>)
 800cf54:	f240 326d 	movw	r2, #877	; 0x36d
 800cf58:	4917      	ldr	r1, [pc, #92]	; (800cfb8 <netif_issue_reports+0x78>)
 800cf5a:	4818      	ldr	r0, [pc, #96]	; (800cfbc <netif_issue_reports+0x7c>)
 800cf5c:	f006 fe32 	bl	8013bc4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf66:	f003 0304 	and.w	r3, r3, #4
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d01e      	beq.n	800cfac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf74:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d017      	beq.n	800cfac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cf7c:	78fb      	ldrb	r3, [r7, #3]
 800cf7e:	f003 0301 	and.w	r3, r3, #1
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d013      	beq.n	800cfae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	3304      	adds	r3, #4
 800cf8a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d00e      	beq.n	800cfae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf96:	f003 0308 	and.w	r3, r3, #8
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d007      	beq.n	800cfae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7fd fc61 	bl	800a86c <etharp_request>
 800cfaa:	e000      	b.n	800cfae <netif_issue_reports+0x6e>
    return;
 800cfac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	08015c44 	.word	0x08015c44
 800cfb8:	08015e20 	.word	0x08015e20
 800cfbc:	08015ccc 	.word	0x08015ccc

0800cfc0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d107      	bne.n	800cfde <netif_set_down+0x1e>
 800cfce:	4b12      	ldr	r3, [pc, #72]	; (800d018 <netif_set_down+0x58>)
 800cfd0:	f240 329b 	movw	r2, #923	; 0x39b
 800cfd4:	4911      	ldr	r1, [pc, #68]	; (800d01c <netif_set_down+0x5c>)
 800cfd6:	4812      	ldr	r0, [pc, #72]	; (800d020 <netif_set_down+0x60>)
 800cfd8:	f006 fdf4 	bl	8013bc4 <iprintf>
 800cfdc:	e019      	b.n	800d012 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cfe4:	f003 0301 	and.w	r3, r3, #1
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d012      	beq.n	800d012 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cff2:	f023 0301 	bic.w	r3, r3, #1
 800cff6:	b2da      	uxtb	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d004:	f003 0308 	and.w	r3, r3, #8
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f7fc ffe7 	bl	8009fe0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	08015c44 	.word	0x08015c44
 800d01c:	08015e44 	.word	0x08015e44
 800d020:	08015ccc 	.word	0x08015ccc

0800d024 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d107      	bne.n	800d042 <netif_set_link_up+0x1e>
 800d032:	4b15      	ldr	r3, [pc, #84]	; (800d088 <netif_set_link_up+0x64>)
 800d034:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d038:	4914      	ldr	r1, [pc, #80]	; (800d08c <netif_set_link_up+0x68>)
 800d03a:	4815      	ldr	r0, [pc, #84]	; (800d090 <netif_set_link_up+0x6c>)
 800d03c:	f006 fdc2 	bl	8013bc4 <iprintf>
 800d040:	e01e      	b.n	800d080 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d048:	f003 0304 	and.w	r3, r3, #4
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d117      	bne.n	800d080 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d056:	f043 0304 	orr.w	r3, r3, #4
 800d05a:	b2da      	uxtb	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f7fb fa2c 	bl	80084c0 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d068:	2103      	movs	r1, #3
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7ff ff68 	bl	800cf40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	69db      	ldr	r3, [r3, #28]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d003      	beq.n	800d080 <netif_set_link_up+0x5c>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	69db      	ldr	r3, [r3, #28]
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	08015c44 	.word	0x08015c44
 800d08c:	08015e64 	.word	0x08015e64
 800d090:	08015ccc 	.word	0x08015ccc

0800d094 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d107      	bne.n	800d0b2 <netif_set_link_down+0x1e>
 800d0a2:	4b11      	ldr	r3, [pc, #68]	; (800d0e8 <netif_set_link_down+0x54>)
 800d0a4:	f240 4206 	movw	r2, #1030	; 0x406
 800d0a8:	4910      	ldr	r1, [pc, #64]	; (800d0ec <netif_set_link_down+0x58>)
 800d0aa:	4811      	ldr	r0, [pc, #68]	; (800d0f0 <netif_set_link_down+0x5c>)
 800d0ac:	f006 fd8a 	bl	8013bc4 <iprintf>
 800d0b0:	e017      	b.n	800d0e2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d0b8:	f003 0304 	and.w	r3, r3, #4
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d010      	beq.n	800d0e2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d0c6:	f023 0304 	bic.w	r3, r3, #4
 800d0ca:	b2da      	uxtb	r2, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	69db      	ldr	r3, [r3, #28]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d003      	beq.n	800d0e2 <netif_set_link_down+0x4e>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	69db      	ldr	r3, [r3, #28]
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	08015c44 	.word	0x08015c44
 800d0ec:	08015e88 	.word	0x08015e88
 800d0f0:	08015ccc 	.word	0x08015ccc

0800d0f4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	683a      	ldr	r2, [r7, #0]
 800d108:	61da      	str	r2, [r3, #28]
  }
}
 800d10a:	bf00      	nop
 800d10c:	370c      	adds	r7, #12
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d116:	b480      	push	{r7}
 800d118:	b085      	sub	sp, #20
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	60f8      	str	r0, [r7, #12]
 800d11e:	60b9      	str	r1, [r7, #8]
 800d120:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d122:	f06f 030b 	mvn.w	r3, #11
}
 800d126:	4618      	mov	r0, r3
 800d128:	3714      	adds	r7, #20
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
	...

0800d134 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d134:	b480      	push	{r7}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
 800d13a:	4603      	mov	r3, r0
 800d13c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d13e:	79fb      	ldrb	r3, [r7, #7]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d013      	beq.n	800d16c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d144:	4b0d      	ldr	r3, [pc, #52]	; (800d17c <netif_get_by_index+0x48>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	60fb      	str	r3, [r7, #12]
 800d14a:	e00c      	b.n	800d166 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d152:	3301      	adds	r3, #1
 800d154:	b2db      	uxtb	r3, r3
 800d156:	79fa      	ldrb	r2, [r7, #7]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d101      	bne.n	800d160 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	e006      	b.n	800d16e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	60fb      	str	r3, [r7, #12]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1ef      	bne.n	800d14c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3714      	adds	r7, #20
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	24008254 	.word	0x24008254

0800d180 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d180:	b480      	push	{r7}
 800d182:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d184:	4b03      	ldr	r3, [pc, #12]	; (800d194 <pbuf_pool_is_empty+0x14>)
 800d186:	2201      	movs	r2, #1
 800d188:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d18a:	bf00      	nop
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr
 800d194:	2400825d 	.word	0x2400825d

0800d198 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d198:	b480      	push	{r7}
 800d19a:	b085      	sub	sp, #20
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	4611      	mov	r1, r2
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	80fb      	strh	r3, [r7, #6]
 800d1aa:	4613      	mov	r3, r2
 800d1ac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	88fa      	ldrh	r2, [r7, #6]
 800d1be:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	88ba      	ldrh	r2, [r7, #4]
 800d1c4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d1c6:	8b3b      	ldrh	r3, [r7, #24]
 800d1c8:	b2da      	uxtb	r2, r3
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	7f3a      	ldrb	r2, [r7, #28]
 800d1d2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	73da      	strb	r2, [r3, #15]
}
 800d1e0:	bf00      	nop
 800d1e2:	3714      	adds	r7, #20
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr

0800d1ec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b08c      	sub	sp, #48	; 0x30
 800d1f0:	af02      	add	r7, sp, #8
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	71fb      	strb	r3, [r7, #7]
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	80bb      	strh	r3, [r7, #4]
 800d1fa:	4613      	mov	r3, r2
 800d1fc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d1fe:	79fb      	ldrb	r3, [r7, #7]
 800d200:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d202:	887b      	ldrh	r3, [r7, #2]
 800d204:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d208:	d07f      	beq.n	800d30a <pbuf_alloc+0x11e>
 800d20a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d20e:	f300 80c8 	bgt.w	800d3a2 <pbuf_alloc+0x1b6>
 800d212:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d216:	d010      	beq.n	800d23a <pbuf_alloc+0x4e>
 800d218:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d21c:	f300 80c1 	bgt.w	800d3a2 <pbuf_alloc+0x1b6>
 800d220:	2b01      	cmp	r3, #1
 800d222:	d002      	beq.n	800d22a <pbuf_alloc+0x3e>
 800d224:	2b41      	cmp	r3, #65	; 0x41
 800d226:	f040 80bc 	bne.w	800d3a2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d22a:	887a      	ldrh	r2, [r7, #2]
 800d22c:	88bb      	ldrh	r3, [r7, #4]
 800d22e:	4619      	mov	r1, r3
 800d230:	2000      	movs	r0, #0
 800d232:	f000 f8d1 	bl	800d3d8 <pbuf_alloc_reference>
 800d236:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d238:	e0bd      	b.n	800d3b6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d23a:	2300      	movs	r3, #0
 800d23c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d23e:	2300      	movs	r3, #0
 800d240:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d242:	88bb      	ldrh	r3, [r7, #4]
 800d244:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d246:	2008      	movs	r0, #8
 800d248:	f7ff fbe2 	bl	800ca10 <memp_malloc>
 800d24c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d109      	bne.n	800d268 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d254:	f7ff ff94 	bl	800d180 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d002      	beq.n	800d264 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d25e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d260:	f000 faa8 	bl	800d7b4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d264:	2300      	movs	r3, #0
 800d266:	e0a7      	b.n	800d3b8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d268:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d26a:	3303      	adds	r3, #3
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	f023 0303 	bic.w	r3, r3, #3
 800d272:	b29b      	uxth	r3, r3
 800d274:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d278:	b29b      	uxth	r3, r3
 800d27a:	8b7a      	ldrh	r2, [r7, #26]
 800d27c:	4293      	cmp	r3, r2
 800d27e:	bf28      	it	cs
 800d280:	4613      	movcs	r3, r2
 800d282:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d284:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d286:	3310      	adds	r3, #16
 800d288:	693a      	ldr	r2, [r7, #16]
 800d28a:	4413      	add	r3, r2
 800d28c:	3303      	adds	r3, #3
 800d28e:	f023 0303 	bic.w	r3, r3, #3
 800d292:	4618      	mov	r0, r3
 800d294:	89f9      	ldrh	r1, [r7, #14]
 800d296:	8b7a      	ldrh	r2, [r7, #26]
 800d298:	2300      	movs	r3, #0
 800d29a:	9301      	str	r3, [sp, #4]
 800d29c:	887b      	ldrh	r3, [r7, #2]
 800d29e:	9300      	str	r3, [sp, #0]
 800d2a0:	460b      	mov	r3, r1
 800d2a2:	4601      	mov	r1, r0
 800d2a4:	6938      	ldr	r0, [r7, #16]
 800d2a6:	f7ff ff77 	bl	800d198 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	f003 0303 	and.w	r3, r3, #3
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d006      	beq.n	800d2c4 <pbuf_alloc+0xd8>
 800d2b6:	4b42      	ldr	r3, [pc, #264]	; (800d3c0 <pbuf_alloc+0x1d4>)
 800d2b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d2bc:	4941      	ldr	r1, [pc, #260]	; (800d3c4 <pbuf_alloc+0x1d8>)
 800d2be:	4842      	ldr	r0, [pc, #264]	; (800d3c8 <pbuf_alloc+0x1dc>)
 800d2c0:	f006 fc80 	bl	8013bc4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d2c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2c6:	3303      	adds	r3, #3
 800d2c8:	f023 0303 	bic.w	r3, r3, #3
 800d2cc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d2d0:	d106      	bne.n	800d2e0 <pbuf_alloc+0xf4>
 800d2d2:	4b3b      	ldr	r3, [pc, #236]	; (800d3c0 <pbuf_alloc+0x1d4>)
 800d2d4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d2d8:	493c      	ldr	r1, [pc, #240]	; (800d3cc <pbuf_alloc+0x1e0>)
 800d2da:	483b      	ldr	r0, [pc, #236]	; (800d3c8 <pbuf_alloc+0x1dc>)
 800d2dc:	f006 fc72 	bl	8013bc4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d102      	bne.n	800d2ec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	627b      	str	r3, [r7, #36]	; 0x24
 800d2ea:	e002      	b.n	800d2f2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	693a      	ldr	r2, [r7, #16]
 800d2f0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d2f6:	8b7a      	ldrh	r2, [r7, #26]
 800d2f8:	89fb      	ldrh	r3, [r7, #14]
 800d2fa:	1ad3      	subs	r3, r2, r3
 800d2fc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d2fe:	2300      	movs	r3, #0
 800d300:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d302:	8b7b      	ldrh	r3, [r7, #26]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d19e      	bne.n	800d246 <pbuf_alloc+0x5a>
      break;
 800d308:	e055      	b.n	800d3b6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d30a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d30c:	3303      	adds	r3, #3
 800d30e:	b29b      	uxth	r3, r3
 800d310:	f023 0303 	bic.w	r3, r3, #3
 800d314:	b29a      	uxth	r2, r3
 800d316:	88bb      	ldrh	r3, [r7, #4]
 800d318:	3303      	adds	r3, #3
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	f023 0303 	bic.w	r3, r3, #3
 800d320:	b29b      	uxth	r3, r3
 800d322:	4413      	add	r3, r2
 800d324:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d326:	8b3b      	ldrh	r3, [r7, #24]
 800d328:	3310      	adds	r3, #16
 800d32a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d32c:	8b3a      	ldrh	r2, [r7, #24]
 800d32e:	88bb      	ldrh	r3, [r7, #4]
 800d330:	3303      	adds	r3, #3
 800d332:	f023 0303 	bic.w	r3, r3, #3
 800d336:	429a      	cmp	r2, r3
 800d338:	d306      	bcc.n	800d348 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d33a:	8afa      	ldrh	r2, [r7, #22]
 800d33c:	88bb      	ldrh	r3, [r7, #4]
 800d33e:	3303      	adds	r3, #3
 800d340:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d344:	429a      	cmp	r2, r3
 800d346:	d201      	bcs.n	800d34c <pbuf_alloc+0x160>
        return NULL;
 800d348:	2300      	movs	r3, #0
 800d34a:	e035      	b.n	800d3b8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d34c:	8afb      	ldrh	r3, [r7, #22]
 800d34e:	4618      	mov	r0, r3
 800d350:	f7ff f9ce 	bl	800c6f0 <mem_malloc>
 800d354:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d101      	bne.n	800d360 <pbuf_alloc+0x174>
        return NULL;
 800d35c:	2300      	movs	r3, #0
 800d35e:	e02b      	b.n	800d3b8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d360:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d362:	3310      	adds	r3, #16
 800d364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d366:	4413      	add	r3, r2
 800d368:	3303      	adds	r3, #3
 800d36a:	f023 0303 	bic.w	r3, r3, #3
 800d36e:	4618      	mov	r0, r3
 800d370:	88b9      	ldrh	r1, [r7, #4]
 800d372:	88ba      	ldrh	r2, [r7, #4]
 800d374:	2300      	movs	r3, #0
 800d376:	9301      	str	r3, [sp, #4]
 800d378:	887b      	ldrh	r3, [r7, #2]
 800d37a:	9300      	str	r3, [sp, #0]
 800d37c:	460b      	mov	r3, r1
 800d37e:	4601      	mov	r1, r0
 800d380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d382:	f7ff ff09 	bl	800d198 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	f003 0303 	and.w	r3, r3, #3
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d010      	beq.n	800d3b4 <pbuf_alloc+0x1c8>
 800d392:	4b0b      	ldr	r3, [pc, #44]	; (800d3c0 <pbuf_alloc+0x1d4>)
 800d394:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d398:	490d      	ldr	r1, [pc, #52]	; (800d3d0 <pbuf_alloc+0x1e4>)
 800d39a:	480b      	ldr	r0, [pc, #44]	; (800d3c8 <pbuf_alloc+0x1dc>)
 800d39c:	f006 fc12 	bl	8013bc4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d3a0:	e008      	b.n	800d3b4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d3a2:	4b07      	ldr	r3, [pc, #28]	; (800d3c0 <pbuf_alloc+0x1d4>)
 800d3a4:	f240 1227 	movw	r2, #295	; 0x127
 800d3a8:	490a      	ldr	r1, [pc, #40]	; (800d3d4 <pbuf_alloc+0x1e8>)
 800d3aa:	4807      	ldr	r0, [pc, #28]	; (800d3c8 <pbuf_alloc+0x1dc>)
 800d3ac:	f006 fc0a 	bl	8013bc4 <iprintf>
      return NULL;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	e001      	b.n	800d3b8 <pbuf_alloc+0x1cc>
      break;
 800d3b4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3728      	adds	r7, #40	; 0x28
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	08015eac 	.word	0x08015eac
 800d3c4:	08015f18 	.word	0x08015f18
 800d3c8:	08015f48 	.word	0x08015f48
 800d3cc:	08015f70 	.word	0x08015f70
 800d3d0:	08015fa4 	.word	0x08015fa4
 800d3d4:	08015fd0 	.word	0x08015fd0

0800d3d8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b086      	sub	sp, #24
 800d3dc:	af02      	add	r7, sp, #8
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	807b      	strh	r3, [r7, #2]
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d3e8:	883b      	ldrh	r3, [r7, #0]
 800d3ea:	2b41      	cmp	r3, #65	; 0x41
 800d3ec:	d009      	beq.n	800d402 <pbuf_alloc_reference+0x2a>
 800d3ee:	883b      	ldrh	r3, [r7, #0]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d006      	beq.n	800d402 <pbuf_alloc_reference+0x2a>
 800d3f4:	4b0f      	ldr	r3, [pc, #60]	; (800d434 <pbuf_alloc_reference+0x5c>)
 800d3f6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d3fa:	490f      	ldr	r1, [pc, #60]	; (800d438 <pbuf_alloc_reference+0x60>)
 800d3fc:	480f      	ldr	r0, [pc, #60]	; (800d43c <pbuf_alloc_reference+0x64>)
 800d3fe:	f006 fbe1 	bl	8013bc4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d402:	2007      	movs	r0, #7
 800d404:	f7ff fb04 	bl	800ca10 <memp_malloc>
 800d408:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d101      	bne.n	800d414 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d410:	2300      	movs	r3, #0
 800d412:	e00b      	b.n	800d42c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d414:	8879      	ldrh	r1, [r7, #2]
 800d416:	887a      	ldrh	r2, [r7, #2]
 800d418:	2300      	movs	r3, #0
 800d41a:	9301      	str	r3, [sp, #4]
 800d41c:	883b      	ldrh	r3, [r7, #0]
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	460b      	mov	r3, r1
 800d422:	6879      	ldr	r1, [r7, #4]
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f7ff feb7 	bl	800d198 <pbuf_init_alloced_pbuf>
  return p;
 800d42a:	68fb      	ldr	r3, [r7, #12]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	08015eac 	.word	0x08015eac
 800d438:	08015fec 	.word	0x08015fec
 800d43c:	08015f48 	.word	0x08015f48

0800d440 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b088      	sub	sp, #32
 800d444:	af02      	add	r7, sp, #8
 800d446:	607b      	str	r3, [r7, #4]
 800d448:	4603      	mov	r3, r0
 800d44a:	73fb      	strb	r3, [r7, #15]
 800d44c:	460b      	mov	r3, r1
 800d44e:	81bb      	strh	r3, [r7, #12]
 800d450:	4613      	mov	r3, r2
 800d452:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d454:	7bfb      	ldrb	r3, [r7, #15]
 800d456:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d458:	8a7b      	ldrh	r3, [r7, #18]
 800d45a:	3303      	adds	r3, #3
 800d45c:	f023 0203 	bic.w	r2, r3, #3
 800d460:	89bb      	ldrh	r3, [r7, #12]
 800d462:	441a      	add	r2, r3
 800d464:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d466:	429a      	cmp	r2, r3
 800d468:	d901      	bls.n	800d46e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d46a:	2300      	movs	r3, #0
 800d46c:	e018      	b.n	800d4a0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d46e:	6a3b      	ldr	r3, [r7, #32]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d007      	beq.n	800d484 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d474:	8a7b      	ldrh	r3, [r7, #18]
 800d476:	3303      	adds	r3, #3
 800d478:	f023 0303 	bic.w	r3, r3, #3
 800d47c:	6a3a      	ldr	r2, [r7, #32]
 800d47e:	4413      	add	r3, r2
 800d480:	617b      	str	r3, [r7, #20]
 800d482:	e001      	b.n	800d488 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d484:	2300      	movs	r3, #0
 800d486:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	89b9      	ldrh	r1, [r7, #12]
 800d48c:	89ba      	ldrh	r2, [r7, #12]
 800d48e:	2302      	movs	r3, #2
 800d490:	9301      	str	r3, [sp, #4]
 800d492:	897b      	ldrh	r3, [r7, #10]
 800d494:	9300      	str	r3, [sp, #0]
 800d496:	460b      	mov	r3, r1
 800d498:	6979      	ldr	r1, [r7, #20]
 800d49a:	f7ff fe7d 	bl	800d198 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d49e:	687b      	ldr	r3, [r7, #4]
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3718      	adds	r7, #24
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d106      	bne.n	800d4c8 <pbuf_realloc+0x20>
 800d4ba:	4b3a      	ldr	r3, [pc, #232]	; (800d5a4 <pbuf_realloc+0xfc>)
 800d4bc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d4c0:	4939      	ldr	r1, [pc, #228]	; (800d5a8 <pbuf_realloc+0x100>)
 800d4c2:	483a      	ldr	r0, [pc, #232]	; (800d5ac <pbuf_realloc+0x104>)
 800d4c4:	f006 fb7e 	bl	8013bc4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	891b      	ldrh	r3, [r3, #8]
 800d4cc:	887a      	ldrh	r2, [r7, #2]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d263      	bcs.n	800d59a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	891a      	ldrh	r2, [r3, #8]
 800d4d6:	887b      	ldrh	r3, [r7, #2]
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d4dc:	887b      	ldrh	r3, [r7, #2]
 800d4de:	817b      	strh	r3, [r7, #10]
  q = p;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d4e4:	e018      	b.n	800d518 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	895b      	ldrh	r3, [r3, #10]
 800d4ea:	897a      	ldrh	r2, [r7, #10]
 800d4ec:	1ad3      	subs	r3, r2, r3
 800d4ee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	891a      	ldrh	r2, [r3, #8]
 800d4f4:	893b      	ldrh	r3, [r7, #8]
 800d4f6:	1ad3      	subs	r3, r2, r3
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d106      	bne.n	800d518 <pbuf_realloc+0x70>
 800d50a:	4b26      	ldr	r3, [pc, #152]	; (800d5a4 <pbuf_realloc+0xfc>)
 800d50c:	f240 12af 	movw	r2, #431	; 0x1af
 800d510:	4927      	ldr	r1, [pc, #156]	; (800d5b0 <pbuf_realloc+0x108>)
 800d512:	4826      	ldr	r0, [pc, #152]	; (800d5ac <pbuf_realloc+0x104>)
 800d514:	f006 fb56 	bl	8013bc4 <iprintf>
  while (rem_len > q->len) {
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	895b      	ldrh	r3, [r3, #10]
 800d51c:	897a      	ldrh	r2, [r7, #10]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d8e1      	bhi.n	800d4e6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	7b1b      	ldrb	r3, [r3, #12]
 800d526:	f003 030f 	and.w	r3, r3, #15
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d121      	bne.n	800d572 <pbuf_realloc+0xca>
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	895b      	ldrh	r3, [r3, #10]
 800d532:	897a      	ldrh	r2, [r7, #10]
 800d534:	429a      	cmp	r2, r3
 800d536:	d01c      	beq.n	800d572 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	7b5b      	ldrb	r3, [r3, #13]
 800d53c:	f003 0302 	and.w	r3, r3, #2
 800d540:	2b00      	cmp	r3, #0
 800d542:	d116      	bne.n	800d572 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	685a      	ldr	r2, [r3, #4]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	1ad3      	subs	r3, r2, r3
 800d54c:	b29a      	uxth	r2, r3
 800d54e:	897b      	ldrh	r3, [r7, #10]
 800d550:	4413      	add	r3, r2
 800d552:	b29b      	uxth	r3, r3
 800d554:	4619      	mov	r1, r3
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f7fe ffce 	bl	800c4f8 <mem_trim>
 800d55c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d106      	bne.n	800d572 <pbuf_realloc+0xca>
 800d564:	4b0f      	ldr	r3, [pc, #60]	; (800d5a4 <pbuf_realloc+0xfc>)
 800d566:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d56a:	4912      	ldr	r1, [pc, #72]	; (800d5b4 <pbuf_realloc+0x10c>)
 800d56c:	480f      	ldr	r0, [pc, #60]	; (800d5ac <pbuf_realloc+0x104>)
 800d56e:	f006 fb29 	bl	8013bc4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	897a      	ldrh	r2, [r7, #10]
 800d576:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	895a      	ldrh	r2, [r3, #10]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d004      	beq.n	800d592 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4618      	mov	r0, r3
 800d58e:	f000 f911 	bl	800d7b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2200      	movs	r2, #0
 800d596:	601a      	str	r2, [r3, #0]
 800d598:	e000      	b.n	800d59c <pbuf_realloc+0xf4>
    return;
 800d59a:	bf00      	nop

}
 800d59c:	3710      	adds	r7, #16
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	08015eac 	.word	0x08015eac
 800d5a8:	08016000 	.word	0x08016000
 800d5ac:	08015f48 	.word	0x08015f48
 800d5b0:	08016018 	.word	0x08016018
 800d5b4:	08016030 	.word	0x08016030

0800d5b8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b086      	sub	sp, #24
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d106      	bne.n	800d5da <pbuf_add_header_impl+0x22>
 800d5cc:	4b2b      	ldr	r3, [pc, #172]	; (800d67c <pbuf_add_header_impl+0xc4>)
 800d5ce:	f240 12df 	movw	r2, #479	; 0x1df
 800d5d2:	492b      	ldr	r1, [pc, #172]	; (800d680 <pbuf_add_header_impl+0xc8>)
 800d5d4:	482b      	ldr	r0, [pc, #172]	; (800d684 <pbuf_add_header_impl+0xcc>)
 800d5d6:	f006 faf5 	bl	8013bc4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d003      	beq.n	800d5e8 <pbuf_add_header_impl+0x30>
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5e6:	d301      	bcc.n	800d5ec <pbuf_add_header_impl+0x34>
    return 1;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e043      	b.n	800d674 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d101      	bne.n	800d5f6 <pbuf_add_header_impl+0x3e>
    return 0;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	e03e      	b.n	800d674 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	891a      	ldrh	r2, [r3, #8]
 800d5fe:	8a7b      	ldrh	r3, [r7, #18]
 800d600:	4413      	add	r3, r2
 800d602:	b29b      	uxth	r3, r3
 800d604:	8a7a      	ldrh	r2, [r7, #18]
 800d606:	429a      	cmp	r2, r3
 800d608:	d901      	bls.n	800d60e <pbuf_add_header_impl+0x56>
    return 1;
 800d60a:	2301      	movs	r3, #1
 800d60c:	e032      	b.n	800d674 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	7b1b      	ldrb	r3, [r3, #12]
 800d612:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d614:	8a3b      	ldrh	r3, [r7, #16]
 800d616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d00c      	beq.n	800d638 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	425b      	negs	r3, r3
 800d626:	4413      	add	r3, r2
 800d628:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	3310      	adds	r3, #16
 800d62e:	697a      	ldr	r2, [r7, #20]
 800d630:	429a      	cmp	r2, r3
 800d632:	d20d      	bcs.n	800d650 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d634:	2301      	movs	r3, #1
 800d636:	e01d      	b.n	800d674 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d638:	79fb      	ldrb	r3, [r7, #7]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d006      	beq.n	800d64c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	685a      	ldr	r2, [r3, #4]
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	425b      	negs	r3, r3
 800d646:	4413      	add	r3, r2
 800d648:	617b      	str	r3, [r7, #20]
 800d64a:	e001      	b.n	800d650 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d64c:	2301      	movs	r3, #1
 800d64e:	e011      	b.n	800d674 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	697a      	ldr	r2, [r7, #20]
 800d654:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	895a      	ldrh	r2, [r3, #10]
 800d65a:	8a7b      	ldrh	r3, [r7, #18]
 800d65c:	4413      	add	r3, r2
 800d65e:	b29a      	uxth	r2, r3
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	891a      	ldrh	r2, [r3, #8]
 800d668:	8a7b      	ldrh	r3, [r7, #18]
 800d66a:	4413      	add	r3, r2
 800d66c:	b29a      	uxth	r2, r3
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	811a      	strh	r2, [r3, #8]


  return 0;
 800d672:	2300      	movs	r3, #0
}
 800d674:	4618      	mov	r0, r3
 800d676:	3718      	adds	r7, #24
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	08015eac 	.word	0x08015eac
 800d680:	0801604c 	.word	0x0801604c
 800d684:	08015f48 	.word	0x08015f48

0800d688 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d692:	2200      	movs	r2, #0
 800d694:	6839      	ldr	r1, [r7, #0]
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f7ff ff8e 	bl	800d5b8 <pbuf_add_header_impl>
 800d69c:	4603      	mov	r3, r0
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
	...

0800d6a8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d106      	bne.n	800d6c6 <pbuf_remove_header+0x1e>
 800d6b8:	4b20      	ldr	r3, [pc, #128]	; (800d73c <pbuf_remove_header+0x94>)
 800d6ba:	f240 224b 	movw	r2, #587	; 0x24b
 800d6be:	4920      	ldr	r1, [pc, #128]	; (800d740 <pbuf_remove_header+0x98>)
 800d6c0:	4820      	ldr	r0, [pc, #128]	; (800d744 <pbuf_remove_header+0x9c>)
 800d6c2:	f006 fa7f 	bl	8013bc4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d003      	beq.n	800d6d4 <pbuf_remove_header+0x2c>
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6d2:	d301      	bcc.n	800d6d8 <pbuf_remove_header+0x30>
    return 1;
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	e02c      	b.n	800d732 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d101      	bne.n	800d6e2 <pbuf_remove_header+0x3a>
    return 0;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	e027      	b.n	800d732 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	895b      	ldrh	r3, [r3, #10]
 800d6ea:	89fa      	ldrh	r2, [r7, #14]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d908      	bls.n	800d702 <pbuf_remove_header+0x5a>
 800d6f0:	4b12      	ldr	r3, [pc, #72]	; (800d73c <pbuf_remove_header+0x94>)
 800d6f2:	f240 2255 	movw	r2, #597	; 0x255
 800d6f6:	4914      	ldr	r1, [pc, #80]	; (800d748 <pbuf_remove_header+0xa0>)
 800d6f8:	4812      	ldr	r0, [pc, #72]	; (800d744 <pbuf_remove_header+0x9c>)
 800d6fa:	f006 fa63 	bl	8013bc4 <iprintf>
 800d6fe:	2301      	movs	r3, #1
 800d700:	e017      	b.n	800d732 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	441a      	add	r2, r3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	895a      	ldrh	r2, [r3, #10]
 800d718:	89fb      	ldrh	r3, [r7, #14]
 800d71a:	1ad3      	subs	r3, r2, r3
 800d71c:	b29a      	uxth	r2, r3
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	891a      	ldrh	r2, [r3, #8]
 800d726:	89fb      	ldrh	r3, [r7, #14]
 800d728:	1ad3      	subs	r3, r2, r3
 800d72a:	b29a      	uxth	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d730:	2300      	movs	r3, #0
}
 800d732:	4618      	mov	r0, r3
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	08015eac 	.word	0x08015eac
 800d740:	0801604c 	.word	0x0801604c
 800d744:	08015f48 	.word	0x08015f48
 800d748:	08016058 	.word	0x08016058

0800d74c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	460b      	mov	r3, r1
 800d756:	807b      	strh	r3, [r7, #2]
 800d758:	4613      	mov	r3, r2
 800d75a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d75c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d760:	2b00      	cmp	r3, #0
 800d762:	da08      	bge.n	800d776 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d764:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d768:	425b      	negs	r3, r3
 800d76a:	4619      	mov	r1, r3
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f7ff ff9b 	bl	800d6a8 <pbuf_remove_header>
 800d772:	4603      	mov	r3, r0
 800d774:	e007      	b.n	800d786 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d776:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d77a:	787a      	ldrb	r2, [r7, #1]
 800d77c:	4619      	mov	r1, r3
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f7ff ff1a 	bl	800d5b8 <pbuf_add_header_impl>
 800d784:	4603      	mov	r3, r0
  }
}
 800d786:	4618      	mov	r0, r3
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b082      	sub	sp, #8
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
 800d796:	460b      	mov	r3, r1
 800d798:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d79a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f7ff ffd2 	bl	800d74c <pbuf_header_impl>
 800d7a8:	4603      	mov	r3, r0
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3708      	adds	r7, #8
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
	...

0800d7b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b086      	sub	sp, #24
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10b      	bne.n	800d7da <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d106      	bne.n	800d7d6 <pbuf_free+0x22>
 800d7c8:	4b38      	ldr	r3, [pc, #224]	; (800d8ac <pbuf_free+0xf8>)
 800d7ca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d7ce:	4938      	ldr	r1, [pc, #224]	; (800d8b0 <pbuf_free+0xfc>)
 800d7d0:	4838      	ldr	r0, [pc, #224]	; (800d8b4 <pbuf_free+0x100>)
 800d7d2:	f006 f9f7 	bl	8013bc4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	e063      	b.n	800d8a2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d7de:	e05c      	b.n	800d89a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	7b9b      	ldrb	r3, [r3, #14]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d106      	bne.n	800d7f6 <pbuf_free+0x42>
 800d7e8:	4b30      	ldr	r3, [pc, #192]	; (800d8ac <pbuf_free+0xf8>)
 800d7ea:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d7ee:	4932      	ldr	r1, [pc, #200]	; (800d8b8 <pbuf_free+0x104>)
 800d7f0:	4830      	ldr	r0, [pc, #192]	; (800d8b4 <pbuf_free+0x100>)
 800d7f2:	f006 f9e7 	bl	8013bc4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	7b9b      	ldrb	r3, [r3, #14]
 800d7fa:	3b01      	subs	r3, #1
 800d7fc:	b2da      	uxtb	r2, r3
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	739a      	strb	r2, [r3, #14]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	7b9b      	ldrb	r3, [r3, #14]
 800d806:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d808:	7dbb      	ldrb	r3, [r7, #22]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d143      	bne.n	800d896 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	7b1b      	ldrb	r3, [r3, #12]
 800d818:	f003 030f 	and.w	r3, r3, #15
 800d81c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	7b5b      	ldrb	r3, [r3, #13]
 800d822:	f003 0302 	and.w	r3, r3, #2
 800d826:	2b00      	cmp	r3, #0
 800d828:	d011      	beq.n	800d84e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d106      	bne.n	800d844 <pbuf_free+0x90>
 800d836:	4b1d      	ldr	r3, [pc, #116]	; (800d8ac <pbuf_free+0xf8>)
 800d838:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d83c:	491f      	ldr	r1, [pc, #124]	; (800d8bc <pbuf_free+0x108>)
 800d83e:	481d      	ldr	r0, [pc, #116]	; (800d8b4 <pbuf_free+0x100>)
 800d840:	f006 f9c0 	bl	8013bc4 <iprintf>
        pc->custom_free_function(p);
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	691b      	ldr	r3, [r3, #16]
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	4798      	blx	r3
 800d84c:	e01d      	b.n	800d88a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d84e:	7bfb      	ldrb	r3, [r7, #15]
 800d850:	2b02      	cmp	r3, #2
 800d852:	d104      	bne.n	800d85e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800d854:	6879      	ldr	r1, [r7, #4]
 800d856:	2008      	movs	r0, #8
 800d858:	f7ff f94a 	bl	800caf0 <memp_free>
 800d85c:	e015      	b.n	800d88a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d85e:	7bfb      	ldrb	r3, [r7, #15]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d104      	bne.n	800d86e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800d864:	6879      	ldr	r1, [r7, #4]
 800d866:	2007      	movs	r0, #7
 800d868:	f7ff f942 	bl	800caf0 <memp_free>
 800d86c:	e00d      	b.n	800d88a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d86e:	7bfb      	ldrb	r3, [r7, #15]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d103      	bne.n	800d87c <pbuf_free+0xc8>
          mem_free(p);
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f7fe fdd5 	bl	800c424 <mem_free>
 800d87a:	e006      	b.n	800d88a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d87c:	4b0b      	ldr	r3, [pc, #44]	; (800d8ac <pbuf_free+0xf8>)
 800d87e:	f240 320f 	movw	r2, #783	; 0x30f
 800d882:	490f      	ldr	r1, [pc, #60]	; (800d8c0 <pbuf_free+0x10c>)
 800d884:	480b      	ldr	r0, [pc, #44]	; (800d8b4 <pbuf_free+0x100>)
 800d886:	f006 f99d 	bl	8013bc4 <iprintf>
        }
      }
      count++;
 800d88a:	7dfb      	ldrb	r3, [r7, #23]
 800d88c:	3301      	adds	r3, #1
 800d88e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	607b      	str	r3, [r7, #4]
 800d894:	e001      	b.n	800d89a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d896:	2300      	movs	r3, #0
 800d898:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d19f      	bne.n	800d7e0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d8a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3718      	adds	r7, #24
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	08015eac 	.word	0x08015eac
 800d8b0:	0801604c 	.word	0x0801604c
 800d8b4:	08015f48 	.word	0x08015f48
 800d8b8:	08016078 	.word	0x08016078
 800d8bc:	08016090 	.word	0x08016090
 800d8c0:	080160b4 	.word	0x080160b4

0800d8c4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d8d0:	e005      	b.n	800d8de <pbuf_clen+0x1a>
    ++len;
 800d8d2:	89fb      	ldrh	r3, [r7, #14]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1f6      	bne.n	800d8d2 <pbuf_clen+0xe>
  }
  return len;
 800d8e4:	89fb      	ldrh	r3, [r7, #14]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3714      	adds	r7, #20
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
	...

0800d8f4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d010      	beq.n	800d924 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	7b9b      	ldrb	r3, [r3, #14]
 800d906:	3301      	adds	r3, #1
 800d908:	b2da      	uxtb	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	7b9b      	ldrb	r3, [r3, #14]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d106      	bne.n	800d924 <pbuf_ref+0x30>
 800d916:	4b05      	ldr	r3, [pc, #20]	; (800d92c <pbuf_ref+0x38>)
 800d918:	f240 3242 	movw	r2, #834	; 0x342
 800d91c:	4904      	ldr	r1, [pc, #16]	; (800d930 <pbuf_ref+0x3c>)
 800d91e:	4805      	ldr	r0, [pc, #20]	; (800d934 <pbuf_ref+0x40>)
 800d920:	f006 f950 	bl	8013bc4 <iprintf>
  }
}
 800d924:	bf00      	nop
 800d926:	3708      	adds	r7, #8
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	08015eac 	.word	0x08015eac
 800d930:	080160c8 	.word	0x080160c8
 800d934:	08015f48 	.word	0x08015f48

0800d938 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d002      	beq.n	800d94e <pbuf_cat+0x16>
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d107      	bne.n	800d95e <pbuf_cat+0x26>
 800d94e:	4b20      	ldr	r3, [pc, #128]	; (800d9d0 <pbuf_cat+0x98>)
 800d950:	f240 3259 	movw	r2, #857	; 0x359
 800d954:	491f      	ldr	r1, [pc, #124]	; (800d9d4 <pbuf_cat+0x9c>)
 800d956:	4820      	ldr	r0, [pc, #128]	; (800d9d8 <pbuf_cat+0xa0>)
 800d958:	f006 f934 	bl	8013bc4 <iprintf>
 800d95c:	e034      	b.n	800d9c8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	60fb      	str	r3, [r7, #12]
 800d962:	e00a      	b.n	800d97a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	891a      	ldrh	r2, [r3, #8]
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	891b      	ldrh	r3, [r3, #8]
 800d96c:	4413      	add	r3, r2
 800d96e:	b29a      	uxth	r2, r3
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	60fb      	str	r3, [r7, #12]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1f0      	bne.n	800d964 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	891a      	ldrh	r2, [r3, #8]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	895b      	ldrh	r3, [r3, #10]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d006      	beq.n	800d99c <pbuf_cat+0x64>
 800d98e:	4b10      	ldr	r3, [pc, #64]	; (800d9d0 <pbuf_cat+0x98>)
 800d990:	f240 3262 	movw	r2, #866	; 0x362
 800d994:	4911      	ldr	r1, [pc, #68]	; (800d9dc <pbuf_cat+0xa4>)
 800d996:	4810      	ldr	r0, [pc, #64]	; (800d9d8 <pbuf_cat+0xa0>)
 800d998:	f006 f914 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d006      	beq.n	800d9b2 <pbuf_cat+0x7a>
 800d9a4:	4b0a      	ldr	r3, [pc, #40]	; (800d9d0 <pbuf_cat+0x98>)
 800d9a6:	f240 3263 	movw	r2, #867	; 0x363
 800d9aa:	490d      	ldr	r1, [pc, #52]	; (800d9e0 <pbuf_cat+0xa8>)
 800d9ac:	480a      	ldr	r0, [pc, #40]	; (800d9d8 <pbuf_cat+0xa0>)
 800d9ae:	f006 f909 	bl	8013bc4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	891a      	ldrh	r2, [r3, #8]
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	891b      	ldrh	r3, [r3, #8]
 800d9ba:	4413      	add	r3, r2
 800d9bc:	b29a      	uxth	r2, r3
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	683a      	ldr	r2, [r7, #0]
 800d9c6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d9c8:	3710      	adds	r7, #16
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	08015eac 	.word	0x08015eac
 800d9d4:	080160dc 	.word	0x080160dc
 800d9d8:	08015f48 	.word	0x08015f48
 800d9dc:	08016114 	.word	0x08016114
 800d9e0:	08016144 	.word	0x08016144

0800d9e4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d9ee:	6839      	ldr	r1, [r7, #0]
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f7ff ffa1 	bl	800d938 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d9f6:	6838      	ldr	r0, [r7, #0]
 800d9f8:	f7ff ff7c 	bl	800d8f4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d9fc:	bf00      	nop
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b086      	sub	sp, #24
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800da0e:	2300      	movs	r3, #0
 800da10:	617b      	str	r3, [r7, #20]
 800da12:	2300      	movs	r3, #0
 800da14:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d008      	beq.n	800da2e <pbuf_copy+0x2a>
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d005      	beq.n	800da2e <pbuf_copy+0x2a>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	891a      	ldrh	r2, [r3, #8]
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	891b      	ldrh	r3, [r3, #8]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d209      	bcs.n	800da42 <pbuf_copy+0x3e>
 800da2e:	4b57      	ldr	r3, [pc, #348]	; (800db8c <pbuf_copy+0x188>)
 800da30:	f240 32c9 	movw	r2, #969	; 0x3c9
 800da34:	4956      	ldr	r1, [pc, #344]	; (800db90 <pbuf_copy+0x18c>)
 800da36:	4857      	ldr	r0, [pc, #348]	; (800db94 <pbuf_copy+0x190>)
 800da38:	f006 f8c4 	bl	8013bc4 <iprintf>
 800da3c:	f06f 030f 	mvn.w	r3, #15
 800da40:	e09f      	b.n	800db82 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	895b      	ldrh	r3, [r3, #10]
 800da46:	461a      	mov	r2, r3
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	1ad2      	subs	r2, r2, r3
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	895b      	ldrh	r3, [r3, #10]
 800da50:	4619      	mov	r1, r3
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	1acb      	subs	r3, r1, r3
 800da56:	429a      	cmp	r2, r3
 800da58:	d306      	bcc.n	800da68 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	895b      	ldrh	r3, [r3, #10]
 800da5e:	461a      	mov	r2, r3
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	1ad3      	subs	r3, r2, r3
 800da64:	60fb      	str	r3, [r7, #12]
 800da66:	e005      	b.n	800da74 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	895b      	ldrh	r3, [r3, #10]
 800da6c:	461a      	mov	r2, r3
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	685a      	ldr	r2, [r3, #4]
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	18d0      	adds	r0, r2, r3
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	685a      	ldr	r2, [r3, #4]
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	4413      	add	r3, r2
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	4619      	mov	r1, r3
 800da88:	f006 f886 	bl	8013b98 <memcpy>
    offset_to += len;
 800da8c:	697a      	ldr	r2, [r7, #20]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	4413      	add	r3, r2
 800da92:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800da94:	693a      	ldr	r2, [r7, #16]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	4413      	add	r3, r2
 800da9a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	895b      	ldrh	r3, [r3, #10]
 800daa0:	461a      	mov	r2, r3
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d906      	bls.n	800dab6 <pbuf_copy+0xb2>
 800daa8:	4b38      	ldr	r3, [pc, #224]	; (800db8c <pbuf_copy+0x188>)
 800daaa:	f240 32d9 	movw	r2, #985	; 0x3d9
 800daae:	493a      	ldr	r1, [pc, #232]	; (800db98 <pbuf_copy+0x194>)
 800dab0:	4838      	ldr	r0, [pc, #224]	; (800db94 <pbuf_copy+0x190>)
 800dab2:	f006 f887 	bl	8013bc4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	895b      	ldrh	r3, [r3, #10]
 800daba:	461a      	mov	r2, r3
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d906      	bls.n	800dad0 <pbuf_copy+0xcc>
 800dac2:	4b32      	ldr	r3, [pc, #200]	; (800db8c <pbuf_copy+0x188>)
 800dac4:	f240 32da 	movw	r2, #986	; 0x3da
 800dac8:	4934      	ldr	r1, [pc, #208]	; (800db9c <pbuf_copy+0x198>)
 800daca:	4832      	ldr	r0, [pc, #200]	; (800db94 <pbuf_copy+0x190>)
 800dacc:	f006 f87a 	bl	8013bc4 <iprintf>
    if (offset_from >= p_from->len) {
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	895b      	ldrh	r3, [r3, #10]
 800dad4:	461a      	mov	r2, r3
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	4293      	cmp	r3, r2
 800dada:	d304      	bcc.n	800dae6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dadc:	2300      	movs	r3, #0
 800dade:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	895b      	ldrh	r3, [r3, #10]
 800daea:	461a      	mov	r2, r3
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	4293      	cmp	r3, r2
 800daf0:	d114      	bne.n	800db1c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800daf2:	2300      	movs	r3, #0
 800daf4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d10c      	bne.n	800db1c <pbuf_copy+0x118>
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d009      	beq.n	800db1c <pbuf_copy+0x118>
 800db08:	4b20      	ldr	r3, [pc, #128]	; (800db8c <pbuf_copy+0x188>)
 800db0a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800db0e:	4924      	ldr	r1, [pc, #144]	; (800dba0 <pbuf_copy+0x19c>)
 800db10:	4820      	ldr	r0, [pc, #128]	; (800db94 <pbuf_copy+0x190>)
 800db12:	f006 f857 	bl	8013bc4 <iprintf>
 800db16:	f06f 030f 	mvn.w	r3, #15
 800db1a:	e032      	b.n	800db82 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d013      	beq.n	800db4a <pbuf_copy+0x146>
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	895a      	ldrh	r2, [r3, #10]
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	891b      	ldrh	r3, [r3, #8]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d10d      	bne.n	800db4a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d009      	beq.n	800db4a <pbuf_copy+0x146>
 800db36:	4b15      	ldr	r3, [pc, #84]	; (800db8c <pbuf_copy+0x188>)
 800db38:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800db3c:	4919      	ldr	r1, [pc, #100]	; (800dba4 <pbuf_copy+0x1a0>)
 800db3e:	4815      	ldr	r0, [pc, #84]	; (800db94 <pbuf_copy+0x190>)
 800db40:	f006 f840 	bl	8013bc4 <iprintf>
 800db44:	f06f 0305 	mvn.w	r3, #5
 800db48:	e01b      	b.n	800db82 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d013      	beq.n	800db78 <pbuf_copy+0x174>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	895a      	ldrh	r2, [r3, #10]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	891b      	ldrh	r3, [r3, #8]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d10d      	bne.n	800db78 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d009      	beq.n	800db78 <pbuf_copy+0x174>
 800db64:	4b09      	ldr	r3, [pc, #36]	; (800db8c <pbuf_copy+0x188>)
 800db66:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800db6a:	490e      	ldr	r1, [pc, #56]	; (800dba4 <pbuf_copy+0x1a0>)
 800db6c:	4809      	ldr	r0, [pc, #36]	; (800db94 <pbuf_copy+0x190>)
 800db6e:	f006 f829 	bl	8013bc4 <iprintf>
 800db72:	f06f 0305 	mvn.w	r3, #5
 800db76:	e004      	b.n	800db82 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	f47f af61 	bne.w	800da42 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800db80:	2300      	movs	r3, #0
}
 800db82:	4618      	mov	r0, r3
 800db84:	3718      	adds	r7, #24
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	08015eac 	.word	0x08015eac
 800db90:	08016190 	.word	0x08016190
 800db94:	08015f48 	.word	0x08015f48
 800db98:	080161c0 	.word	0x080161c0
 800db9c:	080161d8 	.word	0x080161d8
 800dba0:	080161f4 	.word	0x080161f4
 800dba4:	08016204 	.word	0x08016204

0800dba8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b088      	sub	sp, #32
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	4611      	mov	r1, r2
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	80fb      	strh	r3, [r7, #6]
 800dbba:	4613      	mov	r3, r2
 800dbbc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d108      	bne.n	800dbde <pbuf_copy_partial+0x36>
 800dbcc:	4b2b      	ldr	r3, [pc, #172]	; (800dc7c <pbuf_copy_partial+0xd4>)
 800dbce:	f240 420a 	movw	r2, #1034	; 0x40a
 800dbd2:	492b      	ldr	r1, [pc, #172]	; (800dc80 <pbuf_copy_partial+0xd8>)
 800dbd4:	482b      	ldr	r0, [pc, #172]	; (800dc84 <pbuf_copy_partial+0xdc>)
 800dbd6:	f005 fff5 	bl	8013bc4 <iprintf>
 800dbda:	2300      	movs	r3, #0
 800dbdc:	e04a      	b.n	800dc74 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d108      	bne.n	800dbf6 <pbuf_copy_partial+0x4e>
 800dbe4:	4b25      	ldr	r3, [pc, #148]	; (800dc7c <pbuf_copy_partial+0xd4>)
 800dbe6:	f240 420b 	movw	r2, #1035	; 0x40b
 800dbea:	4927      	ldr	r1, [pc, #156]	; (800dc88 <pbuf_copy_partial+0xe0>)
 800dbec:	4825      	ldr	r0, [pc, #148]	; (800dc84 <pbuf_copy_partial+0xdc>)
 800dbee:	f005 ffe9 	bl	8013bc4 <iprintf>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	e03e      	b.n	800dc74 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	61fb      	str	r3, [r7, #28]
 800dbfa:	e034      	b.n	800dc66 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800dbfc:	88bb      	ldrh	r3, [r7, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00a      	beq.n	800dc18 <pbuf_copy_partial+0x70>
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	895b      	ldrh	r3, [r3, #10]
 800dc06:	88ba      	ldrh	r2, [r7, #4]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d305      	bcc.n	800dc18 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	895b      	ldrh	r3, [r3, #10]
 800dc10:	88ba      	ldrh	r2, [r7, #4]
 800dc12:	1ad3      	subs	r3, r2, r3
 800dc14:	80bb      	strh	r3, [r7, #4]
 800dc16:	e023      	b.n	800dc60 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	895a      	ldrh	r2, [r3, #10]
 800dc1c:	88bb      	ldrh	r3, [r7, #4]
 800dc1e:	1ad3      	subs	r3, r2, r3
 800dc20:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dc22:	8b3a      	ldrh	r2, [r7, #24]
 800dc24:	88fb      	ldrh	r3, [r7, #6]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d901      	bls.n	800dc2e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800dc2a:	88fb      	ldrh	r3, [r7, #6]
 800dc2c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800dc2e:	8b7b      	ldrh	r3, [r7, #26]
 800dc30:	68ba      	ldr	r2, [r7, #8]
 800dc32:	18d0      	adds	r0, r2, r3
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	685a      	ldr	r2, [r3, #4]
 800dc38:	88bb      	ldrh	r3, [r7, #4]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	8b3a      	ldrh	r2, [r7, #24]
 800dc3e:	4619      	mov	r1, r3
 800dc40:	f005 ffaa 	bl	8013b98 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dc44:	8afa      	ldrh	r2, [r7, #22]
 800dc46:	8b3b      	ldrh	r3, [r7, #24]
 800dc48:	4413      	add	r3, r2
 800dc4a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dc4c:	8b7a      	ldrh	r2, [r7, #26]
 800dc4e:	8b3b      	ldrh	r3, [r7, #24]
 800dc50:	4413      	add	r3, r2
 800dc52:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dc54:	88fa      	ldrh	r2, [r7, #6]
 800dc56:	8b3b      	ldrh	r3, [r7, #24]
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	61fb      	str	r3, [r7, #28]
 800dc66:	88fb      	ldrh	r3, [r7, #6]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d002      	beq.n	800dc72 <pbuf_copy_partial+0xca>
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d1c4      	bne.n	800dbfc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800dc72:	8afb      	ldrh	r3, [r7, #22]
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3720      	adds	r7, #32
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	08015eac 	.word	0x08015eac
 800dc80:	08016230 	.word	0x08016230
 800dc84:	08015f48 	.word	0x08015f48
 800dc88:	08016250 	.word	0x08016250

0800dc8c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	4603      	mov	r3, r0
 800dc94:	603a      	str	r2, [r7, #0]
 800dc96:	71fb      	strb	r3, [r7, #7]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	8919      	ldrh	r1, [r3, #8]
 800dca0:	88ba      	ldrh	r2, [r7, #4]
 800dca2:	79fb      	ldrb	r3, [r7, #7]
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7ff faa1 	bl	800d1ec <pbuf_alloc>
 800dcaa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d101      	bne.n	800dcb6 <pbuf_clone+0x2a>
    return NULL;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	e011      	b.n	800dcda <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800dcb6:	6839      	ldr	r1, [r7, #0]
 800dcb8:	68f8      	ldr	r0, [r7, #12]
 800dcba:	f7ff fea3 	bl	800da04 <pbuf_copy>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800dcc2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d006      	beq.n	800dcd8 <pbuf_clone+0x4c>
 800dcca:	4b06      	ldr	r3, [pc, #24]	; (800dce4 <pbuf_clone+0x58>)
 800dccc:	f240 5224 	movw	r2, #1316	; 0x524
 800dcd0:	4905      	ldr	r1, [pc, #20]	; (800dce8 <pbuf_clone+0x5c>)
 800dcd2:	4806      	ldr	r0, [pc, #24]	; (800dcec <pbuf_clone+0x60>)
 800dcd4:	f005 ff76 	bl	8013bc4 <iprintf>
  return q;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3710      	adds	r7, #16
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	08015eac 	.word	0x08015eac
 800dce8:	0801635c 	.word	0x0801635c
 800dcec:	08015f48 	.word	0x08015f48

0800dcf0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dcf4:	f005 ff7e 	bl	8013bf4 <rand>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	4b01      	ldr	r3, [pc, #4]	; (800dd10 <tcp_init+0x20>)
 800dd0a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dd0c:	bf00      	nop
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	24000028 	.word	0x24000028

0800dd14 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	7d1b      	ldrb	r3, [r3, #20]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d105      	bne.n	800dd30 <tcp_free+0x1c>
 800dd24:	4b06      	ldr	r3, [pc, #24]	; (800dd40 <tcp_free+0x2c>)
 800dd26:	22d4      	movs	r2, #212	; 0xd4
 800dd28:	4906      	ldr	r1, [pc, #24]	; (800dd44 <tcp_free+0x30>)
 800dd2a:	4807      	ldr	r0, [pc, #28]	; (800dd48 <tcp_free+0x34>)
 800dd2c:	f005 ff4a 	bl	8013bc4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800dd30:	6879      	ldr	r1, [r7, #4]
 800dd32:	2001      	movs	r0, #1
 800dd34:	f7fe fedc 	bl	800caf0 <memp_free>
}
 800dd38:	bf00      	nop
 800dd3a:	3708      	adds	r7, #8
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	080163e8 	.word	0x080163e8
 800dd44:	08016450 	.word	0x08016450
 800dd48:	08016464 	.word	0x08016464

0800dd4c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	7d1b      	ldrb	r3, [r3, #20]
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d105      	bne.n	800dd68 <tcp_free_listen+0x1c>
 800dd5c:	4b06      	ldr	r3, [pc, #24]	; (800dd78 <tcp_free_listen+0x2c>)
 800dd5e:	22df      	movs	r2, #223	; 0xdf
 800dd60:	4906      	ldr	r1, [pc, #24]	; (800dd7c <tcp_free_listen+0x30>)
 800dd62:	4807      	ldr	r0, [pc, #28]	; (800dd80 <tcp_free_listen+0x34>)
 800dd64:	f005 ff2e 	bl	8013bc4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800dd68:	6879      	ldr	r1, [r7, #4]
 800dd6a:	2002      	movs	r0, #2
 800dd6c:	f7fe fec0 	bl	800caf0 <memp_free>
}
 800dd70:	bf00      	nop
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}
 800dd78:	080163e8 	.word	0x080163e8
 800dd7c:	0801648c 	.word	0x0801648c
 800dd80:	08016464 	.word	0x08016464

0800dd84 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800dd88:	f000 fea2 	bl	800ead0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800dd8c:	4b07      	ldr	r3, [pc, #28]	; (800ddac <tcp_tmr+0x28>)
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	3301      	adds	r3, #1
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	4b05      	ldr	r3, [pc, #20]	; (800ddac <tcp_tmr+0x28>)
 800dd96:	701a      	strb	r2, [r3, #0]
 800dd98:	4b04      	ldr	r3, [pc, #16]	; (800ddac <tcp_tmr+0x28>)
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	f003 0301 	and.w	r3, r3, #1
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d001      	beq.n	800dda8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800dda4:	f000 fb54 	bl	800e450 <tcp_slowtmr>
  }
}
 800dda8:	bf00      	nop
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	24008275 	.word	0x24008275

0800ddb0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d105      	bne.n	800ddcc <tcp_remove_listener+0x1c>
 800ddc0:	4b0d      	ldr	r3, [pc, #52]	; (800ddf8 <tcp_remove_listener+0x48>)
 800ddc2:	22ff      	movs	r2, #255	; 0xff
 800ddc4:	490d      	ldr	r1, [pc, #52]	; (800ddfc <tcp_remove_listener+0x4c>)
 800ddc6:	480e      	ldr	r0, [pc, #56]	; (800de00 <tcp_remove_listener+0x50>)
 800ddc8:	f005 fefc 	bl	8013bc4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	60fb      	str	r3, [r7, #12]
 800ddd0:	e00a      	b.n	800dde8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddd6:	683a      	ldr	r2, [r7, #0]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d102      	bne.n	800dde2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2200      	movs	r2, #0
 800dde0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	60fb      	str	r3, [r7, #12]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d1f1      	bne.n	800ddd2 <tcp_remove_listener+0x22>
    }
  }
}
 800ddee:	bf00      	nop
 800ddf0:	bf00      	nop
 800ddf2:	3710      	adds	r7, #16
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	080163e8 	.word	0x080163e8
 800ddfc:	080164a8 	.word	0x080164a8
 800de00:	08016464 	.word	0x08016464

0800de04 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d106      	bne.n	800de20 <tcp_listen_closed+0x1c>
 800de12:	4b14      	ldr	r3, [pc, #80]	; (800de64 <tcp_listen_closed+0x60>)
 800de14:	f240 1211 	movw	r2, #273	; 0x111
 800de18:	4913      	ldr	r1, [pc, #76]	; (800de68 <tcp_listen_closed+0x64>)
 800de1a:	4814      	ldr	r0, [pc, #80]	; (800de6c <tcp_listen_closed+0x68>)
 800de1c:	f005 fed2 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	7d1b      	ldrb	r3, [r3, #20]
 800de24:	2b01      	cmp	r3, #1
 800de26:	d006      	beq.n	800de36 <tcp_listen_closed+0x32>
 800de28:	4b0e      	ldr	r3, [pc, #56]	; (800de64 <tcp_listen_closed+0x60>)
 800de2a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800de2e:	4910      	ldr	r1, [pc, #64]	; (800de70 <tcp_listen_closed+0x6c>)
 800de30:	480e      	ldr	r0, [pc, #56]	; (800de6c <tcp_listen_closed+0x68>)
 800de32:	f005 fec7 	bl	8013bc4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800de36:	2301      	movs	r3, #1
 800de38:	60fb      	str	r3, [r7, #12]
 800de3a:	e00b      	b.n	800de54 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800de3c:	4a0d      	ldr	r2, [pc, #52]	; (800de74 <tcp_listen_closed+0x70>)
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	6879      	ldr	r1, [r7, #4]
 800de48:	4618      	mov	r0, r3
 800de4a:	f7ff ffb1 	bl	800ddb0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	3301      	adds	r3, #1
 800de52:	60fb      	str	r3, [r7, #12]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2b03      	cmp	r3, #3
 800de58:	d9f0      	bls.n	800de3c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800de5a:	bf00      	nop
 800de5c:	bf00      	nop
 800de5e:	3710      	adds	r7, #16
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	080163e8 	.word	0x080163e8
 800de68:	080164d0 	.word	0x080164d0
 800de6c:	08016464 	.word	0x08016464
 800de70:	080164dc 	.word	0x080164dc
 800de74:	08017e58 	.word	0x08017e58

0800de78 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800de78:	b5b0      	push	{r4, r5, r7, lr}
 800de7a:	b088      	sub	sp, #32
 800de7c:	af04      	add	r7, sp, #16
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	460b      	mov	r3, r1
 800de82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d106      	bne.n	800de98 <tcp_close_shutdown+0x20>
 800de8a:	4b63      	ldr	r3, [pc, #396]	; (800e018 <tcp_close_shutdown+0x1a0>)
 800de8c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800de90:	4962      	ldr	r1, [pc, #392]	; (800e01c <tcp_close_shutdown+0x1a4>)
 800de92:	4863      	ldr	r0, [pc, #396]	; (800e020 <tcp_close_shutdown+0x1a8>)
 800de94:	f005 fe96 	bl	8013bc4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800de98:	78fb      	ldrb	r3, [r7, #3]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d066      	beq.n	800df6c <tcp_close_shutdown+0xf4>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	7d1b      	ldrb	r3, [r3, #20]
 800dea2:	2b04      	cmp	r3, #4
 800dea4:	d003      	beq.n	800deae <tcp_close_shutdown+0x36>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	7d1b      	ldrb	r3, [r3, #20]
 800deaa:	2b07      	cmp	r3, #7
 800deac:	d15e      	bne.n	800df6c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d104      	bne.n	800dec0 <tcp_close_shutdown+0x48>
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800deba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800debe:	d055      	beq.n	800df6c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	8b5b      	ldrh	r3, [r3, #26]
 800dec4:	f003 0310 	and.w	r3, r3, #16
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d106      	bne.n	800deda <tcp_close_shutdown+0x62>
 800decc:	4b52      	ldr	r3, [pc, #328]	; (800e018 <tcp_close_shutdown+0x1a0>)
 800dece:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ded2:	4954      	ldr	r1, [pc, #336]	; (800e024 <tcp_close_shutdown+0x1ac>)
 800ded4:	4852      	ldr	r0, [pc, #328]	; (800e020 <tcp_close_shutdown+0x1a8>)
 800ded6:	f005 fe75 	bl	8013bc4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800dee2:	687d      	ldr	r5, [r7, #4]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	3304      	adds	r3, #4
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	8ad2      	ldrh	r2, [r2, #22]
 800deec:	6879      	ldr	r1, [r7, #4]
 800deee:	8b09      	ldrh	r1, [r1, #24]
 800def0:	9102      	str	r1, [sp, #8]
 800def2:	9201      	str	r2, [sp, #4]
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	462b      	mov	r3, r5
 800def8:	4622      	mov	r2, r4
 800defa:	4601      	mov	r1, r0
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f004 fe91 	bl	8012c24 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f001 f8c6 	bl	800f094 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800df08:	4b47      	ldr	r3, [pc, #284]	; (800e028 <tcp_close_shutdown+0x1b0>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	687a      	ldr	r2, [r7, #4]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d105      	bne.n	800df1e <tcp_close_shutdown+0xa6>
 800df12:	4b45      	ldr	r3, [pc, #276]	; (800e028 <tcp_close_shutdown+0x1b0>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	68db      	ldr	r3, [r3, #12]
 800df18:	4a43      	ldr	r2, [pc, #268]	; (800e028 <tcp_close_shutdown+0x1b0>)
 800df1a:	6013      	str	r3, [r2, #0]
 800df1c:	e013      	b.n	800df46 <tcp_close_shutdown+0xce>
 800df1e:	4b42      	ldr	r3, [pc, #264]	; (800e028 <tcp_close_shutdown+0x1b0>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	60fb      	str	r3, [r7, #12]
 800df24:	e00c      	b.n	800df40 <tcp_close_shutdown+0xc8>
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	68db      	ldr	r3, [r3, #12]
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d104      	bne.n	800df3a <tcp_close_shutdown+0xc2>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	68da      	ldr	r2, [r3, #12]
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	60da      	str	r2, [r3, #12]
 800df38:	e005      	b.n	800df46 <tcp_close_shutdown+0xce>
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	60fb      	str	r3, [r7, #12]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d1ef      	bne.n	800df26 <tcp_close_shutdown+0xae>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2200      	movs	r2, #0
 800df4a:	60da      	str	r2, [r3, #12]
 800df4c:	4b37      	ldr	r3, [pc, #220]	; (800e02c <tcp_close_shutdown+0x1b4>)
 800df4e:	2201      	movs	r2, #1
 800df50:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800df52:	4b37      	ldr	r3, [pc, #220]	; (800e030 <tcp_close_shutdown+0x1b8>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d102      	bne.n	800df62 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800df5c:	f003 fd5e 	bl	8011a1c <tcp_trigger_input_pcb_close>
 800df60:	e002      	b.n	800df68 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f7ff fed6 	bl	800dd14 <tcp_free>
      }
      return ERR_OK;
 800df68:	2300      	movs	r3, #0
 800df6a:	e050      	b.n	800e00e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	7d1b      	ldrb	r3, [r3, #20]
 800df70:	2b02      	cmp	r3, #2
 800df72:	d03b      	beq.n	800dfec <tcp_close_shutdown+0x174>
 800df74:	2b02      	cmp	r3, #2
 800df76:	dc44      	bgt.n	800e002 <tcp_close_shutdown+0x18a>
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d002      	beq.n	800df82 <tcp_close_shutdown+0x10a>
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d02a      	beq.n	800dfd6 <tcp_close_shutdown+0x15e>
 800df80:	e03f      	b.n	800e002 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	8adb      	ldrh	r3, [r3, #22]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d021      	beq.n	800dfce <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800df8a:	4b2a      	ldr	r3, [pc, #168]	; (800e034 <tcp_close_shutdown+0x1bc>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	429a      	cmp	r2, r3
 800df92:	d105      	bne.n	800dfa0 <tcp_close_shutdown+0x128>
 800df94:	4b27      	ldr	r3, [pc, #156]	; (800e034 <tcp_close_shutdown+0x1bc>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	68db      	ldr	r3, [r3, #12]
 800df9a:	4a26      	ldr	r2, [pc, #152]	; (800e034 <tcp_close_shutdown+0x1bc>)
 800df9c:	6013      	str	r3, [r2, #0]
 800df9e:	e013      	b.n	800dfc8 <tcp_close_shutdown+0x150>
 800dfa0:	4b24      	ldr	r3, [pc, #144]	; (800e034 <tcp_close_shutdown+0x1bc>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	60bb      	str	r3, [r7, #8]
 800dfa6:	e00c      	b.n	800dfc2 <tcp_close_shutdown+0x14a>
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d104      	bne.n	800dfbc <tcp_close_shutdown+0x144>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	68da      	ldr	r2, [r3, #12]
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	60da      	str	r2, [r3, #12]
 800dfba:	e005      	b.n	800dfc8 <tcp_close_shutdown+0x150>
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	60bb      	str	r3, [r7, #8]
 800dfc2:	68bb      	ldr	r3, [r7, #8]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d1ef      	bne.n	800dfa8 <tcp_close_shutdown+0x130>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7ff fea0 	bl	800dd14 <tcp_free>
      break;
 800dfd4:	e01a      	b.n	800e00c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f7ff ff14 	bl	800de04 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dfdc:	6879      	ldr	r1, [r7, #4]
 800dfde:	4816      	ldr	r0, [pc, #88]	; (800e038 <tcp_close_shutdown+0x1c0>)
 800dfe0:	f001 f8a8 	bl	800f134 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f7ff feb1 	bl	800dd4c <tcp_free_listen>
      break;
 800dfea:	e00f      	b.n	800e00c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dfec:	6879      	ldr	r1, [r7, #4]
 800dfee:	480e      	ldr	r0, [pc, #56]	; (800e028 <tcp_close_shutdown+0x1b0>)
 800dff0:	f001 f8a0 	bl	800f134 <tcp_pcb_remove>
 800dff4:	4b0d      	ldr	r3, [pc, #52]	; (800e02c <tcp_close_shutdown+0x1b4>)
 800dff6:	2201      	movs	r2, #1
 800dff8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f7ff fe8a 	bl	800dd14 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e000:	e004      	b.n	800e00c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 f81a 	bl	800e03c <tcp_close_shutdown_fin>
 800e008:	4603      	mov	r3, r0
 800e00a:	e000      	b.n	800e00e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e00c:	2300      	movs	r3, #0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bdb0      	pop	{r4, r5, r7, pc}
 800e016:	bf00      	nop
 800e018:	080163e8 	.word	0x080163e8
 800e01c:	080164f4 	.word	0x080164f4
 800e020:	08016464 	.word	0x08016464
 800e024:	08016514 	.word	0x08016514
 800e028:	2400826c 	.word	0x2400826c
 800e02c:	24008274 	.word	0x24008274
 800e030:	240082ac 	.word	0x240082ac
 800e034:	24008264 	.word	0x24008264
 800e038:	24008268 	.word	0x24008268

0800e03c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d106      	bne.n	800e058 <tcp_close_shutdown_fin+0x1c>
 800e04a:	4b2e      	ldr	r3, [pc, #184]	; (800e104 <tcp_close_shutdown_fin+0xc8>)
 800e04c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e050:	492d      	ldr	r1, [pc, #180]	; (800e108 <tcp_close_shutdown_fin+0xcc>)
 800e052:	482e      	ldr	r0, [pc, #184]	; (800e10c <tcp_close_shutdown_fin+0xd0>)
 800e054:	f005 fdb6 	bl	8013bc4 <iprintf>

  switch (pcb->state) {
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	7d1b      	ldrb	r3, [r3, #20]
 800e05c:	2b07      	cmp	r3, #7
 800e05e:	d020      	beq.n	800e0a2 <tcp_close_shutdown_fin+0x66>
 800e060:	2b07      	cmp	r3, #7
 800e062:	dc2b      	bgt.n	800e0bc <tcp_close_shutdown_fin+0x80>
 800e064:	2b03      	cmp	r3, #3
 800e066:	d002      	beq.n	800e06e <tcp_close_shutdown_fin+0x32>
 800e068:	2b04      	cmp	r3, #4
 800e06a:	d00d      	beq.n	800e088 <tcp_close_shutdown_fin+0x4c>
 800e06c:	e026      	b.n	800e0bc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f003 fee6 	bl	8011e40 <tcp_send_fin>
 800e074:	4603      	mov	r3, r0
 800e076:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d11f      	bne.n	800e0c0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2205      	movs	r2, #5
 800e084:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e086:	e01b      	b.n	800e0c0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f003 fed9 	bl	8011e40 <tcp_send_fin>
 800e08e:	4603      	mov	r3, r0
 800e090:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d114      	bne.n	800e0c4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2205      	movs	r2, #5
 800e09e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e0a0:	e010      	b.n	800e0c4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f003 fecc 	bl	8011e40 <tcp_send_fin>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e0ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d109      	bne.n	800e0c8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2209      	movs	r2, #9
 800e0b8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e0ba:	e005      	b.n	800e0c8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	e01c      	b.n	800e0fa <tcp_close_shutdown_fin+0xbe>
      break;
 800e0c0:	bf00      	nop
 800e0c2:	e002      	b.n	800e0ca <tcp_close_shutdown_fin+0x8e>
      break;
 800e0c4:	bf00      	nop
 800e0c6:	e000      	b.n	800e0ca <tcp_close_shutdown_fin+0x8e>
      break;
 800e0c8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e0ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d103      	bne.n	800e0da <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f003 fff2 	bl	80120bc <tcp_output>
 800e0d8:	e00d      	b.n	800e0f6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e0da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0e2:	d108      	bne.n	800e0f6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	8b5b      	ldrh	r3, [r3, #26]
 800e0e8:	f043 0308 	orr.w	r3, r3, #8
 800e0ec:	b29a      	uxth	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	e001      	b.n	800e0fa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e0f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3710      	adds	r7, #16
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
 800e102:	bf00      	nop
 800e104:	080163e8 	.word	0x080163e8
 800e108:	080164d0 	.word	0x080164d0
 800e10c:	08016464 	.word	0x08016464

0800e110 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d109      	bne.n	800e132 <tcp_close+0x22>
 800e11e:	4b0f      	ldr	r3, [pc, #60]	; (800e15c <tcp_close+0x4c>)
 800e120:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e124:	490e      	ldr	r1, [pc, #56]	; (800e160 <tcp_close+0x50>)
 800e126:	480f      	ldr	r0, [pc, #60]	; (800e164 <tcp_close+0x54>)
 800e128:	f005 fd4c 	bl	8013bc4 <iprintf>
 800e12c:	f06f 030f 	mvn.w	r3, #15
 800e130:	e00f      	b.n	800e152 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	7d1b      	ldrb	r3, [r3, #20]
 800e136:	2b01      	cmp	r3, #1
 800e138:	d006      	beq.n	800e148 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	8b5b      	ldrh	r3, [r3, #26]
 800e13e:	f043 0310 	orr.w	r3, r3, #16
 800e142:	b29a      	uxth	r2, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e148:	2101      	movs	r1, #1
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f7ff fe94 	bl	800de78 <tcp_close_shutdown>
 800e150:	4603      	mov	r3, r0
}
 800e152:	4618      	mov	r0, r3
 800e154:	3708      	adds	r7, #8
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop
 800e15c:	080163e8 	.word	0x080163e8
 800e160:	08016530 	.word	0x08016530
 800e164:	08016464 	.word	0x08016464

0800e168 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b08e      	sub	sp, #56	; 0x38
 800e16c:	af04      	add	r7, sp, #16
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d107      	bne.n	800e188 <tcp_abandon+0x20>
 800e178:	4b52      	ldr	r3, [pc, #328]	; (800e2c4 <tcp_abandon+0x15c>)
 800e17a:	f240 223d 	movw	r2, #573	; 0x23d
 800e17e:	4952      	ldr	r1, [pc, #328]	; (800e2c8 <tcp_abandon+0x160>)
 800e180:	4852      	ldr	r0, [pc, #328]	; (800e2cc <tcp_abandon+0x164>)
 800e182:	f005 fd1f 	bl	8013bc4 <iprintf>
 800e186:	e099      	b.n	800e2bc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	7d1b      	ldrb	r3, [r3, #20]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d106      	bne.n	800e19e <tcp_abandon+0x36>
 800e190:	4b4c      	ldr	r3, [pc, #304]	; (800e2c4 <tcp_abandon+0x15c>)
 800e192:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e196:	494e      	ldr	r1, [pc, #312]	; (800e2d0 <tcp_abandon+0x168>)
 800e198:	484c      	ldr	r0, [pc, #304]	; (800e2cc <tcp_abandon+0x164>)
 800e19a:	f005 fd13 	bl	8013bc4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	7d1b      	ldrb	r3, [r3, #20]
 800e1a2:	2b0a      	cmp	r3, #10
 800e1a4:	d107      	bne.n	800e1b6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e1a6:	6879      	ldr	r1, [r7, #4]
 800e1a8:	484a      	ldr	r0, [pc, #296]	; (800e2d4 <tcp_abandon+0x16c>)
 800e1aa:	f000 ffc3 	bl	800f134 <tcp_pcb_remove>
    tcp_free(pcb);
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7ff fdb0 	bl	800dd14 <tcp_free>
 800e1b4:	e082      	b.n	800e2bc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1c2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1d0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	691b      	ldr	r3, [r3, #16]
 800e1d6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	7d1b      	ldrb	r3, [r3, #20]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d126      	bne.n	800e22e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	8adb      	ldrh	r3, [r3, #22]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d02e      	beq.n	800e246 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e1e8:	4b3b      	ldr	r3, [pc, #236]	; (800e2d8 <tcp_abandon+0x170>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d105      	bne.n	800e1fe <tcp_abandon+0x96>
 800e1f2:	4b39      	ldr	r3, [pc, #228]	; (800e2d8 <tcp_abandon+0x170>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	4a37      	ldr	r2, [pc, #220]	; (800e2d8 <tcp_abandon+0x170>)
 800e1fa:	6013      	str	r3, [r2, #0]
 800e1fc:	e013      	b.n	800e226 <tcp_abandon+0xbe>
 800e1fe:	4b36      	ldr	r3, [pc, #216]	; (800e2d8 <tcp_abandon+0x170>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	61fb      	str	r3, [r7, #28]
 800e204:	e00c      	b.n	800e220 <tcp_abandon+0xb8>
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	68db      	ldr	r3, [r3, #12]
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d104      	bne.n	800e21a <tcp_abandon+0xb2>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	68da      	ldr	r2, [r3, #12]
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	60da      	str	r2, [r3, #12]
 800e218:	e005      	b.n	800e226 <tcp_abandon+0xbe>
 800e21a:	69fb      	ldr	r3, [r7, #28]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	61fb      	str	r3, [r7, #28]
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d1ef      	bne.n	800e206 <tcp_abandon+0x9e>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	60da      	str	r2, [r3, #12]
 800e22c:	e00b      	b.n	800e246 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	8adb      	ldrh	r3, [r3, #22]
 800e236:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e238:	6879      	ldr	r1, [r7, #4]
 800e23a:	4828      	ldr	r0, [pc, #160]	; (800e2dc <tcp_abandon+0x174>)
 800e23c:	f000 ff7a 	bl	800f134 <tcp_pcb_remove>
 800e240:	4b27      	ldr	r3, [pc, #156]	; (800e2e0 <tcp_abandon+0x178>)
 800e242:	2201      	movs	r2, #1
 800e244:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d004      	beq.n	800e258 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e252:	4618      	mov	r0, r3
 800e254:	f000 fd1c 	bl	800ec90 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d004      	beq.n	800e26a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e264:	4618      	mov	r0, r3
 800e266:	f000 fd13 	bl	800ec90 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d004      	beq.n	800e27c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e276:	4618      	mov	r0, r3
 800e278:	f000 fd0a 	bl	800ec90 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00e      	beq.n	800e2a0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e282:	6879      	ldr	r1, [r7, #4]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	3304      	adds	r3, #4
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	8b12      	ldrh	r2, [r2, #24]
 800e28c:	9202      	str	r2, [sp, #8]
 800e28e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e290:	9201      	str	r2, [sp, #4]
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	460b      	mov	r3, r1
 800e296:	697a      	ldr	r2, [r7, #20]
 800e298:	69b9      	ldr	r1, [r7, #24]
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f004 fcc2 	bl	8012c24 <tcp_rst>
    }
    last_state = pcb->state;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	7d1b      	ldrb	r3, [r3, #20]
 800e2a4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7ff fd34 	bl	800dd14 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d004      	beq.n	800e2bc <tcp_abandon+0x154>
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	f06f 010c 	mvn.w	r1, #12
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	4798      	blx	r3
  }
}
 800e2bc:	3728      	adds	r7, #40	; 0x28
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
 800e2c2:	bf00      	nop
 800e2c4:	080163e8 	.word	0x080163e8
 800e2c8:	08016564 	.word	0x08016564
 800e2cc:	08016464 	.word	0x08016464
 800e2d0:	08016580 	.word	0x08016580
 800e2d4:	24008270 	.word	0x24008270
 800e2d8:	24008264 	.word	0x24008264
 800e2dc:	2400826c 	.word	0x2400826c
 800e2e0:	24008274 	.word	0x24008274

0800e2e4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e2ec:	2101      	movs	r1, #1
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f7ff ff3a 	bl	800e168 <tcp_abandon>
}
 800e2f4:	bf00      	nop
 800e2f6:	3708      	adds	r7, #8
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d106      	bne.n	800e318 <tcp_update_rcv_ann_wnd+0x1c>
 800e30a:	4b25      	ldr	r3, [pc, #148]	; (800e3a0 <tcp_update_rcv_ann_wnd+0xa4>)
 800e30c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e310:	4924      	ldr	r1, [pc, #144]	; (800e3a4 <tcp_update_rcv_ann_wnd+0xa8>)
 800e312:	4825      	ldr	r0, [pc, #148]	; (800e3a8 <tcp_update_rcv_ann_wnd+0xac>)
 800e314:	f005 fc56 	bl	8013bc4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e31c:	687a      	ldr	r2, [r7, #4]
 800e31e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e320:	4413      	add	r3, r2
 800e322:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e328:	687a      	ldr	r2, [r7, #4]
 800e32a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e32c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e330:	bf28      	it	cs
 800e332:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e336:	b292      	uxth	r2, r2
 800e338:	4413      	add	r3, r2
 800e33a:	68fa      	ldr	r2, [r7, #12]
 800e33c:	1ad3      	subs	r3, r2, r3
 800e33e:	2b00      	cmp	r3, #0
 800e340:	db08      	blt.n	800e354 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	1ad3      	subs	r3, r2, r3
 800e352:	e020      	b.n	800e396 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e35c:	1ad3      	subs	r3, r2, r3
 800e35e:	2b00      	cmp	r3, #0
 800e360:	dd03      	ble.n	800e36a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2200      	movs	r2, #0
 800e366:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e368:	e014      	b.n	800e394 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e372:	1ad3      	subs	r3, r2, r3
 800e374:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e37c:	d306      	bcc.n	800e38c <tcp_update_rcv_ann_wnd+0x90>
 800e37e:	4b08      	ldr	r3, [pc, #32]	; (800e3a0 <tcp_update_rcv_ann_wnd+0xa4>)
 800e380:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e384:	4909      	ldr	r1, [pc, #36]	; (800e3ac <tcp_update_rcv_ann_wnd+0xb0>)
 800e386:	4808      	ldr	r0, [pc, #32]	; (800e3a8 <tcp_update_rcv_ann_wnd+0xac>)
 800e388:	f005 fc1c 	bl	8013bc4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	b29a      	uxth	r2, r3
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e394:	2300      	movs	r3, #0
  }
}
 800e396:	4618      	mov	r0, r3
 800e398:	3710      	adds	r7, #16
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	080163e8 	.word	0x080163e8
 800e3a4:	0801667c 	.word	0x0801667c
 800e3a8:	08016464 	.word	0x08016464
 800e3ac:	080166a0 	.word	0x080166a0

0800e3b0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d107      	bne.n	800e3d2 <tcp_recved+0x22>
 800e3c2:	4b1f      	ldr	r3, [pc, #124]	; (800e440 <tcp_recved+0x90>)
 800e3c4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e3c8:	491e      	ldr	r1, [pc, #120]	; (800e444 <tcp_recved+0x94>)
 800e3ca:	481f      	ldr	r0, [pc, #124]	; (800e448 <tcp_recved+0x98>)
 800e3cc:	f005 fbfa 	bl	8013bc4 <iprintf>
 800e3d0:	e032      	b.n	800e438 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	7d1b      	ldrb	r3, [r3, #20]
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d106      	bne.n	800e3e8 <tcp_recved+0x38>
 800e3da:	4b19      	ldr	r3, [pc, #100]	; (800e440 <tcp_recved+0x90>)
 800e3dc:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e3e0:	491a      	ldr	r1, [pc, #104]	; (800e44c <tcp_recved+0x9c>)
 800e3e2:	4819      	ldr	r0, [pc, #100]	; (800e448 <tcp_recved+0x98>)
 800e3e4:	f005 fbee 	bl	8013bc4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e3ec:	887b      	ldrh	r3, [r7, #2]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e3f2:	89fb      	ldrh	r3, [r7, #14]
 800e3f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e3f8:	d804      	bhi.n	800e404 <tcp_recved+0x54>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3fe:	89fa      	ldrh	r2, [r7, #14]
 800e400:	429a      	cmp	r2, r3
 800e402:	d204      	bcs.n	800e40e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e40a:	851a      	strh	r2, [r3, #40]	; 0x28
 800e40c:	e002      	b.n	800e414 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	89fa      	ldrh	r2, [r7, #14]
 800e412:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7ff ff71 	bl	800e2fc <tcp_update_rcv_ann_wnd>
 800e41a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e422:	d309      	bcc.n	800e438 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	8b5b      	ldrh	r3, [r3, #26]
 800e428:	f043 0302 	orr.w	r3, r3, #2
 800e42c:	b29a      	uxth	r2, r3
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f003 fe42 	bl	80120bc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	080163e8 	.word	0x080163e8
 800e444:	080166bc 	.word	0x080166bc
 800e448:	08016464 	.word	0x08016464
 800e44c:	080166d4 	.word	0x080166d4

0800e450 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e450:	b5b0      	push	{r4, r5, r7, lr}
 800e452:	b090      	sub	sp, #64	; 0x40
 800e454:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e456:	2300      	movs	r3, #0
 800e458:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e45c:	4b94      	ldr	r3, [pc, #592]	; (800e6b0 <tcp_slowtmr+0x260>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	3301      	adds	r3, #1
 800e462:	4a93      	ldr	r2, [pc, #588]	; (800e6b0 <tcp_slowtmr+0x260>)
 800e464:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e466:	4b93      	ldr	r3, [pc, #588]	; (800e6b4 <tcp_slowtmr+0x264>)
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	3301      	adds	r3, #1
 800e46c:	b2da      	uxtb	r2, r3
 800e46e:	4b91      	ldr	r3, [pc, #580]	; (800e6b4 <tcp_slowtmr+0x264>)
 800e470:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e472:	2300      	movs	r3, #0
 800e474:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e476:	4b90      	ldr	r3, [pc, #576]	; (800e6b8 <tcp_slowtmr+0x268>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e47c:	e29d      	b.n	800e9ba <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e480:	7d1b      	ldrb	r3, [r3, #20]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d106      	bne.n	800e494 <tcp_slowtmr+0x44>
 800e486:	4b8d      	ldr	r3, [pc, #564]	; (800e6bc <tcp_slowtmr+0x26c>)
 800e488:	f240 42be 	movw	r2, #1214	; 0x4be
 800e48c:	498c      	ldr	r1, [pc, #560]	; (800e6c0 <tcp_slowtmr+0x270>)
 800e48e:	488d      	ldr	r0, [pc, #564]	; (800e6c4 <tcp_slowtmr+0x274>)
 800e490:	f005 fb98 	bl	8013bc4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e496:	7d1b      	ldrb	r3, [r3, #20]
 800e498:	2b01      	cmp	r3, #1
 800e49a:	d106      	bne.n	800e4aa <tcp_slowtmr+0x5a>
 800e49c:	4b87      	ldr	r3, [pc, #540]	; (800e6bc <tcp_slowtmr+0x26c>)
 800e49e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e4a2:	4989      	ldr	r1, [pc, #548]	; (800e6c8 <tcp_slowtmr+0x278>)
 800e4a4:	4887      	ldr	r0, [pc, #540]	; (800e6c4 <tcp_slowtmr+0x274>)
 800e4a6:	f005 fb8d 	bl	8013bc4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ac:	7d1b      	ldrb	r3, [r3, #20]
 800e4ae:	2b0a      	cmp	r3, #10
 800e4b0:	d106      	bne.n	800e4c0 <tcp_slowtmr+0x70>
 800e4b2:	4b82      	ldr	r3, [pc, #520]	; (800e6bc <tcp_slowtmr+0x26c>)
 800e4b4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e4b8:	4984      	ldr	r1, [pc, #528]	; (800e6cc <tcp_slowtmr+0x27c>)
 800e4ba:	4882      	ldr	r0, [pc, #520]	; (800e6c4 <tcp_slowtmr+0x274>)
 800e4bc:	f005 fb82 	bl	8013bc4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c2:	7f9a      	ldrb	r2, [r3, #30]
 800e4c4:	4b7b      	ldr	r3, [pc, #492]	; (800e6b4 <tcp_slowtmr+0x264>)
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d105      	bne.n	800e4d8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e4d6:	e270      	b.n	800e9ba <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e4d8:	4b76      	ldr	r3, [pc, #472]	; (800e6b4 <tcp_slowtmr+0x264>)
 800e4da:	781a      	ldrb	r2, [r3, #0]
 800e4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4de:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ee:	7d1b      	ldrb	r3, [r3, #20]
 800e4f0:	2b02      	cmp	r3, #2
 800e4f2:	d10a      	bne.n	800e50a <tcp_slowtmr+0xba>
 800e4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4fa:	2b05      	cmp	r3, #5
 800e4fc:	d905      	bls.n	800e50a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e4fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e502:	3301      	adds	r3, #1
 800e504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e508:	e11e      	b.n	800e748 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e510:	2b0b      	cmp	r3, #11
 800e512:	d905      	bls.n	800e520 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e518:	3301      	adds	r3, #1
 800e51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e51e:	e113      	b.n	800e748 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e522:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e526:	2b00      	cmp	r3, #0
 800e528:	d075      	beq.n	800e616 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d006      	beq.n	800e540 <tcp_slowtmr+0xf0>
 800e532:	4b62      	ldr	r3, [pc, #392]	; (800e6bc <tcp_slowtmr+0x26c>)
 800e534:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e538:	4965      	ldr	r1, [pc, #404]	; (800e6d0 <tcp_slowtmr+0x280>)
 800e53a:	4862      	ldr	r0, [pc, #392]	; (800e6c4 <tcp_slowtmr+0x274>)
 800e53c:	f005 fb42 	bl	8013bc4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e544:	2b00      	cmp	r3, #0
 800e546:	d106      	bne.n	800e556 <tcp_slowtmr+0x106>
 800e548:	4b5c      	ldr	r3, [pc, #368]	; (800e6bc <tcp_slowtmr+0x26c>)
 800e54a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e54e:	4961      	ldr	r1, [pc, #388]	; (800e6d4 <tcp_slowtmr+0x284>)
 800e550:	485c      	ldr	r0, [pc, #368]	; (800e6c4 <tcp_slowtmr+0x274>)
 800e552:	f005 fb37 	bl	8013bc4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e558:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e55c:	2b0b      	cmp	r3, #11
 800e55e:	d905      	bls.n	800e56c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e564:	3301      	adds	r3, #1
 800e566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e56a:	e0ed      	b.n	800e748 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e572:	3b01      	subs	r3, #1
 800e574:	4a58      	ldr	r2, [pc, #352]	; (800e6d8 <tcp_slowtmr+0x288>)
 800e576:	5cd3      	ldrb	r3, [r2, r3]
 800e578:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e580:	7c7a      	ldrb	r2, [r7, #17]
 800e582:	429a      	cmp	r2, r3
 800e584:	d907      	bls.n	800e596 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e588:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e58c:	3301      	adds	r3, #1
 800e58e:	b2da      	uxtb	r2, r3
 800e590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e592:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e598:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e59c:	7c7a      	ldrb	r2, [r7, #17]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	f200 80d2 	bhi.w	800e748 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d108      	bne.n	800e5c4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e5b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5b4:	f004 fc2a 	bl	8012e0c <tcp_zero_window_probe>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d014      	beq.n	800e5e8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e5be:	2300      	movs	r3, #0
 800e5c0:	623b      	str	r3, [r7, #32]
 800e5c2:	e011      	b.n	800e5e8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5ce:	f003 faef 	bl	8011bb0 <tcp_split_unsent_seg>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d107      	bne.n	800e5e8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e5d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5da:	f003 fd6f 	bl	80120bc <tcp_output>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d101      	bne.n	800e5e8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e5e8:	6a3b      	ldr	r3, [r7, #32]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	f000 80ac 	beq.w	800e748 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e5fe:	2b06      	cmp	r3, #6
 800e600:	f200 80a2 	bhi.w	800e748 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e606:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e60a:	3301      	adds	r3, #1
 800e60c:	b2da      	uxtb	r2, r3
 800e60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e610:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e614:	e098      	b.n	800e748 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e618:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	db0f      	blt.n	800e640 <tcp_slowtmr+0x1f0>
 800e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e622:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e626:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d008      	beq.n	800e640 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e630:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e634:	b29b      	uxth	r3, r3
 800e636:	3301      	adds	r3, #1
 800e638:	b29b      	uxth	r3, r3
 800e63a:	b21a      	sxth	r2, r3
 800e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e642:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e648:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e64c:	429a      	cmp	r2, r3
 800e64e:	db7b      	blt.n	800e748 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e652:	f004 f825 	bl	80126a0 <tcp_rexmit_rto_prepare>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d007      	beq.n	800e66c <tcp_slowtmr+0x21c>
 800e65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e660:	2b00      	cmp	r3, #0
 800e662:	d171      	bne.n	800e748 <tcp_slowtmr+0x2f8>
 800e664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d06d      	beq.n	800e748 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66e:	7d1b      	ldrb	r3, [r3, #20]
 800e670:	2b02      	cmp	r3, #2
 800e672:	d03a      	beq.n	800e6ea <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e67a:	2b0c      	cmp	r3, #12
 800e67c:	bf28      	it	cs
 800e67e:	230c      	movcs	r3, #12
 800e680:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e684:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e688:	10db      	asrs	r3, r3, #3
 800e68a:	b21b      	sxth	r3, r3
 800e68c:	461a      	mov	r2, r3
 800e68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e690:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e694:	4413      	add	r3, r2
 800e696:	7efa      	ldrb	r2, [r7, #27]
 800e698:	4910      	ldr	r1, [pc, #64]	; (800e6dc <tcp_slowtmr+0x28c>)
 800e69a:	5c8a      	ldrb	r2, [r1, r2]
 800e69c:	4093      	lsls	r3, r2
 800e69e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	dc1a      	bgt.n	800e6e0 <tcp_slowtmr+0x290>
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	b21a      	sxth	r2, r3
 800e6ae:	e019      	b.n	800e6e4 <tcp_slowtmr+0x294>
 800e6b0:	24008260 	.word	0x24008260
 800e6b4:	24008276 	.word	0x24008276
 800e6b8:	2400826c 	.word	0x2400826c
 800e6bc:	080163e8 	.word	0x080163e8
 800e6c0:	08016764 	.word	0x08016764
 800e6c4:	08016464 	.word	0x08016464
 800e6c8:	08016790 	.word	0x08016790
 800e6cc:	080167bc 	.word	0x080167bc
 800e6d0:	080167ec 	.word	0x080167ec
 800e6d4:	08016820 	.word	0x08016820
 800e6d8:	08017e50 	.word	0x08017e50
 800e6dc:	08017e40 	.word	0x08017e40
 800e6e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	bf28      	it	cs
 800e700:	4613      	movcs	r3, r2
 800e702:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e704:	8a7b      	ldrh	r3, [r7, #18]
 800e706:	085b      	lsrs	r3, r3, #1
 800e708:	b29a      	uxth	r2, r3
 800e70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e712:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e71a:	005b      	lsls	r3, r3, #1
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	429a      	cmp	r2, r3
 800e720:	d206      	bcs.n	800e730 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e726:	005b      	lsls	r3, r3, #1
 800e728:	b29a      	uxth	r2, r3
 800e72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e732:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73c:	2200      	movs	r2, #0
 800e73e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e744:	f004 f81c 	bl	8012780 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74a:	7d1b      	ldrb	r3, [r3, #20]
 800e74c:	2b06      	cmp	r3, #6
 800e74e:	d111      	bne.n	800e774 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e752:	8b5b      	ldrh	r3, [r3, #26]
 800e754:	f003 0310 	and.w	r3, r3, #16
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d00b      	beq.n	800e774 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e75c:	4b9c      	ldr	r3, [pc, #624]	; (800e9d0 <tcp_slowtmr+0x580>)
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e762:	6a1b      	ldr	r3, [r3, #32]
 800e764:	1ad3      	subs	r3, r2, r3
 800e766:	2b28      	cmp	r3, #40	; 0x28
 800e768:	d904      	bls.n	800e774 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e76a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e76e:	3301      	adds	r3, #1
 800e770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e776:	7a5b      	ldrb	r3, [r3, #9]
 800e778:	f003 0308 	and.w	r3, r3, #8
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d04a      	beq.n	800e816 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e782:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e784:	2b04      	cmp	r3, #4
 800e786:	d003      	beq.n	800e790 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e78c:	2b07      	cmp	r3, #7
 800e78e:	d142      	bne.n	800e816 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e790:	4b8f      	ldr	r3, [pc, #572]	; (800e9d0 <tcp_slowtmr+0x580>)
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e796:	6a1b      	ldr	r3, [r3, #32]
 800e798:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e7a0:	4b8c      	ldr	r3, [pc, #560]	; (800e9d4 <tcp_slowtmr+0x584>)
 800e7a2:	440b      	add	r3, r1
 800e7a4:	498c      	ldr	r1, [pc, #560]	; (800e9d8 <tcp_slowtmr+0x588>)
 800e7a6:	fba1 1303 	umull	r1, r3, r1, r3
 800e7aa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d90a      	bls.n	800e7c6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e7ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7be:	3301      	adds	r3, #1
 800e7c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e7c4:	e027      	b.n	800e816 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7c6:	4b82      	ldr	r3, [pc, #520]	; (800e9d0 <tcp_slowtmr+0x580>)
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7cc:	6a1b      	ldr	r3, [r3, #32]
 800e7ce:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e7dc:	4618      	mov	r0, r3
 800e7de:	4b7f      	ldr	r3, [pc, #508]	; (800e9dc <tcp_slowtmr+0x58c>)
 800e7e0:	fb00 f303 	mul.w	r3, r0, r3
 800e7e4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e7e6:	497c      	ldr	r1, [pc, #496]	; (800e9d8 <tcp_slowtmr+0x588>)
 800e7e8:	fba1 1303 	umull	r1, r3, r1, r3
 800e7ec:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d911      	bls.n	800e816 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e7f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7f4:	f004 faca 	bl	8012d8c <tcp_keepalive>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e7fe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e802:	2b00      	cmp	r3, #0
 800e804:	d107      	bne.n	800e816 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e808:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e80c:	3301      	adds	r3, #1
 800e80e:	b2da      	uxtb	r2, r3
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d011      	beq.n	800e842 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e81e:	4b6c      	ldr	r3, [pc, #432]	; (800e9d0 <tcp_slowtmr+0x580>)
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e824:	6a1b      	ldr	r3, [r3, #32]
 800e826:	1ad2      	subs	r2, r2, r3
 800e828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e82e:	4619      	mov	r1, r3
 800e830:	460b      	mov	r3, r1
 800e832:	005b      	lsls	r3, r3, #1
 800e834:	440b      	add	r3, r1
 800e836:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e838:	429a      	cmp	r2, r3
 800e83a:	d302      	bcc.n	800e842 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e83c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e83e:	f000 fddd 	bl	800f3fc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e844:	7d1b      	ldrb	r3, [r3, #20]
 800e846:	2b03      	cmp	r3, #3
 800e848:	d10b      	bne.n	800e862 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e84a:	4b61      	ldr	r3, [pc, #388]	; (800e9d0 <tcp_slowtmr+0x580>)
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e850:	6a1b      	ldr	r3, [r3, #32]
 800e852:	1ad3      	subs	r3, r2, r3
 800e854:	2b28      	cmp	r3, #40	; 0x28
 800e856:	d904      	bls.n	800e862 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e85c:	3301      	adds	r3, #1
 800e85e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e864:	7d1b      	ldrb	r3, [r3, #20]
 800e866:	2b09      	cmp	r3, #9
 800e868:	d10b      	bne.n	800e882 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e86a:	4b59      	ldr	r3, [pc, #356]	; (800e9d0 <tcp_slowtmr+0x580>)
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e870:	6a1b      	ldr	r3, [r3, #32]
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	2bf0      	cmp	r3, #240	; 0xf0
 800e876:	d904      	bls.n	800e882 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e87c:	3301      	adds	r3, #1
 800e87e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e886:	2b00      	cmp	r3, #0
 800e888:	d060      	beq.n	800e94c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e890:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e892:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e894:	f000 fbfe 	bl	800f094 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d010      	beq.n	800e8c0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e89e:	4b50      	ldr	r3, [pc, #320]	; (800e9e0 <tcp_slowtmr+0x590>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d106      	bne.n	800e8b6 <tcp_slowtmr+0x466>
 800e8a8:	4b4e      	ldr	r3, [pc, #312]	; (800e9e4 <tcp_slowtmr+0x594>)
 800e8aa:	f240 526d 	movw	r2, #1389	; 0x56d
 800e8ae:	494e      	ldr	r1, [pc, #312]	; (800e9e8 <tcp_slowtmr+0x598>)
 800e8b0:	484e      	ldr	r0, [pc, #312]	; (800e9ec <tcp_slowtmr+0x59c>)
 800e8b2:	f005 f987 	bl	8013bc4 <iprintf>
        prev->next = pcb->next;
 800e8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b8:	68da      	ldr	r2, [r3, #12]
 800e8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8bc:	60da      	str	r2, [r3, #12]
 800e8be:	e00f      	b.n	800e8e0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e8c0:	4b47      	ldr	r3, [pc, #284]	; (800e9e0 <tcp_slowtmr+0x590>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d006      	beq.n	800e8d8 <tcp_slowtmr+0x488>
 800e8ca:	4b46      	ldr	r3, [pc, #280]	; (800e9e4 <tcp_slowtmr+0x594>)
 800e8cc:	f240 5271 	movw	r2, #1393	; 0x571
 800e8d0:	4947      	ldr	r1, [pc, #284]	; (800e9f0 <tcp_slowtmr+0x5a0>)
 800e8d2:	4846      	ldr	r0, [pc, #280]	; (800e9ec <tcp_slowtmr+0x59c>)
 800e8d4:	f005 f976 	bl	8013bc4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	4a40      	ldr	r2, [pc, #256]	; (800e9e0 <tcp_slowtmr+0x590>)
 800e8de:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e8e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d013      	beq.n	800e910 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e8f0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f4:	3304      	adds	r3, #4
 800e8f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8f8:	8ad2      	ldrh	r2, [r2, #22]
 800e8fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8fc:	8b09      	ldrh	r1, [r1, #24]
 800e8fe:	9102      	str	r1, [sp, #8]
 800e900:	9201      	str	r2, [sp, #4]
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	462b      	mov	r3, r5
 800e906:	4622      	mov	r2, r4
 800e908:	4601      	mov	r1, r0
 800e90a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e90c:	f004 f98a 	bl	8012c24 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e912:	691b      	ldr	r3, [r3, #16]
 800e914:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e918:	7d1b      	ldrb	r3, [r3, #20]
 800e91a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e926:	6838      	ldr	r0, [r7, #0]
 800e928:	f7ff f9f4 	bl	800dd14 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e92c:	4b31      	ldr	r3, [pc, #196]	; (800e9f4 <tcp_slowtmr+0x5a4>)
 800e92e:	2200      	movs	r2, #0
 800e930:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d004      	beq.n	800e942 <tcp_slowtmr+0x4f2>
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f06f 010c 	mvn.w	r1, #12
 800e93e:	68b8      	ldr	r0, [r7, #8]
 800e940:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e942:	4b2c      	ldr	r3, [pc, #176]	; (800e9f4 <tcp_slowtmr+0x5a4>)
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d037      	beq.n	800e9ba <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e94a:	e592      	b.n	800e472 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e952:	68db      	ldr	r3, [r3, #12]
 800e954:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e958:	7f1b      	ldrb	r3, [r3, #28]
 800e95a:	3301      	adds	r3, #1
 800e95c:	b2da      	uxtb	r2, r3
 800e95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e960:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e964:	7f1a      	ldrb	r2, [r3, #28]
 800e966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e968:	7f5b      	ldrb	r3, [r3, #29]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d325      	bcc.n	800e9ba <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e970:	2200      	movs	r2, #0
 800e972:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e974:	4b1f      	ldr	r3, [pc, #124]	; (800e9f4 <tcp_slowtmr+0x5a4>)
 800e976:	2200      	movs	r2, #0
 800e978:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e980:	2b00      	cmp	r3, #0
 800e982:	d00b      	beq.n	800e99c <tcp_slowtmr+0x54c>
 800e984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e98a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e98c:	6912      	ldr	r2, [r2, #16]
 800e98e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e990:	4610      	mov	r0, r2
 800e992:	4798      	blx	r3
 800e994:	4603      	mov	r3, r0
 800e996:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e99a:	e002      	b.n	800e9a2 <tcp_slowtmr+0x552>
 800e99c:	2300      	movs	r3, #0
 800e99e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e9a2:	4b14      	ldr	r3, [pc, #80]	; (800e9f4 <tcp_slowtmr+0x5a4>)
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d000      	beq.n	800e9ac <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e9aa:	e562      	b.n	800e472 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e9ac:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d102      	bne.n	800e9ba <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e9b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9b6:	f003 fb81 	bl	80120bc <tcp_output>
  while (pcb != NULL) {
 800e9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	f47f ad5e 	bne.w	800e47e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e9c6:	4b0c      	ldr	r3, [pc, #48]	; (800e9f8 <tcp_slowtmr+0x5a8>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e9cc:	e069      	b.n	800eaa2 <tcp_slowtmr+0x652>
 800e9ce:	bf00      	nop
 800e9d0:	24008260 	.word	0x24008260
 800e9d4:	000a4cb8 	.word	0x000a4cb8
 800e9d8:	10624dd3 	.word	0x10624dd3
 800e9dc:	000124f8 	.word	0x000124f8
 800e9e0:	2400826c 	.word	0x2400826c
 800e9e4:	080163e8 	.word	0x080163e8
 800e9e8:	08016858 	.word	0x08016858
 800e9ec:	08016464 	.word	0x08016464
 800e9f0:	08016884 	.word	0x08016884
 800e9f4:	24008274 	.word	0x24008274
 800e9f8:	24008270 	.word	0x24008270
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fe:	7d1b      	ldrb	r3, [r3, #20]
 800ea00:	2b0a      	cmp	r3, #10
 800ea02:	d006      	beq.n	800ea12 <tcp_slowtmr+0x5c2>
 800ea04:	4b2b      	ldr	r3, [pc, #172]	; (800eab4 <tcp_slowtmr+0x664>)
 800ea06:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ea0a:	492b      	ldr	r1, [pc, #172]	; (800eab8 <tcp_slowtmr+0x668>)
 800ea0c:	482b      	ldr	r0, [pc, #172]	; (800eabc <tcp_slowtmr+0x66c>)
 800ea0e:	f005 f8d9 	bl	8013bc4 <iprintf>
    pcb_remove = 0;
 800ea12:	2300      	movs	r3, #0
 800ea14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ea18:	4b29      	ldr	r3, [pc, #164]	; (800eac0 <tcp_slowtmr+0x670>)
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1e:	6a1b      	ldr	r3, [r3, #32]
 800ea20:	1ad3      	subs	r3, r2, r3
 800ea22:	2bf0      	cmp	r3, #240	; 0xf0
 800ea24:	d904      	bls.n	800ea30 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ea26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ea30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d02f      	beq.n	800ea98 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ea38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea3a:	f000 fb2b 	bl	800f094 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ea3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d010      	beq.n	800ea66 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ea44:	4b1f      	ldr	r3, [pc, #124]	; (800eac4 <tcp_slowtmr+0x674>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d106      	bne.n	800ea5c <tcp_slowtmr+0x60c>
 800ea4e:	4b19      	ldr	r3, [pc, #100]	; (800eab4 <tcp_slowtmr+0x664>)
 800ea50:	f240 52af 	movw	r2, #1455	; 0x5af
 800ea54:	491c      	ldr	r1, [pc, #112]	; (800eac8 <tcp_slowtmr+0x678>)
 800ea56:	4819      	ldr	r0, [pc, #100]	; (800eabc <tcp_slowtmr+0x66c>)
 800ea58:	f005 f8b4 	bl	8013bc4 <iprintf>
        prev->next = pcb->next;
 800ea5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5e:	68da      	ldr	r2, [r3, #12]
 800ea60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea62:	60da      	str	r2, [r3, #12]
 800ea64:	e00f      	b.n	800ea86 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ea66:	4b17      	ldr	r3, [pc, #92]	; (800eac4 <tcp_slowtmr+0x674>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d006      	beq.n	800ea7e <tcp_slowtmr+0x62e>
 800ea70:	4b10      	ldr	r3, [pc, #64]	; (800eab4 <tcp_slowtmr+0x664>)
 800ea72:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ea76:	4915      	ldr	r1, [pc, #84]	; (800eacc <tcp_slowtmr+0x67c>)
 800ea78:	4810      	ldr	r0, [pc, #64]	; (800eabc <tcp_slowtmr+0x66c>)
 800ea7a:	f005 f8a3 	bl	8013bc4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ea7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	4a10      	ldr	r2, [pc, #64]	; (800eac4 <tcp_slowtmr+0x674>)
 800ea84:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ea86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea88:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ea8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ea90:	69f8      	ldr	r0, [r7, #28]
 800ea92:	f7ff f93f 	bl	800dd14 <tcp_free>
 800ea96:	e004      	b.n	800eaa2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ea98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ea9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800eaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1a9      	bne.n	800e9fc <tcp_slowtmr+0x5ac>
    }
  }
}
 800eaa8:	bf00      	nop
 800eaaa:	bf00      	nop
 800eaac:	3730      	adds	r7, #48	; 0x30
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bdb0      	pop	{r4, r5, r7, pc}
 800eab2:	bf00      	nop
 800eab4:	080163e8 	.word	0x080163e8
 800eab8:	080168b0 	.word	0x080168b0
 800eabc:	08016464 	.word	0x08016464
 800eac0:	24008260 	.word	0x24008260
 800eac4:	24008270 	.word	0x24008270
 800eac8:	080168e0 	.word	0x080168e0
 800eacc:	08016908 	.word	0x08016908

0800ead0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ead6:	4b2d      	ldr	r3, [pc, #180]	; (800eb8c <tcp_fasttmr+0xbc>)
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	3301      	adds	r3, #1
 800eadc:	b2da      	uxtb	r2, r3
 800eade:	4b2b      	ldr	r3, [pc, #172]	; (800eb8c <tcp_fasttmr+0xbc>)
 800eae0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800eae2:	4b2b      	ldr	r3, [pc, #172]	; (800eb90 <tcp_fasttmr+0xc0>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eae8:	e048      	b.n	800eb7c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	7f9a      	ldrb	r2, [r3, #30]
 800eaee:	4b27      	ldr	r3, [pc, #156]	; (800eb8c <tcp_fasttmr+0xbc>)
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d03f      	beq.n	800eb76 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800eaf6:	4b25      	ldr	r3, [pc, #148]	; (800eb8c <tcp_fasttmr+0xbc>)
 800eaf8:	781a      	ldrb	r2, [r3, #0]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	8b5b      	ldrh	r3, [r3, #26]
 800eb02:	f003 0301 	and.w	r3, r3, #1
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d010      	beq.n	800eb2c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	8b5b      	ldrh	r3, [r3, #26]
 800eb0e:	f043 0302 	orr.w	r3, r3, #2
 800eb12:	b29a      	uxth	r2, r3
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f003 facf 	bl	80120bc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	8b5b      	ldrh	r3, [r3, #26]
 800eb22:	f023 0303 	bic.w	r3, r3, #3
 800eb26:	b29a      	uxth	r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	8b5b      	ldrh	r3, [r3, #26]
 800eb30:	f003 0308 	and.w	r3, r3, #8
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d009      	beq.n	800eb4c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	8b5b      	ldrh	r3, [r3, #26]
 800eb3c:	f023 0308 	bic.w	r3, r3, #8
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f7ff fa78 	bl	800e03c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d00a      	beq.n	800eb70 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eb5a:	4b0e      	ldr	r3, [pc, #56]	; (800eb94 <tcp_fasttmr+0xc4>)
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f000 f819 	bl	800eb98 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800eb66:	4b0b      	ldr	r3, [pc, #44]	; (800eb94 <tcp_fasttmr+0xc4>)
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d000      	beq.n	800eb70 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800eb6e:	e7b8      	b.n	800eae2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	607b      	str	r3, [r7, #4]
 800eb74:	e002      	b.n	800eb7c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d1b3      	bne.n	800eaea <tcp_fasttmr+0x1a>
    }
  }
}
 800eb82:	bf00      	nop
 800eb84:	bf00      	nop
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	24008276 	.word	0x24008276
 800eb90:	2400826c 	.word	0x2400826c
 800eb94:	24008274 	.word	0x24008274

0800eb98 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800eb98:	b590      	push	{r4, r7, lr}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d109      	bne.n	800ebba <tcp_process_refused_data+0x22>
 800eba6:	4b37      	ldr	r3, [pc, #220]	; (800ec84 <tcp_process_refused_data+0xec>)
 800eba8:	f240 6209 	movw	r2, #1545	; 0x609
 800ebac:	4936      	ldr	r1, [pc, #216]	; (800ec88 <tcp_process_refused_data+0xf0>)
 800ebae:	4837      	ldr	r0, [pc, #220]	; (800ec8c <tcp_process_refused_data+0xf4>)
 800ebb0:	f005 f808 	bl	8013bc4 <iprintf>
 800ebb4:	f06f 030f 	mvn.w	r3, #15
 800ebb8:	e060      	b.n	800ec7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebbe:	7b5b      	ldrb	r3, [r3, #13]
 800ebc0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebc6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00b      	beq.n	800ebf0 <tcp_process_refused_data+0x58>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6918      	ldr	r0, [r3, #16]
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	68ba      	ldr	r2, [r7, #8]
 800ebe6:	6879      	ldr	r1, [r7, #4]
 800ebe8:	47a0      	blx	r4
 800ebea:	4603      	mov	r3, r0
 800ebec:	73fb      	strb	r3, [r7, #15]
 800ebee:	e007      	b.n	800ec00 <tcp_process_refused_data+0x68>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	68ba      	ldr	r2, [r7, #8]
 800ebf4:	6879      	ldr	r1, [r7, #4]
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	f000 f8a4 	bl	800ed44 <tcp_recv_null>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ec00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d12a      	bne.n	800ec5e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ec08:	7bbb      	ldrb	r3, [r7, #14]
 800ec0a:	f003 0320 	and.w	r3, r3, #32
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d033      	beq.n	800ec7a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ec1a:	d005      	beq.n	800ec28 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec20:	3301      	adds	r3, #1
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00b      	beq.n	800ec4a <tcp_process_refused_data+0xb2>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6918      	ldr	r0, [r3, #16]
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	2200      	movs	r2, #0
 800ec40:	6879      	ldr	r1, [r7, #4]
 800ec42:	47a0      	blx	r4
 800ec44:	4603      	mov	r3, r0
 800ec46:	73fb      	strb	r3, [r7, #15]
 800ec48:	e001      	b.n	800ec4e <tcp_process_refused_data+0xb6>
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ec4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec52:	f113 0f0d 	cmn.w	r3, #13
 800ec56:	d110      	bne.n	800ec7a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ec58:	f06f 030c 	mvn.w	r3, #12
 800ec5c:	e00e      	b.n	800ec7c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ec5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec62:	f113 0f0d 	cmn.w	r3, #13
 800ec66:	d102      	bne.n	800ec6e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ec68:	f06f 030c 	mvn.w	r3, #12
 800ec6c:	e006      	b.n	800ec7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	68ba      	ldr	r2, [r7, #8]
 800ec72:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ec74:	f06f 0304 	mvn.w	r3, #4
 800ec78:	e000      	b.n	800ec7c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3714      	adds	r7, #20
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd90      	pop	{r4, r7, pc}
 800ec84:	080163e8 	.word	0x080163e8
 800ec88:	08016930 	.word	0x08016930
 800ec8c:	08016464 	.word	0x08016464

0800ec90 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ec98:	e007      	b.n	800ecaa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 f80a 	bl	800ecba <tcp_seg_free>
    seg = next;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d1f4      	bne.n	800ec9a <tcp_segs_free+0xa>
  }
}
 800ecb0:	bf00      	nop
 800ecb2:	bf00      	nop
 800ecb4:	3710      	adds	r7, #16
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}

0800ecba <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ecba:	b580      	push	{r7, lr}
 800ecbc:	b082      	sub	sp, #8
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00c      	beq.n	800ece2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d004      	beq.n	800ecda <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7fe fd6d 	bl	800d7b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ecda:	6879      	ldr	r1, [r7, #4]
 800ecdc:	2003      	movs	r0, #3
 800ecde:	f7fd ff07 	bl	800caf0 <memp_free>
  }
}
 800ece2:	bf00      	nop
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
	...

0800ecec <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d106      	bne.n	800ed08 <tcp_seg_copy+0x1c>
 800ecfa:	4b0f      	ldr	r3, [pc, #60]	; (800ed38 <tcp_seg_copy+0x4c>)
 800ecfc:	f240 6282 	movw	r2, #1666	; 0x682
 800ed00:	490e      	ldr	r1, [pc, #56]	; (800ed3c <tcp_seg_copy+0x50>)
 800ed02:	480f      	ldr	r0, [pc, #60]	; (800ed40 <tcp_seg_copy+0x54>)
 800ed04:	f004 ff5e 	bl	8013bc4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ed08:	2003      	movs	r0, #3
 800ed0a:	f7fd fe81 	bl	800ca10 <memp_malloc>
 800ed0e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d101      	bne.n	800ed1a <tcp_seg_copy+0x2e>
    return NULL;
 800ed16:	2300      	movs	r3, #0
 800ed18:	e00a      	b.n	800ed30 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ed1a:	2210      	movs	r2, #16
 800ed1c:	6879      	ldr	r1, [r7, #4]
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	f004 ff3a 	bl	8013b98 <memcpy>
  pbuf_ref(cseg->p);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7fe fde3 	bl	800d8f4 <pbuf_ref>
  return cseg;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3710      	adds	r7, #16
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}
 800ed38:	080163e8 	.word	0x080163e8
 800ed3c:	08016974 	.word	0x08016974
 800ed40:	08016464 	.word	0x08016464

0800ed44 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	60f8      	str	r0, [r7, #12]
 800ed4c:	60b9      	str	r1, [r7, #8]
 800ed4e:	607a      	str	r2, [r7, #4]
 800ed50:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d109      	bne.n	800ed6c <tcp_recv_null+0x28>
 800ed58:	4b12      	ldr	r3, [pc, #72]	; (800eda4 <tcp_recv_null+0x60>)
 800ed5a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ed5e:	4912      	ldr	r1, [pc, #72]	; (800eda8 <tcp_recv_null+0x64>)
 800ed60:	4812      	ldr	r0, [pc, #72]	; (800edac <tcp_recv_null+0x68>)
 800ed62:	f004 ff2f 	bl	8013bc4 <iprintf>
 800ed66:	f06f 030f 	mvn.w	r3, #15
 800ed6a:	e016      	b.n	800ed9a <tcp_recv_null+0x56>

  if (p != NULL) {
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d009      	beq.n	800ed86 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	891b      	ldrh	r3, [r3, #8]
 800ed76:	4619      	mov	r1, r3
 800ed78:	68b8      	ldr	r0, [r7, #8]
 800ed7a:	f7ff fb19 	bl	800e3b0 <tcp_recved>
    pbuf_free(p);
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f7fe fd18 	bl	800d7b4 <pbuf_free>
 800ed84:	e008      	b.n	800ed98 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ed86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d104      	bne.n	800ed98 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ed8e:	68b8      	ldr	r0, [r7, #8]
 800ed90:	f7ff f9be 	bl	800e110 <tcp_close>
 800ed94:	4603      	mov	r3, r0
 800ed96:	e000      	b.n	800ed9a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ed98:	2300      	movs	r3, #0
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3710      	adds	r7, #16
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	080163e8 	.word	0x080163e8
 800eda8:	08016990 	.word	0x08016990
 800edac:	08016464 	.word	0x08016464

0800edb0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b086      	sub	sp, #24
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	4603      	mov	r3, r0
 800edb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800edba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	db01      	blt.n	800edc6 <tcp_kill_prio+0x16>
 800edc2:	79fb      	ldrb	r3, [r7, #7]
 800edc4:	e000      	b.n	800edc8 <tcp_kill_prio+0x18>
 800edc6:	237f      	movs	r3, #127	; 0x7f
 800edc8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800edca:	7afb      	ldrb	r3, [r7, #11]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d034      	beq.n	800ee3a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800edd0:	7afb      	ldrb	r3, [r7, #11]
 800edd2:	3b01      	subs	r3, #1
 800edd4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800edd6:	2300      	movs	r3, #0
 800edd8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800edda:	2300      	movs	r3, #0
 800eddc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800edde:	4b19      	ldr	r3, [pc, #100]	; (800ee44 <tcp_kill_prio+0x94>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	617b      	str	r3, [r7, #20]
 800ede4:	e01f      	b.n	800ee26 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	7d5b      	ldrb	r3, [r3, #21]
 800edea:	7afa      	ldrb	r2, [r7, #11]
 800edec:	429a      	cmp	r2, r3
 800edee:	d80c      	bhi.n	800ee0a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800edf4:	7afa      	ldrb	r2, [r7, #11]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d112      	bne.n	800ee20 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800edfa:	4b13      	ldr	r3, [pc, #76]	; (800ee48 <tcp_kill_prio+0x98>)
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	6a1b      	ldr	r3, [r3, #32]
 800ee02:	1ad3      	subs	r3, r2, r3
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d80a      	bhi.n	800ee20 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ee0a:	4b0f      	ldr	r3, [pc, #60]	; (800ee48 <tcp_kill_prio+0x98>)
 800ee0c:	681a      	ldr	r2, [r3, #0]
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	6a1b      	ldr	r3, [r3, #32]
 800ee12:	1ad3      	subs	r3, r2, r3
 800ee14:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	7d5b      	ldrb	r3, [r3, #21]
 800ee1e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	617b      	str	r3, [r7, #20]
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1dc      	bne.n	800ede6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d004      	beq.n	800ee3c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ee32:	6938      	ldr	r0, [r7, #16]
 800ee34:	f7ff fa56 	bl	800e2e4 <tcp_abort>
 800ee38:	e000      	b.n	800ee3c <tcp_kill_prio+0x8c>
    return;
 800ee3a:	bf00      	nop
  }
}
 800ee3c:	3718      	adds	r7, #24
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	2400826c 	.word	0x2400826c
 800ee48:	24008260 	.word	0x24008260

0800ee4c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b086      	sub	sp, #24
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	4603      	mov	r3, r0
 800ee54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ee56:	79fb      	ldrb	r3, [r7, #7]
 800ee58:	2b08      	cmp	r3, #8
 800ee5a:	d009      	beq.n	800ee70 <tcp_kill_state+0x24>
 800ee5c:	79fb      	ldrb	r3, [r7, #7]
 800ee5e:	2b09      	cmp	r3, #9
 800ee60:	d006      	beq.n	800ee70 <tcp_kill_state+0x24>
 800ee62:	4b1a      	ldr	r3, [pc, #104]	; (800eecc <tcp_kill_state+0x80>)
 800ee64:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ee68:	4919      	ldr	r1, [pc, #100]	; (800eed0 <tcp_kill_state+0x84>)
 800ee6a:	481a      	ldr	r0, [pc, #104]	; (800eed4 <tcp_kill_state+0x88>)
 800ee6c:	f004 feaa 	bl	8013bc4 <iprintf>

  inactivity = 0;
 800ee70:	2300      	movs	r3, #0
 800ee72:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ee74:	2300      	movs	r3, #0
 800ee76:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee78:	4b17      	ldr	r3, [pc, #92]	; (800eed8 <tcp_kill_state+0x8c>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	617b      	str	r3, [r7, #20]
 800ee7e:	e017      	b.n	800eeb0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	7d1b      	ldrb	r3, [r3, #20]
 800ee84:	79fa      	ldrb	r2, [r7, #7]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d10f      	bne.n	800eeaa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ee8a:	4b14      	ldr	r3, [pc, #80]	; (800eedc <tcp_kill_state+0x90>)
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	6a1b      	ldr	r3, [r3, #32]
 800ee92:	1ad3      	subs	r3, r2, r3
 800ee94:	68fa      	ldr	r2, [r7, #12]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d807      	bhi.n	800eeaa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ee9a:	4b10      	ldr	r3, [pc, #64]	; (800eedc <tcp_kill_state+0x90>)
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	6a1b      	ldr	r3, [r3, #32]
 800eea2:	1ad3      	subs	r3, r2, r3
 800eea4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	617b      	str	r3, [r7, #20]
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d1e4      	bne.n	800ee80 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d003      	beq.n	800eec4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eebc:	2100      	movs	r1, #0
 800eebe:	6938      	ldr	r0, [r7, #16]
 800eec0:	f7ff f952 	bl	800e168 <tcp_abandon>
  }
}
 800eec4:	bf00      	nop
 800eec6:	3718      	adds	r7, #24
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	080163e8 	.word	0x080163e8
 800eed0:	080169ac 	.word	0x080169ac
 800eed4:	08016464 	.word	0x08016464
 800eed8:	2400826c 	.word	0x2400826c
 800eedc:	24008260 	.word	0x24008260

0800eee0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800eee6:	2300      	movs	r3, #0
 800eee8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800eeea:	2300      	movs	r3, #0
 800eeec:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eeee:	4b12      	ldr	r3, [pc, #72]	; (800ef38 <tcp_kill_timewait+0x58>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	60fb      	str	r3, [r7, #12]
 800eef4:	e012      	b.n	800ef1c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eef6:	4b11      	ldr	r3, [pc, #68]	; (800ef3c <tcp_kill_timewait+0x5c>)
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	6a1b      	ldr	r3, [r3, #32]
 800eefe:	1ad3      	subs	r3, r2, r3
 800ef00:	687a      	ldr	r2, [r7, #4]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d807      	bhi.n	800ef16 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ef06:	4b0d      	ldr	r3, [pc, #52]	; (800ef3c <tcp_kill_timewait+0x5c>)
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	6a1b      	ldr	r3, [r3, #32]
 800ef0e:	1ad3      	subs	r3, r2, r3
 800ef10:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	68db      	ldr	r3, [r3, #12]
 800ef1a:	60fb      	str	r3, [r7, #12]
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d1e9      	bne.n	800eef6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d002      	beq.n	800ef2e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ef28:	68b8      	ldr	r0, [r7, #8]
 800ef2a:	f7ff f9db 	bl	800e2e4 <tcp_abort>
  }
}
 800ef2e:	bf00      	nop
 800ef30:	3710      	adds	r7, #16
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	24008270 	.word	0x24008270
 800ef3c:	24008260 	.word	0x24008260

0800ef40 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ef46:	4b10      	ldr	r3, [pc, #64]	; (800ef88 <tcp_handle_closepend+0x48>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ef4c:	e014      	b.n	800ef78 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	8b5b      	ldrh	r3, [r3, #26]
 800ef58:	f003 0308 	and.w	r3, r3, #8
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d009      	beq.n	800ef74 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	8b5b      	ldrh	r3, [r3, #26]
 800ef64:	f023 0308 	bic.w	r3, r3, #8
 800ef68:	b29a      	uxth	r2, r3
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f7ff f864 	bl	800e03c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1e7      	bne.n	800ef4e <tcp_handle_closepend+0xe>
  }
}
 800ef7e:	bf00      	nop
 800ef80:	bf00      	nop
 800ef82:	3708      	adds	r7, #8
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	2400826c 	.word	0x2400826c

0800ef8c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b084      	sub	sp, #16
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	4603      	mov	r3, r0
 800ef94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef96:	2001      	movs	r0, #1
 800ef98:	f7fd fd3a 	bl	800ca10 <memp_malloc>
 800ef9c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d126      	bne.n	800eff2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800efa4:	f7ff ffcc 	bl	800ef40 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800efa8:	f7ff ff9a 	bl	800eee0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efac:	2001      	movs	r0, #1
 800efae:	f7fd fd2f 	bl	800ca10 <memp_malloc>
 800efb2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d11b      	bne.n	800eff2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800efba:	2009      	movs	r0, #9
 800efbc:	f7ff ff46 	bl	800ee4c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efc0:	2001      	movs	r0, #1
 800efc2:	f7fd fd25 	bl	800ca10 <memp_malloc>
 800efc6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d111      	bne.n	800eff2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800efce:	2008      	movs	r0, #8
 800efd0:	f7ff ff3c 	bl	800ee4c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efd4:	2001      	movs	r0, #1
 800efd6:	f7fd fd1b 	bl	800ca10 <memp_malloc>
 800efda:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d107      	bne.n	800eff2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800efe2:	79fb      	ldrb	r3, [r7, #7]
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7ff fee3 	bl	800edb0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efea:	2001      	movs	r0, #1
 800efec:	f7fd fd10 	bl	800ca10 <memp_malloc>
 800eff0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d03f      	beq.n	800f078 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800eff8:	229c      	movs	r2, #156	; 0x9c
 800effa:	2100      	movs	r1, #0
 800effc:	68f8      	ldr	r0, [r7, #12]
 800effe:	f004 fdd9 	bl	8013bb4 <memset>
    pcb->prio = prio;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	79fa      	ldrb	r2, [r7, #7]
 800f006:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f00e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f018:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	22ff      	movs	r2, #255	; 0xff
 800f026:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f02e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2206      	movs	r2, #6
 800f034:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2206      	movs	r2, #6
 800f03c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f044:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2201      	movs	r2, #1
 800f04a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f04e:	4b0d      	ldr	r3, [pc, #52]	; (800f084 <tcp_alloc+0xf8>)
 800f050:	681a      	ldr	r2, [r3, #0]
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f056:	4b0c      	ldr	r3, [pc, #48]	; (800f088 <tcp_alloc+0xfc>)
 800f058:	781a      	ldrb	r2, [r3, #0]
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f064:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	4a08      	ldr	r2, [pc, #32]	; (800f08c <tcp_alloc+0x100>)
 800f06c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	4a07      	ldr	r2, [pc, #28]	; (800f090 <tcp_alloc+0x104>)
 800f074:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f078:	68fb      	ldr	r3, [r7, #12]
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3710      	adds	r7, #16
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
 800f082:	bf00      	nop
 800f084:	24008260 	.word	0x24008260
 800f088:	24008276 	.word	0x24008276
 800f08c:	0800ed45 	.word	0x0800ed45
 800f090:	006ddd00 	.word	0x006ddd00

0800f094 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d107      	bne.n	800f0b2 <tcp_pcb_purge+0x1e>
 800f0a2:	4b21      	ldr	r3, [pc, #132]	; (800f128 <tcp_pcb_purge+0x94>)
 800f0a4:	f640 0251 	movw	r2, #2129	; 0x851
 800f0a8:	4920      	ldr	r1, [pc, #128]	; (800f12c <tcp_pcb_purge+0x98>)
 800f0aa:	4821      	ldr	r0, [pc, #132]	; (800f130 <tcp_pcb_purge+0x9c>)
 800f0ac:	f004 fd8a 	bl	8013bc4 <iprintf>
 800f0b0:	e037      	b.n	800f122 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	7d1b      	ldrb	r3, [r3, #20]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d033      	beq.n	800f122 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f0be:	2b0a      	cmp	r3, #10
 800f0c0:	d02f      	beq.n	800f122 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d02b      	beq.n	800f122 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d007      	beq.n	800f0e2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7fe fb6c 	bl	800d7b4 <pbuf_free>
      pcb->refused_data = NULL;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d002      	beq.n	800f0f0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 f986 	bl	800f3fc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0f6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7ff fdc7 	bl	800ec90 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f106:	4618      	mov	r0, r3
 800f108:	f7ff fdc2 	bl	800ec90 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	66da      	str	r2, [r3, #108]	; 0x6c
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f122:	3708      	adds	r7, #8
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}
 800f128:	080163e8 	.word	0x080163e8
 800f12c:	08016a6c 	.word	0x08016a6c
 800f130:	08016464 	.word	0x08016464

0800f134 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d106      	bne.n	800f152 <tcp_pcb_remove+0x1e>
 800f144:	4b3e      	ldr	r3, [pc, #248]	; (800f240 <tcp_pcb_remove+0x10c>)
 800f146:	f640 0283 	movw	r2, #2179	; 0x883
 800f14a:	493e      	ldr	r1, [pc, #248]	; (800f244 <tcp_pcb_remove+0x110>)
 800f14c:	483e      	ldr	r0, [pc, #248]	; (800f248 <tcp_pcb_remove+0x114>)
 800f14e:	f004 fd39 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d106      	bne.n	800f166 <tcp_pcb_remove+0x32>
 800f158:	4b39      	ldr	r3, [pc, #228]	; (800f240 <tcp_pcb_remove+0x10c>)
 800f15a:	f640 0284 	movw	r2, #2180	; 0x884
 800f15e:	493b      	ldr	r1, [pc, #236]	; (800f24c <tcp_pcb_remove+0x118>)
 800f160:	4839      	ldr	r0, [pc, #228]	; (800f248 <tcp_pcb_remove+0x114>)
 800f162:	f004 fd2f 	bl	8013bc4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	683a      	ldr	r2, [r7, #0]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d105      	bne.n	800f17c <tcp_pcb_remove+0x48>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	68da      	ldr	r2, [r3, #12]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	601a      	str	r2, [r3, #0]
 800f17a:	e013      	b.n	800f1a4 <tcp_pcb_remove+0x70>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	60fb      	str	r3, [r7, #12]
 800f182:	e00c      	b.n	800f19e <tcp_pcb_remove+0x6a>
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	683a      	ldr	r2, [r7, #0]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d104      	bne.n	800f198 <tcp_pcb_remove+0x64>
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	68da      	ldr	r2, [r3, #12]
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	60da      	str	r2, [r3, #12]
 800f196:	e005      	b.n	800f1a4 <tcp_pcb_remove+0x70>
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	68db      	ldr	r3, [r3, #12]
 800f19c:	60fb      	str	r3, [r7, #12]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d1ef      	bne.n	800f184 <tcp_pcb_remove+0x50>
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f1aa:	6838      	ldr	r0, [r7, #0]
 800f1ac:	f7ff ff72 	bl	800f094 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	7d1b      	ldrb	r3, [r3, #20]
 800f1b4:	2b0a      	cmp	r3, #10
 800f1b6:	d013      	beq.n	800f1e0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d00f      	beq.n	800f1e0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	8b5b      	ldrh	r3, [r3, #26]
 800f1c4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d009      	beq.n	800f1e0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	8b5b      	ldrh	r3, [r3, #26]
 800f1d0:	f043 0302 	orr.w	r3, r3, #2
 800f1d4:	b29a      	uxth	r2, r3
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f1da:	6838      	ldr	r0, [r7, #0]
 800f1dc:	f002 ff6e 	bl	80120bc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	7d1b      	ldrb	r3, [r3, #20]
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d020      	beq.n	800f22a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d006      	beq.n	800f1fe <tcp_pcb_remove+0xca>
 800f1f0:	4b13      	ldr	r3, [pc, #76]	; (800f240 <tcp_pcb_remove+0x10c>)
 800f1f2:	f640 0293 	movw	r2, #2195	; 0x893
 800f1f6:	4916      	ldr	r1, [pc, #88]	; (800f250 <tcp_pcb_remove+0x11c>)
 800f1f8:	4813      	ldr	r0, [pc, #76]	; (800f248 <tcp_pcb_remove+0x114>)
 800f1fa:	f004 fce3 	bl	8013bc4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f202:	2b00      	cmp	r3, #0
 800f204:	d006      	beq.n	800f214 <tcp_pcb_remove+0xe0>
 800f206:	4b0e      	ldr	r3, [pc, #56]	; (800f240 <tcp_pcb_remove+0x10c>)
 800f208:	f640 0294 	movw	r2, #2196	; 0x894
 800f20c:	4911      	ldr	r1, [pc, #68]	; (800f254 <tcp_pcb_remove+0x120>)
 800f20e:	480e      	ldr	r0, [pc, #56]	; (800f248 <tcp_pcb_remove+0x114>)
 800f210:	f004 fcd8 	bl	8013bc4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d006      	beq.n	800f22a <tcp_pcb_remove+0xf6>
 800f21c:	4b08      	ldr	r3, [pc, #32]	; (800f240 <tcp_pcb_remove+0x10c>)
 800f21e:	f640 0296 	movw	r2, #2198	; 0x896
 800f222:	490d      	ldr	r1, [pc, #52]	; (800f258 <tcp_pcb_remove+0x124>)
 800f224:	4808      	ldr	r0, [pc, #32]	; (800f248 <tcp_pcb_remove+0x114>)
 800f226:	f004 fccd 	bl	8013bc4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	2200      	movs	r2, #0
 800f22e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	2200      	movs	r2, #0
 800f234:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f236:	bf00      	nop
 800f238:	3710      	adds	r7, #16
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	080163e8 	.word	0x080163e8
 800f244:	08016a88 	.word	0x08016a88
 800f248:	08016464 	.word	0x08016464
 800f24c:	08016aa4 	.word	0x08016aa4
 800f250:	08016ac4 	.word	0x08016ac4
 800f254:	08016adc 	.word	0x08016adc
 800f258:	08016af8 	.word	0x08016af8

0800f25c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d106      	bne.n	800f278 <tcp_next_iss+0x1c>
 800f26a:	4b0a      	ldr	r3, [pc, #40]	; (800f294 <tcp_next_iss+0x38>)
 800f26c:	f640 02af 	movw	r2, #2223	; 0x8af
 800f270:	4909      	ldr	r1, [pc, #36]	; (800f298 <tcp_next_iss+0x3c>)
 800f272:	480a      	ldr	r0, [pc, #40]	; (800f29c <tcp_next_iss+0x40>)
 800f274:	f004 fca6 	bl	8013bc4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f278:	4b09      	ldr	r3, [pc, #36]	; (800f2a0 <tcp_next_iss+0x44>)
 800f27a:	681a      	ldr	r2, [r3, #0]
 800f27c:	4b09      	ldr	r3, [pc, #36]	; (800f2a4 <tcp_next_iss+0x48>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4413      	add	r3, r2
 800f282:	4a07      	ldr	r2, [pc, #28]	; (800f2a0 <tcp_next_iss+0x44>)
 800f284:	6013      	str	r3, [r2, #0]
  return iss;
 800f286:	4b06      	ldr	r3, [pc, #24]	; (800f2a0 <tcp_next_iss+0x44>)
 800f288:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3708      	adds	r7, #8
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}
 800f292:	bf00      	nop
 800f294:	080163e8 	.word	0x080163e8
 800f298:	08016b10 	.word	0x08016b10
 800f29c:	08016464 	.word	0x08016464
 800f2a0:	2400002c 	.word	0x2400002c
 800f2a4:	24008260 	.word	0x24008260

0800f2a8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b086      	sub	sp, #24
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	607a      	str	r2, [r7, #4]
 800f2b4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d106      	bne.n	800f2ca <tcp_eff_send_mss_netif+0x22>
 800f2bc:	4b14      	ldr	r3, [pc, #80]	; (800f310 <tcp_eff_send_mss_netif+0x68>)
 800f2be:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f2c2:	4914      	ldr	r1, [pc, #80]	; (800f314 <tcp_eff_send_mss_netif+0x6c>)
 800f2c4:	4814      	ldr	r0, [pc, #80]	; (800f318 <tcp_eff_send_mss_netif+0x70>)
 800f2c6:	f004 fc7d 	bl	8013bc4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d101      	bne.n	800f2d4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f2d0:	89fb      	ldrh	r3, [r7, #14]
 800f2d2:	e019      	b.n	800f308 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2d8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f2da:	8afb      	ldrh	r3, [r7, #22]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d012      	beq.n	800f306 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f2e0:	2328      	movs	r3, #40	; 0x28
 800f2e2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f2e4:	8afa      	ldrh	r2, [r7, #22]
 800f2e6:	8abb      	ldrh	r3, [r7, #20]
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d904      	bls.n	800f2f6 <tcp_eff_send_mss_netif+0x4e>
 800f2ec:	8afa      	ldrh	r2, [r7, #22]
 800f2ee:	8abb      	ldrh	r3, [r7, #20]
 800f2f0:	1ad3      	subs	r3, r2, r3
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	e000      	b.n	800f2f8 <tcp_eff_send_mss_netif+0x50>
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f2fa:	8a7a      	ldrh	r2, [r7, #18]
 800f2fc:	89fb      	ldrh	r3, [r7, #14]
 800f2fe:	4293      	cmp	r3, r2
 800f300:	bf28      	it	cs
 800f302:	4613      	movcs	r3, r2
 800f304:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f306:	89fb      	ldrh	r3, [r7, #14]
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3718      	adds	r7, #24
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	080163e8 	.word	0x080163e8
 800f314:	08016b2c 	.word	0x08016b2c
 800f318:	08016464 	.word	0x08016464

0800f31c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d119      	bne.n	800f364 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f330:	4b10      	ldr	r3, [pc, #64]	; (800f374 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f332:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f336:	4910      	ldr	r1, [pc, #64]	; (800f378 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f338:	4810      	ldr	r0, [pc, #64]	; (800f37c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f33a:	f004 fc43 	bl	8013bc4 <iprintf>

  while (pcb != NULL) {
 800f33e:	e011      	b.n	800f364 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681a      	ldr	r2, [r3, #0]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d108      	bne.n	800f35e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	68db      	ldr	r3, [r3, #12]
 800f350:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f352:	68f8      	ldr	r0, [r7, #12]
 800f354:	f7fe ffc6 	bl	800e2e4 <tcp_abort>
      pcb = next;
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	60fb      	str	r3, [r7, #12]
 800f35c:	e002      	b.n	800f364 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d1ea      	bne.n	800f340 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f36a:	bf00      	nop
 800f36c:	bf00      	nop
 800f36e:	3710      	adds	r7, #16
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	080163e8 	.word	0x080163e8
 800f378:	08016b54 	.word	0x08016b54
 800f37c:	08016464 	.word	0x08016464

0800f380 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d02a      	beq.n	800f3e6 <tcp_netif_ip_addr_changed+0x66>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d026      	beq.n	800f3e6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f398:	4b15      	ldr	r3, [pc, #84]	; (800f3f0 <tcp_netif_ip_addr_changed+0x70>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4619      	mov	r1, r3
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7ff ffbc 	bl	800f31c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f3a4:	4b13      	ldr	r3, [pc, #76]	; (800f3f4 <tcp_netif_ip_addr_changed+0x74>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f7ff ffb6 	bl	800f31c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d017      	beq.n	800f3e6 <tcp_netif_ip_addr_changed+0x66>
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d013      	beq.n	800f3e6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f3be:	4b0e      	ldr	r3, [pc, #56]	; (800f3f8 <tcp_netif_ip_addr_changed+0x78>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	60fb      	str	r3, [r7, #12]
 800f3c4:	e00c      	b.n	800f3e0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681a      	ldr	r2, [r3, #0]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d103      	bne.n	800f3da <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	681a      	ldr	r2, [r3, #0]
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	68db      	ldr	r3, [r3, #12]
 800f3de:	60fb      	str	r3, [r7, #12]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d1ef      	bne.n	800f3c6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f3e6:	bf00      	nop
 800f3e8:	3710      	adds	r7, #16
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	2400826c 	.word	0x2400826c
 800f3f4:	24008264 	.word	0x24008264
 800f3f8:	24008268 	.word	0x24008268

0800f3fc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d007      	beq.n	800f41c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f410:	4618      	mov	r0, r3
 800f412:	f7ff fc3d 	bl	800ec90 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f41c:	bf00      	nop
 800f41e:	3708      	adds	r7, #8
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}

0800f424 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f424:	b590      	push	{r4, r7, lr}
 800f426:	b08d      	sub	sp, #52	; 0x34
 800f428:	af04      	add	r7, sp, #16
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d105      	bne.n	800f440 <tcp_input+0x1c>
 800f434:	4b9b      	ldr	r3, [pc, #620]	; (800f6a4 <tcp_input+0x280>)
 800f436:	2283      	movs	r2, #131	; 0x83
 800f438:	499b      	ldr	r1, [pc, #620]	; (800f6a8 <tcp_input+0x284>)
 800f43a:	489c      	ldr	r0, [pc, #624]	; (800f6ac <tcp_input+0x288>)
 800f43c:	f004 fbc2 	bl	8013bc4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	4a9a      	ldr	r2, [pc, #616]	; (800f6b0 <tcp_input+0x28c>)
 800f446:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	895b      	ldrh	r3, [r3, #10]
 800f44c:	2b13      	cmp	r3, #19
 800f44e:	f240 83d1 	bls.w	800fbf4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f452:	4b98      	ldr	r3, [pc, #608]	; (800f6b4 <tcp_input+0x290>)
 800f454:	695b      	ldr	r3, [r3, #20]
 800f456:	4a97      	ldr	r2, [pc, #604]	; (800f6b4 <tcp_input+0x290>)
 800f458:	6812      	ldr	r2, [r2, #0]
 800f45a:	4611      	mov	r1, r2
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7fc f827 	bl	800b4b0 <ip4_addr_isbroadcast_u32>
 800f462:	4603      	mov	r3, r0
 800f464:	2b00      	cmp	r3, #0
 800f466:	f040 83c7 	bne.w	800fbf8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f46a:	4b92      	ldr	r3, [pc, #584]	; (800f6b4 <tcp_input+0x290>)
 800f46c:	695b      	ldr	r3, [r3, #20]
 800f46e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f472:	2be0      	cmp	r3, #224	; 0xe0
 800f474:	f000 83c0 	beq.w	800fbf8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f478:	4b8d      	ldr	r3, [pc, #564]	; (800f6b0 <tcp_input+0x28c>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	899b      	ldrh	r3, [r3, #12]
 800f47e:	b29b      	uxth	r3, r3
 800f480:	4618      	mov	r0, r3
 800f482:	f7f8 fbf3 	bl	8007c6c <lwip_htons>
 800f486:	4603      	mov	r3, r0
 800f488:	0b1b      	lsrs	r3, r3, #12
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f492:	7cbb      	ldrb	r3, [r7, #18]
 800f494:	2b13      	cmp	r3, #19
 800f496:	f240 83b1 	bls.w	800fbfc <tcp_input+0x7d8>
 800f49a:	7cbb      	ldrb	r3, [r7, #18]
 800f49c:	b29a      	uxth	r2, r3
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	891b      	ldrh	r3, [r3, #8]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	f200 83aa 	bhi.w	800fbfc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f4a8:	7cbb      	ldrb	r3, [r7, #18]
 800f4aa:	b29b      	uxth	r3, r3
 800f4ac:	3b14      	subs	r3, #20
 800f4ae:	b29a      	uxth	r2, r3
 800f4b0:	4b81      	ldr	r3, [pc, #516]	; (800f6b8 <tcp_input+0x294>)
 800f4b2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f4b4:	4b81      	ldr	r3, [pc, #516]	; (800f6bc <tcp_input+0x298>)
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	895a      	ldrh	r2, [r3, #10]
 800f4be:	7cbb      	ldrb	r3, [r7, #18]
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d309      	bcc.n	800f4da <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f4c6:	4b7c      	ldr	r3, [pc, #496]	; (800f6b8 <tcp_input+0x294>)
 800f4c8:	881a      	ldrh	r2, [r3, #0]
 800f4ca:	4b7d      	ldr	r3, [pc, #500]	; (800f6c0 <tcp_input+0x29c>)
 800f4cc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f4ce:	7cbb      	ldrb	r3, [r7, #18]
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f7fe f8e8 	bl	800d6a8 <pbuf_remove_header>
 800f4d8:	e04e      	b.n	800f578 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d105      	bne.n	800f4ee <tcp_input+0xca>
 800f4e2:	4b70      	ldr	r3, [pc, #448]	; (800f6a4 <tcp_input+0x280>)
 800f4e4:	22c2      	movs	r2, #194	; 0xc2
 800f4e6:	4977      	ldr	r1, [pc, #476]	; (800f6c4 <tcp_input+0x2a0>)
 800f4e8:	4870      	ldr	r0, [pc, #448]	; (800f6ac <tcp_input+0x288>)
 800f4ea:	f004 fb6b 	bl	8013bc4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f4ee:	2114      	movs	r1, #20
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f7fe f8d9 	bl	800d6a8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	895a      	ldrh	r2, [r3, #10]
 800f4fa:	4b71      	ldr	r3, [pc, #452]	; (800f6c0 <tcp_input+0x29c>)
 800f4fc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f4fe:	4b6e      	ldr	r3, [pc, #440]	; (800f6b8 <tcp_input+0x294>)
 800f500:	881a      	ldrh	r2, [r3, #0]
 800f502:	4b6f      	ldr	r3, [pc, #444]	; (800f6c0 <tcp_input+0x29c>)
 800f504:	881b      	ldrh	r3, [r3, #0]
 800f506:	1ad3      	subs	r3, r2, r3
 800f508:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f50a:	4b6d      	ldr	r3, [pc, #436]	; (800f6c0 <tcp_input+0x29c>)
 800f50c:	881b      	ldrh	r3, [r3, #0]
 800f50e:	4619      	mov	r1, r3
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f7fe f8c9 	bl	800d6a8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	895b      	ldrh	r3, [r3, #10]
 800f51c:	8a3a      	ldrh	r2, [r7, #16]
 800f51e:	429a      	cmp	r2, r3
 800f520:	f200 836e 	bhi.w	800fc00 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	685b      	ldr	r3, [r3, #4]
 800f52a:	4a64      	ldr	r2, [pc, #400]	; (800f6bc <tcp_input+0x298>)
 800f52c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	8a3a      	ldrh	r2, [r7, #16]
 800f534:	4611      	mov	r1, r2
 800f536:	4618      	mov	r0, r3
 800f538:	f7fe f8b6 	bl	800d6a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	891a      	ldrh	r2, [r3, #8]
 800f540:	8a3b      	ldrh	r3, [r7, #16]
 800f542:	1ad3      	subs	r3, r2, r3
 800f544:	b29a      	uxth	r2, r3
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	895b      	ldrh	r3, [r3, #10]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d005      	beq.n	800f55e <tcp_input+0x13a>
 800f552:	4b54      	ldr	r3, [pc, #336]	; (800f6a4 <tcp_input+0x280>)
 800f554:	22df      	movs	r2, #223	; 0xdf
 800f556:	495c      	ldr	r1, [pc, #368]	; (800f6c8 <tcp_input+0x2a4>)
 800f558:	4854      	ldr	r0, [pc, #336]	; (800f6ac <tcp_input+0x288>)
 800f55a:	f004 fb33 	bl	8013bc4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	891a      	ldrh	r2, [r3, #8]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	891b      	ldrh	r3, [r3, #8]
 800f568:	429a      	cmp	r2, r3
 800f56a:	d005      	beq.n	800f578 <tcp_input+0x154>
 800f56c:	4b4d      	ldr	r3, [pc, #308]	; (800f6a4 <tcp_input+0x280>)
 800f56e:	22e0      	movs	r2, #224	; 0xe0
 800f570:	4956      	ldr	r1, [pc, #344]	; (800f6cc <tcp_input+0x2a8>)
 800f572:	484e      	ldr	r0, [pc, #312]	; (800f6ac <tcp_input+0x288>)
 800f574:	f004 fb26 	bl	8013bc4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f578:	4b4d      	ldr	r3, [pc, #308]	; (800f6b0 <tcp_input+0x28c>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	881b      	ldrh	r3, [r3, #0]
 800f57e:	b29b      	uxth	r3, r3
 800f580:	4a4b      	ldr	r2, [pc, #300]	; (800f6b0 <tcp_input+0x28c>)
 800f582:	6814      	ldr	r4, [r2, #0]
 800f584:	4618      	mov	r0, r3
 800f586:	f7f8 fb71 	bl	8007c6c <lwip_htons>
 800f58a:	4603      	mov	r3, r0
 800f58c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f58e:	4b48      	ldr	r3, [pc, #288]	; (800f6b0 <tcp_input+0x28c>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	885b      	ldrh	r3, [r3, #2]
 800f594:	b29b      	uxth	r3, r3
 800f596:	4a46      	ldr	r2, [pc, #280]	; (800f6b0 <tcp_input+0x28c>)
 800f598:	6814      	ldr	r4, [r2, #0]
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7f8 fb66 	bl	8007c6c <lwip_htons>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f5a4:	4b42      	ldr	r3, [pc, #264]	; (800f6b0 <tcp_input+0x28c>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	4a41      	ldr	r2, [pc, #260]	; (800f6b0 <tcp_input+0x28c>)
 800f5ac:	6814      	ldr	r4, [r2, #0]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7f8 fb71 	bl	8007c96 <lwip_htonl>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	6063      	str	r3, [r4, #4]
 800f5b8:	6863      	ldr	r3, [r4, #4]
 800f5ba:	4a45      	ldr	r2, [pc, #276]	; (800f6d0 <tcp_input+0x2ac>)
 800f5bc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f5be:	4b3c      	ldr	r3, [pc, #240]	; (800f6b0 <tcp_input+0x28c>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	4a3a      	ldr	r2, [pc, #232]	; (800f6b0 <tcp_input+0x28c>)
 800f5c6:	6814      	ldr	r4, [r2, #0]
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7f8 fb64 	bl	8007c96 <lwip_htonl>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	60a3      	str	r3, [r4, #8]
 800f5d2:	68a3      	ldr	r3, [r4, #8]
 800f5d4:	4a3f      	ldr	r2, [pc, #252]	; (800f6d4 <tcp_input+0x2b0>)
 800f5d6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f5d8:	4b35      	ldr	r3, [pc, #212]	; (800f6b0 <tcp_input+0x28c>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	89db      	ldrh	r3, [r3, #14]
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	4a33      	ldr	r2, [pc, #204]	; (800f6b0 <tcp_input+0x28c>)
 800f5e2:	6814      	ldr	r4, [r2, #0]
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7f8 fb41 	bl	8007c6c <lwip_htons>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f5ee:	4b30      	ldr	r3, [pc, #192]	; (800f6b0 <tcp_input+0x28c>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	899b      	ldrh	r3, [r3, #12]
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7f8 fb38 	bl	8007c6c <lwip_htons>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f604:	b2da      	uxtb	r2, r3
 800f606:	4b34      	ldr	r3, [pc, #208]	; (800f6d8 <tcp_input+0x2b4>)
 800f608:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	891a      	ldrh	r2, [r3, #8]
 800f60e:	4b33      	ldr	r3, [pc, #204]	; (800f6dc <tcp_input+0x2b8>)
 800f610:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f612:	4b31      	ldr	r3, [pc, #196]	; (800f6d8 <tcp_input+0x2b4>)
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	f003 0303 	and.w	r3, r3, #3
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d00c      	beq.n	800f638 <tcp_input+0x214>
    tcplen++;
 800f61e:	4b2f      	ldr	r3, [pc, #188]	; (800f6dc <tcp_input+0x2b8>)
 800f620:	881b      	ldrh	r3, [r3, #0]
 800f622:	3301      	adds	r3, #1
 800f624:	b29a      	uxth	r2, r3
 800f626:	4b2d      	ldr	r3, [pc, #180]	; (800f6dc <tcp_input+0x2b8>)
 800f628:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	891a      	ldrh	r2, [r3, #8]
 800f62e:	4b2b      	ldr	r3, [pc, #172]	; (800f6dc <tcp_input+0x2b8>)
 800f630:	881b      	ldrh	r3, [r3, #0]
 800f632:	429a      	cmp	r2, r3
 800f634:	f200 82e6 	bhi.w	800fc04 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f638:	2300      	movs	r3, #0
 800f63a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f63c:	4b28      	ldr	r3, [pc, #160]	; (800f6e0 <tcp_input+0x2bc>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	61fb      	str	r3, [r7, #28]
 800f642:	e09d      	b.n	800f780 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f644:	69fb      	ldr	r3, [r7, #28]
 800f646:	7d1b      	ldrb	r3, [r3, #20]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d105      	bne.n	800f658 <tcp_input+0x234>
 800f64c:	4b15      	ldr	r3, [pc, #84]	; (800f6a4 <tcp_input+0x280>)
 800f64e:	22fb      	movs	r2, #251	; 0xfb
 800f650:	4924      	ldr	r1, [pc, #144]	; (800f6e4 <tcp_input+0x2c0>)
 800f652:	4816      	ldr	r0, [pc, #88]	; (800f6ac <tcp_input+0x288>)
 800f654:	f004 fab6 	bl	8013bc4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	7d1b      	ldrb	r3, [r3, #20]
 800f65c:	2b0a      	cmp	r3, #10
 800f65e:	d105      	bne.n	800f66c <tcp_input+0x248>
 800f660:	4b10      	ldr	r3, [pc, #64]	; (800f6a4 <tcp_input+0x280>)
 800f662:	22fc      	movs	r2, #252	; 0xfc
 800f664:	4920      	ldr	r1, [pc, #128]	; (800f6e8 <tcp_input+0x2c4>)
 800f666:	4811      	ldr	r0, [pc, #68]	; (800f6ac <tcp_input+0x288>)
 800f668:	f004 faac 	bl	8013bc4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	7d1b      	ldrb	r3, [r3, #20]
 800f670:	2b01      	cmp	r3, #1
 800f672:	d105      	bne.n	800f680 <tcp_input+0x25c>
 800f674:	4b0b      	ldr	r3, [pc, #44]	; (800f6a4 <tcp_input+0x280>)
 800f676:	22fd      	movs	r2, #253	; 0xfd
 800f678:	491c      	ldr	r1, [pc, #112]	; (800f6ec <tcp_input+0x2c8>)
 800f67a:	480c      	ldr	r0, [pc, #48]	; (800f6ac <tcp_input+0x288>)
 800f67c:	f004 faa2 	bl	8013bc4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	7a1b      	ldrb	r3, [r3, #8]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d033      	beq.n	800f6f0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	7a1a      	ldrb	r2, [r3, #8]
 800f68c:	4b09      	ldr	r3, [pc, #36]	; (800f6b4 <tcp_input+0x290>)
 800f68e:	685b      	ldr	r3, [r3, #4]
 800f690:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f694:	3301      	adds	r3, #1
 800f696:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f698:	429a      	cmp	r2, r3
 800f69a:	d029      	beq.n	800f6f0 <tcp_input+0x2cc>
      prev = pcb;
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	61bb      	str	r3, [r7, #24]
      continue;
 800f6a0:	e06b      	b.n	800f77a <tcp_input+0x356>
 800f6a2:	bf00      	nop
 800f6a4:	08016b88 	.word	0x08016b88
 800f6a8:	08016bf4 	.word	0x08016bf4
 800f6ac:	08016c0c 	.word	0x08016c0c
 800f6b0:	24008288 	.word	0x24008288
 800f6b4:	24005318 	.word	0x24005318
 800f6b8:	2400828c 	.word	0x2400828c
 800f6bc:	24008290 	.word	0x24008290
 800f6c0:	2400828e 	.word	0x2400828e
 800f6c4:	08016c34 	.word	0x08016c34
 800f6c8:	08016c44 	.word	0x08016c44
 800f6cc:	08016c50 	.word	0x08016c50
 800f6d0:	24008298 	.word	0x24008298
 800f6d4:	2400829c 	.word	0x2400829c
 800f6d8:	240082a4 	.word	0x240082a4
 800f6dc:	240082a2 	.word	0x240082a2
 800f6e0:	2400826c 	.word	0x2400826c
 800f6e4:	08016c70 	.word	0x08016c70
 800f6e8:	08016c98 	.word	0x08016c98
 800f6ec:	08016cc4 	.word	0x08016cc4
    }

    if (pcb->remote_port == tcphdr->src &&
 800f6f0:	69fb      	ldr	r3, [r7, #28]
 800f6f2:	8b1a      	ldrh	r2, [r3, #24]
 800f6f4:	4b72      	ldr	r3, [pc, #456]	; (800f8c0 <tcp_input+0x49c>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	881b      	ldrh	r3, [r3, #0]
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d13a      	bne.n	800f776 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	8ada      	ldrh	r2, [r3, #22]
 800f704:	4b6e      	ldr	r3, [pc, #440]	; (800f8c0 <tcp_input+0x49c>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	885b      	ldrh	r3, [r3, #2]
 800f70a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d132      	bne.n	800f776 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f710:	69fb      	ldr	r3, [r7, #28]
 800f712:	685a      	ldr	r2, [r3, #4]
 800f714:	4b6b      	ldr	r3, [pc, #428]	; (800f8c4 <tcp_input+0x4a0>)
 800f716:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f718:	429a      	cmp	r2, r3
 800f71a:	d12c      	bne.n	800f776 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	4b68      	ldr	r3, [pc, #416]	; (800f8c4 <tcp_input+0x4a0>)
 800f722:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f724:	429a      	cmp	r2, r3
 800f726:	d126      	bne.n	800f776 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f728:	69fb      	ldr	r3, [r7, #28]
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	69fa      	ldr	r2, [r7, #28]
 800f72e:	429a      	cmp	r2, r3
 800f730:	d106      	bne.n	800f740 <tcp_input+0x31c>
 800f732:	4b65      	ldr	r3, [pc, #404]	; (800f8c8 <tcp_input+0x4a4>)
 800f734:	f240 120d 	movw	r2, #269	; 0x10d
 800f738:	4964      	ldr	r1, [pc, #400]	; (800f8cc <tcp_input+0x4a8>)
 800f73a:	4865      	ldr	r0, [pc, #404]	; (800f8d0 <tcp_input+0x4ac>)
 800f73c:	f004 fa42 	bl	8013bc4 <iprintf>
      if (prev != NULL) {
 800f740:	69bb      	ldr	r3, [r7, #24]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d00a      	beq.n	800f75c <tcp_input+0x338>
        prev->next = pcb->next;
 800f746:	69fb      	ldr	r3, [r7, #28]
 800f748:	68da      	ldr	r2, [r3, #12]
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f74e:	4b61      	ldr	r3, [pc, #388]	; (800f8d4 <tcp_input+0x4b0>)
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	69fb      	ldr	r3, [r7, #28]
 800f754:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f756:	4a5f      	ldr	r2, [pc, #380]	; (800f8d4 <tcp_input+0x4b0>)
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f75c:	69fb      	ldr	r3, [r7, #28]
 800f75e:	68db      	ldr	r3, [r3, #12]
 800f760:	69fa      	ldr	r2, [r7, #28]
 800f762:	429a      	cmp	r2, r3
 800f764:	d111      	bne.n	800f78a <tcp_input+0x366>
 800f766:	4b58      	ldr	r3, [pc, #352]	; (800f8c8 <tcp_input+0x4a4>)
 800f768:	f240 1215 	movw	r2, #277	; 0x115
 800f76c:	495a      	ldr	r1, [pc, #360]	; (800f8d8 <tcp_input+0x4b4>)
 800f76e:	4858      	ldr	r0, [pc, #352]	; (800f8d0 <tcp_input+0x4ac>)
 800f770:	f004 fa28 	bl	8013bc4 <iprintf>
      break;
 800f774:	e009      	b.n	800f78a <tcp_input+0x366>
    }
    prev = pcb;
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f77a:	69fb      	ldr	r3, [r7, #28]
 800f77c:	68db      	ldr	r3, [r3, #12]
 800f77e:	61fb      	str	r3, [r7, #28]
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	2b00      	cmp	r3, #0
 800f784:	f47f af5e 	bne.w	800f644 <tcp_input+0x220>
 800f788:	e000      	b.n	800f78c <tcp_input+0x368>
      break;
 800f78a:	bf00      	nop
  }

  if (pcb == NULL) {
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	f040 80aa 	bne.w	800f8e8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f794:	4b51      	ldr	r3, [pc, #324]	; (800f8dc <tcp_input+0x4b8>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	61fb      	str	r3, [r7, #28]
 800f79a:	e03f      	b.n	800f81c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	7d1b      	ldrb	r3, [r3, #20]
 800f7a0:	2b0a      	cmp	r3, #10
 800f7a2:	d006      	beq.n	800f7b2 <tcp_input+0x38e>
 800f7a4:	4b48      	ldr	r3, [pc, #288]	; (800f8c8 <tcp_input+0x4a4>)
 800f7a6:	f240 121f 	movw	r2, #287	; 0x11f
 800f7aa:	494d      	ldr	r1, [pc, #308]	; (800f8e0 <tcp_input+0x4bc>)
 800f7ac:	4848      	ldr	r0, [pc, #288]	; (800f8d0 <tcp_input+0x4ac>)
 800f7ae:	f004 fa09 	bl	8013bc4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7b2:	69fb      	ldr	r3, [r7, #28]
 800f7b4:	7a1b      	ldrb	r3, [r3, #8]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d009      	beq.n	800f7ce <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7ba:	69fb      	ldr	r3, [r7, #28]
 800f7bc:	7a1a      	ldrb	r2, [r3, #8]
 800f7be:	4b41      	ldr	r3, [pc, #260]	; (800f8c4 <tcp_input+0x4a0>)
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d122      	bne.n	800f814 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	8b1a      	ldrh	r2, [r3, #24]
 800f7d2:	4b3b      	ldr	r3, [pc, #236]	; (800f8c0 <tcp_input+0x49c>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	881b      	ldrh	r3, [r3, #0]
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d11b      	bne.n	800f816 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	8ada      	ldrh	r2, [r3, #22]
 800f7e2:	4b37      	ldr	r3, [pc, #220]	; (800f8c0 <tcp_input+0x49c>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	885b      	ldrh	r3, [r3, #2]
 800f7e8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d113      	bne.n	800f816 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f7ee:	69fb      	ldr	r3, [r7, #28]
 800f7f0:	685a      	ldr	r2, [r3, #4]
 800f7f2:	4b34      	ldr	r3, [pc, #208]	; (800f8c4 <tcp_input+0x4a0>)
 800f7f4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d10d      	bne.n	800f816 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	681a      	ldr	r2, [r3, #0]
 800f7fe:	4b31      	ldr	r3, [pc, #196]	; (800f8c4 <tcp_input+0x4a0>)
 800f800:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f802:	429a      	cmp	r2, r3
 800f804:	d107      	bne.n	800f816 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f806:	69f8      	ldr	r0, [r7, #28]
 800f808:	f000 fb56 	bl	800feb8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f7fd ffd1 	bl	800d7b4 <pbuf_free>
        return;
 800f812:	e1fd      	b.n	800fc10 <tcp_input+0x7ec>
        continue;
 800f814:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	68db      	ldr	r3, [r3, #12]
 800f81a:	61fb      	str	r3, [r7, #28]
 800f81c:	69fb      	ldr	r3, [r7, #28]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d1bc      	bne.n	800f79c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f822:	2300      	movs	r3, #0
 800f824:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f826:	4b2f      	ldr	r3, [pc, #188]	; (800f8e4 <tcp_input+0x4c0>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	617b      	str	r3, [r7, #20]
 800f82c:	e02a      	b.n	800f884 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	7a1b      	ldrb	r3, [r3, #8]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d00c      	beq.n	800f850 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	7a1a      	ldrb	r2, [r3, #8]
 800f83a:	4b22      	ldr	r3, [pc, #136]	; (800f8c4 <tcp_input+0x4a0>)
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f842:	3301      	adds	r3, #1
 800f844:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f846:	429a      	cmp	r2, r3
 800f848:	d002      	beq.n	800f850 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	61bb      	str	r3, [r7, #24]
        continue;
 800f84e:	e016      	b.n	800f87e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	8ada      	ldrh	r2, [r3, #22]
 800f854:	4b1a      	ldr	r3, [pc, #104]	; (800f8c0 <tcp_input+0x49c>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	885b      	ldrh	r3, [r3, #2]
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d10c      	bne.n	800f87a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	4b17      	ldr	r3, [pc, #92]	; (800f8c4 <tcp_input+0x4a0>)
 800f866:	695b      	ldr	r3, [r3, #20]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d00f      	beq.n	800f88c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d00d      	beq.n	800f88e <tcp_input+0x46a>
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d009      	beq.n	800f88e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	68db      	ldr	r3, [r3, #12]
 800f882:	617b      	str	r3, [r7, #20]
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d1d1      	bne.n	800f82e <tcp_input+0x40a>
 800f88a:	e000      	b.n	800f88e <tcp_input+0x46a>
            break;
 800f88c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d029      	beq.n	800f8e8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f894:	69bb      	ldr	r3, [r7, #24]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d00a      	beq.n	800f8b0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	68da      	ldr	r2, [r3, #12]
 800f89e:	69bb      	ldr	r3, [r7, #24]
 800f8a0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f8a2:	4b10      	ldr	r3, [pc, #64]	; (800f8e4 <tcp_input+0x4c0>)
 800f8a4:	681a      	ldr	r2, [r3, #0]
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f8aa:	4a0e      	ldr	r2, [pc, #56]	; (800f8e4 <tcp_input+0x4c0>)
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f8b0:	6978      	ldr	r0, [r7, #20]
 800f8b2:	f000 fa03 	bl	800fcbc <tcp_listen_input>
      }
      pbuf_free(p);
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f7fd ff7c 	bl	800d7b4 <pbuf_free>
      return;
 800f8bc:	e1a8      	b.n	800fc10 <tcp_input+0x7ec>
 800f8be:	bf00      	nop
 800f8c0:	24008288 	.word	0x24008288
 800f8c4:	24005318 	.word	0x24005318
 800f8c8:	08016b88 	.word	0x08016b88
 800f8cc:	08016cec 	.word	0x08016cec
 800f8d0:	08016c0c 	.word	0x08016c0c
 800f8d4:	2400826c 	.word	0x2400826c
 800f8d8:	08016d18 	.word	0x08016d18
 800f8dc:	24008270 	.word	0x24008270
 800f8e0:	08016d44 	.word	0x08016d44
 800f8e4:	24008268 	.word	0x24008268
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	f000 8158 	beq.w	800fba0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f8f0:	4b95      	ldr	r3, [pc, #596]	; (800fb48 <tcp_input+0x724>)
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	891a      	ldrh	r2, [r3, #8]
 800f8fa:	4b93      	ldr	r3, [pc, #588]	; (800fb48 <tcp_input+0x724>)
 800f8fc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f8fe:	4a92      	ldr	r2, [pc, #584]	; (800fb48 <tcp_input+0x724>)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f904:	4b91      	ldr	r3, [pc, #580]	; (800fb4c <tcp_input+0x728>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	4a8f      	ldr	r2, [pc, #572]	; (800fb48 <tcp_input+0x724>)
 800f90a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f90c:	4b90      	ldr	r3, [pc, #576]	; (800fb50 <tcp_input+0x72c>)
 800f90e:	2200      	movs	r2, #0
 800f910:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f912:	4b90      	ldr	r3, [pc, #576]	; (800fb54 <tcp_input+0x730>)
 800f914:	2200      	movs	r2, #0
 800f916:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f918:	4b8f      	ldr	r3, [pc, #572]	; (800fb58 <tcp_input+0x734>)
 800f91a:	2200      	movs	r2, #0
 800f91c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f91e:	4b8f      	ldr	r3, [pc, #572]	; (800fb5c <tcp_input+0x738>)
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	f003 0308 	and.w	r3, r3, #8
 800f926:	2b00      	cmp	r3, #0
 800f928:	d006      	beq.n	800f938 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	7b5b      	ldrb	r3, [r3, #13]
 800f92e:	f043 0301 	orr.w	r3, r3, #1
 800f932:	b2da      	uxtb	r2, r3
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d017      	beq.n	800f970 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f940:	69f8      	ldr	r0, [r7, #28]
 800f942:	f7ff f929 	bl	800eb98 <tcp_process_refused_data>
 800f946:	4603      	mov	r3, r0
 800f948:	f113 0f0d 	cmn.w	r3, #13
 800f94c:	d007      	beq.n	800f95e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f952:	2b00      	cmp	r3, #0
 800f954:	d00c      	beq.n	800f970 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f956:	4b82      	ldr	r3, [pc, #520]	; (800fb60 <tcp_input+0x73c>)
 800f958:	881b      	ldrh	r3, [r3, #0]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d008      	beq.n	800f970 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f962:	2b00      	cmp	r3, #0
 800f964:	f040 80e3 	bne.w	800fb2e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f968:	69f8      	ldr	r0, [r7, #28]
 800f96a:	f003 f9ad 	bl	8012cc8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f96e:	e0de      	b.n	800fb2e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f970:	4a7c      	ldr	r2, [pc, #496]	; (800fb64 <tcp_input+0x740>)
 800f972:	69fb      	ldr	r3, [r7, #28]
 800f974:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f976:	69f8      	ldr	r0, [r7, #28]
 800f978:	f000 fb18 	bl	800ffac <tcp_process>
 800f97c:	4603      	mov	r3, r0
 800f97e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f980:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f984:	f113 0f0d 	cmn.w	r3, #13
 800f988:	f000 80d3 	beq.w	800fb32 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f98c:	4b71      	ldr	r3, [pc, #452]	; (800fb54 <tcp_input+0x730>)
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	f003 0308 	and.w	r3, r3, #8
 800f994:	2b00      	cmp	r3, #0
 800f996:	d015      	beq.n	800f9c4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d008      	beq.n	800f9b4 <tcp_input+0x590>
 800f9a2:	69fb      	ldr	r3, [r7, #28]
 800f9a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9a8:	69fa      	ldr	r2, [r7, #28]
 800f9aa:	6912      	ldr	r2, [r2, #16]
 800f9ac:	f06f 010d 	mvn.w	r1, #13
 800f9b0:	4610      	mov	r0, r2
 800f9b2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f9b4:	69f9      	ldr	r1, [r7, #28]
 800f9b6:	486c      	ldr	r0, [pc, #432]	; (800fb68 <tcp_input+0x744>)
 800f9b8:	f7ff fbbc 	bl	800f134 <tcp_pcb_remove>
        tcp_free(pcb);
 800f9bc:	69f8      	ldr	r0, [r7, #28]
 800f9be:	f7fe f9a9 	bl	800dd14 <tcp_free>
 800f9c2:	e0da      	b.n	800fb7a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f9c8:	4b63      	ldr	r3, [pc, #396]	; (800fb58 <tcp_input+0x734>)
 800f9ca:	881b      	ldrh	r3, [r3, #0]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d01d      	beq.n	800fa0c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f9d0:	4b61      	ldr	r3, [pc, #388]	; (800fb58 <tcp_input+0x734>)
 800f9d2:	881b      	ldrh	r3, [r3, #0]
 800f9d4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f9d6:	69fb      	ldr	r3, [r7, #28]
 800f9d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d00a      	beq.n	800f9f6 <tcp_input+0x5d2>
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9e6:	69fa      	ldr	r2, [r7, #28]
 800f9e8:	6910      	ldr	r0, [r2, #16]
 800f9ea:	89fa      	ldrh	r2, [r7, #14]
 800f9ec:	69f9      	ldr	r1, [r7, #28]
 800f9ee:	4798      	blx	r3
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	74fb      	strb	r3, [r7, #19]
 800f9f4:	e001      	b.n	800f9fa <tcp_input+0x5d6>
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f9fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9fe:	f113 0f0d 	cmn.w	r3, #13
 800fa02:	f000 8098 	beq.w	800fb36 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fa06:	4b54      	ldr	r3, [pc, #336]	; (800fb58 <tcp_input+0x734>)
 800fa08:	2200      	movs	r2, #0
 800fa0a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fa0c:	69f8      	ldr	r0, [r7, #28]
 800fa0e:	f000 f915 	bl	800fc3c <tcp_input_delayed_close>
 800fa12:	4603      	mov	r3, r0
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	f040 8090 	bne.w	800fb3a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fa1a:	4b4d      	ldr	r3, [pc, #308]	; (800fb50 <tcp_input+0x72c>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d041      	beq.n	800faa6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fa22:	69fb      	ldr	r3, [r7, #28]
 800fa24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d006      	beq.n	800fa38 <tcp_input+0x614>
 800fa2a:	4b50      	ldr	r3, [pc, #320]	; (800fb6c <tcp_input+0x748>)
 800fa2c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fa30:	494f      	ldr	r1, [pc, #316]	; (800fb70 <tcp_input+0x74c>)
 800fa32:	4850      	ldr	r0, [pc, #320]	; (800fb74 <tcp_input+0x750>)
 800fa34:	f004 f8c6 	bl	8013bc4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fa38:	69fb      	ldr	r3, [r7, #28]
 800fa3a:	8b5b      	ldrh	r3, [r3, #26]
 800fa3c:	f003 0310 	and.w	r3, r3, #16
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d008      	beq.n	800fa56 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fa44:	4b42      	ldr	r3, [pc, #264]	; (800fb50 <tcp_input+0x72c>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7fd feb3 	bl	800d7b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fa4e:	69f8      	ldr	r0, [r7, #28]
 800fa50:	f7fe fc48 	bl	800e2e4 <tcp_abort>
            goto aborted;
 800fa54:	e091      	b.n	800fb7a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fa56:	69fb      	ldr	r3, [r7, #28]
 800fa58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d00c      	beq.n	800fa7a <tcp_input+0x656>
 800fa60:	69fb      	ldr	r3, [r7, #28]
 800fa62:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fa66:	69fb      	ldr	r3, [r7, #28]
 800fa68:	6918      	ldr	r0, [r3, #16]
 800fa6a:	4b39      	ldr	r3, [pc, #228]	; (800fb50 <tcp_input+0x72c>)
 800fa6c:	681a      	ldr	r2, [r3, #0]
 800fa6e:	2300      	movs	r3, #0
 800fa70:	69f9      	ldr	r1, [r7, #28]
 800fa72:	47a0      	blx	r4
 800fa74:	4603      	mov	r3, r0
 800fa76:	74fb      	strb	r3, [r7, #19]
 800fa78:	e008      	b.n	800fa8c <tcp_input+0x668>
 800fa7a:	4b35      	ldr	r3, [pc, #212]	; (800fb50 <tcp_input+0x72c>)
 800fa7c:	681a      	ldr	r2, [r3, #0]
 800fa7e:	2300      	movs	r3, #0
 800fa80:	69f9      	ldr	r1, [r7, #28]
 800fa82:	2000      	movs	r0, #0
 800fa84:	f7ff f95e 	bl	800ed44 <tcp_recv_null>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fa8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa90:	f113 0f0d 	cmn.w	r3, #13
 800fa94:	d053      	beq.n	800fb3e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fa96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d003      	beq.n	800faa6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fa9e:	4b2c      	ldr	r3, [pc, #176]	; (800fb50 <tcp_input+0x72c>)
 800faa0:	681a      	ldr	r2, [r3, #0]
 800faa2:	69fb      	ldr	r3, [r7, #28]
 800faa4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800faa6:	4b2b      	ldr	r3, [pc, #172]	; (800fb54 <tcp_input+0x730>)
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	f003 0320 	and.w	r3, r3, #32
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d030      	beq.n	800fb14 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fab2:	69fb      	ldr	r3, [r7, #28]
 800fab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d009      	beq.n	800face <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800faba:	69fb      	ldr	r3, [r7, #28]
 800fabc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fabe:	7b5a      	ldrb	r2, [r3, #13]
 800fac0:	69fb      	ldr	r3, [r7, #28]
 800fac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fac4:	f042 0220 	orr.w	r2, r2, #32
 800fac8:	b2d2      	uxtb	r2, r2
 800faca:	735a      	strb	r2, [r3, #13]
 800facc:	e022      	b.n	800fb14 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800face:	69fb      	ldr	r3, [r7, #28]
 800fad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fad2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fad6:	d005      	beq.n	800fae4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fad8:	69fb      	ldr	r3, [r7, #28]
 800fada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fadc:	3301      	adds	r3, #1
 800fade:	b29a      	uxth	r2, r3
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00b      	beq.n	800fb06 <tcp_input+0x6e2>
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	6918      	ldr	r0, [r3, #16]
 800faf8:	2300      	movs	r3, #0
 800fafa:	2200      	movs	r2, #0
 800fafc:	69f9      	ldr	r1, [r7, #28]
 800fafe:	47a0      	blx	r4
 800fb00:	4603      	mov	r3, r0
 800fb02:	74fb      	strb	r3, [r7, #19]
 800fb04:	e001      	b.n	800fb0a <tcp_input+0x6e6>
 800fb06:	2300      	movs	r3, #0
 800fb08:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fb0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb0e:	f113 0f0d 	cmn.w	r3, #13
 800fb12:	d016      	beq.n	800fb42 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fb14:	4b13      	ldr	r3, [pc, #76]	; (800fb64 <tcp_input+0x740>)
 800fb16:	2200      	movs	r2, #0
 800fb18:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fb1a:	69f8      	ldr	r0, [r7, #28]
 800fb1c:	f000 f88e 	bl	800fc3c <tcp_input_delayed_close>
 800fb20:	4603      	mov	r3, r0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d128      	bne.n	800fb78 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fb26:	69f8      	ldr	r0, [r7, #28]
 800fb28:	f002 fac8 	bl	80120bc <tcp_output>
 800fb2c:	e025      	b.n	800fb7a <tcp_input+0x756>
        goto aborted;
 800fb2e:	bf00      	nop
 800fb30:	e023      	b.n	800fb7a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fb32:	bf00      	nop
 800fb34:	e021      	b.n	800fb7a <tcp_input+0x756>
              goto aborted;
 800fb36:	bf00      	nop
 800fb38:	e01f      	b.n	800fb7a <tcp_input+0x756>
          goto aborted;
 800fb3a:	bf00      	nop
 800fb3c:	e01d      	b.n	800fb7a <tcp_input+0x756>
            goto aborted;
 800fb3e:	bf00      	nop
 800fb40:	e01b      	b.n	800fb7a <tcp_input+0x756>
              goto aborted;
 800fb42:	bf00      	nop
 800fb44:	e019      	b.n	800fb7a <tcp_input+0x756>
 800fb46:	bf00      	nop
 800fb48:	24008278 	.word	0x24008278
 800fb4c:	24008288 	.word	0x24008288
 800fb50:	240082a8 	.word	0x240082a8
 800fb54:	240082a5 	.word	0x240082a5
 800fb58:	240082a0 	.word	0x240082a0
 800fb5c:	240082a4 	.word	0x240082a4
 800fb60:	240082a2 	.word	0x240082a2
 800fb64:	240082ac 	.word	0x240082ac
 800fb68:	2400826c 	.word	0x2400826c
 800fb6c:	08016b88 	.word	0x08016b88
 800fb70:	08016d74 	.word	0x08016d74
 800fb74:	08016c0c 	.word	0x08016c0c
          goto aborted;
 800fb78:	bf00      	nop
    tcp_input_pcb = NULL;
 800fb7a:	4b27      	ldr	r3, [pc, #156]	; (800fc18 <tcp_input+0x7f4>)
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fb80:	4b26      	ldr	r3, [pc, #152]	; (800fc1c <tcp_input+0x7f8>)
 800fb82:	2200      	movs	r2, #0
 800fb84:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fb86:	4b26      	ldr	r3, [pc, #152]	; (800fc20 <tcp_input+0x7fc>)
 800fb88:	685b      	ldr	r3, [r3, #4]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d03f      	beq.n	800fc0e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fb8e:	4b24      	ldr	r3, [pc, #144]	; (800fc20 <tcp_input+0x7fc>)
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7fd fe0e 	bl	800d7b4 <pbuf_free>
      inseg.p = NULL;
 800fb98:	4b21      	ldr	r3, [pc, #132]	; (800fc20 <tcp_input+0x7fc>)
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fb9e:	e036      	b.n	800fc0e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fba0:	4b20      	ldr	r3, [pc, #128]	; (800fc24 <tcp_input+0x800>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	899b      	ldrh	r3, [r3, #12]
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7f8 f85f 	bl	8007c6c <lwip_htons>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	b2db      	uxtb	r3, r3
 800fbb2:	f003 0304 	and.w	r3, r3, #4
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d118      	bne.n	800fbec <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbba:	4b1b      	ldr	r3, [pc, #108]	; (800fc28 <tcp_input+0x804>)
 800fbbc:	6819      	ldr	r1, [r3, #0]
 800fbbe:	4b1b      	ldr	r3, [pc, #108]	; (800fc2c <tcp_input+0x808>)
 800fbc0:	881b      	ldrh	r3, [r3, #0]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	4b1a      	ldr	r3, [pc, #104]	; (800fc30 <tcp_input+0x80c>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbca:	4b16      	ldr	r3, [pc, #88]	; (800fc24 <tcp_input+0x800>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbce:	885b      	ldrh	r3, [r3, #2]
 800fbd0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbd2:	4a14      	ldr	r2, [pc, #80]	; (800fc24 <tcp_input+0x800>)
 800fbd4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbd6:	8812      	ldrh	r2, [r2, #0]
 800fbd8:	b292      	uxth	r2, r2
 800fbda:	9202      	str	r2, [sp, #8]
 800fbdc:	9301      	str	r3, [sp, #4]
 800fbde:	4b15      	ldr	r3, [pc, #84]	; (800fc34 <tcp_input+0x810>)
 800fbe0:	9300      	str	r3, [sp, #0]
 800fbe2:	4b15      	ldr	r3, [pc, #84]	; (800fc38 <tcp_input+0x814>)
 800fbe4:	4602      	mov	r2, r0
 800fbe6:	2000      	movs	r0, #0
 800fbe8:	f003 f81c 	bl	8012c24 <tcp_rst>
    pbuf_free(p);
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f7fd fde1 	bl	800d7b4 <pbuf_free>
  return;
 800fbf2:	e00c      	b.n	800fc0e <tcp_input+0x7ea>
    goto dropped;
 800fbf4:	bf00      	nop
 800fbf6:	e006      	b.n	800fc06 <tcp_input+0x7e2>
    goto dropped;
 800fbf8:	bf00      	nop
 800fbfa:	e004      	b.n	800fc06 <tcp_input+0x7e2>
    goto dropped;
 800fbfc:	bf00      	nop
 800fbfe:	e002      	b.n	800fc06 <tcp_input+0x7e2>
      goto dropped;
 800fc00:	bf00      	nop
 800fc02:	e000      	b.n	800fc06 <tcp_input+0x7e2>
      goto dropped;
 800fc04:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7fd fdd4 	bl	800d7b4 <pbuf_free>
 800fc0c:	e000      	b.n	800fc10 <tcp_input+0x7ec>
  return;
 800fc0e:	bf00      	nop
}
 800fc10:	3724      	adds	r7, #36	; 0x24
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd90      	pop	{r4, r7, pc}
 800fc16:	bf00      	nop
 800fc18:	240082ac 	.word	0x240082ac
 800fc1c:	240082a8 	.word	0x240082a8
 800fc20:	24008278 	.word	0x24008278
 800fc24:	24008288 	.word	0x24008288
 800fc28:	2400829c 	.word	0x2400829c
 800fc2c:	240082a2 	.word	0x240082a2
 800fc30:	24008298 	.word	0x24008298
 800fc34:	24005328 	.word	0x24005328
 800fc38:	2400532c 	.word	0x2400532c

0800fc3c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d106      	bne.n	800fc58 <tcp_input_delayed_close+0x1c>
 800fc4a:	4b17      	ldr	r3, [pc, #92]	; (800fca8 <tcp_input_delayed_close+0x6c>)
 800fc4c:	f240 225a 	movw	r2, #602	; 0x25a
 800fc50:	4916      	ldr	r1, [pc, #88]	; (800fcac <tcp_input_delayed_close+0x70>)
 800fc52:	4817      	ldr	r0, [pc, #92]	; (800fcb0 <tcp_input_delayed_close+0x74>)
 800fc54:	f003 ffb6 	bl	8013bc4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fc58:	4b16      	ldr	r3, [pc, #88]	; (800fcb4 <tcp_input_delayed_close+0x78>)
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	f003 0310 	and.w	r3, r3, #16
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d01c      	beq.n	800fc9e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	8b5b      	ldrh	r3, [r3, #26]
 800fc68:	f003 0310 	and.w	r3, r3, #16
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d10d      	bne.n	800fc8c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d008      	beq.n	800fc8c <tcp_input_delayed_close+0x50>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc80:	687a      	ldr	r2, [r7, #4]
 800fc82:	6912      	ldr	r2, [r2, #16]
 800fc84:	f06f 010e 	mvn.w	r1, #14
 800fc88:	4610      	mov	r0, r2
 800fc8a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fc8c:	6879      	ldr	r1, [r7, #4]
 800fc8e:	480a      	ldr	r0, [pc, #40]	; (800fcb8 <tcp_input_delayed_close+0x7c>)
 800fc90:	f7ff fa50 	bl	800f134 <tcp_pcb_remove>
    tcp_free(pcb);
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f7fe f83d 	bl	800dd14 <tcp_free>
    return 1;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	e000      	b.n	800fca0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fc9e:	2300      	movs	r3, #0
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3708      	adds	r7, #8
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}
 800fca8:	08016b88 	.word	0x08016b88
 800fcac:	08016d90 	.word	0x08016d90
 800fcb0:	08016c0c 	.word	0x08016c0c
 800fcb4:	240082a5 	.word	0x240082a5
 800fcb8:	2400826c 	.word	0x2400826c

0800fcbc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fcbc:	b590      	push	{r4, r7, lr}
 800fcbe:	b08b      	sub	sp, #44	; 0x2c
 800fcc0:	af04      	add	r7, sp, #16
 800fcc2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fcc4:	4b6f      	ldr	r3, [pc, #444]	; (800fe84 <tcp_listen_input+0x1c8>)
 800fcc6:	781b      	ldrb	r3, [r3, #0]
 800fcc8:	f003 0304 	and.w	r3, r3, #4
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	f040 80d2 	bne.w	800fe76 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d106      	bne.n	800fce6 <tcp_listen_input+0x2a>
 800fcd8:	4b6b      	ldr	r3, [pc, #428]	; (800fe88 <tcp_listen_input+0x1cc>)
 800fcda:	f240 2281 	movw	r2, #641	; 0x281
 800fcde:	496b      	ldr	r1, [pc, #428]	; (800fe8c <tcp_listen_input+0x1d0>)
 800fce0:	486b      	ldr	r0, [pc, #428]	; (800fe90 <tcp_listen_input+0x1d4>)
 800fce2:	f003 ff6f 	bl	8013bc4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fce6:	4b67      	ldr	r3, [pc, #412]	; (800fe84 <tcp_listen_input+0x1c8>)
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	f003 0310 	and.w	r3, r3, #16
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d019      	beq.n	800fd26 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcf2:	4b68      	ldr	r3, [pc, #416]	; (800fe94 <tcp_listen_input+0x1d8>)
 800fcf4:	6819      	ldr	r1, [r3, #0]
 800fcf6:	4b68      	ldr	r3, [pc, #416]	; (800fe98 <tcp_listen_input+0x1dc>)
 800fcf8:	881b      	ldrh	r3, [r3, #0]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	4b67      	ldr	r3, [pc, #412]	; (800fe9c <tcp_listen_input+0x1e0>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd02:	4b67      	ldr	r3, [pc, #412]	; (800fea0 <tcp_listen_input+0x1e4>)
 800fd04:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd06:	885b      	ldrh	r3, [r3, #2]
 800fd08:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd0a:	4a65      	ldr	r2, [pc, #404]	; (800fea0 <tcp_listen_input+0x1e4>)
 800fd0c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd0e:	8812      	ldrh	r2, [r2, #0]
 800fd10:	b292      	uxth	r2, r2
 800fd12:	9202      	str	r2, [sp, #8]
 800fd14:	9301      	str	r3, [sp, #4]
 800fd16:	4b63      	ldr	r3, [pc, #396]	; (800fea4 <tcp_listen_input+0x1e8>)
 800fd18:	9300      	str	r3, [sp, #0]
 800fd1a:	4b63      	ldr	r3, [pc, #396]	; (800fea8 <tcp_listen_input+0x1ec>)
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f002 ff80 	bl	8012c24 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fd24:	e0a9      	b.n	800fe7a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fd26:	4b57      	ldr	r3, [pc, #348]	; (800fe84 <tcp_listen_input+0x1c8>)
 800fd28:	781b      	ldrb	r3, [r3, #0]
 800fd2a:	f003 0302 	and.w	r3, r3, #2
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	f000 80a3 	beq.w	800fe7a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	7d5b      	ldrb	r3, [r3, #21]
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7ff f927 	bl	800ef8c <tcp_alloc>
 800fd3e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d111      	bne.n	800fd6a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	699b      	ldr	r3, [r3, #24]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d00a      	beq.n	800fd64 <tcp_listen_input+0xa8>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	699b      	ldr	r3, [r3, #24]
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	6910      	ldr	r0, [r2, #16]
 800fd56:	f04f 32ff 	mov.w	r2, #4294967295
 800fd5a:	2100      	movs	r1, #0
 800fd5c:	4798      	blx	r3
 800fd5e:	4603      	mov	r3, r0
 800fd60:	73bb      	strb	r3, [r7, #14]
      return;
 800fd62:	e08b      	b.n	800fe7c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd64:	23f0      	movs	r3, #240	; 0xf0
 800fd66:	73bb      	strb	r3, [r7, #14]
      return;
 800fd68:	e088      	b.n	800fe7c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fd6a:	4b50      	ldr	r3, [pc, #320]	; (800feac <tcp_listen_input+0x1f0>)
 800fd6c:	695a      	ldr	r2, [r3, #20]
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fd72:	4b4e      	ldr	r3, [pc, #312]	; (800feac <tcp_listen_input+0x1f0>)
 800fd74:	691a      	ldr	r2, [r3, #16]
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	8ada      	ldrh	r2, [r3, #22]
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fd82:	4b47      	ldr	r3, [pc, #284]	; (800fea0 <tcp_listen_input+0x1e4>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	881b      	ldrh	r3, [r3, #0]
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	2203      	movs	r2, #3
 800fd92:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fd94:	4b41      	ldr	r3, [pc, #260]	; (800fe9c <tcp_listen_input+0x1e0>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	1c5a      	adds	r2, r3, #1
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fda6:	6978      	ldr	r0, [r7, #20]
 800fda8:	f7ff fa58 	bl	800f25c <tcp_next_iss>
 800fdac:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	693a      	ldr	r2, [r7, #16]
 800fdb2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	693a      	ldr	r2, [r7, #16]
 800fdb8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	693a      	ldr	r2, [r7, #16]
 800fdbe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	693a      	ldr	r2, [r7, #16]
 800fdc4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fdc6:	4b35      	ldr	r3, [pc, #212]	; (800fe9c <tcp_listen_input+0x1e0>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	1e5a      	subs	r2, r3, #1
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	691a      	ldr	r2, [r3, #16]
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	687a      	ldr	r2, [r7, #4]
 800fddc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	7a5b      	ldrb	r3, [r3, #9]
 800fde2:	f003 030c 	and.w	r3, r3, #12
 800fde6:	b2da      	uxtb	r2, r3
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	7a1a      	ldrb	r2, [r3, #8]
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fdf4:	4b2e      	ldr	r3, [pc, #184]	; (800feb0 <tcp_listen_input+0x1f4>)
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	60da      	str	r2, [r3, #12]
 800fdfc:	4a2c      	ldr	r2, [pc, #176]	; (800feb0 <tcp_listen_input+0x1f4>)
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	6013      	str	r3, [r2, #0]
 800fe02:	f003 f8d1 	bl	8012fa8 <tcp_timer_needed>
 800fe06:	4b2b      	ldr	r3, [pc, #172]	; (800feb4 <tcp_listen_input+0x1f8>)
 800fe08:	2201      	movs	r2, #1
 800fe0a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fe0c:	6978      	ldr	r0, [r7, #20]
 800fe0e:	f001 fd8f 	bl	8011930 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fe12:	4b23      	ldr	r3, [pc, #140]	; (800fea0 <tcp_listen_input+0x1e4>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	89db      	ldrh	r3, [r3, #14]
 800fe18:	b29a      	uxth	r2, r3
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	3304      	adds	r3, #4
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7fb f887 	bl	800af48 <ip4_route>
 800fe3a:	4601      	mov	r1, r0
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	3304      	adds	r3, #4
 800fe40:	461a      	mov	r2, r3
 800fe42:	4620      	mov	r0, r4
 800fe44:	f7ff fa30 	bl	800f2a8 <tcp_eff_send_mss_netif>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fe50:	2112      	movs	r1, #18
 800fe52:	6978      	ldr	r0, [r7, #20]
 800fe54:	f002 f844 	bl	8011ee0 <tcp_enqueue_flags>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fe5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d004      	beq.n	800fe6e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fe64:	2100      	movs	r1, #0
 800fe66:	6978      	ldr	r0, [r7, #20]
 800fe68:	f7fe f97e 	bl	800e168 <tcp_abandon>
      return;
 800fe6c:	e006      	b.n	800fe7c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fe6e:	6978      	ldr	r0, [r7, #20]
 800fe70:	f002 f924 	bl	80120bc <tcp_output>
  return;
 800fe74:	e001      	b.n	800fe7a <tcp_listen_input+0x1be>
    return;
 800fe76:	bf00      	nop
 800fe78:	e000      	b.n	800fe7c <tcp_listen_input+0x1c0>
  return;
 800fe7a:	bf00      	nop
}
 800fe7c:	371c      	adds	r7, #28
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd90      	pop	{r4, r7, pc}
 800fe82:	bf00      	nop
 800fe84:	240082a4 	.word	0x240082a4
 800fe88:	08016b88 	.word	0x08016b88
 800fe8c:	08016db8 	.word	0x08016db8
 800fe90:	08016c0c 	.word	0x08016c0c
 800fe94:	2400829c 	.word	0x2400829c
 800fe98:	240082a2 	.word	0x240082a2
 800fe9c:	24008298 	.word	0x24008298
 800fea0:	24008288 	.word	0x24008288
 800fea4:	24005328 	.word	0x24005328
 800fea8:	2400532c 	.word	0x2400532c
 800feac:	24005318 	.word	0x24005318
 800feb0:	2400826c 	.word	0x2400826c
 800feb4:	24008274 	.word	0x24008274

0800feb8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b086      	sub	sp, #24
 800febc:	af04      	add	r7, sp, #16
 800febe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fec0:	4b2f      	ldr	r3, [pc, #188]	; (800ff80 <tcp_timewait_input+0xc8>)
 800fec2:	781b      	ldrb	r3, [r3, #0]
 800fec4:	f003 0304 	and.w	r3, r3, #4
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d153      	bne.n	800ff74 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d106      	bne.n	800fee0 <tcp_timewait_input+0x28>
 800fed2:	4b2c      	ldr	r3, [pc, #176]	; (800ff84 <tcp_timewait_input+0xcc>)
 800fed4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fed8:	492b      	ldr	r1, [pc, #172]	; (800ff88 <tcp_timewait_input+0xd0>)
 800feda:	482c      	ldr	r0, [pc, #176]	; (800ff8c <tcp_timewait_input+0xd4>)
 800fedc:	f003 fe72 	bl	8013bc4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fee0:	4b27      	ldr	r3, [pc, #156]	; (800ff80 <tcp_timewait_input+0xc8>)
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	f003 0302 	and.w	r3, r3, #2
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d02a      	beq.n	800ff42 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800feec:	4b28      	ldr	r3, [pc, #160]	; (800ff90 <tcp_timewait_input+0xd8>)
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef4:	1ad3      	subs	r3, r2, r3
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	db2d      	blt.n	800ff56 <tcp_timewait_input+0x9e>
 800fefa:	4b25      	ldr	r3, [pc, #148]	; (800ff90 <tcp_timewait_input+0xd8>)
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff02:	6879      	ldr	r1, [r7, #4]
 800ff04:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff06:	440b      	add	r3, r1
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	dc23      	bgt.n	800ff56 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff0e:	4b21      	ldr	r3, [pc, #132]	; (800ff94 <tcp_timewait_input+0xdc>)
 800ff10:	6819      	ldr	r1, [r3, #0]
 800ff12:	4b21      	ldr	r3, [pc, #132]	; (800ff98 <tcp_timewait_input+0xe0>)
 800ff14:	881b      	ldrh	r3, [r3, #0]
 800ff16:	461a      	mov	r2, r3
 800ff18:	4b1d      	ldr	r3, [pc, #116]	; (800ff90 <tcp_timewait_input+0xd8>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff1e:	4b1f      	ldr	r3, [pc, #124]	; (800ff9c <tcp_timewait_input+0xe4>)
 800ff20:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff22:	885b      	ldrh	r3, [r3, #2]
 800ff24:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff26:	4a1d      	ldr	r2, [pc, #116]	; (800ff9c <tcp_timewait_input+0xe4>)
 800ff28:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff2a:	8812      	ldrh	r2, [r2, #0]
 800ff2c:	b292      	uxth	r2, r2
 800ff2e:	9202      	str	r2, [sp, #8]
 800ff30:	9301      	str	r3, [sp, #4]
 800ff32:	4b1b      	ldr	r3, [pc, #108]	; (800ffa0 <tcp_timewait_input+0xe8>)
 800ff34:	9300      	str	r3, [sp, #0]
 800ff36:	4b1b      	ldr	r3, [pc, #108]	; (800ffa4 <tcp_timewait_input+0xec>)
 800ff38:	4602      	mov	r2, r0
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f002 fe72 	bl	8012c24 <tcp_rst>
      return;
 800ff40:	e01b      	b.n	800ff7a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ff42:	4b0f      	ldr	r3, [pc, #60]	; (800ff80 <tcp_timewait_input+0xc8>)
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	f003 0301 	and.w	r3, r3, #1
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d003      	beq.n	800ff56 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ff4e:	4b16      	ldr	r3, [pc, #88]	; (800ffa8 <tcp_timewait_input+0xf0>)
 800ff50:	681a      	ldr	r2, [r3, #0]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ff56:	4b10      	ldr	r3, [pc, #64]	; (800ff98 <tcp_timewait_input+0xe0>)
 800ff58:	881b      	ldrh	r3, [r3, #0]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d00c      	beq.n	800ff78 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	8b5b      	ldrh	r3, [r3, #26]
 800ff62:	f043 0302 	orr.w	r3, r3, #2
 800ff66:	b29a      	uxth	r2, r3
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f002 f8a5 	bl	80120bc <tcp_output>
  }
  return;
 800ff72:	e001      	b.n	800ff78 <tcp_timewait_input+0xc0>
    return;
 800ff74:	bf00      	nop
 800ff76:	e000      	b.n	800ff7a <tcp_timewait_input+0xc2>
  return;
 800ff78:	bf00      	nop
}
 800ff7a:	3708      	adds	r7, #8
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	240082a4 	.word	0x240082a4
 800ff84:	08016b88 	.word	0x08016b88
 800ff88:	08016dd8 	.word	0x08016dd8
 800ff8c:	08016c0c 	.word	0x08016c0c
 800ff90:	24008298 	.word	0x24008298
 800ff94:	2400829c 	.word	0x2400829c
 800ff98:	240082a2 	.word	0x240082a2
 800ff9c:	24008288 	.word	0x24008288
 800ffa0:	24005328 	.word	0x24005328
 800ffa4:	2400532c 	.word	0x2400532c
 800ffa8:	24008260 	.word	0x24008260

0800ffac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ffac:	b590      	push	{r4, r7, lr}
 800ffae:	b08d      	sub	sp, #52	; 0x34
 800ffb0:	af04      	add	r7, sp, #16
 800ffb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d106      	bne.n	800ffd0 <tcp_process+0x24>
 800ffc2:	4b9d      	ldr	r3, [pc, #628]	; (8010238 <tcp_process+0x28c>)
 800ffc4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ffc8:	499c      	ldr	r1, [pc, #624]	; (801023c <tcp_process+0x290>)
 800ffca:	489d      	ldr	r0, [pc, #628]	; (8010240 <tcp_process+0x294>)
 800ffcc:	f003 fdfa 	bl	8013bc4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ffd0:	4b9c      	ldr	r3, [pc, #624]	; (8010244 <tcp_process+0x298>)
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	f003 0304 	and.w	r3, r3, #4
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d04e      	beq.n	801007a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	7d1b      	ldrb	r3, [r3, #20]
 800ffe0:	2b02      	cmp	r3, #2
 800ffe2:	d108      	bne.n	800fff6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ffe8:	4b97      	ldr	r3, [pc, #604]	; (8010248 <tcp_process+0x29c>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d123      	bne.n	8010038 <tcp_process+0x8c>
        acceptable = 1;
 800fff0:	2301      	movs	r3, #1
 800fff2:	76fb      	strb	r3, [r7, #27]
 800fff4:	e020      	b.n	8010038 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fffa:	4b94      	ldr	r3, [pc, #592]	; (801024c <tcp_process+0x2a0>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d102      	bne.n	8010008 <tcp_process+0x5c>
        acceptable = 1;
 8010002:	2301      	movs	r3, #1
 8010004:	76fb      	strb	r3, [r7, #27]
 8010006:	e017      	b.n	8010038 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010008:	4b90      	ldr	r3, [pc, #576]	; (801024c <tcp_process+0x2a0>)
 801000a:	681a      	ldr	r2, [r3, #0]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010010:	1ad3      	subs	r3, r2, r3
 8010012:	2b00      	cmp	r3, #0
 8010014:	db10      	blt.n	8010038 <tcp_process+0x8c>
 8010016:	4b8d      	ldr	r3, [pc, #564]	; (801024c <tcp_process+0x2a0>)
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801001e:	6879      	ldr	r1, [r7, #4]
 8010020:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010022:	440b      	add	r3, r1
 8010024:	1ad3      	subs	r3, r2, r3
 8010026:	2b00      	cmp	r3, #0
 8010028:	dc06      	bgt.n	8010038 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	8b5b      	ldrh	r3, [r3, #26]
 801002e:	f043 0302 	orr.w	r3, r3, #2
 8010032:	b29a      	uxth	r2, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010038:	7efb      	ldrb	r3, [r7, #27]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d01b      	beq.n	8010076 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	7d1b      	ldrb	r3, [r3, #20]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d106      	bne.n	8010054 <tcp_process+0xa8>
 8010046:	4b7c      	ldr	r3, [pc, #496]	; (8010238 <tcp_process+0x28c>)
 8010048:	f44f 724e 	mov.w	r2, #824	; 0x338
 801004c:	4980      	ldr	r1, [pc, #512]	; (8010250 <tcp_process+0x2a4>)
 801004e:	487c      	ldr	r0, [pc, #496]	; (8010240 <tcp_process+0x294>)
 8010050:	f003 fdb8 	bl	8013bc4 <iprintf>
      recv_flags |= TF_RESET;
 8010054:	4b7f      	ldr	r3, [pc, #508]	; (8010254 <tcp_process+0x2a8>)
 8010056:	781b      	ldrb	r3, [r3, #0]
 8010058:	f043 0308 	orr.w	r3, r3, #8
 801005c:	b2da      	uxtb	r2, r3
 801005e:	4b7d      	ldr	r3, [pc, #500]	; (8010254 <tcp_process+0x2a8>)
 8010060:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	8b5b      	ldrh	r3, [r3, #26]
 8010066:	f023 0301 	bic.w	r3, r3, #1
 801006a:	b29a      	uxth	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010070:	f06f 030d 	mvn.w	r3, #13
 8010074:	e37a      	b.n	801076c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010076:	2300      	movs	r3, #0
 8010078:	e378      	b.n	801076c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801007a:	4b72      	ldr	r3, [pc, #456]	; (8010244 <tcp_process+0x298>)
 801007c:	781b      	ldrb	r3, [r3, #0]
 801007e:	f003 0302 	and.w	r3, r3, #2
 8010082:	2b00      	cmp	r3, #0
 8010084:	d010      	beq.n	80100a8 <tcp_process+0xfc>
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	7d1b      	ldrb	r3, [r3, #20]
 801008a:	2b02      	cmp	r3, #2
 801008c:	d00c      	beq.n	80100a8 <tcp_process+0xfc>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	7d1b      	ldrb	r3, [r3, #20]
 8010092:	2b03      	cmp	r3, #3
 8010094:	d008      	beq.n	80100a8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	8b5b      	ldrh	r3, [r3, #26]
 801009a:	f043 0302 	orr.w	r3, r3, #2
 801009e:	b29a      	uxth	r2, r3
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80100a4:	2300      	movs	r3, #0
 80100a6:	e361      	b.n	801076c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	8b5b      	ldrh	r3, [r3, #26]
 80100ac:	f003 0310 	and.w	r3, r3, #16
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d103      	bne.n	80100bc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80100b4:	4b68      	ldr	r3, [pc, #416]	; (8010258 <tcp_process+0x2ac>)
 80100b6:	681a      	ldr	r2, [r3, #0]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2200      	movs	r2, #0
 80100c0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2200      	movs	r2, #0
 80100c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f001 fc2f 	bl	8011930 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	7d1b      	ldrb	r3, [r3, #20]
 80100d6:	3b02      	subs	r3, #2
 80100d8:	2b07      	cmp	r3, #7
 80100da:	f200 8337 	bhi.w	801074c <tcp_process+0x7a0>
 80100de:	a201      	add	r2, pc, #4	; (adr r2, 80100e4 <tcp_process+0x138>)
 80100e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100e4:	08010105 	.word	0x08010105
 80100e8:	08010335 	.word	0x08010335
 80100ec:	080104ad 	.word	0x080104ad
 80100f0:	080104d7 	.word	0x080104d7
 80100f4:	080105fb 	.word	0x080105fb
 80100f8:	080104ad 	.word	0x080104ad
 80100fc:	08010687 	.word	0x08010687
 8010100:	08010717 	.word	0x08010717
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010104:	4b4f      	ldr	r3, [pc, #316]	; (8010244 <tcp_process+0x298>)
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	f003 0310 	and.w	r3, r3, #16
 801010c:	2b00      	cmp	r3, #0
 801010e:	f000 80e4 	beq.w	80102da <tcp_process+0x32e>
 8010112:	4b4c      	ldr	r3, [pc, #304]	; (8010244 <tcp_process+0x298>)
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	f003 0302 	and.w	r3, r3, #2
 801011a:	2b00      	cmp	r3, #0
 801011c:	f000 80dd 	beq.w	80102da <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010124:	1c5a      	adds	r2, r3, #1
 8010126:	4b48      	ldr	r3, [pc, #288]	; (8010248 <tcp_process+0x29c>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	429a      	cmp	r2, r3
 801012c:	f040 80d5 	bne.w	80102da <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010130:	4b46      	ldr	r3, [pc, #280]	; (801024c <tcp_process+0x2a0>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	1c5a      	adds	r2, r3, #1
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010142:	4b41      	ldr	r3, [pc, #260]	; (8010248 <tcp_process+0x29c>)
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801014a:	4b44      	ldr	r3, [pc, #272]	; (801025c <tcp_process+0x2b0>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	89db      	ldrh	r3, [r3, #14]
 8010150:	b29a      	uxth	r2, r3
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010164:	4b39      	ldr	r3, [pc, #228]	; (801024c <tcp_process+0x2a0>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	1e5a      	subs	r2, r3, #1
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2204      	movs	r2, #4
 8010172:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	3304      	adds	r3, #4
 801017c:	4618      	mov	r0, r3
 801017e:	f7fa fee3 	bl	800af48 <ip4_route>
 8010182:	4601      	mov	r1, r0
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	3304      	adds	r3, #4
 8010188:	461a      	mov	r2, r3
 801018a:	4620      	mov	r0, r4
 801018c:	f7ff f88c 	bl	800f2a8 <tcp_eff_send_mss_netif>
 8010190:	4603      	mov	r3, r0
 8010192:	461a      	mov	r2, r3
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801019c:	009a      	lsls	r2, r3, #2
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101a2:	005b      	lsls	r3, r3, #1
 80101a4:	f241 111c 	movw	r1, #4380	; 0x111c
 80101a8:	428b      	cmp	r3, r1
 80101aa:	bf38      	it	cc
 80101ac:	460b      	movcc	r3, r1
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d204      	bcs.n	80101bc <tcp_process+0x210>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101b6:	009b      	lsls	r3, r3, #2
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	e00d      	b.n	80101d8 <tcp_process+0x22c>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101c0:	005b      	lsls	r3, r3, #1
 80101c2:	f241 121c 	movw	r2, #4380	; 0x111c
 80101c6:	4293      	cmp	r3, r2
 80101c8:	d904      	bls.n	80101d4 <tcp_process+0x228>
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101ce:	005b      	lsls	r3, r3, #1
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	e001      	b.n	80101d8 <tcp_process+0x22c>
 80101d4:	f241 131c 	movw	r3, #4380	; 0x111c
 80101d8:	687a      	ldr	r2, [r7, #4]
 80101da:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d106      	bne.n	80101f6 <tcp_process+0x24a>
 80101e8:	4b13      	ldr	r3, [pc, #76]	; (8010238 <tcp_process+0x28c>)
 80101ea:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80101ee:	491c      	ldr	r1, [pc, #112]	; (8010260 <tcp_process+0x2b4>)
 80101f0:	4813      	ldr	r0, [pc, #76]	; (8010240 <tcp_process+0x294>)
 80101f2:	f003 fce7 	bl	8013bc4 <iprintf>
        --pcb->snd_queuelen;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101fc:	3b01      	subs	r3, #1
 80101fe:	b29a      	uxth	r2, r3
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801020a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801020c:	69fb      	ldr	r3, [r7, #28]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d12a      	bne.n	8010268 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010216:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d106      	bne.n	801022c <tcp_process+0x280>
 801021e:	4b06      	ldr	r3, [pc, #24]	; (8010238 <tcp_process+0x28c>)
 8010220:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010224:	490f      	ldr	r1, [pc, #60]	; (8010264 <tcp_process+0x2b8>)
 8010226:	4806      	ldr	r0, [pc, #24]	; (8010240 <tcp_process+0x294>)
 8010228:	f003 fccc 	bl	8013bc4 <iprintf>
          pcb->unsent = rseg->next;
 801022c:	69fb      	ldr	r3, [r7, #28]
 801022e:	681a      	ldr	r2, [r3, #0]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	66da      	str	r2, [r3, #108]	; 0x6c
 8010234:	e01c      	b.n	8010270 <tcp_process+0x2c4>
 8010236:	bf00      	nop
 8010238:	08016b88 	.word	0x08016b88
 801023c:	08016df8 	.word	0x08016df8
 8010240:	08016c0c 	.word	0x08016c0c
 8010244:	240082a4 	.word	0x240082a4
 8010248:	2400829c 	.word	0x2400829c
 801024c:	24008298 	.word	0x24008298
 8010250:	08016e14 	.word	0x08016e14
 8010254:	240082a5 	.word	0x240082a5
 8010258:	24008260 	.word	0x24008260
 801025c:	24008288 	.word	0x24008288
 8010260:	08016e34 	.word	0x08016e34
 8010264:	08016e4c 	.word	0x08016e4c
        } else {
          pcb->unacked = rseg->next;
 8010268:	69fb      	ldr	r3, [r7, #28]
 801026a:	681a      	ldr	r2, [r3, #0]
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010270:	69f8      	ldr	r0, [r7, #28]
 8010272:	f7fe fd22 	bl	800ecba <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801027a:	2b00      	cmp	r3, #0
 801027c:	d104      	bne.n	8010288 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010284:	861a      	strh	r2, [r3, #48]	; 0x30
 8010286:	e006      	b.n	8010296 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2200      	movs	r2, #0
 801028c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2200      	movs	r2, #0
 8010292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801029c:	2b00      	cmp	r3, #0
 801029e:	d00a      	beq.n	80102b6 <tcp_process+0x30a>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102a6:	687a      	ldr	r2, [r7, #4]
 80102a8:	6910      	ldr	r0, [r2, #16]
 80102aa:	2200      	movs	r2, #0
 80102ac:	6879      	ldr	r1, [r7, #4]
 80102ae:	4798      	blx	r3
 80102b0:	4603      	mov	r3, r0
 80102b2:	76bb      	strb	r3, [r7, #26]
 80102b4:	e001      	b.n	80102ba <tcp_process+0x30e>
 80102b6:	2300      	movs	r3, #0
 80102b8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80102ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80102be:	f113 0f0d 	cmn.w	r3, #13
 80102c2:	d102      	bne.n	80102ca <tcp_process+0x31e>
          return ERR_ABRT;
 80102c4:	f06f 030c 	mvn.w	r3, #12
 80102c8:	e250      	b.n	801076c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	8b5b      	ldrh	r3, [r3, #26]
 80102ce:	f043 0302 	orr.w	r3, r3, #2
 80102d2:	b29a      	uxth	r2, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80102d8:	e23a      	b.n	8010750 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80102da:	4b98      	ldr	r3, [pc, #608]	; (801053c <tcp_process+0x590>)
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	f003 0310 	and.w	r3, r3, #16
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	f000 8234 	beq.w	8010750 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102e8:	4b95      	ldr	r3, [pc, #596]	; (8010540 <tcp_process+0x594>)
 80102ea:	6819      	ldr	r1, [r3, #0]
 80102ec:	4b95      	ldr	r3, [pc, #596]	; (8010544 <tcp_process+0x598>)
 80102ee:	881b      	ldrh	r3, [r3, #0]
 80102f0:	461a      	mov	r2, r3
 80102f2:	4b95      	ldr	r3, [pc, #596]	; (8010548 <tcp_process+0x59c>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102f8:	4b94      	ldr	r3, [pc, #592]	; (801054c <tcp_process+0x5a0>)
 80102fa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102fc:	885b      	ldrh	r3, [r3, #2]
 80102fe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010300:	4a92      	ldr	r2, [pc, #584]	; (801054c <tcp_process+0x5a0>)
 8010302:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010304:	8812      	ldrh	r2, [r2, #0]
 8010306:	b292      	uxth	r2, r2
 8010308:	9202      	str	r2, [sp, #8]
 801030a:	9301      	str	r3, [sp, #4]
 801030c:	4b90      	ldr	r3, [pc, #576]	; (8010550 <tcp_process+0x5a4>)
 801030e:	9300      	str	r3, [sp, #0]
 8010310:	4b90      	ldr	r3, [pc, #576]	; (8010554 <tcp_process+0x5a8>)
 8010312:	4602      	mov	r2, r0
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f002 fc85 	bl	8012c24 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010320:	2b05      	cmp	r3, #5
 8010322:	f200 8215 	bhi.w	8010750 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2200      	movs	r2, #0
 801032a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f002 fa4f 	bl	80127d0 <tcp_rexmit_rto>
      break;
 8010332:	e20d      	b.n	8010750 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010334:	4b81      	ldr	r3, [pc, #516]	; (801053c <tcp_process+0x590>)
 8010336:	781b      	ldrb	r3, [r3, #0]
 8010338:	f003 0310 	and.w	r3, r3, #16
 801033c:	2b00      	cmp	r3, #0
 801033e:	f000 80a1 	beq.w	8010484 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010342:	4b7f      	ldr	r3, [pc, #508]	; (8010540 <tcp_process+0x594>)
 8010344:	681a      	ldr	r2, [r3, #0]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801034a:	1ad3      	subs	r3, r2, r3
 801034c:	3b01      	subs	r3, #1
 801034e:	2b00      	cmp	r3, #0
 8010350:	db7e      	blt.n	8010450 <tcp_process+0x4a4>
 8010352:	4b7b      	ldr	r3, [pc, #492]	; (8010540 <tcp_process+0x594>)
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801035a:	1ad3      	subs	r3, r2, r3
 801035c:	2b00      	cmp	r3, #0
 801035e:	dc77      	bgt.n	8010450 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2204      	movs	r2, #4
 8010364:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801036a:	2b00      	cmp	r3, #0
 801036c:	d102      	bne.n	8010374 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801036e:	23fa      	movs	r3, #250	; 0xfa
 8010370:	76bb      	strb	r3, [r7, #26]
 8010372:	e01d      	b.n	80103b0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010378:	699b      	ldr	r3, [r3, #24]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d106      	bne.n	801038c <tcp_process+0x3e0>
 801037e:	4b76      	ldr	r3, [pc, #472]	; (8010558 <tcp_process+0x5ac>)
 8010380:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010384:	4975      	ldr	r1, [pc, #468]	; (801055c <tcp_process+0x5b0>)
 8010386:	4876      	ldr	r0, [pc, #472]	; (8010560 <tcp_process+0x5b4>)
 8010388:	f003 fc1c 	bl	8013bc4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010390:	699b      	ldr	r3, [r3, #24]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00a      	beq.n	80103ac <tcp_process+0x400>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801039a:	699b      	ldr	r3, [r3, #24]
 801039c:	687a      	ldr	r2, [r7, #4]
 801039e:	6910      	ldr	r0, [r2, #16]
 80103a0:	2200      	movs	r2, #0
 80103a2:	6879      	ldr	r1, [r7, #4]
 80103a4:	4798      	blx	r3
 80103a6:	4603      	mov	r3, r0
 80103a8:	76bb      	strb	r3, [r7, #26]
 80103aa:	e001      	b.n	80103b0 <tcp_process+0x404>
 80103ac:	23f0      	movs	r3, #240	; 0xf0
 80103ae:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80103b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d00a      	beq.n	80103ce <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80103b8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103bc:	f113 0f0d 	cmn.w	r3, #13
 80103c0:	d002      	beq.n	80103c8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f7fd ff8e 	bl	800e2e4 <tcp_abort>
            }
            return ERR_ABRT;
 80103c8:	f06f 030c 	mvn.w	r3, #12
 80103cc:	e1ce      	b.n	801076c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f000 fae0 	bl	8010994 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80103d4:	4b63      	ldr	r3, [pc, #396]	; (8010564 <tcp_process+0x5b8>)
 80103d6:	881b      	ldrh	r3, [r3, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d005      	beq.n	80103e8 <tcp_process+0x43c>
            recv_acked--;
 80103dc:	4b61      	ldr	r3, [pc, #388]	; (8010564 <tcp_process+0x5b8>)
 80103de:	881b      	ldrh	r3, [r3, #0]
 80103e0:	3b01      	subs	r3, #1
 80103e2:	b29a      	uxth	r2, r3
 80103e4:	4b5f      	ldr	r3, [pc, #380]	; (8010564 <tcp_process+0x5b8>)
 80103e6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103ec:	009a      	lsls	r2, r3, #2
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103f2:	005b      	lsls	r3, r3, #1
 80103f4:	f241 111c 	movw	r1, #4380	; 0x111c
 80103f8:	428b      	cmp	r3, r1
 80103fa:	bf38      	it	cc
 80103fc:	460b      	movcc	r3, r1
 80103fe:	429a      	cmp	r2, r3
 8010400:	d204      	bcs.n	801040c <tcp_process+0x460>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010406:	009b      	lsls	r3, r3, #2
 8010408:	b29b      	uxth	r3, r3
 801040a:	e00d      	b.n	8010428 <tcp_process+0x47c>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010410:	005b      	lsls	r3, r3, #1
 8010412:	f241 121c 	movw	r2, #4380	; 0x111c
 8010416:	4293      	cmp	r3, r2
 8010418:	d904      	bls.n	8010424 <tcp_process+0x478>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801041e:	005b      	lsls	r3, r3, #1
 8010420:	b29b      	uxth	r3, r3
 8010422:	e001      	b.n	8010428 <tcp_process+0x47c>
 8010424:	f241 131c 	movw	r3, #4380	; 0x111c
 8010428:	687a      	ldr	r2, [r7, #4]
 801042a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801042e:	4b4e      	ldr	r3, [pc, #312]	; (8010568 <tcp_process+0x5bc>)
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	f003 0320 	and.w	r3, r3, #32
 8010436:	2b00      	cmp	r3, #0
 8010438:	d037      	beq.n	80104aa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	8b5b      	ldrh	r3, [r3, #26]
 801043e:	f043 0302 	orr.w	r3, r3, #2
 8010442:	b29a      	uxth	r2, r3
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2207      	movs	r2, #7
 801044c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801044e:	e02c      	b.n	80104aa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010450:	4b3b      	ldr	r3, [pc, #236]	; (8010540 <tcp_process+0x594>)
 8010452:	6819      	ldr	r1, [r3, #0]
 8010454:	4b3b      	ldr	r3, [pc, #236]	; (8010544 <tcp_process+0x598>)
 8010456:	881b      	ldrh	r3, [r3, #0]
 8010458:	461a      	mov	r2, r3
 801045a:	4b3b      	ldr	r3, [pc, #236]	; (8010548 <tcp_process+0x59c>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010460:	4b3a      	ldr	r3, [pc, #232]	; (801054c <tcp_process+0x5a0>)
 8010462:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010464:	885b      	ldrh	r3, [r3, #2]
 8010466:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010468:	4a38      	ldr	r2, [pc, #224]	; (801054c <tcp_process+0x5a0>)
 801046a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801046c:	8812      	ldrh	r2, [r2, #0]
 801046e:	b292      	uxth	r2, r2
 8010470:	9202      	str	r2, [sp, #8]
 8010472:	9301      	str	r3, [sp, #4]
 8010474:	4b36      	ldr	r3, [pc, #216]	; (8010550 <tcp_process+0x5a4>)
 8010476:	9300      	str	r3, [sp, #0]
 8010478:	4b36      	ldr	r3, [pc, #216]	; (8010554 <tcp_process+0x5a8>)
 801047a:	4602      	mov	r2, r0
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f002 fbd1 	bl	8012c24 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010482:	e167      	b.n	8010754 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010484:	4b2d      	ldr	r3, [pc, #180]	; (801053c <tcp_process+0x590>)
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	f003 0302 	and.w	r3, r3, #2
 801048c:	2b00      	cmp	r3, #0
 801048e:	f000 8161 	beq.w	8010754 <tcp_process+0x7a8>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010496:	1e5a      	subs	r2, r3, #1
 8010498:	4b2b      	ldr	r3, [pc, #172]	; (8010548 <tcp_process+0x59c>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	429a      	cmp	r2, r3
 801049e:	f040 8159 	bne.w	8010754 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f002 f9b6 	bl	8012814 <tcp_rexmit>
      break;
 80104a8:	e154      	b.n	8010754 <tcp_process+0x7a8>
 80104aa:	e153      	b.n	8010754 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80104ac:	6878      	ldr	r0, [r7, #4]
 80104ae:	f000 fa71 	bl	8010994 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80104b2:	4b2d      	ldr	r3, [pc, #180]	; (8010568 <tcp_process+0x5bc>)
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	f003 0320 	and.w	r3, r3, #32
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	f000 814c 	beq.w	8010758 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	8b5b      	ldrh	r3, [r3, #26]
 80104c4:	f043 0302 	orr.w	r3, r3, #2
 80104c8:	b29a      	uxth	r2, r3
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2207      	movs	r2, #7
 80104d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80104d4:	e140      	b.n	8010758 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f000 fa5c 	bl	8010994 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80104dc:	4b22      	ldr	r3, [pc, #136]	; (8010568 <tcp_process+0x5bc>)
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	f003 0320 	and.w	r3, r3, #32
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d071      	beq.n	80105cc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80104e8:	4b14      	ldr	r3, [pc, #80]	; (801053c <tcp_process+0x590>)
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	f003 0310 	and.w	r3, r3, #16
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d060      	beq.n	80105b6 <tcp_process+0x60a>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80104f8:	4b11      	ldr	r3, [pc, #68]	; (8010540 <tcp_process+0x594>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d15a      	bne.n	80105b6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010504:	2b00      	cmp	r3, #0
 8010506:	d156      	bne.n	80105b6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	8b5b      	ldrh	r3, [r3, #26]
 801050c:	f043 0302 	orr.w	r3, r3, #2
 8010510:	b29a      	uxth	r2, r3
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f7fe fdbc 	bl	800f094 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801051c:	4b13      	ldr	r3, [pc, #76]	; (801056c <tcp_process+0x5c0>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	687a      	ldr	r2, [r7, #4]
 8010522:	429a      	cmp	r2, r3
 8010524:	d105      	bne.n	8010532 <tcp_process+0x586>
 8010526:	4b11      	ldr	r3, [pc, #68]	; (801056c <tcp_process+0x5c0>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	68db      	ldr	r3, [r3, #12]
 801052c:	4a0f      	ldr	r2, [pc, #60]	; (801056c <tcp_process+0x5c0>)
 801052e:	6013      	str	r3, [r2, #0]
 8010530:	e02e      	b.n	8010590 <tcp_process+0x5e4>
 8010532:	4b0e      	ldr	r3, [pc, #56]	; (801056c <tcp_process+0x5c0>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	617b      	str	r3, [r7, #20]
 8010538:	e027      	b.n	801058a <tcp_process+0x5de>
 801053a:	bf00      	nop
 801053c:	240082a4 	.word	0x240082a4
 8010540:	2400829c 	.word	0x2400829c
 8010544:	240082a2 	.word	0x240082a2
 8010548:	24008298 	.word	0x24008298
 801054c:	24008288 	.word	0x24008288
 8010550:	24005328 	.word	0x24005328
 8010554:	2400532c 	.word	0x2400532c
 8010558:	08016b88 	.word	0x08016b88
 801055c:	08016e60 	.word	0x08016e60
 8010560:	08016c0c 	.word	0x08016c0c
 8010564:	240082a0 	.word	0x240082a0
 8010568:	240082a5 	.word	0x240082a5
 801056c:	2400826c 	.word	0x2400826c
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	68db      	ldr	r3, [r3, #12]
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	429a      	cmp	r2, r3
 8010578:	d104      	bne.n	8010584 <tcp_process+0x5d8>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	68da      	ldr	r2, [r3, #12]
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	60da      	str	r2, [r3, #12]
 8010582:	e005      	b.n	8010590 <tcp_process+0x5e4>
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	68db      	ldr	r3, [r3, #12]
 8010588:	617b      	str	r3, [r7, #20]
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d1ef      	bne.n	8010570 <tcp_process+0x5c4>
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	60da      	str	r2, [r3, #12]
 8010596:	4b77      	ldr	r3, [pc, #476]	; (8010774 <tcp_process+0x7c8>)
 8010598:	2201      	movs	r2, #1
 801059a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	220a      	movs	r2, #10
 80105a0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80105a2:	4b75      	ldr	r3, [pc, #468]	; (8010778 <tcp_process+0x7cc>)
 80105a4:	681a      	ldr	r2, [r3, #0]
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	60da      	str	r2, [r3, #12]
 80105aa:	4a73      	ldr	r2, [pc, #460]	; (8010778 <tcp_process+0x7cc>)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6013      	str	r3, [r2, #0]
 80105b0:	f002 fcfa 	bl	8012fa8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80105b4:	e0d2      	b.n	801075c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	8b5b      	ldrh	r3, [r3, #26]
 80105ba:	f043 0302 	orr.w	r3, r3, #2
 80105be:	b29a      	uxth	r2, r3
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2208      	movs	r2, #8
 80105c8:	751a      	strb	r2, [r3, #20]
      break;
 80105ca:	e0c7      	b.n	801075c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105cc:	4b6b      	ldr	r3, [pc, #428]	; (801077c <tcp_process+0x7d0>)
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	f003 0310 	and.w	r3, r3, #16
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	f000 80c1 	beq.w	801075c <tcp_process+0x7b0>
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105de:	4b68      	ldr	r3, [pc, #416]	; (8010780 <tcp_process+0x7d4>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	429a      	cmp	r2, r3
 80105e4:	f040 80ba 	bne.w	801075c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	f040 80b5 	bne.w	801075c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2206      	movs	r2, #6
 80105f6:	751a      	strb	r2, [r3, #20]
      break;
 80105f8:	e0b0      	b.n	801075c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f000 f9ca 	bl	8010994 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010600:	4b60      	ldr	r3, [pc, #384]	; (8010784 <tcp_process+0x7d8>)
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	f003 0320 	and.w	r3, r3, #32
 8010608:	2b00      	cmp	r3, #0
 801060a:	f000 80a9 	beq.w	8010760 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	8b5b      	ldrh	r3, [r3, #26]
 8010612:	f043 0302 	orr.w	r3, r3, #2
 8010616:	b29a      	uxth	r2, r3
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f7fe fd39 	bl	800f094 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010622:	4b59      	ldr	r3, [pc, #356]	; (8010788 <tcp_process+0x7dc>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	687a      	ldr	r2, [r7, #4]
 8010628:	429a      	cmp	r2, r3
 801062a:	d105      	bne.n	8010638 <tcp_process+0x68c>
 801062c:	4b56      	ldr	r3, [pc, #344]	; (8010788 <tcp_process+0x7dc>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	68db      	ldr	r3, [r3, #12]
 8010632:	4a55      	ldr	r2, [pc, #340]	; (8010788 <tcp_process+0x7dc>)
 8010634:	6013      	str	r3, [r2, #0]
 8010636:	e013      	b.n	8010660 <tcp_process+0x6b4>
 8010638:	4b53      	ldr	r3, [pc, #332]	; (8010788 <tcp_process+0x7dc>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	613b      	str	r3, [r7, #16]
 801063e:	e00c      	b.n	801065a <tcp_process+0x6ae>
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	68db      	ldr	r3, [r3, #12]
 8010644:	687a      	ldr	r2, [r7, #4]
 8010646:	429a      	cmp	r2, r3
 8010648:	d104      	bne.n	8010654 <tcp_process+0x6a8>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	68da      	ldr	r2, [r3, #12]
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	60da      	str	r2, [r3, #12]
 8010652:	e005      	b.n	8010660 <tcp_process+0x6b4>
 8010654:	693b      	ldr	r3, [r7, #16]
 8010656:	68db      	ldr	r3, [r3, #12]
 8010658:	613b      	str	r3, [r7, #16]
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d1ef      	bne.n	8010640 <tcp_process+0x694>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2200      	movs	r2, #0
 8010664:	60da      	str	r2, [r3, #12]
 8010666:	4b43      	ldr	r3, [pc, #268]	; (8010774 <tcp_process+0x7c8>)
 8010668:	2201      	movs	r2, #1
 801066a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	220a      	movs	r2, #10
 8010670:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010672:	4b41      	ldr	r3, [pc, #260]	; (8010778 <tcp_process+0x7cc>)
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	60da      	str	r2, [r3, #12]
 801067a:	4a3f      	ldr	r2, [pc, #252]	; (8010778 <tcp_process+0x7cc>)
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6013      	str	r3, [r2, #0]
 8010680:	f002 fc92 	bl	8012fa8 <tcp_timer_needed>
      }
      break;
 8010684:	e06c      	b.n	8010760 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f000 f984 	bl	8010994 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801068c:	4b3b      	ldr	r3, [pc, #236]	; (801077c <tcp_process+0x7d0>)
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	f003 0310 	and.w	r3, r3, #16
 8010694:	2b00      	cmp	r3, #0
 8010696:	d065      	beq.n	8010764 <tcp_process+0x7b8>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801069c:	4b38      	ldr	r3, [pc, #224]	; (8010780 <tcp_process+0x7d4>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d15f      	bne.n	8010764 <tcp_process+0x7b8>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d15b      	bne.n	8010764 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f7fe fcf1 	bl	800f094 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80106b2:	4b35      	ldr	r3, [pc, #212]	; (8010788 <tcp_process+0x7dc>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	687a      	ldr	r2, [r7, #4]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d105      	bne.n	80106c8 <tcp_process+0x71c>
 80106bc:	4b32      	ldr	r3, [pc, #200]	; (8010788 <tcp_process+0x7dc>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	68db      	ldr	r3, [r3, #12]
 80106c2:	4a31      	ldr	r2, [pc, #196]	; (8010788 <tcp_process+0x7dc>)
 80106c4:	6013      	str	r3, [r2, #0]
 80106c6:	e013      	b.n	80106f0 <tcp_process+0x744>
 80106c8:	4b2f      	ldr	r3, [pc, #188]	; (8010788 <tcp_process+0x7dc>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	60fb      	str	r3, [r7, #12]
 80106ce:	e00c      	b.n	80106ea <tcp_process+0x73e>
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	68db      	ldr	r3, [r3, #12]
 80106d4:	687a      	ldr	r2, [r7, #4]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d104      	bne.n	80106e4 <tcp_process+0x738>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	68da      	ldr	r2, [r3, #12]
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	60da      	str	r2, [r3, #12]
 80106e2:	e005      	b.n	80106f0 <tcp_process+0x744>
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	68db      	ldr	r3, [r3, #12]
 80106e8:	60fb      	str	r3, [r7, #12]
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d1ef      	bne.n	80106d0 <tcp_process+0x724>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2200      	movs	r2, #0
 80106f4:	60da      	str	r2, [r3, #12]
 80106f6:	4b1f      	ldr	r3, [pc, #124]	; (8010774 <tcp_process+0x7c8>)
 80106f8:	2201      	movs	r2, #1
 80106fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	220a      	movs	r2, #10
 8010700:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010702:	4b1d      	ldr	r3, [pc, #116]	; (8010778 <tcp_process+0x7cc>)
 8010704:	681a      	ldr	r2, [r3, #0]
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	60da      	str	r2, [r3, #12]
 801070a:	4a1b      	ldr	r2, [pc, #108]	; (8010778 <tcp_process+0x7cc>)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6013      	str	r3, [r2, #0]
 8010710:	f002 fc4a 	bl	8012fa8 <tcp_timer_needed>
      }
      break;
 8010714:	e026      	b.n	8010764 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f000 f93c 	bl	8010994 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801071c:	4b17      	ldr	r3, [pc, #92]	; (801077c <tcp_process+0x7d0>)
 801071e:	781b      	ldrb	r3, [r3, #0]
 8010720:	f003 0310 	and.w	r3, r3, #16
 8010724:	2b00      	cmp	r3, #0
 8010726:	d01f      	beq.n	8010768 <tcp_process+0x7bc>
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801072c:	4b14      	ldr	r3, [pc, #80]	; (8010780 <tcp_process+0x7d4>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	429a      	cmp	r2, r3
 8010732:	d119      	bne.n	8010768 <tcp_process+0x7bc>
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010738:	2b00      	cmp	r3, #0
 801073a:	d115      	bne.n	8010768 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801073c:	4b11      	ldr	r3, [pc, #68]	; (8010784 <tcp_process+0x7d8>)
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	f043 0310 	orr.w	r3, r3, #16
 8010744:	b2da      	uxtb	r2, r3
 8010746:	4b0f      	ldr	r3, [pc, #60]	; (8010784 <tcp_process+0x7d8>)
 8010748:	701a      	strb	r2, [r3, #0]
      }
      break;
 801074a:	e00d      	b.n	8010768 <tcp_process+0x7bc>
    default:
      break;
 801074c:	bf00      	nop
 801074e:	e00c      	b.n	801076a <tcp_process+0x7be>
      break;
 8010750:	bf00      	nop
 8010752:	e00a      	b.n	801076a <tcp_process+0x7be>
      break;
 8010754:	bf00      	nop
 8010756:	e008      	b.n	801076a <tcp_process+0x7be>
      break;
 8010758:	bf00      	nop
 801075a:	e006      	b.n	801076a <tcp_process+0x7be>
      break;
 801075c:	bf00      	nop
 801075e:	e004      	b.n	801076a <tcp_process+0x7be>
      break;
 8010760:	bf00      	nop
 8010762:	e002      	b.n	801076a <tcp_process+0x7be>
      break;
 8010764:	bf00      	nop
 8010766:	e000      	b.n	801076a <tcp_process+0x7be>
      break;
 8010768:	bf00      	nop
  }
  return ERR_OK;
 801076a:	2300      	movs	r3, #0
}
 801076c:	4618      	mov	r0, r3
 801076e:	3724      	adds	r7, #36	; 0x24
 8010770:	46bd      	mov	sp, r7
 8010772:	bd90      	pop	{r4, r7, pc}
 8010774:	24008274 	.word	0x24008274
 8010778:	24008270 	.word	0x24008270
 801077c:	240082a4 	.word	0x240082a4
 8010780:	2400829c 	.word	0x2400829c
 8010784:	240082a5 	.word	0x240082a5
 8010788:	2400826c 	.word	0x2400826c

0801078c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801078c:	b590      	push	{r4, r7, lr}
 801078e:	b085      	sub	sp, #20
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d106      	bne.n	80107aa <tcp_oos_insert_segment+0x1e>
 801079c:	4b3b      	ldr	r3, [pc, #236]	; (801088c <tcp_oos_insert_segment+0x100>)
 801079e:	f240 421f 	movw	r2, #1055	; 0x41f
 80107a2:	493b      	ldr	r1, [pc, #236]	; (8010890 <tcp_oos_insert_segment+0x104>)
 80107a4:	483b      	ldr	r0, [pc, #236]	; (8010894 <tcp_oos_insert_segment+0x108>)
 80107a6:	f003 fa0d 	bl	8013bc4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	68db      	ldr	r3, [r3, #12]
 80107ae:	899b      	ldrh	r3, [r3, #12]
 80107b0:	b29b      	uxth	r3, r3
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7f7 fa5a 	bl	8007c6c <lwip_htons>
 80107b8:	4603      	mov	r3, r0
 80107ba:	b2db      	uxtb	r3, r3
 80107bc:	f003 0301 	and.w	r3, r3, #1
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d028      	beq.n	8010816 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80107c4:	6838      	ldr	r0, [r7, #0]
 80107c6:	f7fe fa63 	bl	800ec90 <tcp_segs_free>
    next = NULL;
 80107ca:	2300      	movs	r3, #0
 80107cc:	603b      	str	r3, [r7, #0]
 80107ce:	e056      	b.n	801087e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	68db      	ldr	r3, [r3, #12]
 80107d4:	899b      	ldrh	r3, [r3, #12]
 80107d6:	b29b      	uxth	r3, r3
 80107d8:	4618      	mov	r0, r3
 80107da:	f7f7 fa47 	bl	8007c6c <lwip_htons>
 80107de:	4603      	mov	r3, r0
 80107e0:	b2db      	uxtb	r3, r3
 80107e2:	f003 0301 	and.w	r3, r3, #1
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d00d      	beq.n	8010806 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	68db      	ldr	r3, [r3, #12]
 80107ee:	899b      	ldrh	r3, [r3, #12]
 80107f0:	b29c      	uxth	r4, r3
 80107f2:	2001      	movs	r0, #1
 80107f4:	f7f7 fa3a 	bl	8007c6c <lwip_htons>
 80107f8:	4603      	mov	r3, r0
 80107fa:	461a      	mov	r2, r3
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	68db      	ldr	r3, [r3, #12]
 8010800:	4322      	orrs	r2, r4
 8010802:	b292      	uxth	r2, r2
 8010804:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010810:	68f8      	ldr	r0, [r7, #12]
 8010812:	f7fe fa52 	bl	800ecba <tcp_seg_free>
    while (next &&
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d00e      	beq.n	801083a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	891b      	ldrh	r3, [r3, #8]
 8010820:	461a      	mov	r2, r3
 8010822:	4b1d      	ldr	r3, [pc, #116]	; (8010898 <tcp_oos_insert_segment+0x10c>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	441a      	add	r2, r3
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	685b      	ldr	r3, [r3, #4]
 801082e:	6839      	ldr	r1, [r7, #0]
 8010830:	8909      	ldrh	r1, [r1, #8]
 8010832:	440b      	add	r3, r1
 8010834:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010836:	2b00      	cmp	r3, #0
 8010838:	daca      	bge.n	80107d0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d01e      	beq.n	801087e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	891b      	ldrh	r3, [r3, #8]
 8010844:	461a      	mov	r2, r3
 8010846:	4b14      	ldr	r3, [pc, #80]	; (8010898 <tcp_oos_insert_segment+0x10c>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	441a      	add	r2, r3
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	68db      	ldr	r3, [r3, #12]
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010854:	2b00      	cmp	r3, #0
 8010856:	dd12      	ble.n	801087e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	68db      	ldr	r3, [r3, #12]
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	b29a      	uxth	r2, r3
 8010860:	4b0d      	ldr	r3, [pc, #52]	; (8010898 <tcp_oos_insert_segment+0x10c>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	b29b      	uxth	r3, r3
 8010866:	1ad3      	subs	r3, r2, r3
 8010868:	b29a      	uxth	r2, r3
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	685a      	ldr	r2, [r3, #4]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	891b      	ldrh	r3, [r3, #8]
 8010876:	4619      	mov	r1, r3
 8010878:	4610      	mov	r0, r2
 801087a:	f7fc fe15 	bl	800d4a8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	683a      	ldr	r2, [r7, #0]
 8010882:	601a      	str	r2, [r3, #0]
}
 8010884:	bf00      	nop
 8010886:	3714      	adds	r7, #20
 8010888:	46bd      	mov	sp, r7
 801088a:	bd90      	pop	{r4, r7, pc}
 801088c:	08016b88 	.word	0x08016b88
 8010890:	08016e80 	.word	0x08016e80
 8010894:	08016c0c 	.word	0x08016c0c
 8010898:	24008298 	.word	0x24008298

0801089c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801089c:	b5b0      	push	{r4, r5, r7, lr}
 801089e:	b086      	sub	sp, #24
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	60f8      	str	r0, [r7, #12]
 80108a4:	60b9      	str	r1, [r7, #8]
 80108a6:	607a      	str	r2, [r7, #4]
 80108a8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80108aa:	e03e      	b.n	801092a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7fd f802 	bl	800d8c4 <pbuf_clen>
 80108c0:	4603      	mov	r3, r0
 80108c2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80108ca:	8a7a      	ldrh	r2, [r7, #18]
 80108cc:	429a      	cmp	r2, r3
 80108ce:	d906      	bls.n	80108de <tcp_free_acked_segments+0x42>
 80108d0:	4b2a      	ldr	r3, [pc, #168]	; (801097c <tcp_free_acked_segments+0xe0>)
 80108d2:	f240 4257 	movw	r2, #1111	; 0x457
 80108d6:	492a      	ldr	r1, [pc, #168]	; (8010980 <tcp_free_acked_segments+0xe4>)
 80108d8:	482a      	ldr	r0, [pc, #168]	; (8010984 <tcp_free_acked_segments+0xe8>)
 80108da:	f003 f973 	bl	8013bc4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80108e4:	8a7b      	ldrh	r3, [r7, #18]
 80108e6:	1ad3      	subs	r3, r2, r3
 80108e8:	b29a      	uxth	r2, r3
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	891a      	ldrh	r2, [r3, #8]
 80108f4:	4b24      	ldr	r3, [pc, #144]	; (8010988 <tcp_free_acked_segments+0xec>)
 80108f6:	881b      	ldrh	r3, [r3, #0]
 80108f8:	4413      	add	r3, r2
 80108fa:	b29a      	uxth	r2, r3
 80108fc:	4b22      	ldr	r3, [pc, #136]	; (8010988 <tcp_free_acked_segments+0xec>)
 80108fe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010900:	6978      	ldr	r0, [r7, #20]
 8010902:	f7fe f9da 	bl	800ecba <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801090c:	2b00      	cmp	r3, #0
 801090e:	d00c      	beq.n	801092a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010910:	68bb      	ldr	r3, [r7, #8]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d109      	bne.n	801092a <tcp_free_acked_segments+0x8e>
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d106      	bne.n	801092a <tcp_free_acked_segments+0x8e>
 801091c:	4b17      	ldr	r3, [pc, #92]	; (801097c <tcp_free_acked_segments+0xe0>)
 801091e:	f240 4261 	movw	r2, #1121	; 0x461
 8010922:	491a      	ldr	r1, [pc, #104]	; (801098c <tcp_free_acked_segments+0xf0>)
 8010924:	4817      	ldr	r0, [pc, #92]	; (8010984 <tcp_free_acked_segments+0xe8>)
 8010926:	f003 f94d 	bl	8013bc4 <iprintf>
  while (seg_list != NULL &&
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d020      	beq.n	8010972 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	68db      	ldr	r3, [r3, #12]
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	4618      	mov	r0, r3
 8010938:	f7f7 f9ad 	bl	8007c96 <lwip_htonl>
 801093c:	4604      	mov	r4, r0
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	891b      	ldrh	r3, [r3, #8]
 8010942:	461d      	mov	r5, r3
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	68db      	ldr	r3, [r3, #12]
 8010948:	899b      	ldrh	r3, [r3, #12]
 801094a:	b29b      	uxth	r3, r3
 801094c:	4618      	mov	r0, r3
 801094e:	f7f7 f98d 	bl	8007c6c <lwip_htons>
 8010952:	4603      	mov	r3, r0
 8010954:	b2db      	uxtb	r3, r3
 8010956:	f003 0303 	and.w	r3, r3, #3
 801095a:	2b00      	cmp	r3, #0
 801095c:	d001      	beq.n	8010962 <tcp_free_acked_segments+0xc6>
 801095e:	2301      	movs	r3, #1
 8010960:	e000      	b.n	8010964 <tcp_free_acked_segments+0xc8>
 8010962:	2300      	movs	r3, #0
 8010964:	442b      	add	r3, r5
 8010966:	18e2      	adds	r2, r4, r3
 8010968:	4b09      	ldr	r3, [pc, #36]	; (8010990 <tcp_free_acked_segments+0xf4>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801096e:	2b00      	cmp	r3, #0
 8010970:	dd9c      	ble.n	80108ac <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010972:	68bb      	ldr	r3, [r7, #8]
}
 8010974:	4618      	mov	r0, r3
 8010976:	3718      	adds	r7, #24
 8010978:	46bd      	mov	sp, r7
 801097a:	bdb0      	pop	{r4, r5, r7, pc}
 801097c:	08016b88 	.word	0x08016b88
 8010980:	08016ea8 	.word	0x08016ea8
 8010984:	08016c0c 	.word	0x08016c0c
 8010988:	240082a0 	.word	0x240082a0
 801098c:	08016ed0 	.word	0x08016ed0
 8010990:	2400829c 	.word	0x2400829c

08010994 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010994:	b5b0      	push	{r4, r5, r7, lr}
 8010996:	b094      	sub	sp, #80	; 0x50
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801099c:	2300      	movs	r3, #0
 801099e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d106      	bne.n	80109b4 <tcp_receive+0x20>
 80109a6:	4b91      	ldr	r3, [pc, #580]	; (8010bec <tcp_receive+0x258>)
 80109a8:	f240 427b 	movw	r2, #1147	; 0x47b
 80109ac:	4990      	ldr	r1, [pc, #576]	; (8010bf0 <tcp_receive+0x25c>)
 80109ae:	4891      	ldr	r0, [pc, #580]	; (8010bf4 <tcp_receive+0x260>)
 80109b0:	f003 f908 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	7d1b      	ldrb	r3, [r3, #20]
 80109b8:	2b03      	cmp	r3, #3
 80109ba:	d806      	bhi.n	80109ca <tcp_receive+0x36>
 80109bc:	4b8b      	ldr	r3, [pc, #556]	; (8010bec <tcp_receive+0x258>)
 80109be:	f240 427c 	movw	r2, #1148	; 0x47c
 80109c2:	498d      	ldr	r1, [pc, #564]	; (8010bf8 <tcp_receive+0x264>)
 80109c4:	488b      	ldr	r0, [pc, #556]	; (8010bf4 <tcp_receive+0x260>)
 80109c6:	f003 f8fd 	bl	8013bc4 <iprintf>

  if (flags & TCP_ACK) {
 80109ca:	4b8c      	ldr	r3, [pc, #560]	; (8010bfc <tcp_receive+0x268>)
 80109cc:	781b      	ldrb	r3, [r3, #0]
 80109ce:	f003 0310 	and.w	r3, r3, #16
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	f000 8264 	beq.w	8010ea0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80109de:	461a      	mov	r2, r3
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109e4:	4413      	add	r3, r2
 80109e6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80109ec:	4b84      	ldr	r3, [pc, #528]	; (8010c00 <tcp_receive+0x26c>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	1ad3      	subs	r3, r2, r3
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	db1b      	blt.n	8010a2e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80109fa:	4b81      	ldr	r3, [pc, #516]	; (8010c00 <tcp_receive+0x26c>)
 80109fc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d106      	bne.n	8010a10 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010a06:	4b7f      	ldr	r3, [pc, #508]	; (8010c04 <tcp_receive+0x270>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	1ad3      	subs	r3, r2, r3
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	db0e      	blt.n	8010a2e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010a14:	4b7b      	ldr	r3, [pc, #492]	; (8010c04 <tcp_receive+0x270>)
 8010a16:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d125      	bne.n	8010a68 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010a1c:	4b7a      	ldr	r3, [pc, #488]	; (8010c08 <tcp_receive+0x274>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	89db      	ldrh	r3, [r3, #14]
 8010a22:	b29a      	uxth	r2, r3
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d91c      	bls.n	8010a68 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010a2e:	4b76      	ldr	r3, [pc, #472]	; (8010c08 <tcp_receive+0x274>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	89db      	ldrh	r3, [r3, #14]
 8010a34:	b29a      	uxth	r2, r3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d205      	bcs.n	8010a58 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010a58:	4b69      	ldr	r3, [pc, #420]	; (8010c00 <tcp_receive+0x26c>)
 8010a5a:	681a      	ldr	r2, [r3, #0]
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010a60:	4b68      	ldr	r3, [pc, #416]	; (8010c04 <tcp_receive+0x270>)
 8010a62:	681a      	ldr	r2, [r3, #0]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010a68:	4b66      	ldr	r3, [pc, #408]	; (8010c04 <tcp_receive+0x270>)
 8010a6a:	681a      	ldr	r2, [r3, #0]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a70:	1ad3      	subs	r3, r2, r3
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	dc58      	bgt.n	8010b28 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010a76:	4b65      	ldr	r3, [pc, #404]	; (8010c0c <tcp_receive+0x278>)
 8010a78:	881b      	ldrh	r3, [r3, #0]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d14b      	bne.n	8010b16 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a82:	687a      	ldr	r2, [r7, #4]
 8010a84:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010a88:	4413      	add	r3, r2
 8010a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d142      	bne.n	8010b16 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	db3d      	blt.n	8010b16 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a9e:	4b59      	ldr	r3, [pc, #356]	; (8010c04 <tcp_receive+0x270>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d137      	bne.n	8010b16 <tcp_receive+0x182>
              found_dupack = 1;
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010ab0:	2bff      	cmp	r3, #255	; 0xff
 8010ab2:	d007      	beq.n	8010ac4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010aba:	3301      	adds	r3, #1
 8010abc:	b2da      	uxtb	r2, r3
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010aca:	2b03      	cmp	r3, #3
 8010acc:	d91b      	bls.n	8010b06 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ad8:	4413      	add	r3, r2
 8010ada:	b29a      	uxth	r2, r3
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d30a      	bcc.n	8010afc <tcp_receive+0x168>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010af0:	4413      	add	r3, r2
 8010af2:	b29a      	uxth	r2, r3
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010afa:	e004      	b.n	8010b06 <tcp_receive+0x172>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010b0c:	2b02      	cmp	r3, #2
 8010b0e:	d902      	bls.n	8010b16 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f001 feeb 	bl	80128ec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	f040 8161 	bne.w	8010de0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2200      	movs	r2, #0
 8010b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010b26:	e15b      	b.n	8010de0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b28:	4b36      	ldr	r3, [pc, #216]	; (8010c04 <tcp_receive+0x270>)
 8010b2a:	681a      	ldr	r2, [r3, #0]
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b30:	1ad3      	subs	r3, r2, r3
 8010b32:	3b01      	subs	r3, #1
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	f2c0 814e 	blt.w	8010dd6 <tcp_receive+0x442>
 8010b3a:	4b32      	ldr	r3, [pc, #200]	; (8010c04 <tcp_receive+0x270>)
 8010b3c:	681a      	ldr	r2, [r3, #0]
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b42:	1ad3      	subs	r3, r2, r3
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	f300 8146 	bgt.w	8010dd6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	8b5b      	ldrh	r3, [r3, #26]
 8010b4e:	f003 0304 	and.w	r3, r3, #4
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d010      	beq.n	8010b78 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	8b5b      	ldrh	r3, [r3, #26]
 8010b5a:	f023 0304 	bic.w	r3, r3, #4
 8010b5e:	b29a      	uxth	r2, r3
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2200      	movs	r2, #0
 8010b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010b86:	10db      	asrs	r3, r3, #3
 8010b88:	b21b      	sxth	r3, r3
 8010b8a:	b29a      	uxth	r2, r3
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010b92:	b29b      	uxth	r3, r3
 8010b94:	4413      	add	r3, r2
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	b21a      	sxth	r2, r3
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010ba0:	4b18      	ldr	r3, [pc, #96]	; (8010c04 <tcp_receive+0x270>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	b29a      	uxth	r2, r3
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010baa:	b29b      	uxth	r3, r3
 8010bac:	1ad3      	subs	r3, r2, r3
 8010bae:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010bb8:	4b12      	ldr	r3, [pc, #72]	; (8010c04 <tcp_receive+0x270>)
 8010bba:	681a      	ldr	r2, [r3, #0]
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	7d1b      	ldrb	r3, [r3, #20]
 8010bc4:	2b03      	cmp	r3, #3
 8010bc6:	f240 8097 	bls.w	8010cf8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d245      	bcs.n	8010c66 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	8b5b      	ldrh	r3, [r3, #26]
 8010bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d014      	beq.n	8010c10 <tcp_receive+0x27c>
 8010be6:	2301      	movs	r3, #1
 8010be8:	e013      	b.n	8010c12 <tcp_receive+0x27e>
 8010bea:	bf00      	nop
 8010bec:	08016b88 	.word	0x08016b88
 8010bf0:	08016ef0 	.word	0x08016ef0
 8010bf4:	08016c0c 	.word	0x08016c0c
 8010bf8:	08016f0c 	.word	0x08016f0c
 8010bfc:	240082a4 	.word	0x240082a4
 8010c00:	24008298 	.word	0x24008298
 8010c04:	2400829c 	.word	0x2400829c
 8010c08:	24008288 	.word	0x24008288
 8010c0c:	240082a2 	.word	0x240082a2
 8010c10:	2302      	movs	r3, #2
 8010c12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010c16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c20:	fb12 f303 	smulbb	r3, r2, r3
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	bf28      	it	cs
 8010c2c:	4613      	movcs	r3, r2
 8010c2e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c38:	4413      	add	r3, r2
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d309      	bcc.n	8010c5a <tcp_receive+0x2c6>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c4e:	4413      	add	r3, r2
 8010c50:	b29a      	uxth	r2, r3
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c58:	e04e      	b.n	8010cf8 <tcp_receive+0x364>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c64:	e048      	b.n	8010cf8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c6e:	4413      	add	r3, r2
 8010c70:	b29a      	uxth	r2, r3
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d309      	bcc.n	8010c90 <tcp_receive+0x2fc>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c84:	4413      	add	r3, r2
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010c8e:	e004      	b.n	8010c9a <tcp_receive+0x306>
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d326      	bcc.n	8010cf8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010cb6:	1ad3      	subs	r3, r2, r3
 8010cb8:	b29a      	uxth	r2, r3
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cca:	4413      	add	r3, r2
 8010ccc:	b29a      	uxth	r2, r3
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d30a      	bcc.n	8010cee <tcp_receive+0x35a>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ce2:	4413      	add	r3, r2
 8010ce4:	b29a      	uxth	r2, r3
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010cec:	e004      	b.n	8010cf8 <tcp_receive+0x364>
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cf4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d00:	4a98      	ldr	r2, [pc, #608]	; (8010f64 <tcp_receive+0x5d0>)
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f7ff fdca 	bl	801089c <tcp_free_acked_segments>
 8010d08:	4602      	mov	r2, r0
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d16:	4a94      	ldr	r2, [pc, #592]	; (8010f68 <tcp_receive+0x5d4>)
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f7ff fdbf 	bl	801089c <tcp_free_acked_segments>
 8010d1e:	4602      	mov	r2, r0
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d104      	bne.n	8010d36 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d32:	861a      	strh	r2, [r3, #48]	; 0x30
 8010d34:	e002      	b.n	8010d3c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2200      	movs	r2, #0
 8010d40:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d103      	bne.n	8010d52 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010d58:	4b84      	ldr	r3, [pc, #528]	; (8010f6c <tcp_receive+0x5d8>)
 8010d5a:	881b      	ldrh	r3, [r3, #0]
 8010d5c:	4413      	add	r3, r2
 8010d5e:	b29a      	uxth	r2, r3
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	8b5b      	ldrh	r3, [r3, #26]
 8010d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d035      	beq.n	8010dde <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d118      	bne.n	8010dac <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d00c      	beq.n	8010d9c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7f6 ff81 	bl	8007c96 <lwip_htonl>
 8010d94:	4603      	mov	r3, r0
 8010d96:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	dc20      	bgt.n	8010dde <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	8b5b      	ldrh	r3, [r3, #26]
 8010da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010da4:	b29a      	uxth	r2, r3
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010daa:	e018      	b.n	8010dde <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010db4:	68db      	ldr	r3, [r3, #12]
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7f6 ff6c 	bl	8007c96 <lwip_htonl>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	1ae3      	subs	r3, r4, r3
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	dc0b      	bgt.n	8010dde <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	8b5b      	ldrh	r3, [r3, #26]
 8010dca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010dce:	b29a      	uxth	r2, r3
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010dd4:	e003      	b.n	8010dde <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f001 ff76 	bl	8012cc8 <tcp_send_empty_ack>
 8010ddc:	e000      	b.n	8010de0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010dde:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d05b      	beq.n	8010ea0 <tcp_receive+0x50c>
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010dec:	4b60      	ldr	r3, [pc, #384]	; (8010f70 <tcp_receive+0x5dc>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	1ad3      	subs	r3, r2, r3
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	da54      	bge.n	8010ea0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010df6:	4b5f      	ldr	r3, [pc, #380]	; (8010f74 <tcp_receive+0x5e0>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	b29a      	uxth	r2, r3
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	1ad3      	subs	r3, r2, r3
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010e0a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e14:	10db      	asrs	r3, r3, #3
 8010e16:	b21b      	sxth	r3, r3
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	1ad3      	subs	r3, r2, r3
 8010e1c:	b29b      	uxth	r3, r3
 8010e1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e28:	b29a      	uxth	r2, r3
 8010e2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e2e:	4413      	add	r3, r2
 8010e30:	b29b      	uxth	r3, r3
 8010e32:	b21a      	sxth	r2, r3
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010e38:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	da05      	bge.n	8010e4c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010e40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e44:	425b      	negs	r3, r3
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010e4c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e56:	109b      	asrs	r3, r3, #2
 8010e58:	b21b      	sxth	r3, r3
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	1ad3      	subs	r3, r2, r3
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e6a:	b29a      	uxth	r2, r3
 8010e6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e70:	4413      	add	r3, r2
 8010e72:	b29b      	uxth	r3, r3
 8010e74:	b21a      	sxth	r2, r3
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e80:	10db      	asrs	r3, r3, #3
 8010e82:	b21b      	sxth	r3, r3
 8010e84:	b29a      	uxth	r2, r3
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	4413      	add	r3, r2
 8010e90:	b29b      	uxth	r3, r3
 8010e92:	b21a      	sxth	r2, r3
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010ea0:	4b35      	ldr	r3, [pc, #212]	; (8010f78 <tcp_receive+0x5e4>)
 8010ea2:	881b      	ldrh	r3, [r3, #0]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	f000 84e2 	beq.w	801186e <tcp_receive+0xeda>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	7d1b      	ldrb	r3, [r3, #20]
 8010eae:	2b06      	cmp	r3, #6
 8010eb0:	f200 84dd 	bhi.w	801186e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010eb8:	4b30      	ldr	r3, [pc, #192]	; (8010f7c <tcp_receive+0x5e8>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	1ad3      	subs	r3, r2, r3
 8010ebe:	3b01      	subs	r3, #1
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f2c0 808f 	blt.w	8010fe4 <tcp_receive+0x650>
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010eca:	4b2b      	ldr	r3, [pc, #172]	; (8010f78 <tcp_receive+0x5e4>)
 8010ecc:	881b      	ldrh	r3, [r3, #0]
 8010ece:	4619      	mov	r1, r3
 8010ed0:	4b2a      	ldr	r3, [pc, #168]	; (8010f7c <tcp_receive+0x5e8>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	440b      	add	r3, r1
 8010ed6:	1ad3      	subs	r3, r2, r3
 8010ed8:	3301      	adds	r3, #1
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	f300 8082 	bgt.w	8010fe4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010ee0:	4b27      	ldr	r3, [pc, #156]	; (8010f80 <tcp_receive+0x5ec>)
 8010ee2:	685b      	ldr	r3, [r3, #4]
 8010ee4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010eea:	4b24      	ldr	r3, [pc, #144]	; (8010f7c <tcp_receive+0x5e8>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	1ad3      	subs	r3, r2, r3
 8010ef0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010ef2:	4b23      	ldr	r3, [pc, #140]	; (8010f80 <tcp_receive+0x5ec>)
 8010ef4:	685b      	ldr	r3, [r3, #4]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d106      	bne.n	8010f08 <tcp_receive+0x574>
 8010efa:	4b22      	ldr	r3, [pc, #136]	; (8010f84 <tcp_receive+0x5f0>)
 8010efc:	f240 5294 	movw	r2, #1428	; 0x594
 8010f00:	4921      	ldr	r1, [pc, #132]	; (8010f88 <tcp_receive+0x5f4>)
 8010f02:	4822      	ldr	r0, [pc, #136]	; (8010f8c <tcp_receive+0x5f8>)
 8010f04:	f002 fe5e 	bl	8013bc4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d906      	bls.n	8010f20 <tcp_receive+0x58c>
 8010f12:	4b1c      	ldr	r3, [pc, #112]	; (8010f84 <tcp_receive+0x5f0>)
 8010f14:	f240 5295 	movw	r2, #1429	; 0x595
 8010f18:	491d      	ldr	r1, [pc, #116]	; (8010f90 <tcp_receive+0x5fc>)
 8010f1a:	481c      	ldr	r0, [pc, #112]	; (8010f8c <tcp_receive+0x5f8>)
 8010f1c:	f002 fe52 	bl	8013bc4 <iprintf>
      off = (u16_t)off32;
 8010f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010f26:	4b16      	ldr	r3, [pc, #88]	; (8010f80 <tcp_receive+0x5ec>)
 8010f28:	685b      	ldr	r3, [r3, #4]
 8010f2a:	891b      	ldrh	r3, [r3, #8]
 8010f2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f30:	429a      	cmp	r2, r3
 8010f32:	d906      	bls.n	8010f42 <tcp_receive+0x5ae>
 8010f34:	4b13      	ldr	r3, [pc, #76]	; (8010f84 <tcp_receive+0x5f0>)
 8010f36:	f240 5297 	movw	r2, #1431	; 0x597
 8010f3a:	4916      	ldr	r1, [pc, #88]	; (8010f94 <tcp_receive+0x600>)
 8010f3c:	4813      	ldr	r0, [pc, #76]	; (8010f8c <tcp_receive+0x5f8>)
 8010f3e:	f002 fe41 	bl	8013bc4 <iprintf>
      inseg.len -= off;
 8010f42:	4b0f      	ldr	r3, [pc, #60]	; (8010f80 <tcp_receive+0x5ec>)
 8010f44:	891a      	ldrh	r2, [r3, #8]
 8010f46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f4a:	1ad3      	subs	r3, r2, r3
 8010f4c:	b29a      	uxth	r2, r3
 8010f4e:	4b0c      	ldr	r3, [pc, #48]	; (8010f80 <tcp_receive+0x5ec>)
 8010f50:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010f52:	4b0b      	ldr	r3, [pc, #44]	; (8010f80 <tcp_receive+0x5ec>)
 8010f54:	685b      	ldr	r3, [r3, #4]
 8010f56:	891a      	ldrh	r2, [r3, #8]
 8010f58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f5c:	1ad3      	subs	r3, r2, r3
 8010f5e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010f60:	e02a      	b.n	8010fb8 <tcp_receive+0x624>
 8010f62:	bf00      	nop
 8010f64:	08016f28 	.word	0x08016f28
 8010f68:	08016f30 	.word	0x08016f30
 8010f6c:	240082a0 	.word	0x240082a0
 8010f70:	2400829c 	.word	0x2400829c
 8010f74:	24008260 	.word	0x24008260
 8010f78:	240082a2 	.word	0x240082a2
 8010f7c:	24008298 	.word	0x24008298
 8010f80:	24008278 	.word	0x24008278
 8010f84:	08016b88 	.word	0x08016b88
 8010f88:	08016f38 	.word	0x08016f38
 8010f8c:	08016c0c 	.word	0x08016c0c
 8010f90:	08016f48 	.word	0x08016f48
 8010f94:	08016f58 	.word	0x08016f58
        off -= p->len;
 8010f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f9a:	895b      	ldrh	r3, [r3, #10]
 8010f9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010fa0:	1ad3      	subs	r3, r2, r3
 8010fa2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fa8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010faa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fae:	2200      	movs	r2, #0
 8010fb0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fba:	895b      	ldrh	r3, [r3, #10]
 8010fbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d8e9      	bhi.n	8010f98 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010fc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fc8:	4619      	mov	r1, r3
 8010fca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010fcc:	f7fc fb6c 	bl	800d6a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fd4:	4a91      	ldr	r2, [pc, #580]	; (801121c <tcp_receive+0x888>)
 8010fd6:	6013      	str	r3, [r2, #0]
 8010fd8:	4b91      	ldr	r3, [pc, #580]	; (8011220 <tcp_receive+0x88c>)
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	4a8f      	ldr	r2, [pc, #572]	; (801121c <tcp_receive+0x888>)
 8010fde:	6812      	ldr	r2, [r2, #0]
 8010fe0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010fe2:	e00d      	b.n	8011000 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010fe4:	4b8d      	ldr	r3, [pc, #564]	; (801121c <tcp_receive+0x888>)
 8010fe6:	681a      	ldr	r2, [r3, #0]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fec:	1ad3      	subs	r3, r2, r3
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	da06      	bge.n	8011000 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	8b5b      	ldrh	r3, [r3, #26]
 8010ff6:	f043 0302 	orr.w	r3, r3, #2
 8010ffa:	b29a      	uxth	r2, r3
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011000:	4b86      	ldr	r3, [pc, #536]	; (801121c <tcp_receive+0x888>)
 8011002:	681a      	ldr	r2, [r3, #0]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011008:	1ad3      	subs	r3, r2, r3
 801100a:	2b00      	cmp	r3, #0
 801100c:	f2c0 842a 	blt.w	8011864 <tcp_receive+0xed0>
 8011010:	4b82      	ldr	r3, [pc, #520]	; (801121c <tcp_receive+0x888>)
 8011012:	681a      	ldr	r2, [r3, #0]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011018:	6879      	ldr	r1, [r7, #4]
 801101a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801101c:	440b      	add	r3, r1
 801101e:	1ad3      	subs	r3, r2, r3
 8011020:	3301      	adds	r3, #1
 8011022:	2b00      	cmp	r3, #0
 8011024:	f300 841e 	bgt.w	8011864 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801102c:	4b7b      	ldr	r3, [pc, #492]	; (801121c <tcp_receive+0x888>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	429a      	cmp	r2, r3
 8011032:	f040 829a 	bne.w	801156a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011036:	4b7a      	ldr	r3, [pc, #488]	; (8011220 <tcp_receive+0x88c>)
 8011038:	891c      	ldrh	r4, [r3, #8]
 801103a:	4b79      	ldr	r3, [pc, #484]	; (8011220 <tcp_receive+0x88c>)
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	899b      	ldrh	r3, [r3, #12]
 8011040:	b29b      	uxth	r3, r3
 8011042:	4618      	mov	r0, r3
 8011044:	f7f6 fe12 	bl	8007c6c <lwip_htons>
 8011048:	4603      	mov	r3, r0
 801104a:	b2db      	uxtb	r3, r3
 801104c:	f003 0303 	and.w	r3, r3, #3
 8011050:	2b00      	cmp	r3, #0
 8011052:	d001      	beq.n	8011058 <tcp_receive+0x6c4>
 8011054:	2301      	movs	r3, #1
 8011056:	e000      	b.n	801105a <tcp_receive+0x6c6>
 8011058:	2300      	movs	r3, #0
 801105a:	4423      	add	r3, r4
 801105c:	b29a      	uxth	r2, r3
 801105e:	4b71      	ldr	r3, [pc, #452]	; (8011224 <tcp_receive+0x890>)
 8011060:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011066:	4b6f      	ldr	r3, [pc, #444]	; (8011224 <tcp_receive+0x890>)
 8011068:	881b      	ldrh	r3, [r3, #0]
 801106a:	429a      	cmp	r2, r3
 801106c:	d275      	bcs.n	801115a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801106e:	4b6c      	ldr	r3, [pc, #432]	; (8011220 <tcp_receive+0x88c>)
 8011070:	68db      	ldr	r3, [r3, #12]
 8011072:	899b      	ldrh	r3, [r3, #12]
 8011074:	b29b      	uxth	r3, r3
 8011076:	4618      	mov	r0, r3
 8011078:	f7f6 fdf8 	bl	8007c6c <lwip_htons>
 801107c:	4603      	mov	r3, r0
 801107e:	b2db      	uxtb	r3, r3
 8011080:	f003 0301 	and.w	r3, r3, #1
 8011084:	2b00      	cmp	r3, #0
 8011086:	d01f      	beq.n	80110c8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011088:	4b65      	ldr	r3, [pc, #404]	; (8011220 <tcp_receive+0x88c>)
 801108a:	68db      	ldr	r3, [r3, #12]
 801108c:	899b      	ldrh	r3, [r3, #12]
 801108e:	b29b      	uxth	r3, r3
 8011090:	b21b      	sxth	r3, r3
 8011092:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011096:	b21c      	sxth	r4, r3
 8011098:	4b61      	ldr	r3, [pc, #388]	; (8011220 <tcp_receive+0x88c>)
 801109a:	68db      	ldr	r3, [r3, #12]
 801109c:	899b      	ldrh	r3, [r3, #12]
 801109e:	b29b      	uxth	r3, r3
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7f6 fde3 	bl	8007c6c <lwip_htons>
 80110a6:	4603      	mov	r3, r0
 80110a8:	b2db      	uxtb	r3, r3
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80110b0:	b29b      	uxth	r3, r3
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7f6 fdda 	bl	8007c6c <lwip_htons>
 80110b8:	4603      	mov	r3, r0
 80110ba:	b21b      	sxth	r3, r3
 80110bc:	4323      	orrs	r3, r4
 80110be:	b21a      	sxth	r2, r3
 80110c0:	4b57      	ldr	r3, [pc, #348]	; (8011220 <tcp_receive+0x88c>)
 80110c2:	68db      	ldr	r3, [r3, #12]
 80110c4:	b292      	uxth	r2, r2
 80110c6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80110cc:	4b54      	ldr	r3, [pc, #336]	; (8011220 <tcp_receive+0x88c>)
 80110ce:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80110d0:	4b53      	ldr	r3, [pc, #332]	; (8011220 <tcp_receive+0x88c>)
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	899b      	ldrh	r3, [r3, #12]
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	4618      	mov	r0, r3
 80110da:	f7f6 fdc7 	bl	8007c6c <lwip_htons>
 80110de:	4603      	mov	r3, r0
 80110e0:	b2db      	uxtb	r3, r3
 80110e2:	f003 0302 	and.w	r3, r3, #2
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d005      	beq.n	80110f6 <tcp_receive+0x762>
            inseg.len -= 1;
 80110ea:	4b4d      	ldr	r3, [pc, #308]	; (8011220 <tcp_receive+0x88c>)
 80110ec:	891b      	ldrh	r3, [r3, #8]
 80110ee:	3b01      	subs	r3, #1
 80110f0:	b29a      	uxth	r2, r3
 80110f2:	4b4b      	ldr	r3, [pc, #300]	; (8011220 <tcp_receive+0x88c>)
 80110f4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80110f6:	4b4a      	ldr	r3, [pc, #296]	; (8011220 <tcp_receive+0x88c>)
 80110f8:	685b      	ldr	r3, [r3, #4]
 80110fa:	4a49      	ldr	r2, [pc, #292]	; (8011220 <tcp_receive+0x88c>)
 80110fc:	8912      	ldrh	r2, [r2, #8]
 80110fe:	4611      	mov	r1, r2
 8011100:	4618      	mov	r0, r3
 8011102:	f7fc f9d1 	bl	800d4a8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011106:	4b46      	ldr	r3, [pc, #280]	; (8011220 <tcp_receive+0x88c>)
 8011108:	891c      	ldrh	r4, [r3, #8]
 801110a:	4b45      	ldr	r3, [pc, #276]	; (8011220 <tcp_receive+0x88c>)
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	899b      	ldrh	r3, [r3, #12]
 8011110:	b29b      	uxth	r3, r3
 8011112:	4618      	mov	r0, r3
 8011114:	f7f6 fdaa 	bl	8007c6c <lwip_htons>
 8011118:	4603      	mov	r3, r0
 801111a:	b2db      	uxtb	r3, r3
 801111c:	f003 0303 	and.w	r3, r3, #3
 8011120:	2b00      	cmp	r3, #0
 8011122:	d001      	beq.n	8011128 <tcp_receive+0x794>
 8011124:	2301      	movs	r3, #1
 8011126:	e000      	b.n	801112a <tcp_receive+0x796>
 8011128:	2300      	movs	r3, #0
 801112a:	4423      	add	r3, r4
 801112c:	b29a      	uxth	r2, r3
 801112e:	4b3d      	ldr	r3, [pc, #244]	; (8011224 <tcp_receive+0x890>)
 8011130:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011132:	4b3c      	ldr	r3, [pc, #240]	; (8011224 <tcp_receive+0x890>)
 8011134:	881b      	ldrh	r3, [r3, #0]
 8011136:	461a      	mov	r2, r3
 8011138:	4b38      	ldr	r3, [pc, #224]	; (801121c <tcp_receive+0x888>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	441a      	add	r2, r3
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011142:	6879      	ldr	r1, [r7, #4]
 8011144:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011146:	440b      	add	r3, r1
 8011148:	429a      	cmp	r2, r3
 801114a:	d006      	beq.n	801115a <tcp_receive+0x7c6>
 801114c:	4b36      	ldr	r3, [pc, #216]	; (8011228 <tcp_receive+0x894>)
 801114e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011152:	4936      	ldr	r1, [pc, #216]	; (801122c <tcp_receive+0x898>)
 8011154:	4836      	ldr	r0, [pc, #216]	; (8011230 <tcp_receive+0x89c>)
 8011156:	f002 fd35 	bl	8013bc4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801115e:	2b00      	cmp	r3, #0
 8011160:	f000 80e7 	beq.w	8011332 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011164:	4b2e      	ldr	r3, [pc, #184]	; (8011220 <tcp_receive+0x88c>)
 8011166:	68db      	ldr	r3, [r3, #12]
 8011168:	899b      	ldrh	r3, [r3, #12]
 801116a:	b29b      	uxth	r3, r3
 801116c:	4618      	mov	r0, r3
 801116e:	f7f6 fd7d 	bl	8007c6c <lwip_htons>
 8011172:	4603      	mov	r3, r0
 8011174:	b2db      	uxtb	r3, r3
 8011176:	f003 0301 	and.w	r3, r3, #1
 801117a:	2b00      	cmp	r3, #0
 801117c:	d010      	beq.n	80111a0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801117e:	e00a      	b.n	8011196 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011184:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801118a:	681a      	ldr	r2, [r3, #0]
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011190:	68f8      	ldr	r0, [r7, #12]
 8011192:	f7fd fd92 	bl	800ecba <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801119a:	2b00      	cmp	r3, #0
 801119c:	d1f0      	bne.n	8011180 <tcp_receive+0x7ec>
 801119e:	e0c8      	b.n	8011332 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111a4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80111a6:	e052      	b.n	801124e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80111a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	899b      	ldrh	r3, [r3, #12]
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7f6 fd5b 	bl	8007c6c <lwip_htons>
 80111b6:	4603      	mov	r3, r0
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	f003 0301 	and.w	r3, r3, #1
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d03d      	beq.n	801123e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80111c2:	4b17      	ldr	r3, [pc, #92]	; (8011220 <tcp_receive+0x88c>)
 80111c4:	68db      	ldr	r3, [r3, #12]
 80111c6:	899b      	ldrh	r3, [r3, #12]
 80111c8:	b29b      	uxth	r3, r3
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7f6 fd4e 	bl	8007c6c <lwip_htons>
 80111d0:	4603      	mov	r3, r0
 80111d2:	b2db      	uxtb	r3, r3
 80111d4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d130      	bne.n	801123e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80111dc:	4b10      	ldr	r3, [pc, #64]	; (8011220 <tcp_receive+0x88c>)
 80111de:	68db      	ldr	r3, [r3, #12]
 80111e0:	899b      	ldrh	r3, [r3, #12]
 80111e2:	b29c      	uxth	r4, r3
 80111e4:	2001      	movs	r0, #1
 80111e6:	f7f6 fd41 	bl	8007c6c <lwip_htons>
 80111ea:	4603      	mov	r3, r0
 80111ec:	461a      	mov	r2, r3
 80111ee:	4b0c      	ldr	r3, [pc, #48]	; (8011220 <tcp_receive+0x88c>)
 80111f0:	68db      	ldr	r3, [r3, #12]
 80111f2:	4322      	orrs	r2, r4
 80111f4:	b292      	uxth	r2, r2
 80111f6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80111f8:	4b09      	ldr	r3, [pc, #36]	; (8011220 <tcp_receive+0x88c>)
 80111fa:	891c      	ldrh	r4, [r3, #8]
 80111fc:	4b08      	ldr	r3, [pc, #32]	; (8011220 <tcp_receive+0x88c>)
 80111fe:	68db      	ldr	r3, [r3, #12]
 8011200:	899b      	ldrh	r3, [r3, #12]
 8011202:	b29b      	uxth	r3, r3
 8011204:	4618      	mov	r0, r3
 8011206:	f7f6 fd31 	bl	8007c6c <lwip_htons>
 801120a:	4603      	mov	r3, r0
 801120c:	b2db      	uxtb	r3, r3
 801120e:	f003 0303 	and.w	r3, r3, #3
 8011212:	2b00      	cmp	r3, #0
 8011214:	d00e      	beq.n	8011234 <tcp_receive+0x8a0>
 8011216:	2301      	movs	r3, #1
 8011218:	e00d      	b.n	8011236 <tcp_receive+0x8a2>
 801121a:	bf00      	nop
 801121c:	24008298 	.word	0x24008298
 8011220:	24008278 	.word	0x24008278
 8011224:	240082a2 	.word	0x240082a2
 8011228:	08016b88 	.word	0x08016b88
 801122c:	08016f68 	.word	0x08016f68
 8011230:	08016c0c 	.word	0x08016c0c
 8011234:	2300      	movs	r3, #0
 8011236:	4423      	add	r3, r4
 8011238:	b29a      	uxth	r2, r3
 801123a:	4b98      	ldr	r3, [pc, #608]	; (801149c <tcp_receive+0xb08>)
 801123c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801123e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011240:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011248:	6938      	ldr	r0, [r7, #16]
 801124a:	f7fd fd36 	bl	800ecba <tcp_seg_free>
            while (next &&
 801124e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011250:	2b00      	cmp	r3, #0
 8011252:	d00e      	beq.n	8011272 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011254:	4b91      	ldr	r3, [pc, #580]	; (801149c <tcp_receive+0xb08>)
 8011256:	881b      	ldrh	r3, [r3, #0]
 8011258:	461a      	mov	r2, r3
 801125a:	4b91      	ldr	r3, [pc, #580]	; (80114a0 <tcp_receive+0xb0c>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	441a      	add	r2, r3
 8011260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	685b      	ldr	r3, [r3, #4]
 8011266:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011268:	8909      	ldrh	r1, [r1, #8]
 801126a:	440b      	add	r3, r1
 801126c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801126e:	2b00      	cmp	r3, #0
 8011270:	da9a      	bge.n	80111a8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011274:	2b00      	cmp	r3, #0
 8011276:	d059      	beq.n	801132c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011278:	4b88      	ldr	r3, [pc, #544]	; (801149c <tcp_receive+0xb08>)
 801127a:	881b      	ldrh	r3, [r3, #0]
 801127c:	461a      	mov	r2, r3
 801127e:	4b88      	ldr	r3, [pc, #544]	; (80114a0 <tcp_receive+0xb0c>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	441a      	add	r2, r3
 8011284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	685b      	ldr	r3, [r3, #4]
 801128a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801128c:	2b00      	cmp	r3, #0
 801128e:	dd4d      	ble.n	801132c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	685b      	ldr	r3, [r3, #4]
 8011296:	b29a      	uxth	r2, r3
 8011298:	4b81      	ldr	r3, [pc, #516]	; (80114a0 <tcp_receive+0xb0c>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	b29b      	uxth	r3, r3
 801129e:	1ad3      	subs	r3, r2, r3
 80112a0:	b29a      	uxth	r2, r3
 80112a2:	4b80      	ldr	r3, [pc, #512]	; (80114a4 <tcp_receive+0xb10>)
 80112a4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80112a6:	4b7f      	ldr	r3, [pc, #508]	; (80114a4 <tcp_receive+0xb10>)
 80112a8:	68db      	ldr	r3, [r3, #12]
 80112aa:	899b      	ldrh	r3, [r3, #12]
 80112ac:	b29b      	uxth	r3, r3
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7f6 fcdc 	bl	8007c6c <lwip_htons>
 80112b4:	4603      	mov	r3, r0
 80112b6:	b2db      	uxtb	r3, r3
 80112b8:	f003 0302 	and.w	r3, r3, #2
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d005      	beq.n	80112cc <tcp_receive+0x938>
                inseg.len -= 1;
 80112c0:	4b78      	ldr	r3, [pc, #480]	; (80114a4 <tcp_receive+0xb10>)
 80112c2:	891b      	ldrh	r3, [r3, #8]
 80112c4:	3b01      	subs	r3, #1
 80112c6:	b29a      	uxth	r2, r3
 80112c8:	4b76      	ldr	r3, [pc, #472]	; (80114a4 <tcp_receive+0xb10>)
 80112ca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80112cc:	4b75      	ldr	r3, [pc, #468]	; (80114a4 <tcp_receive+0xb10>)
 80112ce:	685b      	ldr	r3, [r3, #4]
 80112d0:	4a74      	ldr	r2, [pc, #464]	; (80114a4 <tcp_receive+0xb10>)
 80112d2:	8912      	ldrh	r2, [r2, #8]
 80112d4:	4611      	mov	r1, r2
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7fc f8e6 	bl	800d4a8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80112dc:	4b71      	ldr	r3, [pc, #452]	; (80114a4 <tcp_receive+0xb10>)
 80112de:	891c      	ldrh	r4, [r3, #8]
 80112e0:	4b70      	ldr	r3, [pc, #448]	; (80114a4 <tcp_receive+0xb10>)
 80112e2:	68db      	ldr	r3, [r3, #12]
 80112e4:	899b      	ldrh	r3, [r3, #12]
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7f6 fcbf 	bl	8007c6c <lwip_htons>
 80112ee:	4603      	mov	r3, r0
 80112f0:	b2db      	uxtb	r3, r3
 80112f2:	f003 0303 	and.w	r3, r3, #3
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d001      	beq.n	80112fe <tcp_receive+0x96a>
 80112fa:	2301      	movs	r3, #1
 80112fc:	e000      	b.n	8011300 <tcp_receive+0x96c>
 80112fe:	2300      	movs	r3, #0
 8011300:	4423      	add	r3, r4
 8011302:	b29a      	uxth	r2, r3
 8011304:	4b65      	ldr	r3, [pc, #404]	; (801149c <tcp_receive+0xb08>)
 8011306:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011308:	4b64      	ldr	r3, [pc, #400]	; (801149c <tcp_receive+0xb08>)
 801130a:	881b      	ldrh	r3, [r3, #0]
 801130c:	461a      	mov	r2, r3
 801130e:	4b64      	ldr	r3, [pc, #400]	; (80114a0 <tcp_receive+0xb0c>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	441a      	add	r2, r3
 8011314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	429a      	cmp	r2, r3
 801131c:	d006      	beq.n	801132c <tcp_receive+0x998>
 801131e:	4b62      	ldr	r3, [pc, #392]	; (80114a8 <tcp_receive+0xb14>)
 8011320:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011324:	4961      	ldr	r1, [pc, #388]	; (80114ac <tcp_receive+0xb18>)
 8011326:	4862      	ldr	r0, [pc, #392]	; (80114b0 <tcp_receive+0xb1c>)
 8011328:	f002 fc4c 	bl	8013bc4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011330:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011332:	4b5a      	ldr	r3, [pc, #360]	; (801149c <tcp_receive+0xb08>)
 8011334:	881b      	ldrh	r3, [r3, #0]
 8011336:	461a      	mov	r2, r3
 8011338:	4b59      	ldr	r3, [pc, #356]	; (80114a0 <tcp_receive+0xb0c>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	441a      	add	r2, r3
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011346:	4b55      	ldr	r3, [pc, #340]	; (801149c <tcp_receive+0xb08>)
 8011348:	881b      	ldrh	r3, [r3, #0]
 801134a:	429a      	cmp	r2, r3
 801134c:	d206      	bcs.n	801135c <tcp_receive+0x9c8>
 801134e:	4b56      	ldr	r3, [pc, #344]	; (80114a8 <tcp_receive+0xb14>)
 8011350:	f240 6207 	movw	r2, #1543	; 0x607
 8011354:	4957      	ldr	r1, [pc, #348]	; (80114b4 <tcp_receive+0xb20>)
 8011356:	4856      	ldr	r0, [pc, #344]	; (80114b0 <tcp_receive+0xb1c>)
 8011358:	f002 fc34 	bl	8013bc4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011360:	4b4e      	ldr	r3, [pc, #312]	; (801149c <tcp_receive+0xb08>)
 8011362:	881b      	ldrh	r3, [r3, #0]
 8011364:	1ad3      	subs	r3, r2, r3
 8011366:	b29a      	uxth	r2, r3
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f7fc ffc5 	bl	800e2fc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011372:	4b4c      	ldr	r3, [pc, #304]	; (80114a4 <tcp_receive+0xb10>)
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	891b      	ldrh	r3, [r3, #8]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d006      	beq.n	801138a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801137c:	4b49      	ldr	r3, [pc, #292]	; (80114a4 <tcp_receive+0xb10>)
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	4a4d      	ldr	r2, [pc, #308]	; (80114b8 <tcp_receive+0xb24>)
 8011382:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011384:	4b47      	ldr	r3, [pc, #284]	; (80114a4 <tcp_receive+0xb10>)
 8011386:	2200      	movs	r2, #0
 8011388:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801138a:	4b46      	ldr	r3, [pc, #280]	; (80114a4 <tcp_receive+0xb10>)
 801138c:	68db      	ldr	r3, [r3, #12]
 801138e:	899b      	ldrh	r3, [r3, #12]
 8011390:	b29b      	uxth	r3, r3
 8011392:	4618      	mov	r0, r3
 8011394:	f7f6 fc6a 	bl	8007c6c <lwip_htons>
 8011398:	4603      	mov	r3, r0
 801139a:	b2db      	uxtb	r3, r3
 801139c:	f003 0301 	and.w	r3, r3, #1
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	f000 80b8 	beq.w	8011516 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80113a6:	4b45      	ldr	r3, [pc, #276]	; (80114bc <tcp_receive+0xb28>)
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	f043 0320 	orr.w	r3, r3, #32
 80113ae:	b2da      	uxtb	r2, r3
 80113b0:	4b42      	ldr	r3, [pc, #264]	; (80114bc <tcp_receive+0xb28>)
 80113b2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80113b4:	e0af      	b.n	8011516 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113ba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113c0:	68db      	ldr	r3, [r3, #12]
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	4a36      	ldr	r2, [pc, #216]	; (80114a0 <tcp_receive+0xb0c>)
 80113c6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	891b      	ldrh	r3, [r3, #8]
 80113cc:	461c      	mov	r4, r3
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	68db      	ldr	r3, [r3, #12]
 80113d2:	899b      	ldrh	r3, [r3, #12]
 80113d4:	b29b      	uxth	r3, r3
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7f6 fc48 	bl	8007c6c <lwip_htons>
 80113dc:	4603      	mov	r3, r0
 80113de:	b2db      	uxtb	r3, r3
 80113e0:	f003 0303 	and.w	r3, r3, #3
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d001      	beq.n	80113ec <tcp_receive+0xa58>
 80113e8:	2301      	movs	r3, #1
 80113ea:	e000      	b.n	80113ee <tcp_receive+0xa5a>
 80113ec:	2300      	movs	r3, #0
 80113ee:	191a      	adds	r2, r3, r4
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113f4:	441a      	add	r2, r3
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113fe:	461c      	mov	r4, r3
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	891b      	ldrh	r3, [r3, #8]
 8011404:	461d      	mov	r5, r3
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	68db      	ldr	r3, [r3, #12]
 801140a:	899b      	ldrh	r3, [r3, #12]
 801140c:	b29b      	uxth	r3, r3
 801140e:	4618      	mov	r0, r3
 8011410:	f7f6 fc2c 	bl	8007c6c <lwip_htons>
 8011414:	4603      	mov	r3, r0
 8011416:	b2db      	uxtb	r3, r3
 8011418:	f003 0303 	and.w	r3, r3, #3
 801141c:	2b00      	cmp	r3, #0
 801141e:	d001      	beq.n	8011424 <tcp_receive+0xa90>
 8011420:	2301      	movs	r3, #1
 8011422:	e000      	b.n	8011426 <tcp_receive+0xa92>
 8011424:	2300      	movs	r3, #0
 8011426:	442b      	add	r3, r5
 8011428:	429c      	cmp	r4, r3
 801142a:	d206      	bcs.n	801143a <tcp_receive+0xaa6>
 801142c:	4b1e      	ldr	r3, [pc, #120]	; (80114a8 <tcp_receive+0xb14>)
 801142e:	f240 622b 	movw	r2, #1579	; 0x62b
 8011432:	4923      	ldr	r1, [pc, #140]	; (80114c0 <tcp_receive+0xb2c>)
 8011434:	481e      	ldr	r0, [pc, #120]	; (80114b0 <tcp_receive+0xb1c>)
 8011436:	f002 fbc5 	bl	8013bc4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801143a:	68bb      	ldr	r3, [r7, #8]
 801143c:	891b      	ldrh	r3, [r3, #8]
 801143e:	461c      	mov	r4, r3
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	68db      	ldr	r3, [r3, #12]
 8011444:	899b      	ldrh	r3, [r3, #12]
 8011446:	b29b      	uxth	r3, r3
 8011448:	4618      	mov	r0, r3
 801144a:	f7f6 fc0f 	bl	8007c6c <lwip_htons>
 801144e:	4603      	mov	r3, r0
 8011450:	b2db      	uxtb	r3, r3
 8011452:	f003 0303 	and.w	r3, r3, #3
 8011456:	2b00      	cmp	r3, #0
 8011458:	d001      	beq.n	801145e <tcp_receive+0xaca>
 801145a:	2301      	movs	r3, #1
 801145c:	e000      	b.n	8011460 <tcp_receive+0xacc>
 801145e:	2300      	movs	r3, #0
 8011460:	1919      	adds	r1, r3, r4
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011466:	b28b      	uxth	r3, r1
 8011468:	1ad3      	subs	r3, r2, r3
 801146a:	b29a      	uxth	r2, r3
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f7fc ff43 	bl	800e2fc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	891b      	ldrh	r3, [r3, #8]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d028      	beq.n	80114d2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011480:	4b0d      	ldr	r3, [pc, #52]	; (80114b8 <tcp_receive+0xb24>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d01d      	beq.n	80114c4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011488:	4b0b      	ldr	r3, [pc, #44]	; (80114b8 <tcp_receive+0xb24>)
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	4619      	mov	r1, r3
 8011492:	4610      	mov	r0, r2
 8011494:	f7fc fa50 	bl	800d938 <pbuf_cat>
 8011498:	e018      	b.n	80114cc <tcp_receive+0xb38>
 801149a:	bf00      	nop
 801149c:	240082a2 	.word	0x240082a2
 80114a0:	24008298 	.word	0x24008298
 80114a4:	24008278 	.word	0x24008278
 80114a8:	08016b88 	.word	0x08016b88
 80114ac:	08016fa0 	.word	0x08016fa0
 80114b0:	08016c0c 	.word	0x08016c0c
 80114b4:	08016fdc 	.word	0x08016fdc
 80114b8:	240082a8 	.word	0x240082a8
 80114bc:	240082a5 	.word	0x240082a5
 80114c0:	08016ffc 	.word	0x08016ffc
            } else {
              recv_data = cseg->p;
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	4a70      	ldr	r2, [pc, #448]	; (801168c <tcp_receive+0xcf8>)
 80114ca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	2200      	movs	r2, #0
 80114d0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	68db      	ldr	r3, [r3, #12]
 80114d6:	899b      	ldrh	r3, [r3, #12]
 80114d8:	b29b      	uxth	r3, r3
 80114da:	4618      	mov	r0, r3
 80114dc:	f7f6 fbc6 	bl	8007c6c <lwip_htons>
 80114e0:	4603      	mov	r3, r0
 80114e2:	b2db      	uxtb	r3, r3
 80114e4:	f003 0301 	and.w	r3, r3, #1
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d00d      	beq.n	8011508 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80114ec:	4b68      	ldr	r3, [pc, #416]	; (8011690 <tcp_receive+0xcfc>)
 80114ee:	781b      	ldrb	r3, [r3, #0]
 80114f0:	f043 0320 	orr.w	r3, r3, #32
 80114f4:	b2da      	uxtb	r2, r3
 80114f6:	4b66      	ldr	r3, [pc, #408]	; (8011690 <tcp_receive+0xcfc>)
 80114f8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	7d1b      	ldrb	r3, [r3, #20]
 80114fe:	2b04      	cmp	r3, #4
 8011500:	d102      	bne.n	8011508 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2207      	movs	r2, #7
 8011506:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	681a      	ldr	r2, [r3, #0]
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011510:	68b8      	ldr	r0, [r7, #8]
 8011512:	f7fd fbd2 	bl	800ecba <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801151a:	2b00      	cmp	r3, #0
 801151c:	d008      	beq.n	8011530 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	685a      	ldr	r2, [r3, #4]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801152a:	429a      	cmp	r2, r3
 801152c:	f43f af43 	beq.w	80113b6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	8b5b      	ldrh	r3, [r3, #26]
 8011534:	f003 0301 	and.w	r3, r3, #1
 8011538:	2b00      	cmp	r3, #0
 801153a:	d00e      	beq.n	801155a <tcp_receive+0xbc6>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	8b5b      	ldrh	r3, [r3, #26]
 8011540:	f023 0301 	bic.w	r3, r3, #1
 8011544:	b29a      	uxth	r2, r3
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	835a      	strh	r2, [r3, #26]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	8b5b      	ldrh	r3, [r3, #26]
 801154e:	f043 0302 	orr.w	r3, r3, #2
 8011552:	b29a      	uxth	r2, r3
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011558:	e188      	b.n	801186c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	8b5b      	ldrh	r3, [r3, #26]
 801155e:	f043 0301 	orr.w	r3, r3, #1
 8011562:	b29a      	uxth	r2, r3
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011568:	e180      	b.n	801186c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801156e:	2b00      	cmp	r3, #0
 8011570:	d106      	bne.n	8011580 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011572:	4848      	ldr	r0, [pc, #288]	; (8011694 <tcp_receive+0xd00>)
 8011574:	f7fd fbba 	bl	800ecec <tcp_seg_copy>
 8011578:	4602      	mov	r2, r0
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	675a      	str	r2, [r3, #116]	; 0x74
 801157e:	e16d      	b.n	801185c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011580:	2300      	movs	r3, #0
 8011582:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011588:	63bb      	str	r3, [r7, #56]	; 0x38
 801158a:	e157      	b.n	801183c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801158c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158e:	68db      	ldr	r3, [r3, #12]
 8011590:	685a      	ldr	r2, [r3, #4]
 8011592:	4b41      	ldr	r3, [pc, #260]	; (8011698 <tcp_receive+0xd04>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	429a      	cmp	r2, r3
 8011598:	d11d      	bne.n	80115d6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801159a:	4b3e      	ldr	r3, [pc, #248]	; (8011694 <tcp_receive+0xd00>)
 801159c:	891a      	ldrh	r2, [r3, #8]
 801159e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115a0:	891b      	ldrh	r3, [r3, #8]
 80115a2:	429a      	cmp	r2, r3
 80115a4:	f240 814f 	bls.w	8011846 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80115a8:	483a      	ldr	r0, [pc, #232]	; (8011694 <tcp_receive+0xd00>)
 80115aa:	f7fd fb9f 	bl	800ecec <tcp_seg_copy>
 80115ae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	f000 8149 	beq.w	801184a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80115b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d003      	beq.n	80115c6 <tcp_receive+0xc32>
                    prev->next = cseg;
 80115be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115c0:	697a      	ldr	r2, [r7, #20]
 80115c2:	601a      	str	r2, [r3, #0]
 80115c4:	e002      	b.n	80115cc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	697a      	ldr	r2, [r7, #20]
 80115ca:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80115cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80115ce:	6978      	ldr	r0, [r7, #20]
 80115d0:	f7ff f8dc 	bl	801078c <tcp_oos_insert_segment>
                }
                break;
 80115d4:	e139      	b.n	801184a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80115d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d117      	bne.n	801160c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80115dc:	4b2e      	ldr	r3, [pc, #184]	; (8011698 <tcp_receive+0xd04>)
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e2:	68db      	ldr	r3, [r3, #12]
 80115e4:	685b      	ldr	r3, [r3, #4]
 80115e6:	1ad3      	subs	r3, r2, r3
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	da57      	bge.n	801169c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80115ec:	4829      	ldr	r0, [pc, #164]	; (8011694 <tcp_receive+0xd00>)
 80115ee:	f7fd fb7d 	bl	800ecec <tcp_seg_copy>
 80115f2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80115f4:	69bb      	ldr	r3, [r7, #24]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f000 8129 	beq.w	801184e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	69ba      	ldr	r2, [r7, #24]
 8011600:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011602:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011604:	69b8      	ldr	r0, [r7, #24]
 8011606:	f7ff f8c1 	bl	801078c <tcp_oos_insert_segment>
                  }
                  break;
 801160a:	e120      	b.n	801184e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801160c:	4b22      	ldr	r3, [pc, #136]	; (8011698 <tcp_receive+0xd04>)
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	1ad3      	subs	r3, r2, r3
 8011618:	3b01      	subs	r3, #1
 801161a:	2b00      	cmp	r3, #0
 801161c:	db3e      	blt.n	801169c <tcp_receive+0xd08>
 801161e:	4b1e      	ldr	r3, [pc, #120]	; (8011698 <tcp_receive+0xd04>)
 8011620:	681a      	ldr	r2, [r3, #0]
 8011622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011624:	68db      	ldr	r3, [r3, #12]
 8011626:	685b      	ldr	r3, [r3, #4]
 8011628:	1ad3      	subs	r3, r2, r3
 801162a:	3301      	adds	r3, #1
 801162c:	2b00      	cmp	r3, #0
 801162e:	dc35      	bgt.n	801169c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011630:	4818      	ldr	r0, [pc, #96]	; (8011694 <tcp_receive+0xd00>)
 8011632:	f7fd fb5b 	bl	800ecec <tcp_seg_copy>
 8011636:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	2b00      	cmp	r3, #0
 801163c:	f000 8109 	beq.w	8011852 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011642:	68db      	ldr	r3, [r3, #12]
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011648:	8912      	ldrh	r2, [r2, #8]
 801164a:	441a      	add	r2, r3
 801164c:	4b12      	ldr	r3, [pc, #72]	; (8011698 <tcp_receive+0xd04>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	1ad3      	subs	r3, r2, r3
 8011652:	2b00      	cmp	r3, #0
 8011654:	dd12      	ble.n	801167c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011656:	4b10      	ldr	r3, [pc, #64]	; (8011698 <tcp_receive+0xd04>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	b29a      	uxth	r2, r3
 801165c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	b29b      	uxth	r3, r3
 8011664:	1ad3      	subs	r3, r2, r3
 8011666:	b29a      	uxth	r2, r3
 8011668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801166a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801166c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801166e:	685a      	ldr	r2, [r3, #4]
 8011670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011672:	891b      	ldrh	r3, [r3, #8]
 8011674:	4619      	mov	r1, r3
 8011676:	4610      	mov	r0, r2
 8011678:	f7fb ff16 	bl	800d4a8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801167c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801167e:	69fa      	ldr	r2, [r7, #28]
 8011680:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011682:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011684:	69f8      	ldr	r0, [r7, #28]
 8011686:	f7ff f881 	bl	801078c <tcp_oos_insert_segment>
                  }
                  break;
 801168a:	e0e2      	b.n	8011852 <tcp_receive+0xebe>
 801168c:	240082a8 	.word	0x240082a8
 8011690:	240082a5 	.word	0x240082a5
 8011694:	24008278 	.word	0x24008278
 8011698:	24008298 	.word	0x24008298
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801169c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801169e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80116a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	f040 80c6 	bne.w	8011836 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80116aa:	4b80      	ldr	r3, [pc, #512]	; (80118ac <tcp_receive+0xf18>)
 80116ac:	681a      	ldr	r2, [r3, #0]
 80116ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b0:	68db      	ldr	r3, [r3, #12]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	f340 80bd 	ble.w	8011836 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80116bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116be:	68db      	ldr	r3, [r3, #12]
 80116c0:	899b      	ldrh	r3, [r3, #12]
 80116c2:	b29b      	uxth	r3, r3
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7f6 fad1 	bl	8007c6c <lwip_htons>
 80116ca:	4603      	mov	r3, r0
 80116cc:	b2db      	uxtb	r3, r3
 80116ce:	f003 0301 	and.w	r3, r3, #1
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	f040 80bf 	bne.w	8011856 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80116d8:	4875      	ldr	r0, [pc, #468]	; (80118b0 <tcp_receive+0xf1c>)
 80116da:	f7fd fb07 	bl	800ecec <tcp_seg_copy>
 80116de:	4602      	mov	r2, r0
 80116e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80116e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	f000 80b6 	beq.w	801185a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80116ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f0:	68db      	ldr	r3, [r3, #12]
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116f6:	8912      	ldrh	r2, [r2, #8]
 80116f8:	441a      	add	r2, r3
 80116fa:	4b6c      	ldr	r3, [pc, #432]	; (80118ac <tcp_receive+0xf18>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	1ad3      	subs	r3, r2, r3
 8011700:	2b00      	cmp	r3, #0
 8011702:	dd12      	ble.n	801172a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011704:	4b69      	ldr	r3, [pc, #420]	; (80118ac <tcp_receive+0xf18>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	b29a      	uxth	r2, r3
 801170a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801170c:	68db      	ldr	r3, [r3, #12]
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	b29b      	uxth	r3, r3
 8011712:	1ad3      	subs	r3, r2, r3
 8011714:	b29a      	uxth	r2, r3
 8011716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011718:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801171a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171c:	685a      	ldr	r2, [r3, #4]
 801171e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011720:	891b      	ldrh	r3, [r3, #8]
 8011722:	4619      	mov	r1, r3
 8011724:	4610      	mov	r0, r2
 8011726:	f7fb febf 	bl	800d4a8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801172a:	4b62      	ldr	r3, [pc, #392]	; (80118b4 <tcp_receive+0xf20>)
 801172c:	881b      	ldrh	r3, [r3, #0]
 801172e:	461a      	mov	r2, r3
 8011730:	4b5e      	ldr	r3, [pc, #376]	; (80118ac <tcp_receive+0xf18>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	441a      	add	r2, r3
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801173a:	6879      	ldr	r1, [r7, #4]
 801173c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801173e:	440b      	add	r3, r1
 8011740:	1ad3      	subs	r3, r2, r3
 8011742:	2b00      	cmp	r3, #0
 8011744:	f340 8089 	ble.w	801185a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	68db      	ldr	r3, [r3, #12]
 801174e:	899b      	ldrh	r3, [r3, #12]
 8011750:	b29b      	uxth	r3, r3
 8011752:	4618      	mov	r0, r3
 8011754:	f7f6 fa8a 	bl	8007c6c <lwip_htons>
 8011758:	4603      	mov	r3, r0
 801175a:	b2db      	uxtb	r3, r3
 801175c:	f003 0301 	and.w	r3, r3, #1
 8011760:	2b00      	cmp	r3, #0
 8011762:	d022      	beq.n	80117aa <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	68db      	ldr	r3, [r3, #12]
 801176a:	899b      	ldrh	r3, [r3, #12]
 801176c:	b29b      	uxth	r3, r3
 801176e:	b21b      	sxth	r3, r3
 8011770:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011774:	b21c      	sxth	r4, r3
 8011776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	68db      	ldr	r3, [r3, #12]
 801177c:	899b      	ldrh	r3, [r3, #12]
 801177e:	b29b      	uxth	r3, r3
 8011780:	4618      	mov	r0, r3
 8011782:	f7f6 fa73 	bl	8007c6c <lwip_htons>
 8011786:	4603      	mov	r3, r0
 8011788:	b2db      	uxtb	r3, r3
 801178a:	b29b      	uxth	r3, r3
 801178c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011790:	b29b      	uxth	r3, r3
 8011792:	4618      	mov	r0, r3
 8011794:	f7f6 fa6a 	bl	8007c6c <lwip_htons>
 8011798:	4603      	mov	r3, r0
 801179a:	b21b      	sxth	r3, r3
 801179c:	4323      	orrs	r3, r4
 801179e:	b21a      	sxth	r2, r3
 80117a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	b292      	uxth	r2, r2
 80117a8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ae:	b29a      	uxth	r2, r3
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117b4:	4413      	add	r3, r2
 80117b6:	b299      	uxth	r1, r3
 80117b8:	4b3c      	ldr	r3, [pc, #240]	; (80118ac <tcp_receive+0xf18>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	b29a      	uxth	r2, r3
 80117be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	1a8a      	subs	r2, r1, r2
 80117c4:	b292      	uxth	r2, r2
 80117c6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80117c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	685a      	ldr	r2, [r3, #4]
 80117ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	891b      	ldrh	r3, [r3, #8]
 80117d4:	4619      	mov	r1, r3
 80117d6:	4610      	mov	r0, r2
 80117d8:	f7fb fe66 	bl	800d4a8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80117dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	891c      	ldrh	r4, [r3, #8]
 80117e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	68db      	ldr	r3, [r3, #12]
 80117e8:	899b      	ldrh	r3, [r3, #12]
 80117ea:	b29b      	uxth	r3, r3
 80117ec:	4618      	mov	r0, r3
 80117ee:	f7f6 fa3d 	bl	8007c6c <lwip_htons>
 80117f2:	4603      	mov	r3, r0
 80117f4:	b2db      	uxtb	r3, r3
 80117f6:	f003 0303 	and.w	r3, r3, #3
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d001      	beq.n	8011802 <tcp_receive+0xe6e>
 80117fe:	2301      	movs	r3, #1
 8011800:	e000      	b.n	8011804 <tcp_receive+0xe70>
 8011802:	2300      	movs	r3, #0
 8011804:	4423      	add	r3, r4
 8011806:	b29a      	uxth	r2, r3
 8011808:	4b2a      	ldr	r3, [pc, #168]	; (80118b4 <tcp_receive+0xf20>)
 801180a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801180c:	4b29      	ldr	r3, [pc, #164]	; (80118b4 <tcp_receive+0xf20>)
 801180e:	881b      	ldrh	r3, [r3, #0]
 8011810:	461a      	mov	r2, r3
 8011812:	4b26      	ldr	r3, [pc, #152]	; (80118ac <tcp_receive+0xf18>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	441a      	add	r2, r3
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801181c:	6879      	ldr	r1, [r7, #4]
 801181e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011820:	440b      	add	r3, r1
 8011822:	429a      	cmp	r2, r3
 8011824:	d019      	beq.n	801185a <tcp_receive+0xec6>
 8011826:	4b24      	ldr	r3, [pc, #144]	; (80118b8 <tcp_receive+0xf24>)
 8011828:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801182c:	4923      	ldr	r1, [pc, #140]	; (80118bc <tcp_receive+0xf28>)
 801182e:	4824      	ldr	r0, [pc, #144]	; (80118c0 <tcp_receive+0xf2c>)
 8011830:	f002 f9c8 	bl	8013bc4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011834:	e011      	b.n	801185a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	63bb      	str	r3, [r7, #56]	; 0x38
 801183c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801183e:	2b00      	cmp	r3, #0
 8011840:	f47f aea4 	bne.w	801158c <tcp_receive+0xbf8>
 8011844:	e00a      	b.n	801185c <tcp_receive+0xec8>
                break;
 8011846:	bf00      	nop
 8011848:	e008      	b.n	801185c <tcp_receive+0xec8>
                break;
 801184a:	bf00      	nop
 801184c:	e006      	b.n	801185c <tcp_receive+0xec8>
                  break;
 801184e:	bf00      	nop
 8011850:	e004      	b.n	801185c <tcp_receive+0xec8>
                  break;
 8011852:	bf00      	nop
 8011854:	e002      	b.n	801185c <tcp_receive+0xec8>
                  break;
 8011856:	bf00      	nop
 8011858:	e000      	b.n	801185c <tcp_receive+0xec8>
                break;
 801185a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f001 fa33 	bl	8012cc8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011862:	e003      	b.n	801186c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f001 fa2f 	bl	8012cc8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801186a:	e01a      	b.n	80118a2 <tcp_receive+0xf0e>
 801186c:	e019      	b.n	80118a2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801186e:	4b0f      	ldr	r3, [pc, #60]	; (80118ac <tcp_receive+0xf18>)
 8011870:	681a      	ldr	r2, [r3, #0]
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011876:	1ad3      	subs	r3, r2, r3
 8011878:	2b00      	cmp	r3, #0
 801187a:	db0a      	blt.n	8011892 <tcp_receive+0xefe>
 801187c:	4b0b      	ldr	r3, [pc, #44]	; (80118ac <tcp_receive+0xf18>)
 801187e:	681a      	ldr	r2, [r3, #0]
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011884:	6879      	ldr	r1, [r7, #4]
 8011886:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011888:	440b      	add	r3, r1
 801188a:	1ad3      	subs	r3, r2, r3
 801188c:	3301      	adds	r3, #1
 801188e:	2b00      	cmp	r3, #0
 8011890:	dd07      	ble.n	80118a2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	8b5b      	ldrh	r3, [r3, #26]
 8011896:	f043 0302 	orr.w	r3, r3, #2
 801189a:	b29a      	uxth	r2, r3
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80118a0:	e7ff      	b.n	80118a2 <tcp_receive+0xf0e>
 80118a2:	bf00      	nop
 80118a4:	3750      	adds	r7, #80	; 0x50
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bdb0      	pop	{r4, r5, r7, pc}
 80118aa:	bf00      	nop
 80118ac:	24008298 	.word	0x24008298
 80118b0:	24008278 	.word	0x24008278
 80118b4:	240082a2 	.word	0x240082a2
 80118b8:	08016b88 	.word	0x08016b88
 80118bc:	08016f68 	.word	0x08016f68
 80118c0:	08016c0c 	.word	0x08016c0c

080118c4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80118c4:	b480      	push	{r7}
 80118c6:	b083      	sub	sp, #12
 80118c8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80118ca:	4b15      	ldr	r3, [pc, #84]	; (8011920 <tcp_get_next_optbyte+0x5c>)
 80118cc:	881b      	ldrh	r3, [r3, #0]
 80118ce:	1c5a      	adds	r2, r3, #1
 80118d0:	b291      	uxth	r1, r2
 80118d2:	4a13      	ldr	r2, [pc, #76]	; (8011920 <tcp_get_next_optbyte+0x5c>)
 80118d4:	8011      	strh	r1, [r2, #0]
 80118d6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80118d8:	4b12      	ldr	r3, [pc, #72]	; (8011924 <tcp_get_next_optbyte+0x60>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d004      	beq.n	80118ea <tcp_get_next_optbyte+0x26>
 80118e0:	4b11      	ldr	r3, [pc, #68]	; (8011928 <tcp_get_next_optbyte+0x64>)
 80118e2:	881b      	ldrh	r3, [r3, #0]
 80118e4:	88fa      	ldrh	r2, [r7, #6]
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d208      	bcs.n	80118fc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80118ea:	4b10      	ldr	r3, [pc, #64]	; (801192c <tcp_get_next_optbyte+0x68>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	3314      	adds	r3, #20
 80118f0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80118f2:	88fb      	ldrh	r3, [r7, #6]
 80118f4:	683a      	ldr	r2, [r7, #0]
 80118f6:	4413      	add	r3, r2
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	e00b      	b.n	8011914 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80118fc:	88fb      	ldrh	r3, [r7, #6]
 80118fe:	b2da      	uxtb	r2, r3
 8011900:	4b09      	ldr	r3, [pc, #36]	; (8011928 <tcp_get_next_optbyte+0x64>)
 8011902:	881b      	ldrh	r3, [r3, #0]
 8011904:	b2db      	uxtb	r3, r3
 8011906:	1ad3      	subs	r3, r2, r3
 8011908:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801190a:	4b06      	ldr	r3, [pc, #24]	; (8011924 <tcp_get_next_optbyte+0x60>)
 801190c:	681a      	ldr	r2, [r3, #0]
 801190e:	797b      	ldrb	r3, [r7, #5]
 8011910:	4413      	add	r3, r2
 8011912:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011914:	4618      	mov	r0, r3
 8011916:	370c      	adds	r7, #12
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr
 8011920:	24008294 	.word	0x24008294
 8011924:	24008290 	.word	0x24008290
 8011928:	2400828e 	.word	0x2400828e
 801192c:	24008288 	.word	0x24008288

08011930 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b084      	sub	sp, #16
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d106      	bne.n	801194c <tcp_parseopt+0x1c>
 801193e:	4b32      	ldr	r3, [pc, #200]	; (8011a08 <tcp_parseopt+0xd8>)
 8011940:	f240 727d 	movw	r2, #1917	; 0x77d
 8011944:	4931      	ldr	r1, [pc, #196]	; (8011a0c <tcp_parseopt+0xdc>)
 8011946:	4832      	ldr	r0, [pc, #200]	; (8011a10 <tcp_parseopt+0xe0>)
 8011948:	f002 f93c 	bl	8013bc4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801194c:	4b31      	ldr	r3, [pc, #196]	; (8011a14 <tcp_parseopt+0xe4>)
 801194e:	881b      	ldrh	r3, [r3, #0]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d055      	beq.n	8011a00 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011954:	4b30      	ldr	r3, [pc, #192]	; (8011a18 <tcp_parseopt+0xe8>)
 8011956:	2200      	movs	r2, #0
 8011958:	801a      	strh	r2, [r3, #0]
 801195a:	e045      	b.n	80119e8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801195c:	f7ff ffb2 	bl	80118c4 <tcp_get_next_optbyte>
 8011960:	4603      	mov	r3, r0
 8011962:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011964:	7bfb      	ldrb	r3, [r7, #15]
 8011966:	2b02      	cmp	r3, #2
 8011968:	d006      	beq.n	8011978 <tcp_parseopt+0x48>
 801196a:	2b02      	cmp	r3, #2
 801196c:	dc2b      	bgt.n	80119c6 <tcp_parseopt+0x96>
 801196e:	2b00      	cmp	r3, #0
 8011970:	d041      	beq.n	80119f6 <tcp_parseopt+0xc6>
 8011972:	2b01      	cmp	r3, #1
 8011974:	d127      	bne.n	80119c6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011976:	e037      	b.n	80119e8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011978:	f7ff ffa4 	bl	80118c4 <tcp_get_next_optbyte>
 801197c:	4603      	mov	r3, r0
 801197e:	2b04      	cmp	r3, #4
 8011980:	d13b      	bne.n	80119fa <tcp_parseopt+0xca>
 8011982:	4b25      	ldr	r3, [pc, #148]	; (8011a18 <tcp_parseopt+0xe8>)
 8011984:	881b      	ldrh	r3, [r3, #0]
 8011986:	3301      	adds	r3, #1
 8011988:	4a22      	ldr	r2, [pc, #136]	; (8011a14 <tcp_parseopt+0xe4>)
 801198a:	8812      	ldrh	r2, [r2, #0]
 801198c:	4293      	cmp	r3, r2
 801198e:	da34      	bge.n	80119fa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011990:	f7ff ff98 	bl	80118c4 <tcp_get_next_optbyte>
 8011994:	4603      	mov	r3, r0
 8011996:	b29b      	uxth	r3, r3
 8011998:	021b      	lsls	r3, r3, #8
 801199a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801199c:	f7ff ff92 	bl	80118c4 <tcp_get_next_optbyte>
 80119a0:	4603      	mov	r3, r0
 80119a2:	b29a      	uxth	r2, r3
 80119a4:	89bb      	ldrh	r3, [r7, #12]
 80119a6:	4313      	orrs	r3, r2
 80119a8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80119aa:	89bb      	ldrh	r3, [r7, #12]
 80119ac:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80119b0:	d804      	bhi.n	80119bc <tcp_parseopt+0x8c>
 80119b2:	89bb      	ldrh	r3, [r7, #12]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d001      	beq.n	80119bc <tcp_parseopt+0x8c>
 80119b8:	89ba      	ldrh	r2, [r7, #12]
 80119ba:	e001      	b.n	80119c0 <tcp_parseopt+0x90>
 80119bc:	f44f 7206 	mov.w	r2, #536	; 0x218
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80119c4:	e010      	b.n	80119e8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80119c6:	f7ff ff7d 	bl	80118c4 <tcp_get_next_optbyte>
 80119ca:	4603      	mov	r3, r0
 80119cc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80119ce:	7afb      	ldrb	r3, [r7, #11]
 80119d0:	2b01      	cmp	r3, #1
 80119d2:	d914      	bls.n	80119fe <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80119d4:	7afb      	ldrb	r3, [r7, #11]
 80119d6:	b29a      	uxth	r2, r3
 80119d8:	4b0f      	ldr	r3, [pc, #60]	; (8011a18 <tcp_parseopt+0xe8>)
 80119da:	881b      	ldrh	r3, [r3, #0]
 80119dc:	4413      	add	r3, r2
 80119de:	b29b      	uxth	r3, r3
 80119e0:	3b02      	subs	r3, #2
 80119e2:	b29a      	uxth	r2, r3
 80119e4:	4b0c      	ldr	r3, [pc, #48]	; (8011a18 <tcp_parseopt+0xe8>)
 80119e6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80119e8:	4b0b      	ldr	r3, [pc, #44]	; (8011a18 <tcp_parseopt+0xe8>)
 80119ea:	881a      	ldrh	r2, [r3, #0]
 80119ec:	4b09      	ldr	r3, [pc, #36]	; (8011a14 <tcp_parseopt+0xe4>)
 80119ee:	881b      	ldrh	r3, [r3, #0]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d3b3      	bcc.n	801195c <tcp_parseopt+0x2c>
 80119f4:	e004      	b.n	8011a00 <tcp_parseopt+0xd0>
          return;
 80119f6:	bf00      	nop
 80119f8:	e002      	b.n	8011a00 <tcp_parseopt+0xd0>
            return;
 80119fa:	bf00      	nop
 80119fc:	e000      	b.n	8011a00 <tcp_parseopt+0xd0>
            return;
 80119fe:	bf00      	nop
      }
    }
  }
}
 8011a00:	3710      	adds	r7, #16
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}
 8011a06:	bf00      	nop
 8011a08:	08016b88 	.word	0x08016b88
 8011a0c:	08017024 	.word	0x08017024
 8011a10:	08016c0c 	.word	0x08016c0c
 8011a14:	2400828c 	.word	0x2400828c
 8011a18:	24008294 	.word	0x24008294

08011a1c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011a1c:	b480      	push	{r7}
 8011a1e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011a20:	4b05      	ldr	r3, [pc, #20]	; (8011a38 <tcp_trigger_input_pcb_close+0x1c>)
 8011a22:	781b      	ldrb	r3, [r3, #0]
 8011a24:	f043 0310 	orr.w	r3, r3, #16
 8011a28:	b2da      	uxtb	r2, r3
 8011a2a:	4b03      	ldr	r3, [pc, #12]	; (8011a38 <tcp_trigger_input_pcb_close+0x1c>)
 8011a2c:	701a      	strb	r2, [r3, #0]
}
 8011a2e:	bf00      	nop
 8011a30:	46bd      	mov	sp, r7
 8011a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a36:	4770      	bx	lr
 8011a38:	240082a5 	.word	0x240082a5

08011a3c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b084      	sub	sp, #16
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	60b9      	str	r1, [r7, #8]
 8011a46:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d00a      	beq.n	8011a64 <tcp_route+0x28>
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	7a1b      	ldrb	r3, [r3, #8]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d006      	beq.n	8011a64 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	7a1b      	ldrb	r3, [r3, #8]
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f7fb fb6a 	bl	800d134 <netif_get_by_index>
 8011a60:	4603      	mov	r3, r0
 8011a62:	e003      	b.n	8011a6c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f7f9 fa6f 	bl	800af48 <ip4_route>
 8011a6a:	4603      	mov	r3, r0
  }
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3710      	adds	r7, #16
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011a74:	b590      	push	{r4, r7, lr}
 8011a76:	b087      	sub	sp, #28
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	60f8      	str	r0, [r7, #12]
 8011a7c:	60b9      	str	r1, [r7, #8]
 8011a7e:	603b      	str	r3, [r7, #0]
 8011a80:	4613      	mov	r3, r2
 8011a82:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d105      	bne.n	8011a96 <tcp_create_segment+0x22>
 8011a8a:	4b44      	ldr	r3, [pc, #272]	; (8011b9c <tcp_create_segment+0x128>)
 8011a8c:	22a3      	movs	r2, #163	; 0xa3
 8011a8e:	4944      	ldr	r1, [pc, #272]	; (8011ba0 <tcp_create_segment+0x12c>)
 8011a90:	4844      	ldr	r0, [pc, #272]	; (8011ba4 <tcp_create_segment+0x130>)
 8011a92:	f002 f897 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d105      	bne.n	8011aa8 <tcp_create_segment+0x34>
 8011a9c:	4b3f      	ldr	r3, [pc, #252]	; (8011b9c <tcp_create_segment+0x128>)
 8011a9e:	22a4      	movs	r2, #164	; 0xa4
 8011aa0:	4941      	ldr	r1, [pc, #260]	; (8011ba8 <tcp_create_segment+0x134>)
 8011aa2:	4840      	ldr	r0, [pc, #256]	; (8011ba4 <tcp_create_segment+0x130>)
 8011aa4:	f002 f88e 	bl	8013bc4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011aa8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011aac:	009b      	lsls	r3, r3, #2
 8011aae:	b2db      	uxtb	r3, r3
 8011ab0:	f003 0304 	and.w	r3, r3, #4
 8011ab4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011ab6:	2003      	movs	r0, #3
 8011ab8:	f7fa ffaa 	bl	800ca10 <memp_malloc>
 8011abc:	6138      	str	r0, [r7, #16]
 8011abe:	693b      	ldr	r3, [r7, #16]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d104      	bne.n	8011ace <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011ac4:	68b8      	ldr	r0, [r7, #8]
 8011ac6:	f7fb fe75 	bl	800d7b4 <pbuf_free>
    return NULL;
 8011aca:	2300      	movs	r3, #0
 8011acc:	e061      	b.n	8011b92 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011ad4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	68ba      	ldr	r2, [r7, #8]
 8011ae0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011ae2:	68bb      	ldr	r3, [r7, #8]
 8011ae4:	891a      	ldrh	r2, [r3, #8]
 8011ae6:	7dfb      	ldrb	r3, [r7, #23]
 8011ae8:	b29b      	uxth	r3, r3
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d205      	bcs.n	8011afa <tcp_create_segment+0x86>
 8011aee:	4b2b      	ldr	r3, [pc, #172]	; (8011b9c <tcp_create_segment+0x128>)
 8011af0:	22b0      	movs	r2, #176	; 0xb0
 8011af2:	492e      	ldr	r1, [pc, #184]	; (8011bac <tcp_create_segment+0x138>)
 8011af4:	482b      	ldr	r0, [pc, #172]	; (8011ba4 <tcp_create_segment+0x130>)
 8011af6:	f002 f865 	bl	8013bc4 <iprintf>
  seg->len = p->tot_len - optlen;
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	891a      	ldrh	r2, [r3, #8]
 8011afe:	7dfb      	ldrb	r3, [r7, #23]
 8011b00:	b29b      	uxth	r3, r3
 8011b02:	1ad3      	subs	r3, r2, r3
 8011b04:	b29a      	uxth	r2, r3
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011b0a:	2114      	movs	r1, #20
 8011b0c:	68b8      	ldr	r0, [r7, #8]
 8011b0e:	f7fb fdbb 	bl	800d688 <pbuf_add_header>
 8011b12:	4603      	mov	r3, r0
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d004      	beq.n	8011b22 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011b18:	6938      	ldr	r0, [r7, #16]
 8011b1a:	f7fd f8ce 	bl	800ecba <tcp_seg_free>
    return NULL;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	e037      	b.n	8011b92 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	685b      	ldr	r3, [r3, #4]
 8011b26:	685a      	ldr	r2, [r3, #4]
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	8ada      	ldrh	r2, [r3, #22]
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	68dc      	ldr	r4, [r3, #12]
 8011b34:	4610      	mov	r0, r2
 8011b36:	f7f6 f899 	bl	8007c6c <lwip_htons>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	8b1a      	ldrh	r2, [r3, #24]
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	68dc      	ldr	r4, [r3, #12]
 8011b46:	4610      	mov	r0, r2
 8011b48:	f7f6 f890 	bl	8007c6c <lwip_htons>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	68dc      	ldr	r4, [r3, #12]
 8011b54:	6838      	ldr	r0, [r7, #0]
 8011b56:	f7f6 f89e 	bl	8007c96 <lwip_htonl>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011b5e:	7dfb      	ldrb	r3, [r7, #23]
 8011b60:	089b      	lsrs	r3, r3, #2
 8011b62:	b2db      	uxtb	r3, r3
 8011b64:	b29b      	uxth	r3, r3
 8011b66:	3305      	adds	r3, #5
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	031b      	lsls	r3, r3, #12
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	79fb      	ldrb	r3, [r7, #7]
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	4313      	orrs	r3, r2
 8011b74:	b29a      	uxth	r2, r3
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	68dc      	ldr	r4, [r3, #12]
 8011b7a:	4610      	mov	r0, r2
 8011b7c:	f7f6 f876 	bl	8007c6c <lwip_htons>
 8011b80:	4603      	mov	r3, r0
 8011b82:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011b84:	693b      	ldr	r3, [r7, #16]
 8011b86:	68db      	ldr	r3, [r3, #12]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	749a      	strb	r2, [r3, #18]
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011b90:	693b      	ldr	r3, [r7, #16]
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	371c      	adds	r7, #28
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd90      	pop	{r4, r7, pc}
 8011b9a:	bf00      	nop
 8011b9c:	08017040 	.word	0x08017040
 8011ba0:	080170ac 	.word	0x080170ac
 8011ba4:	080170cc 	.word	0x080170cc
 8011ba8:	080170f4 	.word	0x080170f4
 8011bac:	08017118 	.word	0x08017118

08011bb0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011bb0:	b590      	push	{r4, r7, lr}
 8011bb2:	b08b      	sub	sp, #44	; 0x2c
 8011bb4:	af02      	add	r7, sp, #8
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	460b      	mov	r3, r1
 8011bba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	61fb      	str	r3, [r7, #28]
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d106      	bne.n	8011bdc <tcp_split_unsent_seg+0x2c>
 8011bce:	4b95      	ldr	r3, [pc, #596]	; (8011e24 <tcp_split_unsent_seg+0x274>)
 8011bd0:	f240 324b 	movw	r2, #843	; 0x34b
 8011bd4:	4994      	ldr	r1, [pc, #592]	; (8011e28 <tcp_split_unsent_seg+0x278>)
 8011bd6:	4895      	ldr	r0, [pc, #596]	; (8011e2c <tcp_split_unsent_seg+0x27c>)
 8011bd8:	f001 fff4 	bl	8013bc4 <iprintf>

  useg = pcb->unsent;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011be0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d102      	bne.n	8011bee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011be8:	f04f 33ff 	mov.w	r3, #4294967295
 8011bec:	e116      	b.n	8011e1c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011bee:	887b      	ldrh	r3, [r7, #2]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d109      	bne.n	8011c08 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011bf4:	4b8b      	ldr	r3, [pc, #556]	; (8011e24 <tcp_split_unsent_seg+0x274>)
 8011bf6:	f240 3253 	movw	r2, #851	; 0x353
 8011bfa:	498d      	ldr	r1, [pc, #564]	; (8011e30 <tcp_split_unsent_seg+0x280>)
 8011bfc:	488b      	ldr	r0, [pc, #556]	; (8011e2c <tcp_split_unsent_seg+0x27c>)
 8011bfe:	f001 ffe1 	bl	8013bc4 <iprintf>
    return ERR_VAL;
 8011c02:	f06f 0305 	mvn.w	r3, #5
 8011c06:	e109      	b.n	8011e1c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	891b      	ldrh	r3, [r3, #8]
 8011c0c:	887a      	ldrh	r2, [r7, #2]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d301      	bcc.n	8011c16 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011c12:	2300      	movs	r3, #0
 8011c14:	e102      	b.n	8011e1c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c1a:	887a      	ldrh	r2, [r7, #2]
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d906      	bls.n	8011c2e <tcp_split_unsent_seg+0x7e>
 8011c20:	4b80      	ldr	r3, [pc, #512]	; (8011e24 <tcp_split_unsent_seg+0x274>)
 8011c22:	f240 325b 	movw	r2, #859	; 0x35b
 8011c26:	4983      	ldr	r1, [pc, #524]	; (8011e34 <tcp_split_unsent_seg+0x284>)
 8011c28:	4880      	ldr	r0, [pc, #512]	; (8011e2c <tcp_split_unsent_seg+0x27c>)
 8011c2a:	f001 ffcb 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	891b      	ldrh	r3, [r3, #8]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d106      	bne.n	8011c44 <tcp_split_unsent_seg+0x94>
 8011c36:	4b7b      	ldr	r3, [pc, #492]	; (8011e24 <tcp_split_unsent_seg+0x274>)
 8011c38:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011c3c:	497e      	ldr	r1, [pc, #504]	; (8011e38 <tcp_split_unsent_seg+0x288>)
 8011c3e:	487b      	ldr	r0, [pc, #492]	; (8011e2c <tcp_split_unsent_seg+0x27c>)
 8011c40:	f001 ffc0 	bl	8013bc4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	7a9b      	ldrb	r3, [r3, #10]
 8011c48:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011c4a:	7bfb      	ldrb	r3, [r7, #15]
 8011c4c:	009b      	lsls	r3, r3, #2
 8011c4e:	b2db      	uxtb	r3, r3
 8011c50:	f003 0304 	and.w	r3, r3, #4
 8011c54:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	891a      	ldrh	r2, [r3, #8]
 8011c5a:	887b      	ldrh	r3, [r7, #2]
 8011c5c:	1ad3      	subs	r3, r2, r3
 8011c5e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011c60:	7bbb      	ldrb	r3, [r7, #14]
 8011c62:	b29a      	uxth	r2, r3
 8011c64:	89bb      	ldrh	r3, [r7, #12]
 8011c66:	4413      	add	r3, r2
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c6e:	4619      	mov	r1, r3
 8011c70:	2036      	movs	r0, #54	; 0x36
 8011c72:	f7fb fabb 	bl	800d1ec <pbuf_alloc>
 8011c76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c78:	693b      	ldr	r3, [r7, #16]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	f000 80b7 	beq.w	8011dee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	891a      	ldrh	r2, [r3, #8]
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	891b      	ldrh	r3, [r3, #8]
 8011c8a:	1ad3      	subs	r3, r2, r3
 8011c8c:	b29a      	uxth	r2, r3
 8011c8e:	887b      	ldrh	r3, [r7, #2]
 8011c90:	4413      	add	r3, r2
 8011c92:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	6858      	ldr	r0, [r3, #4]
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	685a      	ldr	r2, [r3, #4]
 8011c9c:	7bbb      	ldrb	r3, [r7, #14]
 8011c9e:	18d1      	adds	r1, r2, r3
 8011ca0:	897b      	ldrh	r3, [r7, #10]
 8011ca2:	89ba      	ldrh	r2, [r7, #12]
 8011ca4:	f7fb ff80 	bl	800dba8 <pbuf_copy_partial>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	461a      	mov	r2, r3
 8011cac:	89bb      	ldrh	r3, [r7, #12]
 8011cae:	4293      	cmp	r3, r2
 8011cb0:	f040 809f 	bne.w	8011df2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	68db      	ldr	r3, [r3, #12]
 8011cb8:	899b      	ldrh	r3, [r3, #12]
 8011cba:	b29b      	uxth	r3, r3
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7f5 ffd5 	bl	8007c6c <lwip_htons>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	b2db      	uxtb	r3, r3
 8011cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011cca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011ccc:	2300      	movs	r3, #0
 8011cce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011cd0:	7efb      	ldrb	r3, [r7, #27]
 8011cd2:	f003 0308 	and.w	r3, r3, #8
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d007      	beq.n	8011cea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011cda:	7efb      	ldrb	r3, [r7, #27]
 8011cdc:	f023 0308 	bic.w	r3, r3, #8
 8011ce0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011ce2:	7ebb      	ldrb	r3, [r7, #26]
 8011ce4:	f043 0308 	orr.w	r3, r3, #8
 8011ce8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011cea:	7efb      	ldrb	r3, [r7, #27]
 8011cec:	f003 0301 	and.w	r3, r3, #1
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d007      	beq.n	8011d04 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011cf4:	7efb      	ldrb	r3, [r7, #27]
 8011cf6:	f023 0301 	bic.w	r3, r3, #1
 8011cfa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011cfc:	7ebb      	ldrb	r3, [r7, #26]
 8011cfe:	f043 0301 	orr.w	r3, r3, #1
 8011d02:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	68db      	ldr	r3, [r3, #12]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f7f5 ffc3 	bl	8007c96 <lwip_htonl>
 8011d10:	4602      	mov	r2, r0
 8011d12:	887b      	ldrh	r3, [r7, #2]
 8011d14:	18d1      	adds	r1, r2, r3
 8011d16:	7eba      	ldrb	r2, [r7, #26]
 8011d18:	7bfb      	ldrb	r3, [r7, #15]
 8011d1a:	9300      	str	r3, [sp, #0]
 8011d1c:	460b      	mov	r3, r1
 8011d1e:	6939      	ldr	r1, [r7, #16]
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f7ff fea7 	bl	8011a74 <tcp_create_segment>
 8011d26:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011d28:	69fb      	ldr	r3, [r7, #28]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d063      	beq.n	8011df6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	685b      	ldr	r3, [r3, #4]
 8011d32:	4618      	mov	r0, r3
 8011d34:	f7fb fdc6 	bl	800d8c4 <pbuf_clen>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d42:	1a9b      	subs	r3, r3, r2
 8011d44:	b29a      	uxth	r2, r3
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011d4c:	697b      	ldr	r3, [r7, #20]
 8011d4e:	6858      	ldr	r0, [r3, #4]
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	891a      	ldrh	r2, [r3, #8]
 8011d56:	89bb      	ldrh	r3, [r7, #12]
 8011d58:	1ad3      	subs	r3, r2, r3
 8011d5a:	b29b      	uxth	r3, r3
 8011d5c:	4619      	mov	r1, r3
 8011d5e:	f7fb fba3 	bl	800d4a8 <pbuf_realloc>
  useg->len -= remainder;
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	891a      	ldrh	r2, [r3, #8]
 8011d66:	89bb      	ldrh	r3, [r7, #12]
 8011d68:	1ad3      	subs	r3, r2, r3
 8011d6a:	b29a      	uxth	r2, r3
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011d70:	697b      	ldr	r3, [r7, #20]
 8011d72:	68db      	ldr	r3, [r3, #12]
 8011d74:	899b      	ldrh	r3, [r3, #12]
 8011d76:	b29c      	uxth	r4, r3
 8011d78:	7efb      	ldrb	r3, [r7, #27]
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7f5 ff75 	bl	8007c6c <lwip_htons>
 8011d82:	4603      	mov	r3, r0
 8011d84:	461a      	mov	r2, r3
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	68db      	ldr	r3, [r3, #12]
 8011d8a:	4322      	orrs	r2, r4
 8011d8c:	b292      	uxth	r2, r2
 8011d8e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	685b      	ldr	r3, [r3, #4]
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7fb fd95 	bl	800d8c4 <pbuf_clen>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	461a      	mov	r2, r3
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011da4:	4413      	add	r3, r2
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011dae:	69fb      	ldr	r3, [r7, #28]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7fb fd86 	bl	800d8c4 <pbuf_clen>
 8011db8:	4603      	mov	r3, r0
 8011dba:	461a      	mov	r2, r3
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011dc2:	4413      	add	r3, r2
 8011dc4:	b29a      	uxth	r2, r3
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011dcc:	697b      	ldr	r3, [r7, #20]
 8011dce:	681a      	ldr	r2, [r3, #0]
 8011dd0:	69fb      	ldr	r3, [r7, #28]
 8011dd2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	69fa      	ldr	r2, [r7, #28]
 8011dd8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011dda:	69fb      	ldr	r3, [r7, #28]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d103      	bne.n	8011dea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2200      	movs	r2, #0
 8011de6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011dea:	2300      	movs	r3, #0
 8011dec:	e016      	b.n	8011e1c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011dee:	bf00      	nop
 8011df0:	e002      	b.n	8011df8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011df2:	bf00      	nop
 8011df4:	e000      	b.n	8011df8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011df6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011df8:	69fb      	ldr	r3, [r7, #28]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d006      	beq.n	8011e0c <tcp_split_unsent_seg+0x25c>
 8011dfe:	4b09      	ldr	r3, [pc, #36]	; (8011e24 <tcp_split_unsent_seg+0x274>)
 8011e00:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011e04:	490d      	ldr	r1, [pc, #52]	; (8011e3c <tcp_split_unsent_seg+0x28c>)
 8011e06:	4809      	ldr	r0, [pc, #36]	; (8011e2c <tcp_split_unsent_seg+0x27c>)
 8011e08:	f001 fedc 	bl	8013bc4 <iprintf>
  if (p != NULL) {
 8011e0c:	693b      	ldr	r3, [r7, #16]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d002      	beq.n	8011e18 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011e12:	6938      	ldr	r0, [r7, #16]
 8011e14:	f7fb fcce 	bl	800d7b4 <pbuf_free>
  }

  return ERR_MEM;
 8011e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3724      	adds	r7, #36	; 0x24
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd90      	pop	{r4, r7, pc}
 8011e24:	08017040 	.word	0x08017040
 8011e28:	0801740c 	.word	0x0801740c
 8011e2c:	080170cc 	.word	0x080170cc
 8011e30:	08017430 	.word	0x08017430
 8011e34:	08017454 	.word	0x08017454
 8011e38:	08017464 	.word	0x08017464
 8011e3c:	08017474 	.word	0x08017474

08011e40 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011e40:	b590      	push	{r4, r7, lr}
 8011e42:	b085      	sub	sp, #20
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d106      	bne.n	8011e5c <tcp_send_fin+0x1c>
 8011e4e:	4b21      	ldr	r3, [pc, #132]	; (8011ed4 <tcp_send_fin+0x94>)
 8011e50:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011e54:	4920      	ldr	r1, [pc, #128]	; (8011ed8 <tcp_send_fin+0x98>)
 8011e56:	4821      	ldr	r0, [pc, #132]	; (8011edc <tcp_send_fin+0x9c>)
 8011e58:	f001 feb4 	bl	8013bc4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d02e      	beq.n	8011ec2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e68:	60fb      	str	r3, [r7, #12]
 8011e6a:	e002      	b.n	8011e72 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d1f8      	bne.n	8011e6c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	68db      	ldr	r3, [r3, #12]
 8011e7e:	899b      	ldrh	r3, [r3, #12]
 8011e80:	b29b      	uxth	r3, r3
 8011e82:	4618      	mov	r0, r3
 8011e84:	f7f5 fef2 	bl	8007c6c <lwip_htons>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	b2db      	uxtb	r3, r3
 8011e8c:	f003 0307 	and.w	r3, r3, #7
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d116      	bne.n	8011ec2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	68db      	ldr	r3, [r3, #12]
 8011e98:	899b      	ldrh	r3, [r3, #12]
 8011e9a:	b29c      	uxth	r4, r3
 8011e9c:	2001      	movs	r0, #1
 8011e9e:	f7f5 fee5 	bl	8007c6c <lwip_htons>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	461a      	mov	r2, r3
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	68db      	ldr	r3, [r3, #12]
 8011eaa:	4322      	orrs	r2, r4
 8011eac:	b292      	uxth	r2, r2
 8011eae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	8b5b      	ldrh	r3, [r3, #26]
 8011eb4:	f043 0320 	orr.w	r3, r3, #32
 8011eb8:	b29a      	uxth	r2, r3
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	e004      	b.n	8011ecc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011ec2:	2101      	movs	r1, #1
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f000 f80b 	bl	8011ee0 <tcp_enqueue_flags>
 8011eca:	4603      	mov	r3, r0
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	3714      	adds	r7, #20
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd90      	pop	{r4, r7, pc}
 8011ed4:	08017040 	.word	0x08017040
 8011ed8:	08017480 	.word	0x08017480
 8011edc:	080170cc 	.word	0x080170cc

08011ee0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b08a      	sub	sp, #40	; 0x28
 8011ee4:	af02      	add	r7, sp, #8
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	460b      	mov	r3, r1
 8011eea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011eec:	2300      	movs	r3, #0
 8011eee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011ef4:	78fb      	ldrb	r3, [r7, #3]
 8011ef6:	f003 0303 	and.w	r3, r3, #3
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d106      	bne.n	8011f0c <tcp_enqueue_flags+0x2c>
 8011efe:	4b67      	ldr	r3, [pc, #412]	; (801209c <tcp_enqueue_flags+0x1bc>)
 8011f00:	f240 4211 	movw	r2, #1041	; 0x411
 8011f04:	4966      	ldr	r1, [pc, #408]	; (80120a0 <tcp_enqueue_flags+0x1c0>)
 8011f06:	4867      	ldr	r0, [pc, #412]	; (80120a4 <tcp_enqueue_flags+0x1c4>)
 8011f08:	f001 fe5c 	bl	8013bc4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d106      	bne.n	8011f20 <tcp_enqueue_flags+0x40>
 8011f12:	4b62      	ldr	r3, [pc, #392]	; (801209c <tcp_enqueue_flags+0x1bc>)
 8011f14:	f240 4213 	movw	r2, #1043	; 0x413
 8011f18:	4963      	ldr	r1, [pc, #396]	; (80120a8 <tcp_enqueue_flags+0x1c8>)
 8011f1a:	4862      	ldr	r0, [pc, #392]	; (80120a4 <tcp_enqueue_flags+0x1c4>)
 8011f1c:	f001 fe52 	bl	8013bc4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011f20:	78fb      	ldrb	r3, [r7, #3]
 8011f22:	f003 0302 	and.w	r3, r3, #2
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d001      	beq.n	8011f2e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011f2e:	7ffb      	ldrb	r3, [r7, #31]
 8011f30:	009b      	lsls	r3, r3, #2
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	f003 0304 	and.w	r3, r3, #4
 8011f38:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011f3a:	7dfb      	ldrb	r3, [r7, #23]
 8011f3c:	b29b      	uxth	r3, r3
 8011f3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f42:	4619      	mov	r1, r3
 8011f44:	2036      	movs	r0, #54	; 0x36
 8011f46:	f7fb f951 	bl	800d1ec <pbuf_alloc>
 8011f4a:	6138      	str	r0, [r7, #16]
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d109      	bne.n	8011f66 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	8b5b      	ldrh	r3, [r3, #26]
 8011f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f5a:	b29a      	uxth	r2, r3
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011f60:	f04f 33ff 	mov.w	r3, #4294967295
 8011f64:	e095      	b.n	8012092 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	895a      	ldrh	r2, [r3, #10]
 8011f6a:	7dfb      	ldrb	r3, [r7, #23]
 8011f6c:	b29b      	uxth	r3, r3
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d206      	bcs.n	8011f80 <tcp_enqueue_flags+0xa0>
 8011f72:	4b4a      	ldr	r3, [pc, #296]	; (801209c <tcp_enqueue_flags+0x1bc>)
 8011f74:	f240 4239 	movw	r2, #1081	; 0x439
 8011f78:	494c      	ldr	r1, [pc, #304]	; (80120ac <tcp_enqueue_flags+0x1cc>)
 8011f7a:	484a      	ldr	r0, [pc, #296]	; (80120a4 <tcp_enqueue_flags+0x1c4>)
 8011f7c:	f001 fe22 	bl	8013bc4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011f84:	78fa      	ldrb	r2, [r7, #3]
 8011f86:	7ffb      	ldrb	r3, [r7, #31]
 8011f88:	9300      	str	r3, [sp, #0]
 8011f8a:	460b      	mov	r3, r1
 8011f8c:	6939      	ldr	r1, [r7, #16]
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f7ff fd70 	bl	8011a74 <tcp_create_segment>
 8011f94:	60f8      	str	r0, [r7, #12]
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d109      	bne.n	8011fb0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	8b5b      	ldrh	r3, [r3, #26]
 8011fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fa4:	b29a      	uxth	r2, r3
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011faa:	f04f 33ff 	mov.w	r3, #4294967295
 8011fae:	e070      	b.n	8012092 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	68db      	ldr	r3, [r3, #12]
 8011fb4:	f003 0303 	and.w	r3, r3, #3
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d006      	beq.n	8011fca <tcp_enqueue_flags+0xea>
 8011fbc:	4b37      	ldr	r3, [pc, #220]	; (801209c <tcp_enqueue_flags+0x1bc>)
 8011fbe:	f240 4242 	movw	r2, #1090	; 0x442
 8011fc2:	493b      	ldr	r1, [pc, #236]	; (80120b0 <tcp_enqueue_flags+0x1d0>)
 8011fc4:	4837      	ldr	r0, [pc, #220]	; (80120a4 <tcp_enqueue_flags+0x1c4>)
 8011fc6:	f001 fdfd 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	891b      	ldrh	r3, [r3, #8]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d006      	beq.n	8011fe0 <tcp_enqueue_flags+0x100>
 8011fd2:	4b32      	ldr	r3, [pc, #200]	; (801209c <tcp_enqueue_flags+0x1bc>)
 8011fd4:	f240 4243 	movw	r2, #1091	; 0x443
 8011fd8:	4936      	ldr	r1, [pc, #216]	; (80120b4 <tcp_enqueue_flags+0x1d4>)
 8011fda:	4832      	ldr	r0, [pc, #200]	; (80120a4 <tcp_enqueue_flags+0x1c4>)
 8011fdc:	f001 fdf2 	bl	8013bc4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d103      	bne.n	8011ff0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	68fa      	ldr	r2, [r7, #12]
 8011fec:	66da      	str	r2, [r3, #108]	; 0x6c
 8011fee:	e00d      	b.n	801200c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ff4:	61bb      	str	r3, [r7, #24]
 8011ff6:	e002      	b.n	8011ffe <tcp_enqueue_flags+0x11e>
 8011ff8:	69bb      	ldr	r3, [r7, #24]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	61bb      	str	r3, [r7, #24]
 8011ffe:	69bb      	ldr	r3, [r7, #24]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d1f8      	bne.n	8011ff8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012006:	69bb      	ldr	r3, [r7, #24]
 8012008:	68fa      	ldr	r2, [r7, #12]
 801200a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2200      	movs	r2, #0
 8012010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012014:	78fb      	ldrb	r3, [r7, #3]
 8012016:	f003 0302 	and.w	r3, r3, #2
 801201a:	2b00      	cmp	r3, #0
 801201c:	d104      	bne.n	8012028 <tcp_enqueue_flags+0x148>
 801201e:	78fb      	ldrb	r3, [r7, #3]
 8012020:	f003 0301 	and.w	r3, r3, #1
 8012024:	2b00      	cmp	r3, #0
 8012026:	d004      	beq.n	8012032 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801202c:	1c5a      	adds	r2, r3, #1
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012032:	78fb      	ldrb	r3, [r7, #3]
 8012034:	f003 0301 	and.w	r3, r3, #1
 8012038:	2b00      	cmp	r3, #0
 801203a:	d006      	beq.n	801204a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	8b5b      	ldrh	r3, [r3, #26]
 8012040:	f043 0320 	orr.w	r3, r3, #32
 8012044:	b29a      	uxth	r2, r3
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	4618      	mov	r0, r3
 8012050:	f7fb fc38 	bl	800d8c4 <pbuf_clen>
 8012054:	4603      	mov	r3, r0
 8012056:	461a      	mov	r2, r3
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801205e:	4413      	add	r3, r2
 8012060:	b29a      	uxth	r2, r3
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801206e:	2b00      	cmp	r3, #0
 8012070:	d00e      	beq.n	8012090 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012076:	2b00      	cmp	r3, #0
 8012078:	d10a      	bne.n	8012090 <tcp_enqueue_flags+0x1b0>
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801207e:	2b00      	cmp	r3, #0
 8012080:	d106      	bne.n	8012090 <tcp_enqueue_flags+0x1b0>
 8012082:	4b06      	ldr	r3, [pc, #24]	; (801209c <tcp_enqueue_flags+0x1bc>)
 8012084:	f240 4265 	movw	r2, #1125	; 0x465
 8012088:	490b      	ldr	r1, [pc, #44]	; (80120b8 <tcp_enqueue_flags+0x1d8>)
 801208a:	4806      	ldr	r0, [pc, #24]	; (80120a4 <tcp_enqueue_flags+0x1c4>)
 801208c:	f001 fd9a 	bl	8013bc4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012090:	2300      	movs	r3, #0
}
 8012092:	4618      	mov	r0, r3
 8012094:	3720      	adds	r7, #32
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}
 801209a:	bf00      	nop
 801209c:	08017040 	.word	0x08017040
 80120a0:	0801749c 	.word	0x0801749c
 80120a4:	080170cc 	.word	0x080170cc
 80120a8:	080174f4 	.word	0x080174f4
 80120ac:	08017514 	.word	0x08017514
 80120b0:	08017550 	.word	0x08017550
 80120b4:	08017568 	.word	0x08017568
 80120b8:	08017594 	.word	0x08017594

080120bc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80120bc:	b5b0      	push	{r4, r5, r7, lr}
 80120be:	b08a      	sub	sp, #40	; 0x28
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d106      	bne.n	80120d8 <tcp_output+0x1c>
 80120ca:	4b8a      	ldr	r3, [pc, #552]	; (80122f4 <tcp_output+0x238>)
 80120cc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80120d0:	4989      	ldr	r1, [pc, #548]	; (80122f8 <tcp_output+0x23c>)
 80120d2:	488a      	ldr	r0, [pc, #552]	; (80122fc <tcp_output+0x240>)
 80120d4:	f001 fd76 	bl	8013bc4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	7d1b      	ldrb	r3, [r3, #20]
 80120dc:	2b01      	cmp	r3, #1
 80120de:	d106      	bne.n	80120ee <tcp_output+0x32>
 80120e0:	4b84      	ldr	r3, [pc, #528]	; (80122f4 <tcp_output+0x238>)
 80120e2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80120e6:	4986      	ldr	r1, [pc, #536]	; (8012300 <tcp_output+0x244>)
 80120e8:	4884      	ldr	r0, [pc, #528]	; (80122fc <tcp_output+0x240>)
 80120ea:	f001 fd6b 	bl	8013bc4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80120ee:	4b85      	ldr	r3, [pc, #532]	; (8012304 <tcp_output+0x248>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	687a      	ldr	r2, [r7, #4]
 80120f4:	429a      	cmp	r2, r3
 80120f6:	d101      	bne.n	80120fc <tcp_output+0x40>
    return ERR_OK;
 80120f8:	2300      	movs	r3, #0
 80120fa:	e1ce      	b.n	801249a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012108:	4293      	cmp	r3, r2
 801210a:	bf28      	it	cs
 801210c:	4613      	movcs	r3, r2
 801210e:	b29b      	uxth	r3, r3
 8012110:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012116:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801211a:	2b00      	cmp	r3, #0
 801211c:	d10b      	bne.n	8012136 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	8b5b      	ldrh	r3, [r3, #26]
 8012122:	f003 0302 	and.w	r3, r3, #2
 8012126:	2b00      	cmp	r3, #0
 8012128:	f000 81aa 	beq.w	8012480 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f000 fdcb 	bl	8012cc8 <tcp_send_empty_ack>
 8012132:	4603      	mov	r3, r0
 8012134:	e1b1      	b.n	801249a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012136:	6879      	ldr	r1, [r7, #4]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	3304      	adds	r3, #4
 801213c:	461a      	mov	r2, r3
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f7ff fc7c 	bl	8011a3c <tcp_route>
 8012144:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012146:	697b      	ldr	r3, [r7, #20]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d102      	bne.n	8012152 <tcp_output+0x96>
    return ERR_RTE;
 801214c:	f06f 0303 	mvn.w	r3, #3
 8012150:	e1a3      	b.n	801249a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d003      	beq.n	8012160 <tcp_output+0xa4>
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d111      	bne.n	8012184 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d002      	beq.n	801216c <tcp_output+0xb0>
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	3304      	adds	r3, #4
 801216a:	e000      	b.n	801216e <tcp_output+0xb2>
 801216c:	2300      	movs	r3, #0
 801216e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d102      	bne.n	801217c <tcp_output+0xc0>
      return ERR_RTE;
 8012176:	f06f 0303 	mvn.w	r3, #3
 801217a:	e18e      	b.n	801249a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	681a      	ldr	r2, [r3, #0]
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012186:	68db      	ldr	r3, [r3, #12]
 8012188:	685b      	ldr	r3, [r3, #4]
 801218a:	4618      	mov	r0, r3
 801218c:	f7f5 fd83 	bl	8007c96 <lwip_htonl>
 8012190:	4602      	mov	r2, r0
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012196:	1ad3      	subs	r3, r2, r3
 8012198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801219a:	8912      	ldrh	r2, [r2, #8]
 801219c:	4413      	add	r3, r2
 801219e:	69ba      	ldr	r2, [r7, #24]
 80121a0:	429a      	cmp	r2, r3
 80121a2:	d227      	bcs.n	80121f4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80121aa:	461a      	mov	r2, r3
 80121ac:	69bb      	ldr	r3, [r7, #24]
 80121ae:	4293      	cmp	r3, r2
 80121b0:	d114      	bne.n	80121dc <tcp_output+0x120>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d110      	bne.n	80121dc <tcp_output+0x120>
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d10b      	bne.n	80121dc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2200      	movs	r2, #0
 80121c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	2201      	movs	r2, #1
 80121d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2200      	movs	r2, #0
 80121d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	8b5b      	ldrh	r3, [r3, #26]
 80121e0:	f003 0302 	and.w	r3, r3, #2
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	f000 814d 	beq.w	8012484 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f000 fd6c 	bl	8012cc8 <tcp_send_empty_ack>
 80121f0:	4603      	mov	r3, r0
 80121f2:	e152      	b.n	801249a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2200      	movs	r2, #0
 80121f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012200:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012202:	6a3b      	ldr	r3, [r7, #32]
 8012204:	2b00      	cmp	r3, #0
 8012206:	f000 811c 	beq.w	8012442 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801220a:	e002      	b.n	8012212 <tcp_output+0x156>
 801220c:	6a3b      	ldr	r3, [r7, #32]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	623b      	str	r3, [r7, #32]
 8012212:	6a3b      	ldr	r3, [r7, #32]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d1f8      	bne.n	801220c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801221a:	e112      	b.n	8012442 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801221e:	68db      	ldr	r3, [r3, #12]
 8012220:	899b      	ldrh	r3, [r3, #12]
 8012222:	b29b      	uxth	r3, r3
 8012224:	4618      	mov	r0, r3
 8012226:	f7f5 fd21 	bl	8007c6c <lwip_htons>
 801222a:	4603      	mov	r3, r0
 801222c:	b2db      	uxtb	r3, r3
 801222e:	f003 0304 	and.w	r3, r3, #4
 8012232:	2b00      	cmp	r3, #0
 8012234:	d006      	beq.n	8012244 <tcp_output+0x188>
 8012236:	4b2f      	ldr	r3, [pc, #188]	; (80122f4 <tcp_output+0x238>)
 8012238:	f240 5236 	movw	r2, #1334	; 0x536
 801223c:	4932      	ldr	r1, [pc, #200]	; (8012308 <tcp_output+0x24c>)
 801223e:	482f      	ldr	r0, [pc, #188]	; (80122fc <tcp_output+0x240>)
 8012240:	f001 fcc0 	bl	8013bc4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012248:	2b00      	cmp	r3, #0
 801224a:	d01f      	beq.n	801228c <tcp_output+0x1d0>
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	8b5b      	ldrh	r3, [r3, #26]
 8012250:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012254:	2b00      	cmp	r3, #0
 8012256:	d119      	bne.n	801228c <tcp_output+0x1d0>
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801225c:	2b00      	cmp	r3, #0
 801225e:	d00b      	beq.n	8012278 <tcp_output+0x1bc>
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d110      	bne.n	801228c <tcp_output+0x1d0>
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801226e:	891a      	ldrh	r2, [r3, #8]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012274:	429a      	cmp	r2, r3
 8012276:	d209      	bcs.n	801228c <tcp_output+0x1d0>
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801227e:	2b00      	cmp	r3, #0
 8012280:	d004      	beq.n	801228c <tcp_output+0x1d0>
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012288:	2b08      	cmp	r3, #8
 801228a:	d901      	bls.n	8012290 <tcp_output+0x1d4>
 801228c:	2301      	movs	r3, #1
 801228e:	e000      	b.n	8012292 <tcp_output+0x1d6>
 8012290:	2300      	movs	r3, #0
 8012292:	2b00      	cmp	r3, #0
 8012294:	d106      	bne.n	80122a4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	8b5b      	ldrh	r3, [r3, #26]
 801229a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801229e:	2b00      	cmp	r3, #0
 80122a0:	f000 80e4 	beq.w	801246c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	7d1b      	ldrb	r3, [r3, #20]
 80122a8:	2b02      	cmp	r3, #2
 80122aa:	d00d      	beq.n	80122c8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80122ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ae:	68db      	ldr	r3, [r3, #12]
 80122b0:	899b      	ldrh	r3, [r3, #12]
 80122b2:	b29c      	uxth	r4, r3
 80122b4:	2010      	movs	r0, #16
 80122b6:	f7f5 fcd9 	bl	8007c6c <lwip_htons>
 80122ba:	4603      	mov	r3, r0
 80122bc:	461a      	mov	r2, r3
 80122be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c0:	68db      	ldr	r3, [r3, #12]
 80122c2:	4322      	orrs	r2, r4
 80122c4:	b292      	uxth	r2, r2
 80122c6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80122c8:	697a      	ldr	r2, [r7, #20]
 80122ca:	6879      	ldr	r1, [r7, #4]
 80122cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122ce:	f000 f909 	bl	80124e4 <tcp_output_segment>
 80122d2:	4603      	mov	r3, r0
 80122d4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80122d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d016      	beq.n	801230c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	8b5b      	ldrh	r3, [r3, #26]
 80122e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122e6:	b29a      	uxth	r2, r3
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	835a      	strh	r2, [r3, #26]
      return err;
 80122ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122f0:	e0d3      	b.n	801249a <tcp_output+0x3de>
 80122f2:	bf00      	nop
 80122f4:	08017040 	.word	0x08017040
 80122f8:	080175bc 	.word	0x080175bc
 80122fc:	080170cc 	.word	0x080170cc
 8012300:	080175d4 	.word	0x080175d4
 8012304:	240082ac 	.word	0x240082ac
 8012308:	080175fc 	.word	0x080175fc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230e:	681a      	ldr	r2, [r3, #0]
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	7d1b      	ldrb	r3, [r3, #20]
 8012318:	2b02      	cmp	r3, #2
 801231a:	d006      	beq.n	801232a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	8b5b      	ldrh	r3, [r3, #26]
 8012320:	f023 0303 	bic.w	r3, r3, #3
 8012324:	b29a      	uxth	r2, r3
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232c:	68db      	ldr	r3, [r3, #12]
 801232e:	685b      	ldr	r3, [r3, #4]
 8012330:	4618      	mov	r0, r3
 8012332:	f7f5 fcb0 	bl	8007c96 <lwip_htonl>
 8012336:	4604      	mov	r4, r0
 8012338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801233a:	891b      	ldrh	r3, [r3, #8]
 801233c:	461d      	mov	r5, r3
 801233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012340:	68db      	ldr	r3, [r3, #12]
 8012342:	899b      	ldrh	r3, [r3, #12]
 8012344:	b29b      	uxth	r3, r3
 8012346:	4618      	mov	r0, r3
 8012348:	f7f5 fc90 	bl	8007c6c <lwip_htons>
 801234c:	4603      	mov	r3, r0
 801234e:	b2db      	uxtb	r3, r3
 8012350:	f003 0303 	and.w	r3, r3, #3
 8012354:	2b00      	cmp	r3, #0
 8012356:	d001      	beq.n	801235c <tcp_output+0x2a0>
 8012358:	2301      	movs	r3, #1
 801235a:	e000      	b.n	801235e <tcp_output+0x2a2>
 801235c:	2300      	movs	r3, #0
 801235e:	442b      	add	r3, r5
 8012360:	4423      	add	r3, r4
 8012362:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	1ad3      	subs	r3, r2, r3
 801236c:	2b00      	cmp	r3, #0
 801236e:	da02      	bge.n	8012376 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	68ba      	ldr	r2, [r7, #8]
 8012374:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012378:	891b      	ldrh	r3, [r3, #8]
 801237a:	461c      	mov	r4, r3
 801237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	899b      	ldrh	r3, [r3, #12]
 8012382:	b29b      	uxth	r3, r3
 8012384:	4618      	mov	r0, r3
 8012386:	f7f5 fc71 	bl	8007c6c <lwip_htons>
 801238a:	4603      	mov	r3, r0
 801238c:	b2db      	uxtb	r3, r3
 801238e:	f003 0303 	and.w	r3, r3, #3
 8012392:	2b00      	cmp	r3, #0
 8012394:	d001      	beq.n	801239a <tcp_output+0x2de>
 8012396:	2301      	movs	r3, #1
 8012398:	e000      	b.n	801239c <tcp_output+0x2e0>
 801239a:	2300      	movs	r3, #0
 801239c:	4423      	add	r3, r4
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d049      	beq.n	8012436 <tcp_output+0x37a>
      seg->next = NULL;
 80123a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a4:	2200      	movs	r2, #0
 80123a6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d105      	bne.n	80123bc <tcp_output+0x300>
        pcb->unacked = seg;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123b4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80123b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123b8:	623b      	str	r3, [r7, #32]
 80123ba:	e03f      	b.n	801243c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80123bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123be:	68db      	ldr	r3, [r3, #12]
 80123c0:	685b      	ldr	r3, [r3, #4]
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7f5 fc67 	bl	8007c96 <lwip_htonl>
 80123c8:	4604      	mov	r4, r0
 80123ca:	6a3b      	ldr	r3, [r7, #32]
 80123cc:	68db      	ldr	r3, [r3, #12]
 80123ce:	685b      	ldr	r3, [r3, #4]
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7f5 fc60 	bl	8007c96 <lwip_htonl>
 80123d6:	4603      	mov	r3, r0
 80123d8:	1ae3      	subs	r3, r4, r3
 80123da:	2b00      	cmp	r3, #0
 80123dc:	da24      	bge.n	8012428 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	3370      	adds	r3, #112	; 0x70
 80123e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80123e4:	e002      	b.n	80123ec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80123e6:	69fb      	ldr	r3, [r7, #28]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80123ec:	69fb      	ldr	r3, [r7, #28]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d011      	beq.n	8012418 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80123f4:	69fb      	ldr	r3, [r7, #28]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	68db      	ldr	r3, [r3, #12]
 80123fa:	685b      	ldr	r3, [r3, #4]
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7f5 fc4a 	bl	8007c96 <lwip_htonl>
 8012402:	4604      	mov	r4, r0
 8012404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012406:	68db      	ldr	r3, [r3, #12]
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	4618      	mov	r0, r3
 801240c:	f7f5 fc43 	bl	8007c96 <lwip_htonl>
 8012410:	4603      	mov	r3, r0
 8012412:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012414:	2b00      	cmp	r3, #0
 8012416:	dbe6      	blt.n	80123e6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012418:	69fb      	ldr	r3, [r7, #28]
 801241a:	681a      	ldr	r2, [r3, #0]
 801241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012420:	69fb      	ldr	r3, [r7, #28]
 8012422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012424:	601a      	str	r2, [r3, #0]
 8012426:	e009      	b.n	801243c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012428:	6a3b      	ldr	r3, [r7, #32]
 801242a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801242c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801242e:	6a3b      	ldr	r3, [r7, #32]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	623b      	str	r3, [r7, #32]
 8012434:	e002      	b.n	801243c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012438:	f7fc fc3f 	bl	800ecba <tcp_seg_free>
    }
    seg = pcb->unsent;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012440:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012444:	2b00      	cmp	r3, #0
 8012446:	d012      	beq.n	801246e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244a:	68db      	ldr	r3, [r3, #12]
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	4618      	mov	r0, r3
 8012450:	f7f5 fc21 	bl	8007c96 <lwip_htonl>
 8012454:	4602      	mov	r2, r0
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801245a:	1ad3      	subs	r3, r2, r3
 801245c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801245e:	8912      	ldrh	r2, [r2, #8]
 8012460:	4413      	add	r3, r2
  while (seg != NULL &&
 8012462:	69ba      	ldr	r2, [r7, #24]
 8012464:	429a      	cmp	r2, r3
 8012466:	f4bf aed9 	bcs.w	801221c <tcp_output+0x160>
 801246a:	e000      	b.n	801246e <tcp_output+0x3b2>
      break;
 801246c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012472:	2b00      	cmp	r3, #0
 8012474:	d108      	bne.n	8012488 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	2200      	movs	r2, #0
 801247a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801247e:	e004      	b.n	801248a <tcp_output+0x3ce>
    goto output_done;
 8012480:	bf00      	nop
 8012482:	e002      	b.n	801248a <tcp_output+0x3ce>
    goto output_done;
 8012484:	bf00      	nop
 8012486:	e000      	b.n	801248a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012488:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	8b5b      	ldrh	r3, [r3, #26]
 801248e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012492:	b29a      	uxth	r2, r3
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012498:	2300      	movs	r3, #0
}
 801249a:	4618      	mov	r0, r3
 801249c:	3728      	adds	r7, #40	; 0x28
 801249e:	46bd      	mov	sp, r7
 80124a0:	bdb0      	pop	{r4, r5, r7, pc}
 80124a2:	bf00      	nop

080124a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b082      	sub	sp, #8
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d106      	bne.n	80124c0 <tcp_output_segment_busy+0x1c>
 80124b2:	4b09      	ldr	r3, [pc, #36]	; (80124d8 <tcp_output_segment_busy+0x34>)
 80124b4:	f240 529a 	movw	r2, #1434	; 0x59a
 80124b8:	4908      	ldr	r1, [pc, #32]	; (80124dc <tcp_output_segment_busy+0x38>)
 80124ba:	4809      	ldr	r0, [pc, #36]	; (80124e0 <tcp_output_segment_busy+0x3c>)
 80124bc:	f001 fb82 	bl	8013bc4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	685b      	ldr	r3, [r3, #4]
 80124c4:	7b9b      	ldrb	r3, [r3, #14]
 80124c6:	2b01      	cmp	r3, #1
 80124c8:	d001      	beq.n	80124ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80124ca:	2301      	movs	r3, #1
 80124cc:	e000      	b.n	80124d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80124ce:	2300      	movs	r3, #0
}
 80124d0:	4618      	mov	r0, r3
 80124d2:	3708      	adds	r7, #8
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}
 80124d8:	08017040 	.word	0x08017040
 80124dc:	08017614 	.word	0x08017614
 80124e0:	080170cc 	.word	0x080170cc

080124e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80124e4:	b5b0      	push	{r4, r5, r7, lr}
 80124e6:	b08c      	sub	sp, #48	; 0x30
 80124e8:	af04      	add	r7, sp, #16
 80124ea:	60f8      	str	r0, [r7, #12]
 80124ec:	60b9      	str	r1, [r7, #8]
 80124ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d106      	bne.n	8012504 <tcp_output_segment+0x20>
 80124f6:	4b63      	ldr	r3, [pc, #396]	; (8012684 <tcp_output_segment+0x1a0>)
 80124f8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80124fc:	4962      	ldr	r1, [pc, #392]	; (8012688 <tcp_output_segment+0x1a4>)
 80124fe:	4863      	ldr	r0, [pc, #396]	; (801268c <tcp_output_segment+0x1a8>)
 8012500:	f001 fb60 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d106      	bne.n	8012518 <tcp_output_segment+0x34>
 801250a:	4b5e      	ldr	r3, [pc, #376]	; (8012684 <tcp_output_segment+0x1a0>)
 801250c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012510:	495f      	ldr	r1, [pc, #380]	; (8012690 <tcp_output_segment+0x1ac>)
 8012512:	485e      	ldr	r0, [pc, #376]	; (801268c <tcp_output_segment+0x1a8>)
 8012514:	f001 fb56 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d106      	bne.n	801252c <tcp_output_segment+0x48>
 801251e:	4b59      	ldr	r3, [pc, #356]	; (8012684 <tcp_output_segment+0x1a0>)
 8012520:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012524:	495b      	ldr	r1, [pc, #364]	; (8012694 <tcp_output_segment+0x1b0>)
 8012526:	4859      	ldr	r0, [pc, #356]	; (801268c <tcp_output_segment+0x1a8>)
 8012528:	f001 fb4c 	bl	8013bc4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801252c:	68f8      	ldr	r0, [r7, #12]
 801252e:	f7ff ffb9 	bl	80124a4 <tcp_output_segment_busy>
 8012532:	4603      	mov	r3, r0
 8012534:	2b00      	cmp	r3, #0
 8012536:	d001      	beq.n	801253c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012538:	2300      	movs	r3, #0
 801253a:	e09f      	b.n	801267c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	68dc      	ldr	r4, [r3, #12]
 8012544:	4610      	mov	r0, r2
 8012546:	f7f5 fba6 	bl	8007c96 <lwip_htonl>
 801254a:	4603      	mov	r3, r0
 801254c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	68dc      	ldr	r4, [r3, #12]
 8012556:	4610      	mov	r0, r2
 8012558:	f7f5 fb88 	bl	8007c6c <lwip_htons>
 801255c:	4603      	mov	r3, r0
 801255e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012564:	68ba      	ldr	r2, [r7, #8]
 8012566:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012568:	441a      	add	r2, r3
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	68db      	ldr	r3, [r3, #12]
 8012572:	3314      	adds	r3, #20
 8012574:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	7a9b      	ldrb	r3, [r3, #10]
 801257a:	f003 0301 	and.w	r3, r3, #1
 801257e:	2b00      	cmp	r3, #0
 8012580:	d015      	beq.n	80125ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	3304      	adds	r3, #4
 8012586:	461a      	mov	r2, r3
 8012588:	6879      	ldr	r1, [r7, #4]
 801258a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801258e:	f7fc fe8b 	bl	800f2a8 <tcp_eff_send_mss_netif>
 8012592:	4603      	mov	r3, r0
 8012594:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012596:	8b7b      	ldrh	r3, [r7, #26]
 8012598:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801259c:	4618      	mov	r0, r3
 801259e:	f7f5 fb7a 	bl	8007c96 <lwip_htonl>
 80125a2:	4602      	mov	r2, r0
 80125a4:	69fb      	ldr	r3, [r7, #28]
 80125a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80125a8:	69fb      	ldr	r3, [r7, #28]
 80125aa:	3304      	adds	r3, #4
 80125ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80125ae:	68bb      	ldr	r3, [r7, #8]
 80125b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	da02      	bge.n	80125be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	2200      	movs	r2, #0
 80125bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d10c      	bne.n	80125e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80125c6:	4b34      	ldr	r3, [pc, #208]	; (8012698 <tcp_output_segment+0x1b4>)
 80125c8:	681a      	ldr	r2, [r3, #0]
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	68db      	ldr	r3, [r3, #12]
 80125d2:	685b      	ldr	r3, [r3, #4]
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7f5 fb5e 	bl	8007c96 <lwip_htonl>
 80125da:	4602      	mov	r2, r0
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	68da      	ldr	r2, [r3, #12]
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	685b      	ldr	r3, [r3, #4]
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	1ad3      	subs	r3, r2, r3
 80125ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	685b      	ldr	r3, [r3, #4]
 80125f2:	8959      	ldrh	r1, [r3, #10]
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	8b3a      	ldrh	r2, [r7, #24]
 80125fa:	1a8a      	subs	r2, r1, r2
 80125fc:	b292      	uxth	r2, r2
 80125fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	685b      	ldr	r3, [r3, #4]
 8012604:	8919      	ldrh	r1, [r3, #8]
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	8b3a      	ldrh	r2, [r7, #24]
 801260c:	1a8a      	subs	r2, r1, r2
 801260e:	b292      	uxth	r2, r2
 8012610:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	68fa      	ldr	r2, [r7, #12]
 8012618:	68d2      	ldr	r2, [r2, #12]
 801261a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	68db      	ldr	r3, [r3, #12]
 8012620:	2200      	movs	r2, #0
 8012622:	741a      	strb	r2, [r3, #16]
 8012624:	2200      	movs	r2, #0
 8012626:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	68db      	ldr	r3, [r3, #12]
 801262c:	f103 0214 	add.w	r2, r3, #20
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	7a9b      	ldrb	r3, [r3, #10]
 8012634:	009b      	lsls	r3, r3, #2
 8012636:	f003 0304 	and.w	r3, r3, #4
 801263a:	4413      	add	r3, r2
 801263c:	69fa      	ldr	r2, [r7, #28]
 801263e:	429a      	cmp	r2, r3
 8012640:	d006      	beq.n	8012650 <tcp_output_segment+0x16c>
 8012642:	4b10      	ldr	r3, [pc, #64]	; (8012684 <tcp_output_segment+0x1a0>)
 8012644:	f240 621c 	movw	r2, #1564	; 0x61c
 8012648:	4914      	ldr	r1, [pc, #80]	; (801269c <tcp_output_segment+0x1b8>)
 801264a:	4810      	ldr	r0, [pc, #64]	; (801268c <tcp_output_segment+0x1a8>)
 801264c:	f001 faba 	bl	8013bc4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	6858      	ldr	r0, [r3, #4]
 8012654:	68b9      	ldr	r1, [r7, #8]
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	1d1c      	adds	r4, r3, #4
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	7add      	ldrb	r5, [r3, #11]
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	7a9b      	ldrb	r3, [r3, #10]
 8012662:	687a      	ldr	r2, [r7, #4]
 8012664:	9202      	str	r2, [sp, #8]
 8012666:	2206      	movs	r2, #6
 8012668:	9201      	str	r2, [sp, #4]
 801266a:	9300      	str	r3, [sp, #0]
 801266c:	462b      	mov	r3, r5
 801266e:	4622      	mov	r2, r4
 8012670:	f7f8 fe46 	bl	800b300 <ip4_output_if>
 8012674:	4603      	mov	r3, r0
 8012676:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012678:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801267c:	4618      	mov	r0, r3
 801267e:	3720      	adds	r7, #32
 8012680:	46bd      	mov	sp, r7
 8012682:	bdb0      	pop	{r4, r5, r7, pc}
 8012684:	08017040 	.word	0x08017040
 8012688:	0801763c 	.word	0x0801763c
 801268c:	080170cc 	.word	0x080170cc
 8012690:	0801765c 	.word	0x0801765c
 8012694:	0801767c 	.word	0x0801767c
 8012698:	24008260 	.word	0x24008260
 801269c:	080176a0 	.word	0x080176a0

080126a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80126a0:	b5b0      	push	{r4, r5, r7, lr}
 80126a2:	b084      	sub	sp, #16
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d106      	bne.n	80126bc <tcp_rexmit_rto_prepare+0x1c>
 80126ae:	4b31      	ldr	r3, [pc, #196]	; (8012774 <tcp_rexmit_rto_prepare+0xd4>)
 80126b0:	f240 6263 	movw	r2, #1635	; 0x663
 80126b4:	4930      	ldr	r1, [pc, #192]	; (8012778 <tcp_rexmit_rto_prepare+0xd8>)
 80126b6:	4831      	ldr	r0, [pc, #196]	; (801277c <tcp_rexmit_rto_prepare+0xdc>)
 80126b8:	f001 fa84 	bl	8013bc4 <iprintf>

  if (pcb->unacked == NULL) {
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d102      	bne.n	80126ca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80126c4:	f06f 0305 	mvn.w	r3, #5
 80126c8:	e050      	b.n	801276c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126ce:	60fb      	str	r3, [r7, #12]
 80126d0:	e00b      	b.n	80126ea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80126d2:	68f8      	ldr	r0, [r7, #12]
 80126d4:	f7ff fee6 	bl	80124a4 <tcp_output_segment_busy>
 80126d8:	4603      	mov	r3, r0
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d002      	beq.n	80126e4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80126de:	f06f 0305 	mvn.w	r3, #5
 80126e2:	e043      	b.n	801276c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	60fb      	str	r3, [r7, #12]
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d1ef      	bne.n	80126d2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80126f2:	68f8      	ldr	r0, [r7, #12]
 80126f4:	f7ff fed6 	bl	80124a4 <tcp_output_segment_busy>
 80126f8:	4603      	mov	r3, r0
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d002      	beq.n	8012704 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80126fe:	f06f 0305 	mvn.w	r3, #5
 8012702:	e033      	b.n	801276c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2200      	movs	r2, #0
 8012718:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	8b5b      	ldrh	r3, [r3, #26]
 801271e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012722:	b29a      	uxth	r2, r3
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	68db      	ldr	r3, [r3, #12]
 801272c:	685b      	ldr	r3, [r3, #4]
 801272e:	4618      	mov	r0, r3
 8012730:	f7f5 fab1 	bl	8007c96 <lwip_htonl>
 8012734:	4604      	mov	r4, r0
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	891b      	ldrh	r3, [r3, #8]
 801273a:	461d      	mov	r5, r3
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	68db      	ldr	r3, [r3, #12]
 8012740:	899b      	ldrh	r3, [r3, #12]
 8012742:	b29b      	uxth	r3, r3
 8012744:	4618      	mov	r0, r3
 8012746:	f7f5 fa91 	bl	8007c6c <lwip_htons>
 801274a:	4603      	mov	r3, r0
 801274c:	b2db      	uxtb	r3, r3
 801274e:	f003 0303 	and.w	r3, r3, #3
 8012752:	2b00      	cmp	r3, #0
 8012754:	d001      	beq.n	801275a <tcp_rexmit_rto_prepare+0xba>
 8012756:	2301      	movs	r3, #1
 8012758:	e000      	b.n	801275c <tcp_rexmit_rto_prepare+0xbc>
 801275a:	2300      	movs	r3, #0
 801275c:	442b      	add	r3, r5
 801275e:	18e2      	adds	r2, r4, r3
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2200      	movs	r2, #0
 8012768:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801276a:	2300      	movs	r3, #0
}
 801276c:	4618      	mov	r0, r3
 801276e:	3710      	adds	r7, #16
 8012770:	46bd      	mov	sp, r7
 8012772:	bdb0      	pop	{r4, r5, r7, pc}
 8012774:	08017040 	.word	0x08017040
 8012778:	080176b4 	.word	0x080176b4
 801277c:	080170cc 	.word	0x080170cc

08012780 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b082      	sub	sp, #8
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d106      	bne.n	801279c <tcp_rexmit_rto_commit+0x1c>
 801278e:	4b0d      	ldr	r3, [pc, #52]	; (80127c4 <tcp_rexmit_rto_commit+0x44>)
 8012790:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012794:	490c      	ldr	r1, [pc, #48]	; (80127c8 <tcp_rexmit_rto_commit+0x48>)
 8012796:	480d      	ldr	r0, [pc, #52]	; (80127cc <tcp_rexmit_rto_commit+0x4c>)
 8012798:	f001 fa14 	bl	8013bc4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127a2:	2bff      	cmp	r3, #255	; 0xff
 80127a4:	d007      	beq.n	80127b6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127ac:	3301      	adds	r3, #1
 80127ae:	b2da      	uxtb	r2, r3
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f7ff fc80 	bl	80120bc <tcp_output>
}
 80127bc:	bf00      	nop
 80127be:	3708      	adds	r7, #8
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}
 80127c4:	08017040 	.word	0x08017040
 80127c8:	080176d8 	.word	0x080176d8
 80127cc:	080170cc 	.word	0x080170cc

080127d0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d106      	bne.n	80127ec <tcp_rexmit_rto+0x1c>
 80127de:	4b0a      	ldr	r3, [pc, #40]	; (8012808 <tcp_rexmit_rto+0x38>)
 80127e0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80127e4:	4909      	ldr	r1, [pc, #36]	; (801280c <tcp_rexmit_rto+0x3c>)
 80127e6:	480a      	ldr	r0, [pc, #40]	; (8012810 <tcp_rexmit_rto+0x40>)
 80127e8:	f001 f9ec 	bl	8013bc4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f7ff ff57 	bl	80126a0 <tcp_rexmit_rto_prepare>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d102      	bne.n	80127fe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f7ff ffc1 	bl	8012780 <tcp_rexmit_rto_commit>
  }
}
 80127fe:	bf00      	nop
 8012800:	3708      	adds	r7, #8
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}
 8012806:	bf00      	nop
 8012808:	08017040 	.word	0x08017040
 801280c:	080176fc 	.word	0x080176fc
 8012810:	080170cc 	.word	0x080170cc

08012814 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012814:	b590      	push	{r4, r7, lr}
 8012816:	b085      	sub	sp, #20
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d106      	bne.n	8012830 <tcp_rexmit+0x1c>
 8012822:	4b2f      	ldr	r3, [pc, #188]	; (80128e0 <tcp_rexmit+0xcc>)
 8012824:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012828:	492e      	ldr	r1, [pc, #184]	; (80128e4 <tcp_rexmit+0xd0>)
 801282a:	482f      	ldr	r0, [pc, #188]	; (80128e8 <tcp_rexmit+0xd4>)
 801282c:	f001 f9ca 	bl	8013bc4 <iprintf>

  if (pcb->unacked == NULL) {
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012834:	2b00      	cmp	r3, #0
 8012836:	d102      	bne.n	801283e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012838:	f06f 0305 	mvn.w	r3, #5
 801283c:	e04c      	b.n	80128d8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012842:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012844:	68b8      	ldr	r0, [r7, #8]
 8012846:	f7ff fe2d 	bl	80124a4 <tcp_output_segment_busy>
 801284a:	4603      	mov	r3, r0
 801284c:	2b00      	cmp	r3, #0
 801284e:	d002      	beq.n	8012856 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012850:	f06f 0305 	mvn.w	r3, #5
 8012854:	e040      	b.n	80128d8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012856:	68bb      	ldr	r3, [r7, #8]
 8012858:	681a      	ldr	r2, [r3, #0]
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	336c      	adds	r3, #108	; 0x6c
 8012862:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012864:	e002      	b.n	801286c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d011      	beq.n	8012898 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	68db      	ldr	r3, [r3, #12]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	4618      	mov	r0, r3
 801287e:	f7f5 fa0a 	bl	8007c96 <lwip_htonl>
 8012882:	4604      	mov	r4, r0
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	68db      	ldr	r3, [r3, #12]
 8012888:	685b      	ldr	r3, [r3, #4]
 801288a:	4618      	mov	r0, r3
 801288c:	f7f5 fa03 	bl	8007c96 <lwip_htonl>
 8012890:	4603      	mov	r3, r0
 8012892:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012894:	2b00      	cmp	r3, #0
 8012896:	dbe6      	blt.n	8012866 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	681a      	ldr	r2, [r3, #0]
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	68ba      	ldr	r2, [r7, #8]
 80128a4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d103      	bne.n	80128b6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2200      	movs	r2, #0
 80128b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128bc:	2bff      	cmp	r3, #255	; 0xff
 80128be:	d007      	beq.n	80128d0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128c6:	3301      	adds	r3, #1
 80128c8:	b2da      	uxtb	r2, r3
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2200      	movs	r2, #0
 80128d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80128d6:	2300      	movs	r3, #0
}
 80128d8:	4618      	mov	r0, r3
 80128da:	3714      	adds	r7, #20
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd90      	pop	{r4, r7, pc}
 80128e0:	08017040 	.word	0x08017040
 80128e4:	08017718 	.word	0x08017718
 80128e8:	080170cc 	.word	0x080170cc

080128ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b082      	sub	sp, #8
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d106      	bne.n	8012908 <tcp_rexmit_fast+0x1c>
 80128fa:	4b2a      	ldr	r3, [pc, #168]	; (80129a4 <tcp_rexmit_fast+0xb8>)
 80128fc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012900:	4929      	ldr	r1, [pc, #164]	; (80129a8 <tcp_rexmit_fast+0xbc>)
 8012902:	482a      	ldr	r0, [pc, #168]	; (80129ac <tcp_rexmit_fast+0xc0>)
 8012904:	f001 f95e 	bl	8013bc4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801290c:	2b00      	cmp	r3, #0
 801290e:	d045      	beq.n	801299c <tcp_rexmit_fast+0xb0>
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	8b5b      	ldrh	r3, [r3, #26]
 8012914:	f003 0304 	and.w	r3, r3, #4
 8012918:	2b00      	cmp	r3, #0
 801291a:	d13f      	bne.n	801299c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f7ff ff79 	bl	8012814 <tcp_rexmit>
 8012922:	4603      	mov	r3, r0
 8012924:	2b00      	cmp	r3, #0
 8012926:	d139      	bne.n	801299c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012934:	4293      	cmp	r3, r2
 8012936:	bf28      	it	cs
 8012938:	4613      	movcs	r3, r2
 801293a:	b29b      	uxth	r3, r3
 801293c:	2b00      	cmp	r3, #0
 801293e:	da00      	bge.n	8012942 <tcp_rexmit_fast+0x56>
 8012940:	3301      	adds	r3, #1
 8012942:	105b      	asrs	r3, r3, #1
 8012944:	b29a      	uxth	r2, r3
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012952:	461a      	mov	r2, r3
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012958:	005b      	lsls	r3, r3, #1
 801295a:	429a      	cmp	r2, r3
 801295c:	d206      	bcs.n	801296c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012962:	005b      	lsls	r3, r3, #1
 8012964:	b29a      	uxth	r2, r3
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012976:	4619      	mov	r1, r3
 8012978:	0049      	lsls	r1, r1, #1
 801297a:	440b      	add	r3, r1
 801297c:	b29b      	uxth	r3, r3
 801297e:	4413      	add	r3, r2
 8012980:	b29a      	uxth	r2, r3
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	8b5b      	ldrh	r3, [r3, #26]
 801298c:	f043 0304 	orr.w	r3, r3, #4
 8012990:	b29a      	uxth	r2, r3
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2200      	movs	r2, #0
 801299a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801299c:	bf00      	nop
 801299e:	3708      	adds	r7, #8
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}
 80129a4:	08017040 	.word	0x08017040
 80129a8:	08017730 	.word	0x08017730
 80129ac:	080170cc 	.word	0x080170cc

080129b0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b086      	sub	sp, #24
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	60f8      	str	r0, [r7, #12]
 80129b8:	607b      	str	r3, [r7, #4]
 80129ba:	460b      	mov	r3, r1
 80129bc:	817b      	strh	r3, [r7, #10]
 80129be:	4613      	mov	r3, r2
 80129c0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80129c2:	897a      	ldrh	r2, [r7, #10]
 80129c4:	893b      	ldrh	r3, [r7, #8]
 80129c6:	4413      	add	r3, r2
 80129c8:	b29b      	uxth	r3, r3
 80129ca:	3314      	adds	r3, #20
 80129cc:	b29b      	uxth	r3, r3
 80129ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80129d2:	4619      	mov	r1, r3
 80129d4:	2022      	movs	r0, #34	; 0x22
 80129d6:	f7fa fc09 	bl	800d1ec <pbuf_alloc>
 80129da:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80129dc:	697b      	ldr	r3, [r7, #20]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d04d      	beq.n	8012a7e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80129e2:	897b      	ldrh	r3, [r7, #10]
 80129e4:	3313      	adds	r3, #19
 80129e6:	697a      	ldr	r2, [r7, #20]
 80129e8:	8952      	ldrh	r2, [r2, #10]
 80129ea:	4293      	cmp	r3, r2
 80129ec:	db06      	blt.n	80129fc <tcp_output_alloc_header_common+0x4c>
 80129ee:	4b26      	ldr	r3, [pc, #152]	; (8012a88 <tcp_output_alloc_header_common+0xd8>)
 80129f0:	f240 7223 	movw	r2, #1827	; 0x723
 80129f4:	4925      	ldr	r1, [pc, #148]	; (8012a8c <tcp_output_alloc_header_common+0xdc>)
 80129f6:	4826      	ldr	r0, [pc, #152]	; (8012a90 <tcp_output_alloc_header_common+0xe0>)
 80129f8:	f001 f8e4 	bl	8013bc4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	685b      	ldr	r3, [r3, #4]
 8012a00:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012a02:	8c3b      	ldrh	r3, [r7, #32]
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7f5 f931 	bl	8007c6c <lwip_htons>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	461a      	mov	r2, r3
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7f5 f929 	bl	8007c6c <lwip_htons>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	461a      	mov	r2, r3
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	687a      	ldr	r2, [r7, #4]
 8012a26:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012a28:	68f8      	ldr	r0, [r7, #12]
 8012a2a:	f7f5 f934 	bl	8007c96 <lwip_htonl>
 8012a2e:	4602      	mov	r2, r0
 8012a30:	693b      	ldr	r3, [r7, #16]
 8012a32:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012a34:	897b      	ldrh	r3, [r7, #10]
 8012a36:	089b      	lsrs	r3, r3, #2
 8012a38:	b29b      	uxth	r3, r3
 8012a3a:	3305      	adds	r3, #5
 8012a3c:	b29b      	uxth	r3, r3
 8012a3e:	031b      	lsls	r3, r3, #12
 8012a40:	b29a      	uxth	r2, r3
 8012a42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012a46:	b29b      	uxth	r3, r3
 8012a48:	4313      	orrs	r3, r2
 8012a4a:	b29b      	uxth	r3, r3
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7f5 f90d 	bl	8007c6c <lwip_htons>
 8012a52:	4603      	mov	r3, r0
 8012a54:	461a      	mov	r2, r3
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012a5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7f5 f905 	bl	8007c6c <lwip_htons>
 8012a62:	4603      	mov	r3, r0
 8012a64:	461a      	mov	r2, r3
 8012a66:	693b      	ldr	r3, [r7, #16]
 8012a68:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012a6a:	693b      	ldr	r3, [r7, #16]
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	741a      	strb	r2, [r3, #16]
 8012a70:	2200      	movs	r2, #0
 8012a72:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012a74:	693b      	ldr	r3, [r7, #16]
 8012a76:	2200      	movs	r2, #0
 8012a78:	749a      	strb	r2, [r3, #18]
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012a7e:	697b      	ldr	r3, [r7, #20]
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	3718      	adds	r7, #24
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}
 8012a88:	08017040 	.word	0x08017040
 8012a8c:	08017750 	.word	0x08017750
 8012a90:	080170cc 	.word	0x080170cc

08012a94 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012a94:	b5b0      	push	{r4, r5, r7, lr}
 8012a96:	b08a      	sub	sp, #40	; 0x28
 8012a98:	af04      	add	r7, sp, #16
 8012a9a:	60f8      	str	r0, [r7, #12]
 8012a9c:	607b      	str	r3, [r7, #4]
 8012a9e:	460b      	mov	r3, r1
 8012aa0:	817b      	strh	r3, [r7, #10]
 8012aa2:	4613      	mov	r3, r2
 8012aa4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d106      	bne.n	8012aba <tcp_output_alloc_header+0x26>
 8012aac:	4b15      	ldr	r3, [pc, #84]	; (8012b04 <tcp_output_alloc_header+0x70>)
 8012aae:	f240 7242 	movw	r2, #1858	; 0x742
 8012ab2:	4915      	ldr	r1, [pc, #84]	; (8012b08 <tcp_output_alloc_header+0x74>)
 8012ab4:	4815      	ldr	r0, [pc, #84]	; (8012b0c <tcp_output_alloc_header+0x78>)
 8012ab6:	f001 f885 	bl	8013bc4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	8adb      	ldrh	r3, [r3, #22]
 8012ac2:	68fa      	ldr	r2, [r7, #12]
 8012ac4:	8b12      	ldrh	r2, [r2, #24]
 8012ac6:	68f9      	ldr	r1, [r7, #12]
 8012ac8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012aca:	893d      	ldrh	r5, [r7, #8]
 8012acc:	897c      	ldrh	r4, [r7, #10]
 8012ace:	9103      	str	r1, [sp, #12]
 8012ad0:	2110      	movs	r1, #16
 8012ad2:	9102      	str	r1, [sp, #8]
 8012ad4:	9201      	str	r2, [sp, #4]
 8012ad6:	9300      	str	r3, [sp, #0]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	462a      	mov	r2, r5
 8012adc:	4621      	mov	r1, r4
 8012ade:	f7ff ff67 	bl	80129b0 <tcp_output_alloc_header_common>
 8012ae2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012ae4:	697b      	ldr	r3, [r7, #20]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d006      	beq.n	8012af8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aee:	68fa      	ldr	r2, [r7, #12]
 8012af0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012af2:	441a      	add	r2, r3
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012af8:	697b      	ldr	r3, [r7, #20]
}
 8012afa:	4618      	mov	r0, r3
 8012afc:	3718      	adds	r7, #24
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bdb0      	pop	{r4, r5, r7, pc}
 8012b02:	bf00      	nop
 8012b04:	08017040 	.word	0x08017040
 8012b08:	08017780 	.word	0x08017780
 8012b0c:	080170cc 	.word	0x080170cc

08012b10 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b088      	sub	sp, #32
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	60f8      	str	r0, [r7, #12]
 8012b18:	60b9      	str	r1, [r7, #8]
 8012b1a:	4611      	mov	r1, r2
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	460b      	mov	r3, r1
 8012b20:	71fb      	strb	r3, [r7, #7]
 8012b22:	4613      	mov	r3, r2
 8012b24:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012b26:	2300      	movs	r3, #0
 8012b28:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d106      	bne.n	8012b3e <tcp_output_fill_options+0x2e>
 8012b30:	4b13      	ldr	r3, [pc, #76]	; (8012b80 <tcp_output_fill_options+0x70>)
 8012b32:	f240 7256 	movw	r2, #1878	; 0x756
 8012b36:	4913      	ldr	r1, [pc, #76]	; (8012b84 <tcp_output_fill_options+0x74>)
 8012b38:	4813      	ldr	r0, [pc, #76]	; (8012b88 <tcp_output_fill_options+0x78>)
 8012b3a:	f001 f843 	bl	8013bc4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012b44:	69bb      	ldr	r3, [r7, #24]
 8012b46:	3314      	adds	r3, #20
 8012b48:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012b4a:	69bb      	ldr	r3, [r7, #24]
 8012b4c:	f103 0214 	add.w	r2, r3, #20
 8012b50:	8bfb      	ldrh	r3, [r7, #30]
 8012b52:	009b      	lsls	r3, r3, #2
 8012b54:	4619      	mov	r1, r3
 8012b56:	79fb      	ldrb	r3, [r7, #7]
 8012b58:	009b      	lsls	r3, r3, #2
 8012b5a:	f003 0304 	and.w	r3, r3, #4
 8012b5e:	440b      	add	r3, r1
 8012b60:	4413      	add	r3, r2
 8012b62:	697a      	ldr	r2, [r7, #20]
 8012b64:	429a      	cmp	r2, r3
 8012b66:	d006      	beq.n	8012b76 <tcp_output_fill_options+0x66>
 8012b68:	4b05      	ldr	r3, [pc, #20]	; (8012b80 <tcp_output_fill_options+0x70>)
 8012b6a:	f240 7275 	movw	r2, #1909	; 0x775
 8012b6e:	4907      	ldr	r1, [pc, #28]	; (8012b8c <tcp_output_fill_options+0x7c>)
 8012b70:	4805      	ldr	r0, [pc, #20]	; (8012b88 <tcp_output_fill_options+0x78>)
 8012b72:	f001 f827 	bl	8013bc4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012b76:	bf00      	nop
 8012b78:	3720      	adds	r7, #32
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}
 8012b7e:	bf00      	nop
 8012b80:	08017040 	.word	0x08017040
 8012b84:	080177a8 	.word	0x080177a8
 8012b88:	080170cc 	.word	0x080170cc
 8012b8c:	080176a0 	.word	0x080176a0

08012b90 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b08a      	sub	sp, #40	; 0x28
 8012b94:	af04      	add	r7, sp, #16
 8012b96:	60f8      	str	r0, [r7, #12]
 8012b98:	60b9      	str	r1, [r7, #8]
 8012b9a:	607a      	str	r2, [r7, #4]
 8012b9c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d106      	bne.n	8012bb2 <tcp_output_control_segment+0x22>
 8012ba4:	4b1c      	ldr	r3, [pc, #112]	; (8012c18 <tcp_output_control_segment+0x88>)
 8012ba6:	f240 7287 	movw	r2, #1927	; 0x787
 8012baa:	491c      	ldr	r1, [pc, #112]	; (8012c1c <tcp_output_control_segment+0x8c>)
 8012bac:	481c      	ldr	r0, [pc, #112]	; (8012c20 <tcp_output_control_segment+0x90>)
 8012bae:	f001 f809 	bl	8013bc4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012bb2:	683a      	ldr	r2, [r7, #0]
 8012bb4:	6879      	ldr	r1, [r7, #4]
 8012bb6:	68f8      	ldr	r0, [r7, #12]
 8012bb8:	f7fe ff40 	bl	8011a3c <tcp_route>
 8012bbc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012bbe:	693b      	ldr	r3, [r7, #16]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d102      	bne.n	8012bca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012bc4:	23fc      	movs	r3, #252	; 0xfc
 8012bc6:	75fb      	strb	r3, [r7, #23]
 8012bc8:	e01c      	b.n	8012c04 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d006      	beq.n	8012bde <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	7adb      	ldrb	r3, [r3, #11]
 8012bd4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	7a9b      	ldrb	r3, [r3, #10]
 8012bda:	757b      	strb	r3, [r7, #21]
 8012bdc:	e003      	b.n	8012be6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012bde:	23ff      	movs	r3, #255	; 0xff
 8012be0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012be2:	2300      	movs	r3, #0
 8012be4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012be6:	7dba      	ldrb	r2, [r7, #22]
 8012be8:	693b      	ldr	r3, [r7, #16]
 8012bea:	9302      	str	r3, [sp, #8]
 8012bec:	2306      	movs	r3, #6
 8012bee:	9301      	str	r3, [sp, #4]
 8012bf0:	7d7b      	ldrb	r3, [r7, #21]
 8012bf2:	9300      	str	r3, [sp, #0]
 8012bf4:	4613      	mov	r3, r2
 8012bf6:	683a      	ldr	r2, [r7, #0]
 8012bf8:	6879      	ldr	r1, [r7, #4]
 8012bfa:	68b8      	ldr	r0, [r7, #8]
 8012bfc:	f7f8 fb80 	bl	800b300 <ip4_output_if>
 8012c00:	4603      	mov	r3, r0
 8012c02:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012c04:	68b8      	ldr	r0, [r7, #8]
 8012c06:	f7fa fdd5 	bl	800d7b4 <pbuf_free>
  return err;
 8012c0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c0e:	4618      	mov	r0, r3
 8012c10:	3718      	adds	r7, #24
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd80      	pop	{r7, pc}
 8012c16:	bf00      	nop
 8012c18:	08017040 	.word	0x08017040
 8012c1c:	080177d0 	.word	0x080177d0
 8012c20:	080170cc 	.word	0x080170cc

08012c24 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012c24:	b590      	push	{r4, r7, lr}
 8012c26:	b08b      	sub	sp, #44	; 0x2c
 8012c28:	af04      	add	r7, sp, #16
 8012c2a:	60f8      	str	r0, [r7, #12]
 8012c2c:	60b9      	str	r1, [r7, #8]
 8012c2e:	607a      	str	r2, [r7, #4]
 8012c30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d106      	bne.n	8012c46 <tcp_rst+0x22>
 8012c38:	4b1f      	ldr	r3, [pc, #124]	; (8012cb8 <tcp_rst+0x94>)
 8012c3a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012c3e:	491f      	ldr	r1, [pc, #124]	; (8012cbc <tcp_rst+0x98>)
 8012c40:	481f      	ldr	r0, [pc, #124]	; (8012cc0 <tcp_rst+0x9c>)
 8012c42:	f000 ffbf 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d106      	bne.n	8012c5a <tcp_rst+0x36>
 8012c4c:	4b1a      	ldr	r3, [pc, #104]	; (8012cb8 <tcp_rst+0x94>)
 8012c4e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012c52:	491c      	ldr	r1, [pc, #112]	; (8012cc4 <tcp_rst+0xa0>)
 8012c54:	481a      	ldr	r0, [pc, #104]	; (8012cc0 <tcp_rst+0x9c>)
 8012c56:	f000 ffb5 	bl	8013bc4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012c5e:	f246 0308 	movw	r3, #24584	; 0x6008
 8012c62:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012c64:	7dfb      	ldrb	r3, [r7, #23]
 8012c66:	b29c      	uxth	r4, r3
 8012c68:	68b8      	ldr	r0, [r7, #8]
 8012c6a:	f7f5 f814 	bl	8007c96 <lwip_htonl>
 8012c6e:	4602      	mov	r2, r0
 8012c70:	8abb      	ldrh	r3, [r7, #20]
 8012c72:	9303      	str	r3, [sp, #12]
 8012c74:	2314      	movs	r3, #20
 8012c76:	9302      	str	r3, [sp, #8]
 8012c78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012c7a:	9301      	str	r3, [sp, #4]
 8012c7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012c7e:	9300      	str	r3, [sp, #0]
 8012c80:	4613      	mov	r3, r2
 8012c82:	2200      	movs	r2, #0
 8012c84:	4621      	mov	r1, r4
 8012c86:	6878      	ldr	r0, [r7, #4]
 8012c88:	f7ff fe92 	bl	80129b0 <tcp_output_alloc_header_common>
 8012c8c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d00c      	beq.n	8012cae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012c94:	7dfb      	ldrb	r3, [r7, #23]
 8012c96:	2200      	movs	r2, #0
 8012c98:	6939      	ldr	r1, [r7, #16]
 8012c9a:	68f8      	ldr	r0, [r7, #12]
 8012c9c:	f7ff ff38 	bl	8012b10 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ca2:	683a      	ldr	r2, [r7, #0]
 8012ca4:	6939      	ldr	r1, [r7, #16]
 8012ca6:	68f8      	ldr	r0, [r7, #12]
 8012ca8:	f7ff ff72 	bl	8012b90 <tcp_output_control_segment>
 8012cac:	e000      	b.n	8012cb0 <tcp_rst+0x8c>
    return;
 8012cae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012cb0:	371c      	adds	r7, #28
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd90      	pop	{r4, r7, pc}
 8012cb6:	bf00      	nop
 8012cb8:	08017040 	.word	0x08017040
 8012cbc:	080177fc 	.word	0x080177fc
 8012cc0:	080170cc 	.word	0x080170cc
 8012cc4:	08017818 	.word	0x08017818

08012cc8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012cc8:	b590      	push	{r4, r7, lr}
 8012cca:	b087      	sub	sp, #28
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d106      	bne.n	8012cec <tcp_send_empty_ack+0x24>
 8012cde:	4b28      	ldr	r3, [pc, #160]	; (8012d80 <tcp_send_empty_ack+0xb8>)
 8012ce0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012ce4:	4927      	ldr	r1, [pc, #156]	; (8012d84 <tcp_send_empty_ack+0xbc>)
 8012ce6:	4828      	ldr	r0, [pc, #160]	; (8012d88 <tcp_send_empty_ack+0xc0>)
 8012ce8:	f000 ff6c 	bl	8013bc4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012cec:	7dfb      	ldrb	r3, [r7, #23]
 8012cee:	009b      	lsls	r3, r3, #2
 8012cf0:	b2db      	uxtb	r3, r3
 8012cf2:	f003 0304 	and.w	r3, r3, #4
 8012cf6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012cf8:	7d7b      	ldrb	r3, [r7, #21]
 8012cfa:	b29c      	uxth	r4, r3
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7f4 ffc8 	bl	8007c96 <lwip_htonl>
 8012d06:	4603      	mov	r3, r0
 8012d08:	2200      	movs	r2, #0
 8012d0a:	4621      	mov	r1, r4
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f7ff fec1 	bl	8012a94 <tcp_output_alloc_header>
 8012d12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d109      	bne.n	8012d2e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	8b5b      	ldrh	r3, [r3, #26]
 8012d1e:	f043 0303 	orr.w	r3, r3, #3
 8012d22:	b29a      	uxth	r2, r3
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012d28:	f06f 0301 	mvn.w	r3, #1
 8012d2c:	e023      	b.n	8012d76 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012d2e:	7dbb      	ldrb	r3, [r7, #22]
 8012d30:	7dfa      	ldrb	r2, [r7, #23]
 8012d32:	6939      	ldr	r1, [r7, #16]
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f7ff feeb 	bl	8012b10 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d3a:	687a      	ldr	r2, [r7, #4]
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	3304      	adds	r3, #4
 8012d40:	6939      	ldr	r1, [r7, #16]
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	f7ff ff24 	bl	8012b90 <tcp_output_control_segment>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d007      	beq.n	8012d64 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	8b5b      	ldrh	r3, [r3, #26]
 8012d58:	f043 0303 	orr.w	r3, r3, #3
 8012d5c:	b29a      	uxth	r2, r3
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	835a      	strh	r2, [r3, #26]
 8012d62:	e006      	b.n	8012d72 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	8b5b      	ldrh	r3, [r3, #26]
 8012d68:	f023 0303 	bic.w	r3, r3, #3
 8012d6c:	b29a      	uxth	r2, r3
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	371c      	adds	r7, #28
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd90      	pop	{r4, r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	08017040 	.word	0x08017040
 8012d84:	08017834 	.word	0x08017834
 8012d88:	080170cc 	.word	0x080170cc

08012d8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012d8c:	b590      	push	{r4, r7, lr}
 8012d8e:	b087      	sub	sp, #28
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012d94:	2300      	movs	r3, #0
 8012d96:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d106      	bne.n	8012dac <tcp_keepalive+0x20>
 8012d9e:	4b18      	ldr	r3, [pc, #96]	; (8012e00 <tcp_keepalive+0x74>)
 8012da0:	f640 0224 	movw	r2, #2084	; 0x824
 8012da4:	4917      	ldr	r1, [pc, #92]	; (8012e04 <tcp_keepalive+0x78>)
 8012da6:	4818      	ldr	r0, [pc, #96]	; (8012e08 <tcp_keepalive+0x7c>)
 8012da8:	f000 ff0c 	bl	8013bc4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012dac:	7dfb      	ldrb	r3, [r7, #23]
 8012dae:	b29c      	uxth	r4, r3
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012db4:	3b01      	subs	r3, #1
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7f4 ff6d 	bl	8007c96 <lwip_htonl>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	4621      	mov	r1, r4
 8012dc2:	6878      	ldr	r0, [r7, #4]
 8012dc4:	f7ff fe66 	bl	8012a94 <tcp_output_alloc_header>
 8012dc8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d102      	bne.n	8012dd6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8012dd4:	e010      	b.n	8012df8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012dd6:	7dfb      	ldrb	r3, [r7, #23]
 8012dd8:	2200      	movs	r2, #0
 8012dda:	6939      	ldr	r1, [r7, #16]
 8012ddc:	6878      	ldr	r0, [r7, #4]
 8012dde:	f7ff fe97 	bl	8012b10 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012de2:	687a      	ldr	r2, [r7, #4]
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	3304      	adds	r3, #4
 8012de8:	6939      	ldr	r1, [r7, #16]
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f7ff fed0 	bl	8012b90 <tcp_output_control_segment>
 8012df0:	4603      	mov	r3, r0
 8012df2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	371c      	adds	r7, #28
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd90      	pop	{r4, r7, pc}
 8012e00:	08017040 	.word	0x08017040
 8012e04:	08017854 	.word	0x08017854
 8012e08:	080170cc 	.word	0x080170cc

08012e0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012e0c:	b590      	push	{r4, r7, lr}
 8012e0e:	b08b      	sub	sp, #44	; 0x2c
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012e14:	2300      	movs	r3, #0
 8012e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d106      	bne.n	8012e2e <tcp_zero_window_probe+0x22>
 8012e20:	4b4c      	ldr	r3, [pc, #304]	; (8012f54 <tcp_zero_window_probe+0x148>)
 8012e22:	f640 024f 	movw	r2, #2127	; 0x84f
 8012e26:	494c      	ldr	r1, [pc, #304]	; (8012f58 <tcp_zero_window_probe+0x14c>)
 8012e28:	484c      	ldr	r0, [pc, #304]	; (8012f5c <tcp_zero_window_probe+0x150>)
 8012e2a:	f000 fecb 	bl	8013bc4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012e34:	6a3b      	ldr	r3, [r7, #32]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d101      	bne.n	8012e3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	e086      	b.n	8012f4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012e44:	2bff      	cmp	r3, #255	; 0xff
 8012e46:	d007      	beq.n	8012e58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012e4e:	3301      	adds	r3, #1
 8012e50:	b2da      	uxtb	r2, r3
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012e58:	6a3b      	ldr	r3, [r7, #32]
 8012e5a:	68db      	ldr	r3, [r3, #12]
 8012e5c:	899b      	ldrh	r3, [r3, #12]
 8012e5e:	b29b      	uxth	r3, r3
 8012e60:	4618      	mov	r0, r3
 8012e62:	f7f4 ff03 	bl	8007c6c <lwip_htons>
 8012e66:	4603      	mov	r3, r0
 8012e68:	b2db      	uxtb	r3, r3
 8012e6a:	f003 0301 	and.w	r3, r3, #1
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d005      	beq.n	8012e7e <tcp_zero_window_probe+0x72>
 8012e72:	6a3b      	ldr	r3, [r7, #32]
 8012e74:	891b      	ldrh	r3, [r3, #8]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d101      	bne.n	8012e7e <tcp_zero_window_probe+0x72>
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	e000      	b.n	8012e80 <tcp_zero_window_probe+0x74>
 8012e7e:	2300      	movs	r3, #0
 8012e80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012e82:	7ffb      	ldrb	r3, [r7, #31]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	bf0c      	ite	eq
 8012e88:	2301      	moveq	r3, #1
 8012e8a:	2300      	movne	r3, #0
 8012e8c:	b2db      	uxtb	r3, r3
 8012e8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e94:	b299      	uxth	r1, r3
 8012e96:	6a3b      	ldr	r3, [r7, #32]
 8012e98:	68db      	ldr	r3, [r3, #12]
 8012e9a:	685b      	ldr	r3, [r3, #4]
 8012e9c:	8bba      	ldrh	r2, [r7, #28]
 8012e9e:	6878      	ldr	r0, [r7, #4]
 8012ea0:	f7ff fdf8 	bl	8012a94 <tcp_output_alloc_header>
 8012ea4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012ea6:	69bb      	ldr	r3, [r7, #24]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d102      	bne.n	8012eb2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012eac:	f04f 33ff 	mov.w	r3, #4294967295
 8012eb0:	e04c      	b.n	8012f4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012eb2:	69bb      	ldr	r3, [r7, #24]
 8012eb4:	685b      	ldr	r3, [r3, #4]
 8012eb6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012eb8:	7ffb      	ldrb	r3, [r7, #31]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d011      	beq.n	8012ee2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	899b      	ldrh	r3, [r3, #12]
 8012ec2:	b29b      	uxth	r3, r3
 8012ec4:	b21b      	sxth	r3, r3
 8012ec6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012eca:	b21c      	sxth	r4, r3
 8012ecc:	2011      	movs	r0, #17
 8012ece:	f7f4 fecd 	bl	8007c6c <lwip_htons>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	b21b      	sxth	r3, r3
 8012ed6:	4323      	orrs	r3, r4
 8012ed8:	b21b      	sxth	r3, r3
 8012eda:	b29a      	uxth	r2, r3
 8012edc:	697b      	ldr	r3, [r7, #20]
 8012ede:	819a      	strh	r2, [r3, #12]
 8012ee0:	e010      	b.n	8012f04 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012ee2:	69bb      	ldr	r3, [r7, #24]
 8012ee4:	685b      	ldr	r3, [r3, #4]
 8012ee6:	3314      	adds	r3, #20
 8012ee8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012eea:	6a3b      	ldr	r3, [r7, #32]
 8012eec:	6858      	ldr	r0, [r3, #4]
 8012eee:	6a3b      	ldr	r3, [r7, #32]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	891a      	ldrh	r2, [r3, #8]
 8012ef4:	6a3b      	ldr	r3, [r7, #32]
 8012ef6:	891b      	ldrh	r3, [r3, #8]
 8012ef8:	1ad3      	subs	r3, r2, r3
 8012efa:	b29b      	uxth	r3, r3
 8012efc:	2201      	movs	r2, #1
 8012efe:	6939      	ldr	r1, [r7, #16]
 8012f00:	f7fa fe52 	bl	800dba8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012f04:	6a3b      	ldr	r3, [r7, #32]
 8012f06:	68db      	ldr	r3, [r3, #12]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7f4 fec3 	bl	8007c96 <lwip_htonl>
 8012f10:	4603      	mov	r3, r0
 8012f12:	3301      	adds	r3, #1
 8012f14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	1ad3      	subs	r3, r2, r3
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	da02      	bge.n	8012f28 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	68fa      	ldr	r2, [r7, #12]
 8012f26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	69b9      	ldr	r1, [r7, #24]
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f7ff fded 	bl	8012b10 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012f36:	687a      	ldr	r2, [r7, #4]
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	3304      	adds	r3, #4
 8012f3c:	69b9      	ldr	r1, [r7, #24]
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f7ff fe26 	bl	8012b90 <tcp_output_control_segment>
 8012f44:	4603      	mov	r3, r0
 8012f46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012f48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	372c      	adds	r7, #44	; 0x2c
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd90      	pop	{r4, r7, pc}
 8012f54:	08017040 	.word	0x08017040
 8012f58:	08017870 	.word	0x08017870
 8012f5c:	080170cc 	.word	0x080170cc

08012f60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b082      	sub	sp, #8
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012f68:	f7fa ff0c 	bl	800dd84 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012f6c:	4b0a      	ldr	r3, [pc, #40]	; (8012f98 <tcpip_tcp_timer+0x38>)
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d103      	bne.n	8012f7c <tcpip_tcp_timer+0x1c>
 8012f74:	4b09      	ldr	r3, [pc, #36]	; (8012f9c <tcpip_tcp_timer+0x3c>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d005      	beq.n	8012f88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	4908      	ldr	r1, [pc, #32]	; (8012fa0 <tcpip_tcp_timer+0x40>)
 8012f80:	20fa      	movs	r0, #250	; 0xfa
 8012f82:	f000 f8f3 	bl	801316c <sys_timeout>
 8012f86:	e003      	b.n	8012f90 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012f88:	4b06      	ldr	r3, [pc, #24]	; (8012fa4 <tcpip_tcp_timer+0x44>)
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	601a      	str	r2, [r3, #0]
  }
}
 8012f8e:	bf00      	nop
 8012f90:	bf00      	nop
 8012f92:	3708      	adds	r7, #8
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}
 8012f98:	2400826c 	.word	0x2400826c
 8012f9c:	24008270 	.word	0x24008270
 8012fa0:	08012f61 	.word	0x08012f61
 8012fa4:	240082b8 	.word	0x240082b8

08012fa8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012fac:	4b0a      	ldr	r3, [pc, #40]	; (8012fd8 <tcp_timer_needed+0x30>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d10f      	bne.n	8012fd4 <tcp_timer_needed+0x2c>
 8012fb4:	4b09      	ldr	r3, [pc, #36]	; (8012fdc <tcp_timer_needed+0x34>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d103      	bne.n	8012fc4 <tcp_timer_needed+0x1c>
 8012fbc:	4b08      	ldr	r3, [pc, #32]	; (8012fe0 <tcp_timer_needed+0x38>)
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d007      	beq.n	8012fd4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012fc4:	4b04      	ldr	r3, [pc, #16]	; (8012fd8 <tcp_timer_needed+0x30>)
 8012fc6:	2201      	movs	r2, #1
 8012fc8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012fca:	2200      	movs	r2, #0
 8012fcc:	4905      	ldr	r1, [pc, #20]	; (8012fe4 <tcp_timer_needed+0x3c>)
 8012fce:	20fa      	movs	r0, #250	; 0xfa
 8012fd0:	f000 f8cc 	bl	801316c <sys_timeout>
  }
}
 8012fd4:	bf00      	nop
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	240082b8 	.word	0x240082b8
 8012fdc:	2400826c 	.word	0x2400826c
 8012fe0:	24008270 	.word	0x24008270
 8012fe4:	08012f61 	.word	0x08012f61

08012fe8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b086      	sub	sp, #24
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	60f8      	str	r0, [r7, #12]
 8012ff0:	60b9      	str	r1, [r7, #8]
 8012ff2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012ff4:	2006      	movs	r0, #6
 8012ff6:	f7f9 fd0b 	bl	800ca10 <memp_malloc>
 8012ffa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012ffc:	693b      	ldr	r3, [r7, #16]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d109      	bne.n	8013016 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013002:	693b      	ldr	r3, [r7, #16]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d151      	bne.n	80130ac <sys_timeout_abs+0xc4>
 8013008:	4b2a      	ldr	r3, [pc, #168]	; (80130b4 <sys_timeout_abs+0xcc>)
 801300a:	22be      	movs	r2, #190	; 0xbe
 801300c:	492a      	ldr	r1, [pc, #168]	; (80130b8 <sys_timeout_abs+0xd0>)
 801300e:	482b      	ldr	r0, [pc, #172]	; (80130bc <sys_timeout_abs+0xd4>)
 8013010:	f000 fdd8 	bl	8013bc4 <iprintf>
    return;
 8013014:	e04a      	b.n	80130ac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013016:	693b      	ldr	r3, [r7, #16]
 8013018:	2200      	movs	r2, #0
 801301a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801301c:	693b      	ldr	r3, [r7, #16]
 801301e:	68ba      	ldr	r2, [r7, #8]
 8013020:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013022:	693b      	ldr	r3, [r7, #16]
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013028:	693b      	ldr	r3, [r7, #16]
 801302a:	68fa      	ldr	r2, [r7, #12]
 801302c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801302e:	4b24      	ldr	r3, [pc, #144]	; (80130c0 <sys_timeout_abs+0xd8>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d103      	bne.n	801303e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013036:	4a22      	ldr	r2, [pc, #136]	; (80130c0 <sys_timeout_abs+0xd8>)
 8013038:	693b      	ldr	r3, [r7, #16]
 801303a:	6013      	str	r3, [r2, #0]
    return;
 801303c:	e037      	b.n	80130ae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	685a      	ldr	r2, [r3, #4]
 8013042:	4b1f      	ldr	r3, [pc, #124]	; (80130c0 <sys_timeout_abs+0xd8>)
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	685b      	ldr	r3, [r3, #4]
 8013048:	1ad3      	subs	r3, r2, r3
 801304a:	0fdb      	lsrs	r3, r3, #31
 801304c:	f003 0301 	and.w	r3, r3, #1
 8013050:	b2db      	uxtb	r3, r3
 8013052:	2b00      	cmp	r3, #0
 8013054:	d007      	beq.n	8013066 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013056:	4b1a      	ldr	r3, [pc, #104]	; (80130c0 <sys_timeout_abs+0xd8>)
 8013058:	681a      	ldr	r2, [r3, #0]
 801305a:	693b      	ldr	r3, [r7, #16]
 801305c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801305e:	4a18      	ldr	r2, [pc, #96]	; (80130c0 <sys_timeout_abs+0xd8>)
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	6013      	str	r3, [r2, #0]
 8013064:	e023      	b.n	80130ae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013066:	4b16      	ldr	r3, [pc, #88]	; (80130c0 <sys_timeout_abs+0xd8>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	617b      	str	r3, [r7, #20]
 801306c:	e01a      	b.n	80130a4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d00b      	beq.n	801308e <sys_timeout_abs+0xa6>
 8013076:	693b      	ldr	r3, [r7, #16]
 8013078:	685a      	ldr	r2, [r3, #4]
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	685b      	ldr	r3, [r3, #4]
 8013080:	1ad3      	subs	r3, r2, r3
 8013082:	0fdb      	lsrs	r3, r3, #31
 8013084:	f003 0301 	and.w	r3, r3, #1
 8013088:	b2db      	uxtb	r3, r3
 801308a:	2b00      	cmp	r3, #0
 801308c:	d007      	beq.n	801309e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	681a      	ldr	r2, [r3, #0]
 8013092:	693b      	ldr	r3, [r7, #16]
 8013094:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	693a      	ldr	r2, [r7, #16]
 801309a:	601a      	str	r2, [r3, #0]
        break;
 801309c:	e007      	b.n	80130ae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	617b      	str	r3, [r7, #20]
 80130a4:	697b      	ldr	r3, [r7, #20]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d1e1      	bne.n	801306e <sys_timeout_abs+0x86>
 80130aa:	e000      	b.n	80130ae <sys_timeout_abs+0xc6>
    return;
 80130ac:	bf00      	nop
      }
    }
  }
}
 80130ae:	3718      	adds	r7, #24
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}
 80130b4:	08017894 	.word	0x08017894
 80130b8:	08017904 	.word	0x08017904
 80130bc:	08017944 	.word	0x08017944
 80130c0:	240082b0 	.word	0x240082b0

080130c4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b086      	sub	sp, #24
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80130d0:	697b      	ldr	r3, [r7, #20]
 80130d2:	685b      	ldr	r3, [r3, #4]
 80130d4:	4798      	blx	r3

  now = sys_now();
 80130d6:	f7f4 fb61 	bl	800779c <sys_now>
 80130da:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	681a      	ldr	r2, [r3, #0]
 80130e0:	4b0f      	ldr	r3, [pc, #60]	; (8013120 <lwip_cyclic_timer+0x5c>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	4413      	add	r3, r2
 80130e6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80130e8:	68fa      	ldr	r2, [r7, #12]
 80130ea:	693b      	ldr	r3, [r7, #16]
 80130ec:	1ad3      	subs	r3, r2, r3
 80130ee:	0fdb      	lsrs	r3, r3, #31
 80130f0:	f003 0301 	and.w	r3, r3, #1
 80130f4:	b2db      	uxtb	r3, r3
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d009      	beq.n	801310e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80130fa:	697b      	ldr	r3, [r7, #20]
 80130fc:	681a      	ldr	r2, [r3, #0]
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	4413      	add	r3, r2
 8013102:	687a      	ldr	r2, [r7, #4]
 8013104:	4907      	ldr	r1, [pc, #28]	; (8013124 <lwip_cyclic_timer+0x60>)
 8013106:	4618      	mov	r0, r3
 8013108:	f7ff ff6e 	bl	8012fe8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801310c:	e004      	b.n	8013118 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801310e:	687a      	ldr	r2, [r7, #4]
 8013110:	4904      	ldr	r1, [pc, #16]	; (8013124 <lwip_cyclic_timer+0x60>)
 8013112:	68f8      	ldr	r0, [r7, #12]
 8013114:	f7ff ff68 	bl	8012fe8 <sys_timeout_abs>
}
 8013118:	bf00      	nop
 801311a:	3718      	adds	r7, #24
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}
 8013120:	240082b4 	.word	0x240082b4
 8013124:	080130c5 	.word	0x080130c5

08013128 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801312e:	2301      	movs	r3, #1
 8013130:	607b      	str	r3, [r7, #4]
 8013132:	e00e      	b.n	8013152 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013134:	4a0b      	ldr	r2, [pc, #44]	; (8013164 <sys_timeouts_init+0x3c>)
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	00db      	lsls	r3, r3, #3
 8013140:	4a08      	ldr	r2, [pc, #32]	; (8013164 <sys_timeouts_init+0x3c>)
 8013142:	4413      	add	r3, r2
 8013144:	461a      	mov	r2, r3
 8013146:	4908      	ldr	r1, [pc, #32]	; (8013168 <sys_timeouts_init+0x40>)
 8013148:	f000 f810 	bl	801316c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	3301      	adds	r3, #1
 8013150:	607b      	str	r3, [r7, #4]
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	2b04      	cmp	r3, #4
 8013156:	d9ed      	bls.n	8013134 <sys_timeouts_init+0xc>
  }
}
 8013158:	bf00      	nop
 801315a:	bf00      	nop
 801315c:	3708      	adds	r7, #8
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}
 8013162:	bf00      	nop
 8013164:	08017e68 	.word	0x08017e68
 8013168:	080130c5 	.word	0x080130c5

0801316c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b086      	sub	sp, #24
 8013170:	af00      	add	r7, sp, #0
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801317e:	d306      	bcc.n	801318e <sys_timeout+0x22>
 8013180:	4b0a      	ldr	r3, [pc, #40]	; (80131ac <sys_timeout+0x40>)
 8013182:	f240 1229 	movw	r2, #297	; 0x129
 8013186:	490a      	ldr	r1, [pc, #40]	; (80131b0 <sys_timeout+0x44>)
 8013188:	480a      	ldr	r0, [pc, #40]	; (80131b4 <sys_timeout+0x48>)
 801318a:	f000 fd1b 	bl	8013bc4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801318e:	f7f4 fb05 	bl	800779c <sys_now>
 8013192:	4602      	mov	r2, r0
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	4413      	add	r3, r2
 8013198:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801319a:	687a      	ldr	r2, [r7, #4]
 801319c:	68b9      	ldr	r1, [r7, #8]
 801319e:	6978      	ldr	r0, [r7, #20]
 80131a0:	f7ff ff22 	bl	8012fe8 <sys_timeout_abs>
#endif
}
 80131a4:	bf00      	nop
 80131a6:	3718      	adds	r7, #24
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}
 80131ac:	08017894 	.word	0x08017894
 80131b0:	0801796c 	.word	0x0801796c
 80131b4:	08017944 	.word	0x08017944

080131b8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80131bc:	f000 fd1a 	bl	8013bf4 <rand>
 80131c0:	4603      	mov	r3, r0
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80131c8:	b29b      	uxth	r3, r3
 80131ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80131ce:	b29a      	uxth	r2, r3
 80131d0:	4b01      	ldr	r3, [pc, #4]	; (80131d8 <udp_init+0x20>)
 80131d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80131d4:	bf00      	nop
 80131d6:	bd80      	pop	{r7, pc}
 80131d8:	24000030 	.word	0x24000030

080131dc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80131dc:	b480      	push	{r7}
 80131de:	b083      	sub	sp, #12
 80131e0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80131e2:	2300      	movs	r3, #0
 80131e4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80131e6:	4b17      	ldr	r3, [pc, #92]	; (8013244 <udp_new_port+0x68>)
 80131e8:	881b      	ldrh	r3, [r3, #0]
 80131ea:	1c5a      	adds	r2, r3, #1
 80131ec:	b291      	uxth	r1, r2
 80131ee:	4a15      	ldr	r2, [pc, #84]	; (8013244 <udp_new_port+0x68>)
 80131f0:	8011      	strh	r1, [r2, #0]
 80131f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131f6:	4293      	cmp	r3, r2
 80131f8:	d103      	bne.n	8013202 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80131fa:	4b12      	ldr	r3, [pc, #72]	; (8013244 <udp_new_port+0x68>)
 80131fc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013200:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013202:	4b11      	ldr	r3, [pc, #68]	; (8013248 <udp_new_port+0x6c>)
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	603b      	str	r3, [r7, #0]
 8013208:	e011      	b.n	801322e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801320a:	683b      	ldr	r3, [r7, #0]
 801320c:	8a5a      	ldrh	r2, [r3, #18]
 801320e:	4b0d      	ldr	r3, [pc, #52]	; (8013244 <udp_new_port+0x68>)
 8013210:	881b      	ldrh	r3, [r3, #0]
 8013212:	429a      	cmp	r2, r3
 8013214:	d108      	bne.n	8013228 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013216:	88fb      	ldrh	r3, [r7, #6]
 8013218:	3301      	adds	r3, #1
 801321a:	80fb      	strh	r3, [r7, #6]
 801321c:	88fb      	ldrh	r3, [r7, #6]
 801321e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013222:	d3e0      	bcc.n	80131e6 <udp_new_port+0xa>
        return 0;
 8013224:	2300      	movs	r3, #0
 8013226:	e007      	b.n	8013238 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013228:	683b      	ldr	r3, [r7, #0]
 801322a:	68db      	ldr	r3, [r3, #12]
 801322c:	603b      	str	r3, [r7, #0]
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d1ea      	bne.n	801320a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013234:	4b03      	ldr	r3, [pc, #12]	; (8013244 <udp_new_port+0x68>)
 8013236:	881b      	ldrh	r3, [r3, #0]
}
 8013238:	4618      	mov	r0, r3
 801323a:	370c      	adds	r7, #12
 801323c:	46bd      	mov	sp, r7
 801323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013242:	4770      	bx	lr
 8013244:	24000030 	.word	0x24000030
 8013248:	240082bc 	.word	0x240082bc

0801324c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b084      	sub	sp, #16
 8013250:	af00      	add	r7, sp, #0
 8013252:	60f8      	str	r0, [r7, #12]
 8013254:	60b9      	str	r1, [r7, #8]
 8013256:	4613      	mov	r3, r2
 8013258:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d105      	bne.n	801326c <udp_input_local_match+0x20>
 8013260:	4b27      	ldr	r3, [pc, #156]	; (8013300 <udp_input_local_match+0xb4>)
 8013262:	2287      	movs	r2, #135	; 0x87
 8013264:	4927      	ldr	r1, [pc, #156]	; (8013304 <udp_input_local_match+0xb8>)
 8013266:	4828      	ldr	r0, [pc, #160]	; (8013308 <udp_input_local_match+0xbc>)
 8013268:	f000 fcac 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d105      	bne.n	801327e <udp_input_local_match+0x32>
 8013272:	4b23      	ldr	r3, [pc, #140]	; (8013300 <udp_input_local_match+0xb4>)
 8013274:	2288      	movs	r2, #136	; 0x88
 8013276:	4925      	ldr	r1, [pc, #148]	; (801330c <udp_input_local_match+0xc0>)
 8013278:	4823      	ldr	r0, [pc, #140]	; (8013308 <udp_input_local_match+0xbc>)
 801327a:	f000 fca3 	bl	8013bc4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	7a1b      	ldrb	r3, [r3, #8]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d00b      	beq.n	801329e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	7a1a      	ldrb	r2, [r3, #8]
 801328a:	4b21      	ldr	r3, [pc, #132]	; (8013310 <udp_input_local_match+0xc4>)
 801328c:	685b      	ldr	r3, [r3, #4]
 801328e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013292:	3301      	adds	r3, #1
 8013294:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013296:	429a      	cmp	r2, r3
 8013298:	d001      	beq.n	801329e <udp_input_local_match+0x52>
    return 0;
 801329a:	2300      	movs	r3, #0
 801329c:	e02b      	b.n	80132f6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801329e:	79fb      	ldrb	r3, [r7, #7]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d018      	beq.n	80132d6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d013      	beq.n	80132d2 <udp_input_local_match+0x86>
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d00f      	beq.n	80132d2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80132b2:	4b17      	ldr	r3, [pc, #92]	; (8013310 <udp_input_local_match+0xc4>)
 80132b4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ba:	d00a      	beq.n	80132d2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	681a      	ldr	r2, [r3, #0]
 80132c0:	4b13      	ldr	r3, [pc, #76]	; (8013310 <udp_input_local_match+0xc4>)
 80132c2:	695b      	ldr	r3, [r3, #20]
 80132c4:	405a      	eors	r2, r3
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	3308      	adds	r3, #8
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d110      	bne.n	80132f4 <udp_input_local_match+0xa8>
          return 1;
 80132d2:	2301      	movs	r3, #1
 80132d4:	e00f      	b.n	80132f6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d009      	beq.n	80132f0 <udp_input_local_match+0xa4>
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d005      	beq.n	80132f0 <udp_input_local_match+0xa4>
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	681a      	ldr	r2, [r3, #0]
 80132e8:	4b09      	ldr	r3, [pc, #36]	; (8013310 <udp_input_local_match+0xc4>)
 80132ea:	695b      	ldr	r3, [r3, #20]
 80132ec:	429a      	cmp	r2, r3
 80132ee:	d101      	bne.n	80132f4 <udp_input_local_match+0xa8>
        return 1;
 80132f0:	2301      	movs	r3, #1
 80132f2:	e000      	b.n	80132f6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80132f4:	2300      	movs	r3, #0
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	3710      	adds	r7, #16
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}
 80132fe:	bf00      	nop
 8013300:	080179b8 	.word	0x080179b8
 8013304:	08017a20 	.word	0x08017a20
 8013308:	08017a44 	.word	0x08017a44
 801330c:	08017a6c 	.word	0x08017a6c
 8013310:	24005318 	.word	0x24005318

08013314 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013314:	b590      	push	{r4, r7, lr}
 8013316:	b08d      	sub	sp, #52	; 0x34
 8013318:	af02      	add	r7, sp, #8
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801331e:	2300      	movs	r3, #0
 8013320:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d105      	bne.n	8013334 <udp_input+0x20>
 8013328:	4b7c      	ldr	r3, [pc, #496]	; (801351c <udp_input+0x208>)
 801332a:	22cf      	movs	r2, #207	; 0xcf
 801332c:	497c      	ldr	r1, [pc, #496]	; (8013520 <udp_input+0x20c>)
 801332e:	487d      	ldr	r0, [pc, #500]	; (8013524 <udp_input+0x210>)
 8013330:	f000 fc48 	bl	8013bc4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d105      	bne.n	8013346 <udp_input+0x32>
 801333a:	4b78      	ldr	r3, [pc, #480]	; (801351c <udp_input+0x208>)
 801333c:	22d0      	movs	r2, #208	; 0xd0
 801333e:	497a      	ldr	r1, [pc, #488]	; (8013528 <udp_input+0x214>)
 8013340:	4878      	ldr	r0, [pc, #480]	; (8013524 <udp_input+0x210>)
 8013342:	f000 fc3f 	bl	8013bc4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	895b      	ldrh	r3, [r3, #10]
 801334a:	2b07      	cmp	r3, #7
 801334c:	d803      	bhi.n	8013356 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	f7fa fa30 	bl	800d7b4 <pbuf_free>
    goto end;
 8013354:	e0de      	b.n	8013514 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	685b      	ldr	r3, [r3, #4]
 801335a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801335c:	4b73      	ldr	r3, [pc, #460]	; (801352c <udp_input+0x218>)
 801335e:	695b      	ldr	r3, [r3, #20]
 8013360:	4a72      	ldr	r2, [pc, #456]	; (801352c <udp_input+0x218>)
 8013362:	6812      	ldr	r2, [r2, #0]
 8013364:	4611      	mov	r1, r2
 8013366:	4618      	mov	r0, r3
 8013368:	f7f8 f8a2 	bl	800b4b0 <ip4_addr_isbroadcast_u32>
 801336c:	4603      	mov	r3, r0
 801336e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	881b      	ldrh	r3, [r3, #0]
 8013374:	b29b      	uxth	r3, r3
 8013376:	4618      	mov	r0, r3
 8013378:	f7f4 fc78 	bl	8007c6c <lwip_htons>
 801337c:	4603      	mov	r3, r0
 801337e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	885b      	ldrh	r3, [r3, #2]
 8013384:	b29b      	uxth	r3, r3
 8013386:	4618      	mov	r0, r3
 8013388:	f7f4 fc70 	bl	8007c6c <lwip_htons>
 801338c:	4603      	mov	r3, r0
 801338e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013390:	2300      	movs	r3, #0
 8013392:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013394:	2300      	movs	r3, #0
 8013396:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013398:	2300      	movs	r3, #0
 801339a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801339c:	4b64      	ldr	r3, [pc, #400]	; (8013530 <udp_input+0x21c>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	627b      	str	r3, [r7, #36]	; 0x24
 80133a2:	e054      	b.n	801344e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80133a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a6:	8a5b      	ldrh	r3, [r3, #18]
 80133a8:	89fa      	ldrh	r2, [r7, #14]
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d14a      	bne.n	8013444 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80133ae:	7cfb      	ldrb	r3, [r7, #19]
 80133b0:	461a      	mov	r2, r3
 80133b2:	6839      	ldr	r1, [r7, #0]
 80133b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80133b6:	f7ff ff49 	bl	801324c <udp_input_local_match>
 80133ba:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d041      	beq.n	8013444 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80133c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c2:	7c1b      	ldrb	r3, [r3, #16]
 80133c4:	f003 0304 	and.w	r3, r3, #4
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d11d      	bne.n	8013408 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80133cc:	69fb      	ldr	r3, [r7, #28]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d102      	bne.n	80133d8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80133d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d4:	61fb      	str	r3, [r7, #28]
 80133d6:	e017      	b.n	8013408 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80133d8:	7cfb      	ldrb	r3, [r7, #19]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d014      	beq.n	8013408 <udp_input+0xf4>
 80133de:	4b53      	ldr	r3, [pc, #332]	; (801352c <udp_input+0x218>)
 80133e0:	695b      	ldr	r3, [r3, #20]
 80133e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133e6:	d10f      	bne.n	8013408 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80133e8:	69fb      	ldr	r3, [r7, #28]
 80133ea:	681a      	ldr	r2, [r3, #0]
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	3304      	adds	r3, #4
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	429a      	cmp	r2, r3
 80133f4:	d008      	beq.n	8013408 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80133f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	3304      	adds	r3, #4
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	429a      	cmp	r2, r3
 8013402:	d101      	bne.n	8013408 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013406:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801340a:	8a9b      	ldrh	r3, [r3, #20]
 801340c:	8a3a      	ldrh	r2, [r7, #16]
 801340e:	429a      	cmp	r2, r3
 8013410:	d118      	bne.n	8013444 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013414:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013416:	2b00      	cmp	r3, #0
 8013418:	d005      	beq.n	8013426 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801341c:	685a      	ldr	r2, [r3, #4]
 801341e:	4b43      	ldr	r3, [pc, #268]	; (801352c <udp_input+0x218>)
 8013420:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013422:	429a      	cmp	r2, r3
 8013424:	d10e      	bne.n	8013444 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013426:	6a3b      	ldr	r3, [r7, #32]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d014      	beq.n	8013456 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342e:	68da      	ldr	r2, [r3, #12]
 8013430:	6a3b      	ldr	r3, [r7, #32]
 8013432:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013434:	4b3e      	ldr	r3, [pc, #248]	; (8013530 <udp_input+0x21c>)
 8013436:	681a      	ldr	r2, [r3, #0]
 8013438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801343c:	4a3c      	ldr	r2, [pc, #240]	; (8013530 <udp_input+0x21c>)
 801343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013440:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013442:	e008      	b.n	8013456 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013446:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801344a:	68db      	ldr	r3, [r3, #12]
 801344c:	627b      	str	r3, [r7, #36]	; 0x24
 801344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013450:	2b00      	cmp	r3, #0
 8013452:	d1a7      	bne.n	80133a4 <udp_input+0x90>
 8013454:	e000      	b.n	8013458 <udp_input+0x144>
        break;
 8013456:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801345a:	2b00      	cmp	r3, #0
 801345c:	d101      	bne.n	8013462 <udp_input+0x14e>
    pcb = uncon_pcb;
 801345e:	69fb      	ldr	r3, [r7, #28]
 8013460:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013464:	2b00      	cmp	r3, #0
 8013466:	d002      	beq.n	801346e <udp_input+0x15a>
    for_us = 1;
 8013468:	2301      	movs	r3, #1
 801346a:	76fb      	strb	r3, [r7, #27]
 801346c:	e00a      	b.n	8013484 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	3304      	adds	r3, #4
 8013472:	681a      	ldr	r2, [r3, #0]
 8013474:	4b2d      	ldr	r3, [pc, #180]	; (801352c <udp_input+0x218>)
 8013476:	695b      	ldr	r3, [r3, #20]
 8013478:	429a      	cmp	r2, r3
 801347a:	bf0c      	ite	eq
 801347c:	2301      	moveq	r3, #1
 801347e:	2300      	movne	r3, #0
 8013480:	b2db      	uxtb	r3, r3
 8013482:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013484:	7efb      	ldrb	r3, [r7, #27]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d041      	beq.n	801350e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801348a:	2108      	movs	r1, #8
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f7fa f90b 	bl	800d6a8 <pbuf_remove_header>
 8013492:	4603      	mov	r3, r0
 8013494:	2b00      	cmp	r3, #0
 8013496:	d00a      	beq.n	80134ae <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013498:	4b20      	ldr	r3, [pc, #128]	; (801351c <udp_input+0x208>)
 801349a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801349e:	4925      	ldr	r1, [pc, #148]	; (8013534 <udp_input+0x220>)
 80134a0:	4820      	ldr	r0, [pc, #128]	; (8013524 <udp_input+0x210>)
 80134a2:	f000 fb8f 	bl	8013bc4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80134a6:	6878      	ldr	r0, [r7, #4]
 80134a8:	f7fa f984 	bl	800d7b4 <pbuf_free>
      goto end;
 80134ac:	e032      	b.n	8013514 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80134ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d012      	beq.n	80134da <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80134b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b6:	699b      	ldr	r3, [r3, #24]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d00a      	beq.n	80134d2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80134bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134be:	699c      	ldr	r4, [r3, #24]
 80134c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c2:	69d8      	ldr	r0, [r3, #28]
 80134c4:	8a3b      	ldrh	r3, [r7, #16]
 80134c6:	9300      	str	r3, [sp, #0]
 80134c8:	4b1b      	ldr	r3, [pc, #108]	; (8013538 <udp_input+0x224>)
 80134ca:	687a      	ldr	r2, [r7, #4]
 80134cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80134ce:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80134d0:	e021      	b.n	8013516 <udp_input+0x202>
        pbuf_free(p);
 80134d2:	6878      	ldr	r0, [r7, #4]
 80134d4:	f7fa f96e 	bl	800d7b4 <pbuf_free>
        goto end;
 80134d8:	e01c      	b.n	8013514 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80134da:	7cfb      	ldrb	r3, [r7, #19]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d112      	bne.n	8013506 <udp_input+0x1f2>
 80134e0:	4b12      	ldr	r3, [pc, #72]	; (801352c <udp_input+0x218>)
 80134e2:	695b      	ldr	r3, [r3, #20]
 80134e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80134e8:	2be0      	cmp	r3, #224	; 0xe0
 80134ea:	d00c      	beq.n	8013506 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80134ec:	4b0f      	ldr	r3, [pc, #60]	; (801352c <udp_input+0x218>)
 80134ee:	899b      	ldrh	r3, [r3, #12]
 80134f0:	3308      	adds	r3, #8
 80134f2:	b29b      	uxth	r3, r3
 80134f4:	b21b      	sxth	r3, r3
 80134f6:	4619      	mov	r1, r3
 80134f8:	6878      	ldr	r0, [r7, #4]
 80134fa:	f7fa f948 	bl	800d78e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80134fe:	2103      	movs	r1, #3
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f7f7 fbbb 	bl	800ac7c <icmp_dest_unreach>
      pbuf_free(p);
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f7fa f954 	bl	800d7b4 <pbuf_free>
  return;
 801350c:	e003      	b.n	8013516 <udp_input+0x202>
    pbuf_free(p);
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f7fa f950 	bl	800d7b4 <pbuf_free>
  return;
 8013514:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013516:	372c      	adds	r7, #44	; 0x2c
 8013518:	46bd      	mov	sp, r7
 801351a:	bd90      	pop	{r4, r7, pc}
 801351c:	080179b8 	.word	0x080179b8
 8013520:	08017a94 	.word	0x08017a94
 8013524:	08017a44 	.word	0x08017a44
 8013528:	08017aac 	.word	0x08017aac
 801352c:	24005318 	.word	0x24005318
 8013530:	240082bc 	.word	0x240082bc
 8013534:	08017ac8 	.word	0x08017ac8
 8013538:	24005328 	.word	0x24005328

0801353c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b088      	sub	sp, #32
 8013540:	af02      	add	r7, sp, #8
 8013542:	60f8      	str	r0, [r7, #12]
 8013544:	60b9      	str	r1, [r7, #8]
 8013546:	607a      	str	r2, [r7, #4]
 8013548:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d109      	bne.n	8013564 <udp_sendto_if+0x28>
 8013550:	4b2e      	ldr	r3, [pc, #184]	; (801360c <udp_sendto_if+0xd0>)
 8013552:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013556:	492e      	ldr	r1, [pc, #184]	; (8013610 <udp_sendto_if+0xd4>)
 8013558:	482e      	ldr	r0, [pc, #184]	; (8013614 <udp_sendto_if+0xd8>)
 801355a:	f000 fb33 	bl	8013bc4 <iprintf>
 801355e:	f06f 030f 	mvn.w	r3, #15
 8013562:	e04f      	b.n	8013604 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013564:	68bb      	ldr	r3, [r7, #8]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d109      	bne.n	801357e <udp_sendto_if+0x42>
 801356a:	4b28      	ldr	r3, [pc, #160]	; (801360c <udp_sendto_if+0xd0>)
 801356c:	f240 2281 	movw	r2, #641	; 0x281
 8013570:	4929      	ldr	r1, [pc, #164]	; (8013618 <udp_sendto_if+0xdc>)
 8013572:	4828      	ldr	r0, [pc, #160]	; (8013614 <udp_sendto_if+0xd8>)
 8013574:	f000 fb26 	bl	8013bc4 <iprintf>
 8013578:	f06f 030f 	mvn.w	r3, #15
 801357c:	e042      	b.n	8013604 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d109      	bne.n	8013598 <udp_sendto_if+0x5c>
 8013584:	4b21      	ldr	r3, [pc, #132]	; (801360c <udp_sendto_if+0xd0>)
 8013586:	f240 2282 	movw	r2, #642	; 0x282
 801358a:	4924      	ldr	r1, [pc, #144]	; (801361c <udp_sendto_if+0xe0>)
 801358c:	4821      	ldr	r0, [pc, #132]	; (8013614 <udp_sendto_if+0xd8>)
 801358e:	f000 fb19 	bl	8013bc4 <iprintf>
 8013592:	f06f 030f 	mvn.w	r3, #15
 8013596:	e035      	b.n	8013604 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013598:	6a3b      	ldr	r3, [r7, #32]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d109      	bne.n	80135b2 <udp_sendto_if+0x76>
 801359e:	4b1b      	ldr	r3, [pc, #108]	; (801360c <udp_sendto_if+0xd0>)
 80135a0:	f240 2283 	movw	r2, #643	; 0x283
 80135a4:	491e      	ldr	r1, [pc, #120]	; (8013620 <udp_sendto_if+0xe4>)
 80135a6:	481b      	ldr	r0, [pc, #108]	; (8013614 <udp_sendto_if+0xd8>)
 80135a8:	f000 fb0c 	bl	8013bc4 <iprintf>
 80135ac:	f06f 030f 	mvn.w	r3, #15
 80135b0:	e028      	b.n	8013604 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d009      	beq.n	80135cc <udp_sendto_if+0x90>
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d005      	beq.n	80135cc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80135c8:	2be0      	cmp	r3, #224	; 0xe0
 80135ca:	d103      	bne.n	80135d4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80135cc:	6a3b      	ldr	r3, [r7, #32]
 80135ce:	3304      	adds	r3, #4
 80135d0:	617b      	str	r3, [r7, #20]
 80135d2:	e00b      	b.n	80135ec <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	681a      	ldr	r2, [r3, #0]
 80135d8:	6a3b      	ldr	r3, [r7, #32]
 80135da:	3304      	adds	r3, #4
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	429a      	cmp	r2, r3
 80135e0:	d002      	beq.n	80135e8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80135e2:	f06f 0303 	mvn.w	r3, #3
 80135e6:	e00d      	b.n	8013604 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80135ec:	887a      	ldrh	r2, [r7, #2]
 80135ee:	697b      	ldr	r3, [r7, #20]
 80135f0:	9301      	str	r3, [sp, #4]
 80135f2:	6a3b      	ldr	r3, [r7, #32]
 80135f4:	9300      	str	r3, [sp, #0]
 80135f6:	4613      	mov	r3, r2
 80135f8:	687a      	ldr	r2, [r7, #4]
 80135fa:	68b9      	ldr	r1, [r7, #8]
 80135fc:	68f8      	ldr	r0, [r7, #12]
 80135fe:	f000 f811 	bl	8013624 <udp_sendto_if_src>
 8013602:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013604:	4618      	mov	r0, r3
 8013606:	3718      	adds	r7, #24
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}
 801360c:	080179b8 	.word	0x080179b8
 8013610:	08017b64 	.word	0x08017b64
 8013614:	08017a44 	.word	0x08017a44
 8013618:	08017b80 	.word	0x08017b80
 801361c:	08017b9c 	.word	0x08017b9c
 8013620:	08017bbc 	.word	0x08017bbc

08013624 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b08c      	sub	sp, #48	; 0x30
 8013628:	af04      	add	r7, sp, #16
 801362a:	60f8      	str	r0, [r7, #12]
 801362c:	60b9      	str	r1, [r7, #8]
 801362e:	607a      	str	r2, [r7, #4]
 8013630:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d109      	bne.n	801364c <udp_sendto_if_src+0x28>
 8013638:	4b65      	ldr	r3, [pc, #404]	; (80137d0 <udp_sendto_if_src+0x1ac>)
 801363a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801363e:	4965      	ldr	r1, [pc, #404]	; (80137d4 <udp_sendto_if_src+0x1b0>)
 8013640:	4865      	ldr	r0, [pc, #404]	; (80137d8 <udp_sendto_if_src+0x1b4>)
 8013642:	f000 fabf 	bl	8013bc4 <iprintf>
 8013646:	f06f 030f 	mvn.w	r3, #15
 801364a:	e0bc      	b.n	80137c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d109      	bne.n	8013666 <udp_sendto_if_src+0x42>
 8013652:	4b5f      	ldr	r3, [pc, #380]	; (80137d0 <udp_sendto_if_src+0x1ac>)
 8013654:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013658:	4960      	ldr	r1, [pc, #384]	; (80137dc <udp_sendto_if_src+0x1b8>)
 801365a:	485f      	ldr	r0, [pc, #380]	; (80137d8 <udp_sendto_if_src+0x1b4>)
 801365c:	f000 fab2 	bl	8013bc4 <iprintf>
 8013660:	f06f 030f 	mvn.w	r3, #15
 8013664:	e0af      	b.n	80137c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d109      	bne.n	8013680 <udp_sendto_if_src+0x5c>
 801366c:	4b58      	ldr	r3, [pc, #352]	; (80137d0 <udp_sendto_if_src+0x1ac>)
 801366e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013672:	495b      	ldr	r1, [pc, #364]	; (80137e0 <udp_sendto_if_src+0x1bc>)
 8013674:	4858      	ldr	r0, [pc, #352]	; (80137d8 <udp_sendto_if_src+0x1b4>)
 8013676:	f000 faa5 	bl	8013bc4 <iprintf>
 801367a:	f06f 030f 	mvn.w	r3, #15
 801367e:	e0a2      	b.n	80137c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013682:	2b00      	cmp	r3, #0
 8013684:	d109      	bne.n	801369a <udp_sendto_if_src+0x76>
 8013686:	4b52      	ldr	r3, [pc, #328]	; (80137d0 <udp_sendto_if_src+0x1ac>)
 8013688:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801368c:	4955      	ldr	r1, [pc, #340]	; (80137e4 <udp_sendto_if_src+0x1c0>)
 801368e:	4852      	ldr	r0, [pc, #328]	; (80137d8 <udp_sendto_if_src+0x1b4>)
 8013690:	f000 fa98 	bl	8013bc4 <iprintf>
 8013694:	f06f 030f 	mvn.w	r3, #15
 8013698:	e095      	b.n	80137c6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801369c:	2b00      	cmp	r3, #0
 801369e:	d109      	bne.n	80136b4 <udp_sendto_if_src+0x90>
 80136a0:	4b4b      	ldr	r3, [pc, #300]	; (80137d0 <udp_sendto_if_src+0x1ac>)
 80136a2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80136a6:	4950      	ldr	r1, [pc, #320]	; (80137e8 <udp_sendto_if_src+0x1c4>)
 80136a8:	484b      	ldr	r0, [pc, #300]	; (80137d8 <udp_sendto_if_src+0x1b4>)
 80136aa:	f000 fa8b 	bl	8013bc4 <iprintf>
 80136ae:	f06f 030f 	mvn.w	r3, #15
 80136b2:	e088      	b.n	80137c6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	8a5b      	ldrh	r3, [r3, #18]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d10f      	bne.n	80136dc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80136bc:	68f9      	ldr	r1, [r7, #12]
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	8a5b      	ldrh	r3, [r3, #18]
 80136c2:	461a      	mov	r2, r3
 80136c4:	68f8      	ldr	r0, [r7, #12]
 80136c6:	f000 f893 	bl	80137f0 <udp_bind>
 80136ca:	4603      	mov	r3, r0
 80136cc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80136ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d002      	beq.n	80136dc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80136d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80136da:	e074      	b.n	80137c6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	891b      	ldrh	r3, [r3, #8]
 80136e0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80136e4:	4293      	cmp	r3, r2
 80136e6:	d902      	bls.n	80136ee <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80136e8:	f04f 33ff 	mov.w	r3, #4294967295
 80136ec:	e06b      	b.n	80137c6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80136ee:	2108      	movs	r1, #8
 80136f0:	68b8      	ldr	r0, [r7, #8]
 80136f2:	f7f9 ffc9 	bl	800d688 <pbuf_add_header>
 80136f6:	4603      	mov	r3, r0
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d015      	beq.n	8013728 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80136fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013700:	2108      	movs	r1, #8
 8013702:	2022      	movs	r0, #34	; 0x22
 8013704:	f7f9 fd72 	bl	800d1ec <pbuf_alloc>
 8013708:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801370a:	69fb      	ldr	r3, [r7, #28]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d102      	bne.n	8013716 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013710:	f04f 33ff 	mov.w	r3, #4294967295
 8013714:	e057      	b.n	80137c6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013716:	68bb      	ldr	r3, [r7, #8]
 8013718:	891b      	ldrh	r3, [r3, #8]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d006      	beq.n	801372c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801371e:	68b9      	ldr	r1, [r7, #8]
 8013720:	69f8      	ldr	r0, [r7, #28]
 8013722:	f7fa f95f 	bl	800d9e4 <pbuf_chain>
 8013726:	e001      	b.n	801372c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801372c:	69fb      	ldr	r3, [r7, #28]
 801372e:	895b      	ldrh	r3, [r3, #10]
 8013730:	2b07      	cmp	r3, #7
 8013732:	d806      	bhi.n	8013742 <udp_sendto_if_src+0x11e>
 8013734:	4b26      	ldr	r3, [pc, #152]	; (80137d0 <udp_sendto_if_src+0x1ac>)
 8013736:	f240 320d 	movw	r2, #781	; 0x30d
 801373a:	492c      	ldr	r1, [pc, #176]	; (80137ec <udp_sendto_if_src+0x1c8>)
 801373c:	4826      	ldr	r0, [pc, #152]	; (80137d8 <udp_sendto_if_src+0x1b4>)
 801373e:	f000 fa41 	bl	8013bc4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013742:	69fb      	ldr	r3, [r7, #28]
 8013744:	685b      	ldr	r3, [r3, #4]
 8013746:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	8a5b      	ldrh	r3, [r3, #18]
 801374c:	4618      	mov	r0, r3
 801374e:	f7f4 fa8d 	bl	8007c6c <lwip_htons>
 8013752:	4603      	mov	r3, r0
 8013754:	461a      	mov	r2, r3
 8013756:	697b      	ldr	r3, [r7, #20]
 8013758:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801375a:	887b      	ldrh	r3, [r7, #2]
 801375c:	4618      	mov	r0, r3
 801375e:	f7f4 fa85 	bl	8007c6c <lwip_htons>
 8013762:	4603      	mov	r3, r0
 8013764:	461a      	mov	r2, r3
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801376a:	697b      	ldr	r3, [r7, #20]
 801376c:	2200      	movs	r2, #0
 801376e:	719a      	strb	r2, [r3, #6]
 8013770:	2200      	movs	r2, #0
 8013772:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013774:	69fb      	ldr	r3, [r7, #28]
 8013776:	891b      	ldrh	r3, [r3, #8]
 8013778:	4618      	mov	r0, r3
 801377a:	f7f4 fa77 	bl	8007c6c <lwip_htons>
 801377e:	4603      	mov	r3, r0
 8013780:	461a      	mov	r2, r3
 8013782:	697b      	ldr	r3, [r7, #20]
 8013784:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013786:	2311      	movs	r3, #17
 8013788:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	7adb      	ldrb	r3, [r3, #11]
 801378e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	7a9b      	ldrb	r3, [r3, #10]
 8013794:	7cb9      	ldrb	r1, [r7, #18]
 8013796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013798:	9202      	str	r2, [sp, #8]
 801379a:	7cfa      	ldrb	r2, [r7, #19]
 801379c:	9201      	str	r2, [sp, #4]
 801379e:	9300      	str	r3, [sp, #0]
 80137a0:	460b      	mov	r3, r1
 80137a2:	687a      	ldr	r2, [r7, #4]
 80137a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137a6:	69f8      	ldr	r0, [r7, #28]
 80137a8:	f7f7 fdd4 	bl	800b354 <ip4_output_if_src>
 80137ac:	4603      	mov	r3, r0
 80137ae:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80137b0:	69fa      	ldr	r2, [r7, #28]
 80137b2:	68bb      	ldr	r3, [r7, #8]
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d004      	beq.n	80137c2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80137b8:	69f8      	ldr	r0, [r7, #28]
 80137ba:	f7f9 fffb 	bl	800d7b4 <pbuf_free>
    q = NULL;
 80137be:	2300      	movs	r3, #0
 80137c0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80137c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80137c6:	4618      	mov	r0, r3
 80137c8:	3720      	adds	r7, #32
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}
 80137ce:	bf00      	nop
 80137d0:	080179b8 	.word	0x080179b8
 80137d4:	08017bdc 	.word	0x08017bdc
 80137d8:	08017a44 	.word	0x08017a44
 80137dc:	08017bfc 	.word	0x08017bfc
 80137e0:	08017c1c 	.word	0x08017c1c
 80137e4:	08017c40 	.word	0x08017c40
 80137e8:	08017c64 	.word	0x08017c64
 80137ec:	08017c88 	.word	0x08017c88

080137f0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b086      	sub	sp, #24
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	60f8      	str	r0, [r7, #12]
 80137f8:	60b9      	str	r1, [r7, #8]
 80137fa:	4613      	mov	r3, r2
 80137fc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d101      	bne.n	8013808 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013804:	4b39      	ldr	r3, [pc, #228]	; (80138ec <udp_bind+0xfc>)
 8013806:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d109      	bne.n	8013822 <udp_bind+0x32>
 801380e:	4b38      	ldr	r3, [pc, #224]	; (80138f0 <udp_bind+0x100>)
 8013810:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013814:	4937      	ldr	r1, [pc, #220]	; (80138f4 <udp_bind+0x104>)
 8013816:	4838      	ldr	r0, [pc, #224]	; (80138f8 <udp_bind+0x108>)
 8013818:	f000 f9d4 	bl	8013bc4 <iprintf>
 801381c:	f06f 030f 	mvn.w	r3, #15
 8013820:	e060      	b.n	80138e4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013822:	2300      	movs	r3, #0
 8013824:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013826:	4b35      	ldr	r3, [pc, #212]	; (80138fc <udp_bind+0x10c>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	617b      	str	r3, [r7, #20]
 801382c:	e009      	b.n	8013842 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801382e:	68fa      	ldr	r2, [r7, #12]
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	429a      	cmp	r2, r3
 8013834:	d102      	bne.n	801383c <udp_bind+0x4c>
      rebind = 1;
 8013836:	2301      	movs	r3, #1
 8013838:	74fb      	strb	r3, [r7, #19]
      break;
 801383a:	e005      	b.n	8013848 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	68db      	ldr	r3, [r3, #12]
 8013840:	617b      	str	r3, [r7, #20]
 8013842:	697b      	ldr	r3, [r7, #20]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d1f2      	bne.n	801382e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013848:	88fb      	ldrh	r3, [r7, #6]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d109      	bne.n	8013862 <udp_bind+0x72>
    port = udp_new_port();
 801384e:	f7ff fcc5 	bl	80131dc <udp_new_port>
 8013852:	4603      	mov	r3, r0
 8013854:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013856:	88fb      	ldrh	r3, [r7, #6]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d12c      	bne.n	80138b6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801385c:	f06f 0307 	mvn.w	r3, #7
 8013860:	e040      	b.n	80138e4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013862:	4b26      	ldr	r3, [pc, #152]	; (80138fc <udp_bind+0x10c>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	617b      	str	r3, [r7, #20]
 8013868:	e022      	b.n	80138b0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801386a:	68fa      	ldr	r2, [r7, #12]
 801386c:	697b      	ldr	r3, [r7, #20]
 801386e:	429a      	cmp	r2, r3
 8013870:	d01b      	beq.n	80138aa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013872:	697b      	ldr	r3, [r7, #20]
 8013874:	8a5b      	ldrh	r3, [r3, #18]
 8013876:	88fa      	ldrh	r2, [r7, #6]
 8013878:	429a      	cmp	r2, r3
 801387a:	d116      	bne.n	80138aa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	681a      	ldr	r2, [r3, #0]
 8013880:	68bb      	ldr	r3, [r7, #8]
 8013882:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013884:	429a      	cmp	r2, r3
 8013886:	d00d      	beq.n	80138a4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d00a      	beq.n	80138a4 <udp_bind+0xb4>
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d006      	beq.n	80138a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013896:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013898:	2b00      	cmp	r3, #0
 801389a:	d003      	beq.n	80138a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d102      	bne.n	80138aa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80138a4:	f06f 0307 	mvn.w	r3, #7
 80138a8:	e01c      	b.n	80138e4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80138aa:	697b      	ldr	r3, [r7, #20]
 80138ac:	68db      	ldr	r3, [r3, #12]
 80138ae:	617b      	str	r3, [r7, #20]
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d1d9      	bne.n	801386a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d002      	beq.n	80138c2 <udp_bind+0xd2>
 80138bc:	68bb      	ldr	r3, [r7, #8]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	e000      	b.n	80138c4 <udp_bind+0xd4>
 80138c2:	2300      	movs	r3, #0
 80138c4:	68fa      	ldr	r2, [r7, #12]
 80138c6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	88fa      	ldrh	r2, [r7, #6]
 80138cc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80138ce:	7cfb      	ldrb	r3, [r7, #19]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d106      	bne.n	80138e2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80138d4:	4b09      	ldr	r3, [pc, #36]	; (80138fc <udp_bind+0x10c>)
 80138d6:	681a      	ldr	r2, [r3, #0]
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80138dc:	4a07      	ldr	r2, [pc, #28]	; (80138fc <udp_bind+0x10c>)
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80138e2:	2300      	movs	r3, #0
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	3718      	adds	r7, #24
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	08017da8 	.word	0x08017da8
 80138f0:	080179b8 	.word	0x080179b8
 80138f4:	08017cb8 	.word	0x08017cb8
 80138f8:	08017a44 	.word	0x08017a44
 80138fc:	240082bc 	.word	0x240082bc

08013900 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b086      	sub	sp, #24
 8013904:	af00      	add	r7, sp, #0
 8013906:	60f8      	str	r0, [r7, #12]
 8013908:	60b9      	str	r1, [r7, #8]
 801390a:	4613      	mov	r3, r2
 801390c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d109      	bne.n	8013928 <udp_connect+0x28>
 8013914:	4b2c      	ldr	r3, [pc, #176]	; (80139c8 <udp_connect+0xc8>)
 8013916:	f240 4235 	movw	r2, #1077	; 0x435
 801391a:	492c      	ldr	r1, [pc, #176]	; (80139cc <udp_connect+0xcc>)
 801391c:	482c      	ldr	r0, [pc, #176]	; (80139d0 <udp_connect+0xd0>)
 801391e:	f000 f951 	bl	8013bc4 <iprintf>
 8013922:	f06f 030f 	mvn.w	r3, #15
 8013926:	e04b      	b.n	80139c0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d109      	bne.n	8013942 <udp_connect+0x42>
 801392e:	4b26      	ldr	r3, [pc, #152]	; (80139c8 <udp_connect+0xc8>)
 8013930:	f240 4236 	movw	r2, #1078	; 0x436
 8013934:	4927      	ldr	r1, [pc, #156]	; (80139d4 <udp_connect+0xd4>)
 8013936:	4826      	ldr	r0, [pc, #152]	; (80139d0 <udp_connect+0xd0>)
 8013938:	f000 f944 	bl	8013bc4 <iprintf>
 801393c:	f06f 030f 	mvn.w	r3, #15
 8013940:	e03e      	b.n	80139c0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	8a5b      	ldrh	r3, [r3, #18]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d10f      	bne.n	801396a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801394a:	68f9      	ldr	r1, [r7, #12]
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	8a5b      	ldrh	r3, [r3, #18]
 8013950:	461a      	mov	r2, r3
 8013952:	68f8      	ldr	r0, [r7, #12]
 8013954:	f7ff ff4c 	bl	80137f0 <udp_bind>
 8013958:	4603      	mov	r3, r0
 801395a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801395c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d002      	beq.n	801396a <udp_connect+0x6a>
      return err;
 8013964:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013968:	e02a      	b.n	80139c0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d002      	beq.n	8013976 <udp_connect+0x76>
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	e000      	b.n	8013978 <udp_connect+0x78>
 8013976:	2300      	movs	r3, #0
 8013978:	68fa      	ldr	r2, [r7, #12]
 801397a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	88fa      	ldrh	r2, [r7, #6]
 8013980:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	7c1b      	ldrb	r3, [r3, #16]
 8013986:	f043 0304 	orr.w	r3, r3, #4
 801398a:	b2da      	uxtb	r2, r3
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013990:	4b11      	ldr	r3, [pc, #68]	; (80139d8 <udp_connect+0xd8>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	617b      	str	r3, [r7, #20]
 8013996:	e008      	b.n	80139aa <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013998:	68fa      	ldr	r2, [r7, #12]
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	429a      	cmp	r2, r3
 801399e:	d101      	bne.n	80139a4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80139a0:	2300      	movs	r3, #0
 80139a2:	e00d      	b.n	80139c0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80139a4:	697b      	ldr	r3, [r7, #20]
 80139a6:	68db      	ldr	r3, [r3, #12]
 80139a8:	617b      	str	r3, [r7, #20]
 80139aa:	697b      	ldr	r3, [r7, #20]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d1f3      	bne.n	8013998 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80139b0:	4b09      	ldr	r3, [pc, #36]	; (80139d8 <udp_connect+0xd8>)
 80139b2:	681a      	ldr	r2, [r3, #0]
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80139b8:	4a07      	ldr	r2, [pc, #28]	; (80139d8 <udp_connect+0xd8>)
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80139be:	2300      	movs	r3, #0
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	3718      	adds	r7, #24
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}
 80139c8:	080179b8 	.word	0x080179b8
 80139cc:	08017cd0 	.word	0x08017cd0
 80139d0:	08017a44 	.word	0x08017a44
 80139d4:	08017cec 	.word	0x08017cec
 80139d8:	240082bc 	.word	0x240082bc

080139dc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b084      	sub	sp, #16
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	60b9      	str	r1, [r7, #8]
 80139e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d107      	bne.n	80139fe <udp_recv+0x22>
 80139ee:	4b08      	ldr	r3, [pc, #32]	; (8013a10 <udp_recv+0x34>)
 80139f0:	f240 428a 	movw	r2, #1162	; 0x48a
 80139f4:	4907      	ldr	r1, [pc, #28]	; (8013a14 <udp_recv+0x38>)
 80139f6:	4808      	ldr	r0, [pc, #32]	; (8013a18 <udp_recv+0x3c>)
 80139f8:	f000 f8e4 	bl	8013bc4 <iprintf>
 80139fc:	e005      	b.n	8013a0a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	68ba      	ldr	r2, [r7, #8]
 8013a02:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	687a      	ldr	r2, [r7, #4]
 8013a08:	61da      	str	r2, [r3, #28]
}
 8013a0a:	3710      	adds	r7, #16
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}
 8013a10:	080179b8 	.word	0x080179b8
 8013a14:	08017d24 	.word	0x08017d24
 8013a18:	08017a44 	.word	0x08017a44

08013a1c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b084      	sub	sp, #16
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d107      	bne.n	8013a3a <udp_remove+0x1e>
 8013a2a:	4b19      	ldr	r3, [pc, #100]	; (8013a90 <udp_remove+0x74>)
 8013a2c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013a30:	4918      	ldr	r1, [pc, #96]	; (8013a94 <udp_remove+0x78>)
 8013a32:	4819      	ldr	r0, [pc, #100]	; (8013a98 <udp_remove+0x7c>)
 8013a34:	f000 f8c6 	bl	8013bc4 <iprintf>
 8013a38:	e026      	b.n	8013a88 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013a3a:	4b18      	ldr	r3, [pc, #96]	; (8013a9c <udp_remove+0x80>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	687a      	ldr	r2, [r7, #4]
 8013a40:	429a      	cmp	r2, r3
 8013a42:	d105      	bne.n	8013a50 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013a44:	4b15      	ldr	r3, [pc, #84]	; (8013a9c <udp_remove+0x80>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	68db      	ldr	r3, [r3, #12]
 8013a4a:	4a14      	ldr	r2, [pc, #80]	; (8013a9c <udp_remove+0x80>)
 8013a4c:	6013      	str	r3, [r2, #0]
 8013a4e:	e017      	b.n	8013a80 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013a50:	4b12      	ldr	r3, [pc, #72]	; (8013a9c <udp_remove+0x80>)
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	60fb      	str	r3, [r7, #12]
 8013a56:	e010      	b.n	8013a7a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d009      	beq.n	8013a74 <udp_remove+0x58>
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	68db      	ldr	r3, [r3, #12]
 8013a64:	687a      	ldr	r2, [r7, #4]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d104      	bne.n	8013a74 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	68da      	ldr	r2, [r3, #12]
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	60da      	str	r2, [r3, #12]
        break;
 8013a72:	e005      	b.n	8013a80 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	68db      	ldr	r3, [r3, #12]
 8013a78:	60fb      	str	r3, [r7, #12]
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d1eb      	bne.n	8013a58 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013a80:	6879      	ldr	r1, [r7, #4]
 8013a82:	2000      	movs	r0, #0
 8013a84:	f7f9 f834 	bl	800caf0 <memp_free>
}
 8013a88:	3710      	adds	r7, #16
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}
 8013a8e:	bf00      	nop
 8013a90:	080179b8 	.word	0x080179b8
 8013a94:	08017d3c 	.word	0x08017d3c
 8013a98:	08017a44 	.word	0x08017a44
 8013a9c:	240082bc 	.word	0x240082bc

08013aa0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b082      	sub	sp, #8
 8013aa4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013aa6:	2000      	movs	r0, #0
 8013aa8:	f7f8 ffb2 	bl	800ca10 <memp_malloc>
 8013aac:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d007      	beq.n	8013ac4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013ab4:	2220      	movs	r2, #32
 8013ab6:	2100      	movs	r1, #0
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f000 f87b 	bl	8013bb4 <memset>
    pcb->ttl = UDP_TTL;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	22ff      	movs	r2, #255	; 0xff
 8013ac2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013ac4:	687b      	ldr	r3, [r7, #4]
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3708      	adds	r7, #8
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}
	...

08013ad0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013ad0:	b480      	push	{r7}
 8013ad2:	b085      	sub	sp, #20
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
 8013ad8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d01e      	beq.n	8013b1e <udp_netif_ip_addr_changed+0x4e>
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d01a      	beq.n	8013b1e <udp_netif_ip_addr_changed+0x4e>
 8013ae8:	683b      	ldr	r3, [r7, #0]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d017      	beq.n	8013b1e <udp_netif_ip_addr_changed+0x4e>
 8013aee:	683b      	ldr	r3, [r7, #0]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d013      	beq.n	8013b1e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013af6:	4b0d      	ldr	r3, [pc, #52]	; (8013b2c <udp_netif_ip_addr_changed+0x5c>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	60fb      	str	r3, [r7, #12]
 8013afc:	e00c      	b.n	8013b18 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	681a      	ldr	r2, [r3, #0]
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d103      	bne.n	8013b12 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	681a      	ldr	r2, [r3, #0]
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	68db      	ldr	r3, [r3, #12]
 8013b16:	60fb      	str	r3, [r7, #12]
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d1ef      	bne.n	8013afe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013b1e:	bf00      	nop
 8013b20:	3714      	adds	r7, #20
 8013b22:	46bd      	mov	sp, r7
 8013b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b28:	4770      	bx	lr
 8013b2a:	bf00      	nop
 8013b2c:	240082bc 	.word	0x240082bc

08013b30 <__libc_init_array>:
 8013b30:	b570      	push	{r4, r5, r6, lr}
 8013b32:	4d0d      	ldr	r5, [pc, #52]	; (8013b68 <__libc_init_array+0x38>)
 8013b34:	4c0d      	ldr	r4, [pc, #52]	; (8013b6c <__libc_init_array+0x3c>)
 8013b36:	1b64      	subs	r4, r4, r5
 8013b38:	10a4      	asrs	r4, r4, #2
 8013b3a:	2600      	movs	r6, #0
 8013b3c:	42a6      	cmp	r6, r4
 8013b3e:	d109      	bne.n	8013b54 <__libc_init_array+0x24>
 8013b40:	4d0b      	ldr	r5, [pc, #44]	; (8013b70 <__libc_init_array+0x40>)
 8013b42:	4c0c      	ldr	r4, [pc, #48]	; (8013b74 <__libc_init_array+0x44>)
 8013b44:	f001 f88e 	bl	8014c64 <_init>
 8013b48:	1b64      	subs	r4, r4, r5
 8013b4a:	10a4      	asrs	r4, r4, #2
 8013b4c:	2600      	movs	r6, #0
 8013b4e:	42a6      	cmp	r6, r4
 8013b50:	d105      	bne.n	8013b5e <__libc_init_array+0x2e>
 8013b52:	bd70      	pop	{r4, r5, r6, pc}
 8013b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b58:	4798      	blx	r3
 8013b5a:	3601      	adds	r6, #1
 8013b5c:	e7ee      	b.n	8013b3c <__libc_init_array+0xc>
 8013b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013b62:	4798      	blx	r3
 8013b64:	3601      	adds	r6, #1
 8013b66:	e7f2      	b.n	8013b4e <__libc_init_array+0x1e>
 8013b68:	08017fe0 	.word	0x08017fe0
 8013b6c:	08017fe0 	.word	0x08017fe0
 8013b70:	08017fe0 	.word	0x08017fe0
 8013b74:	08017fe4 	.word	0x08017fe4

08013b78 <memcmp>:
 8013b78:	b510      	push	{r4, lr}
 8013b7a:	3901      	subs	r1, #1
 8013b7c:	4402      	add	r2, r0
 8013b7e:	4290      	cmp	r0, r2
 8013b80:	d101      	bne.n	8013b86 <memcmp+0xe>
 8013b82:	2000      	movs	r0, #0
 8013b84:	e005      	b.n	8013b92 <memcmp+0x1a>
 8013b86:	7803      	ldrb	r3, [r0, #0]
 8013b88:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013b8c:	42a3      	cmp	r3, r4
 8013b8e:	d001      	beq.n	8013b94 <memcmp+0x1c>
 8013b90:	1b18      	subs	r0, r3, r4
 8013b92:	bd10      	pop	{r4, pc}
 8013b94:	3001      	adds	r0, #1
 8013b96:	e7f2      	b.n	8013b7e <memcmp+0x6>

08013b98 <memcpy>:
 8013b98:	440a      	add	r2, r1
 8013b9a:	4291      	cmp	r1, r2
 8013b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013ba0:	d100      	bne.n	8013ba4 <memcpy+0xc>
 8013ba2:	4770      	bx	lr
 8013ba4:	b510      	push	{r4, lr}
 8013ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013baa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013bae:	4291      	cmp	r1, r2
 8013bb0:	d1f9      	bne.n	8013ba6 <memcpy+0xe>
 8013bb2:	bd10      	pop	{r4, pc}

08013bb4 <memset>:
 8013bb4:	4402      	add	r2, r0
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	4293      	cmp	r3, r2
 8013bba:	d100      	bne.n	8013bbe <memset+0xa>
 8013bbc:	4770      	bx	lr
 8013bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8013bc2:	e7f9      	b.n	8013bb8 <memset+0x4>

08013bc4 <iprintf>:
 8013bc4:	b40f      	push	{r0, r1, r2, r3}
 8013bc6:	4b0a      	ldr	r3, [pc, #40]	; (8013bf0 <iprintf+0x2c>)
 8013bc8:	b513      	push	{r0, r1, r4, lr}
 8013bca:	681c      	ldr	r4, [r3, #0]
 8013bcc:	b124      	cbz	r4, 8013bd8 <iprintf+0x14>
 8013bce:	69a3      	ldr	r3, [r4, #24]
 8013bd0:	b913      	cbnz	r3, 8013bd8 <iprintf+0x14>
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	f000 f8c2 	bl	8013d5c <__sinit>
 8013bd8:	ab05      	add	r3, sp, #20
 8013bda:	9a04      	ldr	r2, [sp, #16]
 8013bdc:	68a1      	ldr	r1, [r4, #8]
 8013bde:	9301      	str	r3, [sp, #4]
 8013be0:	4620      	mov	r0, r4
 8013be2:	f000 fa7f 	bl	80140e4 <_vfiprintf_r>
 8013be6:	b002      	add	sp, #8
 8013be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bec:	b004      	add	sp, #16
 8013bee:	4770      	bx	lr
 8013bf0:	24000034 	.word	0x24000034

08013bf4 <rand>:
 8013bf4:	4b16      	ldr	r3, [pc, #88]	; (8013c50 <rand+0x5c>)
 8013bf6:	b510      	push	{r4, lr}
 8013bf8:	681c      	ldr	r4, [r3, #0]
 8013bfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013bfc:	b9b3      	cbnz	r3, 8013c2c <rand+0x38>
 8013bfe:	2018      	movs	r0, #24
 8013c00:	f000 f95e 	bl	8013ec0 <malloc>
 8013c04:	63a0      	str	r0, [r4, #56]	; 0x38
 8013c06:	b928      	cbnz	r0, 8013c14 <rand+0x20>
 8013c08:	4602      	mov	r2, r0
 8013c0a:	4b12      	ldr	r3, [pc, #72]	; (8013c54 <rand+0x60>)
 8013c0c:	4812      	ldr	r0, [pc, #72]	; (8013c58 <rand+0x64>)
 8013c0e:	214e      	movs	r1, #78	; 0x4e
 8013c10:	f000 f82e 	bl	8013c70 <__assert_func>
 8013c14:	4a11      	ldr	r2, [pc, #68]	; (8013c5c <rand+0x68>)
 8013c16:	4b12      	ldr	r3, [pc, #72]	; (8013c60 <rand+0x6c>)
 8013c18:	e9c0 2300 	strd	r2, r3, [r0]
 8013c1c:	4b11      	ldr	r3, [pc, #68]	; (8013c64 <rand+0x70>)
 8013c1e:	6083      	str	r3, [r0, #8]
 8013c20:	230b      	movs	r3, #11
 8013c22:	8183      	strh	r3, [r0, #12]
 8013c24:	2201      	movs	r2, #1
 8013c26:	2300      	movs	r3, #0
 8013c28:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013c2c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013c2e:	4a0e      	ldr	r2, [pc, #56]	; (8013c68 <rand+0x74>)
 8013c30:	6920      	ldr	r0, [r4, #16]
 8013c32:	6963      	ldr	r3, [r4, #20]
 8013c34:	490d      	ldr	r1, [pc, #52]	; (8013c6c <rand+0x78>)
 8013c36:	4342      	muls	r2, r0
 8013c38:	fb01 2203 	mla	r2, r1, r3, r2
 8013c3c:	fba0 0101 	umull	r0, r1, r0, r1
 8013c40:	1c43      	adds	r3, r0, #1
 8013c42:	eb42 0001 	adc.w	r0, r2, r1
 8013c46:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013c4a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013c4e:	bd10      	pop	{r4, pc}
 8013c50:	24000034 	.word	0x24000034
 8013c54:	08017e94 	.word	0x08017e94
 8013c58:	08017eab 	.word	0x08017eab
 8013c5c:	abcd330e 	.word	0xabcd330e
 8013c60:	e66d1234 	.word	0xe66d1234
 8013c64:	0005deec 	.word	0x0005deec
 8013c68:	5851f42d 	.word	0x5851f42d
 8013c6c:	4c957f2d 	.word	0x4c957f2d

08013c70 <__assert_func>:
 8013c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c72:	4614      	mov	r4, r2
 8013c74:	461a      	mov	r2, r3
 8013c76:	4b09      	ldr	r3, [pc, #36]	; (8013c9c <__assert_func+0x2c>)
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	4605      	mov	r5, r0
 8013c7c:	68d8      	ldr	r0, [r3, #12]
 8013c7e:	b14c      	cbz	r4, 8013c94 <__assert_func+0x24>
 8013c80:	4b07      	ldr	r3, [pc, #28]	; (8013ca0 <__assert_func+0x30>)
 8013c82:	9100      	str	r1, [sp, #0]
 8013c84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013c88:	4906      	ldr	r1, [pc, #24]	; (8013ca4 <__assert_func+0x34>)
 8013c8a:	462b      	mov	r3, r5
 8013c8c:	f000 f8e4 	bl	8013e58 <fiprintf>
 8013c90:	f000 fe12 	bl	80148b8 <abort>
 8013c94:	4b04      	ldr	r3, [pc, #16]	; (8013ca8 <__assert_func+0x38>)
 8013c96:	461c      	mov	r4, r3
 8013c98:	e7f3      	b.n	8013c82 <__assert_func+0x12>
 8013c9a:	bf00      	nop
 8013c9c:	24000034 	.word	0x24000034
 8013ca0:	08017f06 	.word	0x08017f06
 8013ca4:	08017f13 	.word	0x08017f13
 8013ca8:	08017f41 	.word	0x08017f41

08013cac <std>:
 8013cac:	2300      	movs	r3, #0
 8013cae:	b510      	push	{r4, lr}
 8013cb0:	4604      	mov	r4, r0
 8013cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8013cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013cba:	6083      	str	r3, [r0, #8]
 8013cbc:	8181      	strh	r1, [r0, #12]
 8013cbe:	6643      	str	r3, [r0, #100]	; 0x64
 8013cc0:	81c2      	strh	r2, [r0, #14]
 8013cc2:	6183      	str	r3, [r0, #24]
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	2208      	movs	r2, #8
 8013cc8:	305c      	adds	r0, #92	; 0x5c
 8013cca:	f7ff ff73 	bl	8013bb4 <memset>
 8013cce:	4b05      	ldr	r3, [pc, #20]	; (8013ce4 <std+0x38>)
 8013cd0:	6263      	str	r3, [r4, #36]	; 0x24
 8013cd2:	4b05      	ldr	r3, [pc, #20]	; (8013ce8 <std+0x3c>)
 8013cd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8013cd6:	4b05      	ldr	r3, [pc, #20]	; (8013cec <std+0x40>)
 8013cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013cda:	4b05      	ldr	r3, [pc, #20]	; (8013cf0 <std+0x44>)
 8013cdc:	6224      	str	r4, [r4, #32]
 8013cde:	6323      	str	r3, [r4, #48]	; 0x30
 8013ce0:	bd10      	pop	{r4, pc}
 8013ce2:	bf00      	nop
 8013ce4:	0801468d 	.word	0x0801468d
 8013ce8:	080146af 	.word	0x080146af
 8013cec:	080146e7 	.word	0x080146e7
 8013cf0:	0801470b 	.word	0x0801470b

08013cf4 <_cleanup_r>:
 8013cf4:	4901      	ldr	r1, [pc, #4]	; (8013cfc <_cleanup_r+0x8>)
 8013cf6:	f000 b8c1 	b.w	8013e7c <_fwalk_reent>
 8013cfa:	bf00      	nop
 8013cfc:	080149f5 	.word	0x080149f5

08013d00 <__sfmoreglue>:
 8013d00:	b570      	push	{r4, r5, r6, lr}
 8013d02:	2268      	movs	r2, #104	; 0x68
 8013d04:	1e4d      	subs	r5, r1, #1
 8013d06:	4355      	muls	r5, r2
 8013d08:	460e      	mov	r6, r1
 8013d0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013d0e:	f000 f94b 	bl	8013fa8 <_malloc_r>
 8013d12:	4604      	mov	r4, r0
 8013d14:	b140      	cbz	r0, 8013d28 <__sfmoreglue+0x28>
 8013d16:	2100      	movs	r1, #0
 8013d18:	e9c0 1600 	strd	r1, r6, [r0]
 8013d1c:	300c      	adds	r0, #12
 8013d1e:	60a0      	str	r0, [r4, #8]
 8013d20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013d24:	f7ff ff46 	bl	8013bb4 <memset>
 8013d28:	4620      	mov	r0, r4
 8013d2a:	bd70      	pop	{r4, r5, r6, pc}

08013d2c <__sfp_lock_acquire>:
 8013d2c:	4801      	ldr	r0, [pc, #4]	; (8013d34 <__sfp_lock_acquire+0x8>)
 8013d2e:	f000 b8c5 	b.w	8013ebc <__retarget_lock_acquire_recursive>
 8013d32:	bf00      	nop
 8013d34:	240082c5 	.word	0x240082c5

08013d38 <__sfp_lock_release>:
 8013d38:	4801      	ldr	r0, [pc, #4]	; (8013d40 <__sfp_lock_release+0x8>)
 8013d3a:	f000 b8c0 	b.w	8013ebe <__retarget_lock_release_recursive>
 8013d3e:	bf00      	nop
 8013d40:	240082c5 	.word	0x240082c5

08013d44 <__sinit_lock_acquire>:
 8013d44:	4801      	ldr	r0, [pc, #4]	; (8013d4c <__sinit_lock_acquire+0x8>)
 8013d46:	f000 b8b9 	b.w	8013ebc <__retarget_lock_acquire_recursive>
 8013d4a:	bf00      	nop
 8013d4c:	240082c6 	.word	0x240082c6

08013d50 <__sinit_lock_release>:
 8013d50:	4801      	ldr	r0, [pc, #4]	; (8013d58 <__sinit_lock_release+0x8>)
 8013d52:	f000 b8b4 	b.w	8013ebe <__retarget_lock_release_recursive>
 8013d56:	bf00      	nop
 8013d58:	240082c6 	.word	0x240082c6

08013d5c <__sinit>:
 8013d5c:	b510      	push	{r4, lr}
 8013d5e:	4604      	mov	r4, r0
 8013d60:	f7ff fff0 	bl	8013d44 <__sinit_lock_acquire>
 8013d64:	69a3      	ldr	r3, [r4, #24]
 8013d66:	b11b      	cbz	r3, 8013d70 <__sinit+0x14>
 8013d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d6c:	f7ff bff0 	b.w	8013d50 <__sinit_lock_release>
 8013d70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013d74:	6523      	str	r3, [r4, #80]	; 0x50
 8013d76:	4b13      	ldr	r3, [pc, #76]	; (8013dc4 <__sinit+0x68>)
 8013d78:	4a13      	ldr	r2, [pc, #76]	; (8013dc8 <__sinit+0x6c>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8013d7e:	42a3      	cmp	r3, r4
 8013d80:	bf04      	itt	eq
 8013d82:	2301      	moveq	r3, #1
 8013d84:	61a3      	streq	r3, [r4, #24]
 8013d86:	4620      	mov	r0, r4
 8013d88:	f000 f820 	bl	8013dcc <__sfp>
 8013d8c:	6060      	str	r0, [r4, #4]
 8013d8e:	4620      	mov	r0, r4
 8013d90:	f000 f81c 	bl	8013dcc <__sfp>
 8013d94:	60a0      	str	r0, [r4, #8]
 8013d96:	4620      	mov	r0, r4
 8013d98:	f000 f818 	bl	8013dcc <__sfp>
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	60e0      	str	r0, [r4, #12]
 8013da0:	2104      	movs	r1, #4
 8013da2:	6860      	ldr	r0, [r4, #4]
 8013da4:	f7ff ff82 	bl	8013cac <std>
 8013da8:	68a0      	ldr	r0, [r4, #8]
 8013daa:	2201      	movs	r2, #1
 8013dac:	2109      	movs	r1, #9
 8013dae:	f7ff ff7d 	bl	8013cac <std>
 8013db2:	68e0      	ldr	r0, [r4, #12]
 8013db4:	2202      	movs	r2, #2
 8013db6:	2112      	movs	r1, #18
 8013db8:	f7ff ff78 	bl	8013cac <std>
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	61a3      	str	r3, [r4, #24]
 8013dc0:	e7d2      	b.n	8013d68 <__sinit+0xc>
 8013dc2:	bf00      	nop
 8013dc4:	08017e90 	.word	0x08017e90
 8013dc8:	08013cf5 	.word	0x08013cf5

08013dcc <__sfp>:
 8013dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dce:	4607      	mov	r7, r0
 8013dd0:	f7ff ffac 	bl	8013d2c <__sfp_lock_acquire>
 8013dd4:	4b1e      	ldr	r3, [pc, #120]	; (8013e50 <__sfp+0x84>)
 8013dd6:	681e      	ldr	r6, [r3, #0]
 8013dd8:	69b3      	ldr	r3, [r6, #24]
 8013dda:	b913      	cbnz	r3, 8013de2 <__sfp+0x16>
 8013ddc:	4630      	mov	r0, r6
 8013dde:	f7ff ffbd 	bl	8013d5c <__sinit>
 8013de2:	3648      	adds	r6, #72	; 0x48
 8013de4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013de8:	3b01      	subs	r3, #1
 8013dea:	d503      	bpl.n	8013df4 <__sfp+0x28>
 8013dec:	6833      	ldr	r3, [r6, #0]
 8013dee:	b30b      	cbz	r3, 8013e34 <__sfp+0x68>
 8013df0:	6836      	ldr	r6, [r6, #0]
 8013df2:	e7f7      	b.n	8013de4 <__sfp+0x18>
 8013df4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013df8:	b9d5      	cbnz	r5, 8013e30 <__sfp+0x64>
 8013dfa:	4b16      	ldr	r3, [pc, #88]	; (8013e54 <__sfp+0x88>)
 8013dfc:	60e3      	str	r3, [r4, #12]
 8013dfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013e02:	6665      	str	r5, [r4, #100]	; 0x64
 8013e04:	f000 f859 	bl	8013eba <__retarget_lock_init_recursive>
 8013e08:	f7ff ff96 	bl	8013d38 <__sfp_lock_release>
 8013e0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013e10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013e14:	6025      	str	r5, [r4, #0]
 8013e16:	61a5      	str	r5, [r4, #24]
 8013e18:	2208      	movs	r2, #8
 8013e1a:	4629      	mov	r1, r5
 8013e1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013e20:	f7ff fec8 	bl	8013bb4 <memset>
 8013e24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013e28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013e2c:	4620      	mov	r0, r4
 8013e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e30:	3468      	adds	r4, #104	; 0x68
 8013e32:	e7d9      	b.n	8013de8 <__sfp+0x1c>
 8013e34:	2104      	movs	r1, #4
 8013e36:	4638      	mov	r0, r7
 8013e38:	f7ff ff62 	bl	8013d00 <__sfmoreglue>
 8013e3c:	4604      	mov	r4, r0
 8013e3e:	6030      	str	r0, [r6, #0]
 8013e40:	2800      	cmp	r0, #0
 8013e42:	d1d5      	bne.n	8013df0 <__sfp+0x24>
 8013e44:	f7ff ff78 	bl	8013d38 <__sfp_lock_release>
 8013e48:	230c      	movs	r3, #12
 8013e4a:	603b      	str	r3, [r7, #0]
 8013e4c:	e7ee      	b.n	8013e2c <__sfp+0x60>
 8013e4e:	bf00      	nop
 8013e50:	08017e90 	.word	0x08017e90
 8013e54:	ffff0001 	.word	0xffff0001

08013e58 <fiprintf>:
 8013e58:	b40e      	push	{r1, r2, r3}
 8013e5a:	b503      	push	{r0, r1, lr}
 8013e5c:	4601      	mov	r1, r0
 8013e5e:	ab03      	add	r3, sp, #12
 8013e60:	4805      	ldr	r0, [pc, #20]	; (8013e78 <fiprintf+0x20>)
 8013e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e66:	6800      	ldr	r0, [r0, #0]
 8013e68:	9301      	str	r3, [sp, #4]
 8013e6a:	f000 f93b 	bl	80140e4 <_vfiprintf_r>
 8013e6e:	b002      	add	sp, #8
 8013e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e74:	b003      	add	sp, #12
 8013e76:	4770      	bx	lr
 8013e78:	24000034 	.word	0x24000034

08013e7c <_fwalk_reent>:
 8013e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e80:	4606      	mov	r6, r0
 8013e82:	4688      	mov	r8, r1
 8013e84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013e88:	2700      	movs	r7, #0
 8013e8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e8e:	f1b9 0901 	subs.w	r9, r9, #1
 8013e92:	d505      	bpl.n	8013ea0 <_fwalk_reent+0x24>
 8013e94:	6824      	ldr	r4, [r4, #0]
 8013e96:	2c00      	cmp	r4, #0
 8013e98:	d1f7      	bne.n	8013e8a <_fwalk_reent+0xe>
 8013e9a:	4638      	mov	r0, r7
 8013e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ea0:	89ab      	ldrh	r3, [r5, #12]
 8013ea2:	2b01      	cmp	r3, #1
 8013ea4:	d907      	bls.n	8013eb6 <_fwalk_reent+0x3a>
 8013ea6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013eaa:	3301      	adds	r3, #1
 8013eac:	d003      	beq.n	8013eb6 <_fwalk_reent+0x3a>
 8013eae:	4629      	mov	r1, r5
 8013eb0:	4630      	mov	r0, r6
 8013eb2:	47c0      	blx	r8
 8013eb4:	4307      	orrs	r7, r0
 8013eb6:	3568      	adds	r5, #104	; 0x68
 8013eb8:	e7e9      	b.n	8013e8e <_fwalk_reent+0x12>

08013eba <__retarget_lock_init_recursive>:
 8013eba:	4770      	bx	lr

08013ebc <__retarget_lock_acquire_recursive>:
 8013ebc:	4770      	bx	lr

08013ebe <__retarget_lock_release_recursive>:
 8013ebe:	4770      	bx	lr

08013ec0 <malloc>:
 8013ec0:	4b02      	ldr	r3, [pc, #8]	; (8013ecc <malloc+0xc>)
 8013ec2:	4601      	mov	r1, r0
 8013ec4:	6818      	ldr	r0, [r3, #0]
 8013ec6:	f000 b86f 	b.w	8013fa8 <_malloc_r>
 8013eca:	bf00      	nop
 8013ecc:	24000034 	.word	0x24000034

08013ed0 <_free_r>:
 8013ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ed2:	2900      	cmp	r1, #0
 8013ed4:	d044      	beq.n	8013f60 <_free_r+0x90>
 8013ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013eda:	9001      	str	r0, [sp, #4]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	f1a1 0404 	sub.w	r4, r1, #4
 8013ee2:	bfb8      	it	lt
 8013ee4:	18e4      	addlt	r4, r4, r3
 8013ee6:	f000 fe39 	bl	8014b5c <__malloc_lock>
 8013eea:	4a1e      	ldr	r2, [pc, #120]	; (8013f64 <_free_r+0x94>)
 8013eec:	9801      	ldr	r0, [sp, #4]
 8013eee:	6813      	ldr	r3, [r2, #0]
 8013ef0:	b933      	cbnz	r3, 8013f00 <_free_r+0x30>
 8013ef2:	6063      	str	r3, [r4, #4]
 8013ef4:	6014      	str	r4, [r2, #0]
 8013ef6:	b003      	add	sp, #12
 8013ef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013efc:	f000 be34 	b.w	8014b68 <__malloc_unlock>
 8013f00:	42a3      	cmp	r3, r4
 8013f02:	d908      	bls.n	8013f16 <_free_r+0x46>
 8013f04:	6825      	ldr	r5, [r4, #0]
 8013f06:	1961      	adds	r1, r4, r5
 8013f08:	428b      	cmp	r3, r1
 8013f0a:	bf01      	itttt	eq
 8013f0c:	6819      	ldreq	r1, [r3, #0]
 8013f0e:	685b      	ldreq	r3, [r3, #4]
 8013f10:	1949      	addeq	r1, r1, r5
 8013f12:	6021      	streq	r1, [r4, #0]
 8013f14:	e7ed      	b.n	8013ef2 <_free_r+0x22>
 8013f16:	461a      	mov	r2, r3
 8013f18:	685b      	ldr	r3, [r3, #4]
 8013f1a:	b10b      	cbz	r3, 8013f20 <_free_r+0x50>
 8013f1c:	42a3      	cmp	r3, r4
 8013f1e:	d9fa      	bls.n	8013f16 <_free_r+0x46>
 8013f20:	6811      	ldr	r1, [r2, #0]
 8013f22:	1855      	adds	r5, r2, r1
 8013f24:	42a5      	cmp	r5, r4
 8013f26:	d10b      	bne.n	8013f40 <_free_r+0x70>
 8013f28:	6824      	ldr	r4, [r4, #0]
 8013f2a:	4421      	add	r1, r4
 8013f2c:	1854      	adds	r4, r2, r1
 8013f2e:	42a3      	cmp	r3, r4
 8013f30:	6011      	str	r1, [r2, #0]
 8013f32:	d1e0      	bne.n	8013ef6 <_free_r+0x26>
 8013f34:	681c      	ldr	r4, [r3, #0]
 8013f36:	685b      	ldr	r3, [r3, #4]
 8013f38:	6053      	str	r3, [r2, #4]
 8013f3a:	4421      	add	r1, r4
 8013f3c:	6011      	str	r1, [r2, #0]
 8013f3e:	e7da      	b.n	8013ef6 <_free_r+0x26>
 8013f40:	d902      	bls.n	8013f48 <_free_r+0x78>
 8013f42:	230c      	movs	r3, #12
 8013f44:	6003      	str	r3, [r0, #0]
 8013f46:	e7d6      	b.n	8013ef6 <_free_r+0x26>
 8013f48:	6825      	ldr	r5, [r4, #0]
 8013f4a:	1961      	adds	r1, r4, r5
 8013f4c:	428b      	cmp	r3, r1
 8013f4e:	bf04      	itt	eq
 8013f50:	6819      	ldreq	r1, [r3, #0]
 8013f52:	685b      	ldreq	r3, [r3, #4]
 8013f54:	6063      	str	r3, [r4, #4]
 8013f56:	bf04      	itt	eq
 8013f58:	1949      	addeq	r1, r1, r5
 8013f5a:	6021      	streq	r1, [r4, #0]
 8013f5c:	6054      	str	r4, [r2, #4]
 8013f5e:	e7ca      	b.n	8013ef6 <_free_r+0x26>
 8013f60:	b003      	add	sp, #12
 8013f62:	bd30      	pop	{r4, r5, pc}
 8013f64:	240082c8 	.word	0x240082c8

08013f68 <sbrk_aligned>:
 8013f68:	b570      	push	{r4, r5, r6, lr}
 8013f6a:	4e0e      	ldr	r6, [pc, #56]	; (8013fa4 <sbrk_aligned+0x3c>)
 8013f6c:	460c      	mov	r4, r1
 8013f6e:	6831      	ldr	r1, [r6, #0]
 8013f70:	4605      	mov	r5, r0
 8013f72:	b911      	cbnz	r1, 8013f7a <sbrk_aligned+0x12>
 8013f74:	f000 fb7a 	bl	801466c <_sbrk_r>
 8013f78:	6030      	str	r0, [r6, #0]
 8013f7a:	4621      	mov	r1, r4
 8013f7c:	4628      	mov	r0, r5
 8013f7e:	f000 fb75 	bl	801466c <_sbrk_r>
 8013f82:	1c43      	adds	r3, r0, #1
 8013f84:	d00a      	beq.n	8013f9c <sbrk_aligned+0x34>
 8013f86:	1cc4      	adds	r4, r0, #3
 8013f88:	f024 0403 	bic.w	r4, r4, #3
 8013f8c:	42a0      	cmp	r0, r4
 8013f8e:	d007      	beq.n	8013fa0 <sbrk_aligned+0x38>
 8013f90:	1a21      	subs	r1, r4, r0
 8013f92:	4628      	mov	r0, r5
 8013f94:	f000 fb6a 	bl	801466c <_sbrk_r>
 8013f98:	3001      	adds	r0, #1
 8013f9a:	d101      	bne.n	8013fa0 <sbrk_aligned+0x38>
 8013f9c:	f04f 34ff 	mov.w	r4, #4294967295
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	bd70      	pop	{r4, r5, r6, pc}
 8013fa4:	240082cc 	.word	0x240082cc

08013fa8 <_malloc_r>:
 8013fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fac:	1ccd      	adds	r5, r1, #3
 8013fae:	f025 0503 	bic.w	r5, r5, #3
 8013fb2:	3508      	adds	r5, #8
 8013fb4:	2d0c      	cmp	r5, #12
 8013fb6:	bf38      	it	cc
 8013fb8:	250c      	movcc	r5, #12
 8013fba:	2d00      	cmp	r5, #0
 8013fbc:	4607      	mov	r7, r0
 8013fbe:	db01      	blt.n	8013fc4 <_malloc_r+0x1c>
 8013fc0:	42a9      	cmp	r1, r5
 8013fc2:	d905      	bls.n	8013fd0 <_malloc_r+0x28>
 8013fc4:	230c      	movs	r3, #12
 8013fc6:	603b      	str	r3, [r7, #0]
 8013fc8:	2600      	movs	r6, #0
 8013fca:	4630      	mov	r0, r6
 8013fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fd0:	4e2e      	ldr	r6, [pc, #184]	; (801408c <_malloc_r+0xe4>)
 8013fd2:	f000 fdc3 	bl	8014b5c <__malloc_lock>
 8013fd6:	6833      	ldr	r3, [r6, #0]
 8013fd8:	461c      	mov	r4, r3
 8013fda:	bb34      	cbnz	r4, 801402a <_malloc_r+0x82>
 8013fdc:	4629      	mov	r1, r5
 8013fde:	4638      	mov	r0, r7
 8013fe0:	f7ff ffc2 	bl	8013f68 <sbrk_aligned>
 8013fe4:	1c43      	adds	r3, r0, #1
 8013fe6:	4604      	mov	r4, r0
 8013fe8:	d14d      	bne.n	8014086 <_malloc_r+0xde>
 8013fea:	6834      	ldr	r4, [r6, #0]
 8013fec:	4626      	mov	r6, r4
 8013fee:	2e00      	cmp	r6, #0
 8013ff0:	d140      	bne.n	8014074 <_malloc_r+0xcc>
 8013ff2:	6823      	ldr	r3, [r4, #0]
 8013ff4:	4631      	mov	r1, r6
 8013ff6:	4638      	mov	r0, r7
 8013ff8:	eb04 0803 	add.w	r8, r4, r3
 8013ffc:	f000 fb36 	bl	801466c <_sbrk_r>
 8014000:	4580      	cmp	r8, r0
 8014002:	d13a      	bne.n	801407a <_malloc_r+0xd2>
 8014004:	6821      	ldr	r1, [r4, #0]
 8014006:	3503      	adds	r5, #3
 8014008:	1a6d      	subs	r5, r5, r1
 801400a:	f025 0503 	bic.w	r5, r5, #3
 801400e:	3508      	adds	r5, #8
 8014010:	2d0c      	cmp	r5, #12
 8014012:	bf38      	it	cc
 8014014:	250c      	movcc	r5, #12
 8014016:	4629      	mov	r1, r5
 8014018:	4638      	mov	r0, r7
 801401a:	f7ff ffa5 	bl	8013f68 <sbrk_aligned>
 801401e:	3001      	adds	r0, #1
 8014020:	d02b      	beq.n	801407a <_malloc_r+0xd2>
 8014022:	6823      	ldr	r3, [r4, #0]
 8014024:	442b      	add	r3, r5
 8014026:	6023      	str	r3, [r4, #0]
 8014028:	e00e      	b.n	8014048 <_malloc_r+0xa0>
 801402a:	6822      	ldr	r2, [r4, #0]
 801402c:	1b52      	subs	r2, r2, r5
 801402e:	d41e      	bmi.n	801406e <_malloc_r+0xc6>
 8014030:	2a0b      	cmp	r2, #11
 8014032:	d916      	bls.n	8014062 <_malloc_r+0xba>
 8014034:	1961      	adds	r1, r4, r5
 8014036:	42a3      	cmp	r3, r4
 8014038:	6025      	str	r5, [r4, #0]
 801403a:	bf18      	it	ne
 801403c:	6059      	strne	r1, [r3, #4]
 801403e:	6863      	ldr	r3, [r4, #4]
 8014040:	bf08      	it	eq
 8014042:	6031      	streq	r1, [r6, #0]
 8014044:	5162      	str	r2, [r4, r5]
 8014046:	604b      	str	r3, [r1, #4]
 8014048:	4638      	mov	r0, r7
 801404a:	f104 060b 	add.w	r6, r4, #11
 801404e:	f000 fd8b 	bl	8014b68 <__malloc_unlock>
 8014052:	f026 0607 	bic.w	r6, r6, #7
 8014056:	1d23      	adds	r3, r4, #4
 8014058:	1af2      	subs	r2, r6, r3
 801405a:	d0b6      	beq.n	8013fca <_malloc_r+0x22>
 801405c:	1b9b      	subs	r3, r3, r6
 801405e:	50a3      	str	r3, [r4, r2]
 8014060:	e7b3      	b.n	8013fca <_malloc_r+0x22>
 8014062:	6862      	ldr	r2, [r4, #4]
 8014064:	42a3      	cmp	r3, r4
 8014066:	bf0c      	ite	eq
 8014068:	6032      	streq	r2, [r6, #0]
 801406a:	605a      	strne	r2, [r3, #4]
 801406c:	e7ec      	b.n	8014048 <_malloc_r+0xa0>
 801406e:	4623      	mov	r3, r4
 8014070:	6864      	ldr	r4, [r4, #4]
 8014072:	e7b2      	b.n	8013fda <_malloc_r+0x32>
 8014074:	4634      	mov	r4, r6
 8014076:	6876      	ldr	r6, [r6, #4]
 8014078:	e7b9      	b.n	8013fee <_malloc_r+0x46>
 801407a:	230c      	movs	r3, #12
 801407c:	603b      	str	r3, [r7, #0]
 801407e:	4638      	mov	r0, r7
 8014080:	f000 fd72 	bl	8014b68 <__malloc_unlock>
 8014084:	e7a1      	b.n	8013fca <_malloc_r+0x22>
 8014086:	6025      	str	r5, [r4, #0]
 8014088:	e7de      	b.n	8014048 <_malloc_r+0xa0>
 801408a:	bf00      	nop
 801408c:	240082c8 	.word	0x240082c8

08014090 <__sfputc_r>:
 8014090:	6893      	ldr	r3, [r2, #8]
 8014092:	3b01      	subs	r3, #1
 8014094:	2b00      	cmp	r3, #0
 8014096:	b410      	push	{r4}
 8014098:	6093      	str	r3, [r2, #8]
 801409a:	da08      	bge.n	80140ae <__sfputc_r+0x1e>
 801409c:	6994      	ldr	r4, [r2, #24]
 801409e:	42a3      	cmp	r3, r4
 80140a0:	db01      	blt.n	80140a6 <__sfputc_r+0x16>
 80140a2:	290a      	cmp	r1, #10
 80140a4:	d103      	bne.n	80140ae <__sfputc_r+0x1e>
 80140a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140aa:	f000 bb33 	b.w	8014714 <__swbuf_r>
 80140ae:	6813      	ldr	r3, [r2, #0]
 80140b0:	1c58      	adds	r0, r3, #1
 80140b2:	6010      	str	r0, [r2, #0]
 80140b4:	7019      	strb	r1, [r3, #0]
 80140b6:	4608      	mov	r0, r1
 80140b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140bc:	4770      	bx	lr

080140be <__sfputs_r>:
 80140be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140c0:	4606      	mov	r6, r0
 80140c2:	460f      	mov	r7, r1
 80140c4:	4614      	mov	r4, r2
 80140c6:	18d5      	adds	r5, r2, r3
 80140c8:	42ac      	cmp	r4, r5
 80140ca:	d101      	bne.n	80140d0 <__sfputs_r+0x12>
 80140cc:	2000      	movs	r0, #0
 80140ce:	e007      	b.n	80140e0 <__sfputs_r+0x22>
 80140d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140d4:	463a      	mov	r2, r7
 80140d6:	4630      	mov	r0, r6
 80140d8:	f7ff ffda 	bl	8014090 <__sfputc_r>
 80140dc:	1c43      	adds	r3, r0, #1
 80140de:	d1f3      	bne.n	80140c8 <__sfputs_r+0xa>
 80140e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080140e4 <_vfiprintf_r>:
 80140e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140e8:	460d      	mov	r5, r1
 80140ea:	b09d      	sub	sp, #116	; 0x74
 80140ec:	4614      	mov	r4, r2
 80140ee:	4698      	mov	r8, r3
 80140f0:	4606      	mov	r6, r0
 80140f2:	b118      	cbz	r0, 80140fc <_vfiprintf_r+0x18>
 80140f4:	6983      	ldr	r3, [r0, #24]
 80140f6:	b90b      	cbnz	r3, 80140fc <_vfiprintf_r+0x18>
 80140f8:	f7ff fe30 	bl	8013d5c <__sinit>
 80140fc:	4b89      	ldr	r3, [pc, #548]	; (8014324 <_vfiprintf_r+0x240>)
 80140fe:	429d      	cmp	r5, r3
 8014100:	d11b      	bne.n	801413a <_vfiprintf_r+0x56>
 8014102:	6875      	ldr	r5, [r6, #4]
 8014104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014106:	07d9      	lsls	r1, r3, #31
 8014108:	d405      	bmi.n	8014116 <_vfiprintf_r+0x32>
 801410a:	89ab      	ldrh	r3, [r5, #12]
 801410c:	059a      	lsls	r2, r3, #22
 801410e:	d402      	bmi.n	8014116 <_vfiprintf_r+0x32>
 8014110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014112:	f7ff fed3 	bl	8013ebc <__retarget_lock_acquire_recursive>
 8014116:	89ab      	ldrh	r3, [r5, #12]
 8014118:	071b      	lsls	r3, r3, #28
 801411a:	d501      	bpl.n	8014120 <_vfiprintf_r+0x3c>
 801411c:	692b      	ldr	r3, [r5, #16]
 801411e:	b9eb      	cbnz	r3, 801415c <_vfiprintf_r+0x78>
 8014120:	4629      	mov	r1, r5
 8014122:	4630      	mov	r0, r6
 8014124:	f000 fb5a 	bl	80147dc <__swsetup_r>
 8014128:	b1c0      	cbz	r0, 801415c <_vfiprintf_r+0x78>
 801412a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801412c:	07dc      	lsls	r4, r3, #31
 801412e:	d50e      	bpl.n	801414e <_vfiprintf_r+0x6a>
 8014130:	f04f 30ff 	mov.w	r0, #4294967295
 8014134:	b01d      	add	sp, #116	; 0x74
 8014136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801413a:	4b7b      	ldr	r3, [pc, #492]	; (8014328 <_vfiprintf_r+0x244>)
 801413c:	429d      	cmp	r5, r3
 801413e:	d101      	bne.n	8014144 <_vfiprintf_r+0x60>
 8014140:	68b5      	ldr	r5, [r6, #8]
 8014142:	e7df      	b.n	8014104 <_vfiprintf_r+0x20>
 8014144:	4b79      	ldr	r3, [pc, #484]	; (801432c <_vfiprintf_r+0x248>)
 8014146:	429d      	cmp	r5, r3
 8014148:	bf08      	it	eq
 801414a:	68f5      	ldreq	r5, [r6, #12]
 801414c:	e7da      	b.n	8014104 <_vfiprintf_r+0x20>
 801414e:	89ab      	ldrh	r3, [r5, #12]
 8014150:	0598      	lsls	r0, r3, #22
 8014152:	d4ed      	bmi.n	8014130 <_vfiprintf_r+0x4c>
 8014154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014156:	f7ff feb2 	bl	8013ebe <__retarget_lock_release_recursive>
 801415a:	e7e9      	b.n	8014130 <_vfiprintf_r+0x4c>
 801415c:	2300      	movs	r3, #0
 801415e:	9309      	str	r3, [sp, #36]	; 0x24
 8014160:	2320      	movs	r3, #32
 8014162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014166:	f8cd 800c 	str.w	r8, [sp, #12]
 801416a:	2330      	movs	r3, #48	; 0x30
 801416c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014330 <_vfiprintf_r+0x24c>
 8014170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014174:	f04f 0901 	mov.w	r9, #1
 8014178:	4623      	mov	r3, r4
 801417a:	469a      	mov	sl, r3
 801417c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014180:	b10a      	cbz	r2, 8014186 <_vfiprintf_r+0xa2>
 8014182:	2a25      	cmp	r2, #37	; 0x25
 8014184:	d1f9      	bne.n	801417a <_vfiprintf_r+0x96>
 8014186:	ebba 0b04 	subs.w	fp, sl, r4
 801418a:	d00b      	beq.n	80141a4 <_vfiprintf_r+0xc0>
 801418c:	465b      	mov	r3, fp
 801418e:	4622      	mov	r2, r4
 8014190:	4629      	mov	r1, r5
 8014192:	4630      	mov	r0, r6
 8014194:	f7ff ff93 	bl	80140be <__sfputs_r>
 8014198:	3001      	adds	r0, #1
 801419a:	f000 80aa 	beq.w	80142f2 <_vfiprintf_r+0x20e>
 801419e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80141a0:	445a      	add	r2, fp
 80141a2:	9209      	str	r2, [sp, #36]	; 0x24
 80141a4:	f89a 3000 	ldrb.w	r3, [sl]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	f000 80a2 	beq.w	80142f2 <_vfiprintf_r+0x20e>
 80141ae:	2300      	movs	r3, #0
 80141b0:	f04f 32ff 	mov.w	r2, #4294967295
 80141b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141b8:	f10a 0a01 	add.w	sl, sl, #1
 80141bc:	9304      	str	r3, [sp, #16]
 80141be:	9307      	str	r3, [sp, #28]
 80141c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80141c4:	931a      	str	r3, [sp, #104]	; 0x68
 80141c6:	4654      	mov	r4, sl
 80141c8:	2205      	movs	r2, #5
 80141ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141ce:	4858      	ldr	r0, [pc, #352]	; (8014330 <_vfiprintf_r+0x24c>)
 80141d0:	f7ec f886 	bl	80002e0 <memchr>
 80141d4:	9a04      	ldr	r2, [sp, #16]
 80141d6:	b9d8      	cbnz	r0, 8014210 <_vfiprintf_r+0x12c>
 80141d8:	06d1      	lsls	r1, r2, #27
 80141da:	bf44      	itt	mi
 80141dc:	2320      	movmi	r3, #32
 80141de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80141e2:	0713      	lsls	r3, r2, #28
 80141e4:	bf44      	itt	mi
 80141e6:	232b      	movmi	r3, #43	; 0x2b
 80141e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80141ec:	f89a 3000 	ldrb.w	r3, [sl]
 80141f0:	2b2a      	cmp	r3, #42	; 0x2a
 80141f2:	d015      	beq.n	8014220 <_vfiprintf_r+0x13c>
 80141f4:	9a07      	ldr	r2, [sp, #28]
 80141f6:	4654      	mov	r4, sl
 80141f8:	2000      	movs	r0, #0
 80141fa:	f04f 0c0a 	mov.w	ip, #10
 80141fe:	4621      	mov	r1, r4
 8014200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014204:	3b30      	subs	r3, #48	; 0x30
 8014206:	2b09      	cmp	r3, #9
 8014208:	d94e      	bls.n	80142a8 <_vfiprintf_r+0x1c4>
 801420a:	b1b0      	cbz	r0, 801423a <_vfiprintf_r+0x156>
 801420c:	9207      	str	r2, [sp, #28]
 801420e:	e014      	b.n	801423a <_vfiprintf_r+0x156>
 8014210:	eba0 0308 	sub.w	r3, r0, r8
 8014214:	fa09 f303 	lsl.w	r3, r9, r3
 8014218:	4313      	orrs	r3, r2
 801421a:	9304      	str	r3, [sp, #16]
 801421c:	46a2      	mov	sl, r4
 801421e:	e7d2      	b.n	80141c6 <_vfiprintf_r+0xe2>
 8014220:	9b03      	ldr	r3, [sp, #12]
 8014222:	1d19      	adds	r1, r3, #4
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	9103      	str	r1, [sp, #12]
 8014228:	2b00      	cmp	r3, #0
 801422a:	bfbb      	ittet	lt
 801422c:	425b      	neglt	r3, r3
 801422e:	f042 0202 	orrlt.w	r2, r2, #2
 8014232:	9307      	strge	r3, [sp, #28]
 8014234:	9307      	strlt	r3, [sp, #28]
 8014236:	bfb8      	it	lt
 8014238:	9204      	strlt	r2, [sp, #16]
 801423a:	7823      	ldrb	r3, [r4, #0]
 801423c:	2b2e      	cmp	r3, #46	; 0x2e
 801423e:	d10c      	bne.n	801425a <_vfiprintf_r+0x176>
 8014240:	7863      	ldrb	r3, [r4, #1]
 8014242:	2b2a      	cmp	r3, #42	; 0x2a
 8014244:	d135      	bne.n	80142b2 <_vfiprintf_r+0x1ce>
 8014246:	9b03      	ldr	r3, [sp, #12]
 8014248:	1d1a      	adds	r2, r3, #4
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	9203      	str	r2, [sp, #12]
 801424e:	2b00      	cmp	r3, #0
 8014250:	bfb8      	it	lt
 8014252:	f04f 33ff 	movlt.w	r3, #4294967295
 8014256:	3402      	adds	r4, #2
 8014258:	9305      	str	r3, [sp, #20]
 801425a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014340 <_vfiprintf_r+0x25c>
 801425e:	7821      	ldrb	r1, [r4, #0]
 8014260:	2203      	movs	r2, #3
 8014262:	4650      	mov	r0, sl
 8014264:	f7ec f83c 	bl	80002e0 <memchr>
 8014268:	b140      	cbz	r0, 801427c <_vfiprintf_r+0x198>
 801426a:	2340      	movs	r3, #64	; 0x40
 801426c:	eba0 000a 	sub.w	r0, r0, sl
 8014270:	fa03 f000 	lsl.w	r0, r3, r0
 8014274:	9b04      	ldr	r3, [sp, #16]
 8014276:	4303      	orrs	r3, r0
 8014278:	3401      	adds	r4, #1
 801427a:	9304      	str	r3, [sp, #16]
 801427c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014280:	482c      	ldr	r0, [pc, #176]	; (8014334 <_vfiprintf_r+0x250>)
 8014282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014286:	2206      	movs	r2, #6
 8014288:	f7ec f82a 	bl	80002e0 <memchr>
 801428c:	2800      	cmp	r0, #0
 801428e:	d03f      	beq.n	8014310 <_vfiprintf_r+0x22c>
 8014290:	4b29      	ldr	r3, [pc, #164]	; (8014338 <_vfiprintf_r+0x254>)
 8014292:	bb1b      	cbnz	r3, 80142dc <_vfiprintf_r+0x1f8>
 8014294:	9b03      	ldr	r3, [sp, #12]
 8014296:	3307      	adds	r3, #7
 8014298:	f023 0307 	bic.w	r3, r3, #7
 801429c:	3308      	adds	r3, #8
 801429e:	9303      	str	r3, [sp, #12]
 80142a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142a2:	443b      	add	r3, r7
 80142a4:	9309      	str	r3, [sp, #36]	; 0x24
 80142a6:	e767      	b.n	8014178 <_vfiprintf_r+0x94>
 80142a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80142ac:	460c      	mov	r4, r1
 80142ae:	2001      	movs	r0, #1
 80142b0:	e7a5      	b.n	80141fe <_vfiprintf_r+0x11a>
 80142b2:	2300      	movs	r3, #0
 80142b4:	3401      	adds	r4, #1
 80142b6:	9305      	str	r3, [sp, #20]
 80142b8:	4619      	mov	r1, r3
 80142ba:	f04f 0c0a 	mov.w	ip, #10
 80142be:	4620      	mov	r0, r4
 80142c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80142c4:	3a30      	subs	r2, #48	; 0x30
 80142c6:	2a09      	cmp	r2, #9
 80142c8:	d903      	bls.n	80142d2 <_vfiprintf_r+0x1ee>
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d0c5      	beq.n	801425a <_vfiprintf_r+0x176>
 80142ce:	9105      	str	r1, [sp, #20]
 80142d0:	e7c3      	b.n	801425a <_vfiprintf_r+0x176>
 80142d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80142d6:	4604      	mov	r4, r0
 80142d8:	2301      	movs	r3, #1
 80142da:	e7f0      	b.n	80142be <_vfiprintf_r+0x1da>
 80142dc:	ab03      	add	r3, sp, #12
 80142de:	9300      	str	r3, [sp, #0]
 80142e0:	462a      	mov	r2, r5
 80142e2:	4b16      	ldr	r3, [pc, #88]	; (801433c <_vfiprintf_r+0x258>)
 80142e4:	a904      	add	r1, sp, #16
 80142e6:	4630      	mov	r0, r6
 80142e8:	f3af 8000 	nop.w
 80142ec:	4607      	mov	r7, r0
 80142ee:	1c78      	adds	r0, r7, #1
 80142f0:	d1d6      	bne.n	80142a0 <_vfiprintf_r+0x1bc>
 80142f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80142f4:	07d9      	lsls	r1, r3, #31
 80142f6:	d405      	bmi.n	8014304 <_vfiprintf_r+0x220>
 80142f8:	89ab      	ldrh	r3, [r5, #12]
 80142fa:	059a      	lsls	r2, r3, #22
 80142fc:	d402      	bmi.n	8014304 <_vfiprintf_r+0x220>
 80142fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014300:	f7ff fddd 	bl	8013ebe <__retarget_lock_release_recursive>
 8014304:	89ab      	ldrh	r3, [r5, #12]
 8014306:	065b      	lsls	r3, r3, #25
 8014308:	f53f af12 	bmi.w	8014130 <_vfiprintf_r+0x4c>
 801430c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801430e:	e711      	b.n	8014134 <_vfiprintf_r+0x50>
 8014310:	ab03      	add	r3, sp, #12
 8014312:	9300      	str	r3, [sp, #0]
 8014314:	462a      	mov	r2, r5
 8014316:	4b09      	ldr	r3, [pc, #36]	; (801433c <_vfiprintf_r+0x258>)
 8014318:	a904      	add	r1, sp, #16
 801431a:	4630      	mov	r0, r6
 801431c:	f000 f880 	bl	8014420 <_printf_i>
 8014320:	e7e4      	b.n	80142ec <_vfiprintf_r+0x208>
 8014322:	bf00      	nop
 8014324:	08017f64 	.word	0x08017f64
 8014328:	08017f84 	.word	0x08017f84
 801432c:	08017f44 	.word	0x08017f44
 8014330:	08017fa4 	.word	0x08017fa4
 8014334:	08017fae 	.word	0x08017fae
 8014338:	00000000 	.word	0x00000000
 801433c:	080140bf 	.word	0x080140bf
 8014340:	08017faa 	.word	0x08017faa

08014344 <_printf_common>:
 8014344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014348:	4616      	mov	r6, r2
 801434a:	4699      	mov	r9, r3
 801434c:	688a      	ldr	r2, [r1, #8]
 801434e:	690b      	ldr	r3, [r1, #16]
 8014350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014354:	4293      	cmp	r3, r2
 8014356:	bfb8      	it	lt
 8014358:	4613      	movlt	r3, r2
 801435a:	6033      	str	r3, [r6, #0]
 801435c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014360:	4607      	mov	r7, r0
 8014362:	460c      	mov	r4, r1
 8014364:	b10a      	cbz	r2, 801436a <_printf_common+0x26>
 8014366:	3301      	adds	r3, #1
 8014368:	6033      	str	r3, [r6, #0]
 801436a:	6823      	ldr	r3, [r4, #0]
 801436c:	0699      	lsls	r1, r3, #26
 801436e:	bf42      	ittt	mi
 8014370:	6833      	ldrmi	r3, [r6, #0]
 8014372:	3302      	addmi	r3, #2
 8014374:	6033      	strmi	r3, [r6, #0]
 8014376:	6825      	ldr	r5, [r4, #0]
 8014378:	f015 0506 	ands.w	r5, r5, #6
 801437c:	d106      	bne.n	801438c <_printf_common+0x48>
 801437e:	f104 0a19 	add.w	sl, r4, #25
 8014382:	68e3      	ldr	r3, [r4, #12]
 8014384:	6832      	ldr	r2, [r6, #0]
 8014386:	1a9b      	subs	r3, r3, r2
 8014388:	42ab      	cmp	r3, r5
 801438a:	dc26      	bgt.n	80143da <_printf_common+0x96>
 801438c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014390:	1e13      	subs	r3, r2, #0
 8014392:	6822      	ldr	r2, [r4, #0]
 8014394:	bf18      	it	ne
 8014396:	2301      	movne	r3, #1
 8014398:	0692      	lsls	r2, r2, #26
 801439a:	d42b      	bmi.n	80143f4 <_printf_common+0xb0>
 801439c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80143a0:	4649      	mov	r1, r9
 80143a2:	4638      	mov	r0, r7
 80143a4:	47c0      	blx	r8
 80143a6:	3001      	adds	r0, #1
 80143a8:	d01e      	beq.n	80143e8 <_printf_common+0xa4>
 80143aa:	6823      	ldr	r3, [r4, #0]
 80143ac:	68e5      	ldr	r5, [r4, #12]
 80143ae:	6832      	ldr	r2, [r6, #0]
 80143b0:	f003 0306 	and.w	r3, r3, #6
 80143b4:	2b04      	cmp	r3, #4
 80143b6:	bf08      	it	eq
 80143b8:	1aad      	subeq	r5, r5, r2
 80143ba:	68a3      	ldr	r3, [r4, #8]
 80143bc:	6922      	ldr	r2, [r4, #16]
 80143be:	bf0c      	ite	eq
 80143c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80143c4:	2500      	movne	r5, #0
 80143c6:	4293      	cmp	r3, r2
 80143c8:	bfc4      	itt	gt
 80143ca:	1a9b      	subgt	r3, r3, r2
 80143cc:	18ed      	addgt	r5, r5, r3
 80143ce:	2600      	movs	r6, #0
 80143d0:	341a      	adds	r4, #26
 80143d2:	42b5      	cmp	r5, r6
 80143d4:	d11a      	bne.n	801440c <_printf_common+0xc8>
 80143d6:	2000      	movs	r0, #0
 80143d8:	e008      	b.n	80143ec <_printf_common+0xa8>
 80143da:	2301      	movs	r3, #1
 80143dc:	4652      	mov	r2, sl
 80143de:	4649      	mov	r1, r9
 80143e0:	4638      	mov	r0, r7
 80143e2:	47c0      	blx	r8
 80143e4:	3001      	adds	r0, #1
 80143e6:	d103      	bne.n	80143f0 <_printf_common+0xac>
 80143e8:	f04f 30ff 	mov.w	r0, #4294967295
 80143ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143f0:	3501      	adds	r5, #1
 80143f2:	e7c6      	b.n	8014382 <_printf_common+0x3e>
 80143f4:	18e1      	adds	r1, r4, r3
 80143f6:	1c5a      	adds	r2, r3, #1
 80143f8:	2030      	movs	r0, #48	; 0x30
 80143fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80143fe:	4422      	add	r2, r4
 8014400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014408:	3302      	adds	r3, #2
 801440a:	e7c7      	b.n	801439c <_printf_common+0x58>
 801440c:	2301      	movs	r3, #1
 801440e:	4622      	mov	r2, r4
 8014410:	4649      	mov	r1, r9
 8014412:	4638      	mov	r0, r7
 8014414:	47c0      	blx	r8
 8014416:	3001      	adds	r0, #1
 8014418:	d0e6      	beq.n	80143e8 <_printf_common+0xa4>
 801441a:	3601      	adds	r6, #1
 801441c:	e7d9      	b.n	80143d2 <_printf_common+0x8e>
	...

08014420 <_printf_i>:
 8014420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014424:	7e0f      	ldrb	r7, [r1, #24]
 8014426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014428:	2f78      	cmp	r7, #120	; 0x78
 801442a:	4691      	mov	r9, r2
 801442c:	4680      	mov	r8, r0
 801442e:	460c      	mov	r4, r1
 8014430:	469a      	mov	sl, r3
 8014432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014436:	d807      	bhi.n	8014448 <_printf_i+0x28>
 8014438:	2f62      	cmp	r7, #98	; 0x62
 801443a:	d80a      	bhi.n	8014452 <_printf_i+0x32>
 801443c:	2f00      	cmp	r7, #0
 801443e:	f000 80d8 	beq.w	80145f2 <_printf_i+0x1d2>
 8014442:	2f58      	cmp	r7, #88	; 0x58
 8014444:	f000 80a3 	beq.w	801458e <_printf_i+0x16e>
 8014448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801444c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014450:	e03a      	b.n	80144c8 <_printf_i+0xa8>
 8014452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014456:	2b15      	cmp	r3, #21
 8014458:	d8f6      	bhi.n	8014448 <_printf_i+0x28>
 801445a:	a101      	add	r1, pc, #4	; (adr r1, 8014460 <_printf_i+0x40>)
 801445c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014460:	080144b9 	.word	0x080144b9
 8014464:	080144cd 	.word	0x080144cd
 8014468:	08014449 	.word	0x08014449
 801446c:	08014449 	.word	0x08014449
 8014470:	08014449 	.word	0x08014449
 8014474:	08014449 	.word	0x08014449
 8014478:	080144cd 	.word	0x080144cd
 801447c:	08014449 	.word	0x08014449
 8014480:	08014449 	.word	0x08014449
 8014484:	08014449 	.word	0x08014449
 8014488:	08014449 	.word	0x08014449
 801448c:	080145d9 	.word	0x080145d9
 8014490:	080144fd 	.word	0x080144fd
 8014494:	080145bb 	.word	0x080145bb
 8014498:	08014449 	.word	0x08014449
 801449c:	08014449 	.word	0x08014449
 80144a0:	080145fb 	.word	0x080145fb
 80144a4:	08014449 	.word	0x08014449
 80144a8:	080144fd 	.word	0x080144fd
 80144ac:	08014449 	.word	0x08014449
 80144b0:	08014449 	.word	0x08014449
 80144b4:	080145c3 	.word	0x080145c3
 80144b8:	682b      	ldr	r3, [r5, #0]
 80144ba:	1d1a      	adds	r2, r3, #4
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	602a      	str	r2, [r5, #0]
 80144c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80144c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80144c8:	2301      	movs	r3, #1
 80144ca:	e0a3      	b.n	8014614 <_printf_i+0x1f4>
 80144cc:	6820      	ldr	r0, [r4, #0]
 80144ce:	6829      	ldr	r1, [r5, #0]
 80144d0:	0606      	lsls	r6, r0, #24
 80144d2:	f101 0304 	add.w	r3, r1, #4
 80144d6:	d50a      	bpl.n	80144ee <_printf_i+0xce>
 80144d8:	680e      	ldr	r6, [r1, #0]
 80144da:	602b      	str	r3, [r5, #0]
 80144dc:	2e00      	cmp	r6, #0
 80144de:	da03      	bge.n	80144e8 <_printf_i+0xc8>
 80144e0:	232d      	movs	r3, #45	; 0x2d
 80144e2:	4276      	negs	r6, r6
 80144e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80144e8:	485e      	ldr	r0, [pc, #376]	; (8014664 <_printf_i+0x244>)
 80144ea:	230a      	movs	r3, #10
 80144ec:	e019      	b.n	8014522 <_printf_i+0x102>
 80144ee:	680e      	ldr	r6, [r1, #0]
 80144f0:	602b      	str	r3, [r5, #0]
 80144f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80144f6:	bf18      	it	ne
 80144f8:	b236      	sxthne	r6, r6
 80144fa:	e7ef      	b.n	80144dc <_printf_i+0xbc>
 80144fc:	682b      	ldr	r3, [r5, #0]
 80144fe:	6820      	ldr	r0, [r4, #0]
 8014500:	1d19      	adds	r1, r3, #4
 8014502:	6029      	str	r1, [r5, #0]
 8014504:	0601      	lsls	r1, r0, #24
 8014506:	d501      	bpl.n	801450c <_printf_i+0xec>
 8014508:	681e      	ldr	r6, [r3, #0]
 801450a:	e002      	b.n	8014512 <_printf_i+0xf2>
 801450c:	0646      	lsls	r6, r0, #25
 801450e:	d5fb      	bpl.n	8014508 <_printf_i+0xe8>
 8014510:	881e      	ldrh	r6, [r3, #0]
 8014512:	4854      	ldr	r0, [pc, #336]	; (8014664 <_printf_i+0x244>)
 8014514:	2f6f      	cmp	r7, #111	; 0x6f
 8014516:	bf0c      	ite	eq
 8014518:	2308      	moveq	r3, #8
 801451a:	230a      	movne	r3, #10
 801451c:	2100      	movs	r1, #0
 801451e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014522:	6865      	ldr	r5, [r4, #4]
 8014524:	60a5      	str	r5, [r4, #8]
 8014526:	2d00      	cmp	r5, #0
 8014528:	bfa2      	ittt	ge
 801452a:	6821      	ldrge	r1, [r4, #0]
 801452c:	f021 0104 	bicge.w	r1, r1, #4
 8014530:	6021      	strge	r1, [r4, #0]
 8014532:	b90e      	cbnz	r6, 8014538 <_printf_i+0x118>
 8014534:	2d00      	cmp	r5, #0
 8014536:	d04d      	beq.n	80145d4 <_printf_i+0x1b4>
 8014538:	4615      	mov	r5, r2
 801453a:	fbb6 f1f3 	udiv	r1, r6, r3
 801453e:	fb03 6711 	mls	r7, r3, r1, r6
 8014542:	5dc7      	ldrb	r7, [r0, r7]
 8014544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014548:	4637      	mov	r7, r6
 801454a:	42bb      	cmp	r3, r7
 801454c:	460e      	mov	r6, r1
 801454e:	d9f4      	bls.n	801453a <_printf_i+0x11a>
 8014550:	2b08      	cmp	r3, #8
 8014552:	d10b      	bne.n	801456c <_printf_i+0x14c>
 8014554:	6823      	ldr	r3, [r4, #0]
 8014556:	07de      	lsls	r6, r3, #31
 8014558:	d508      	bpl.n	801456c <_printf_i+0x14c>
 801455a:	6923      	ldr	r3, [r4, #16]
 801455c:	6861      	ldr	r1, [r4, #4]
 801455e:	4299      	cmp	r1, r3
 8014560:	bfde      	ittt	le
 8014562:	2330      	movle	r3, #48	; 0x30
 8014564:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014568:	f105 35ff 	addle.w	r5, r5, #4294967295
 801456c:	1b52      	subs	r2, r2, r5
 801456e:	6122      	str	r2, [r4, #16]
 8014570:	f8cd a000 	str.w	sl, [sp]
 8014574:	464b      	mov	r3, r9
 8014576:	aa03      	add	r2, sp, #12
 8014578:	4621      	mov	r1, r4
 801457a:	4640      	mov	r0, r8
 801457c:	f7ff fee2 	bl	8014344 <_printf_common>
 8014580:	3001      	adds	r0, #1
 8014582:	d14c      	bne.n	801461e <_printf_i+0x1fe>
 8014584:	f04f 30ff 	mov.w	r0, #4294967295
 8014588:	b004      	add	sp, #16
 801458a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801458e:	4835      	ldr	r0, [pc, #212]	; (8014664 <_printf_i+0x244>)
 8014590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014594:	6829      	ldr	r1, [r5, #0]
 8014596:	6823      	ldr	r3, [r4, #0]
 8014598:	f851 6b04 	ldr.w	r6, [r1], #4
 801459c:	6029      	str	r1, [r5, #0]
 801459e:	061d      	lsls	r5, r3, #24
 80145a0:	d514      	bpl.n	80145cc <_printf_i+0x1ac>
 80145a2:	07df      	lsls	r7, r3, #31
 80145a4:	bf44      	itt	mi
 80145a6:	f043 0320 	orrmi.w	r3, r3, #32
 80145aa:	6023      	strmi	r3, [r4, #0]
 80145ac:	b91e      	cbnz	r6, 80145b6 <_printf_i+0x196>
 80145ae:	6823      	ldr	r3, [r4, #0]
 80145b0:	f023 0320 	bic.w	r3, r3, #32
 80145b4:	6023      	str	r3, [r4, #0]
 80145b6:	2310      	movs	r3, #16
 80145b8:	e7b0      	b.n	801451c <_printf_i+0xfc>
 80145ba:	6823      	ldr	r3, [r4, #0]
 80145bc:	f043 0320 	orr.w	r3, r3, #32
 80145c0:	6023      	str	r3, [r4, #0]
 80145c2:	2378      	movs	r3, #120	; 0x78
 80145c4:	4828      	ldr	r0, [pc, #160]	; (8014668 <_printf_i+0x248>)
 80145c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80145ca:	e7e3      	b.n	8014594 <_printf_i+0x174>
 80145cc:	0659      	lsls	r1, r3, #25
 80145ce:	bf48      	it	mi
 80145d0:	b2b6      	uxthmi	r6, r6
 80145d2:	e7e6      	b.n	80145a2 <_printf_i+0x182>
 80145d4:	4615      	mov	r5, r2
 80145d6:	e7bb      	b.n	8014550 <_printf_i+0x130>
 80145d8:	682b      	ldr	r3, [r5, #0]
 80145da:	6826      	ldr	r6, [r4, #0]
 80145dc:	6961      	ldr	r1, [r4, #20]
 80145de:	1d18      	adds	r0, r3, #4
 80145e0:	6028      	str	r0, [r5, #0]
 80145e2:	0635      	lsls	r5, r6, #24
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	d501      	bpl.n	80145ec <_printf_i+0x1cc>
 80145e8:	6019      	str	r1, [r3, #0]
 80145ea:	e002      	b.n	80145f2 <_printf_i+0x1d2>
 80145ec:	0670      	lsls	r0, r6, #25
 80145ee:	d5fb      	bpl.n	80145e8 <_printf_i+0x1c8>
 80145f0:	8019      	strh	r1, [r3, #0]
 80145f2:	2300      	movs	r3, #0
 80145f4:	6123      	str	r3, [r4, #16]
 80145f6:	4615      	mov	r5, r2
 80145f8:	e7ba      	b.n	8014570 <_printf_i+0x150>
 80145fa:	682b      	ldr	r3, [r5, #0]
 80145fc:	1d1a      	adds	r2, r3, #4
 80145fe:	602a      	str	r2, [r5, #0]
 8014600:	681d      	ldr	r5, [r3, #0]
 8014602:	6862      	ldr	r2, [r4, #4]
 8014604:	2100      	movs	r1, #0
 8014606:	4628      	mov	r0, r5
 8014608:	f7eb fe6a 	bl	80002e0 <memchr>
 801460c:	b108      	cbz	r0, 8014612 <_printf_i+0x1f2>
 801460e:	1b40      	subs	r0, r0, r5
 8014610:	6060      	str	r0, [r4, #4]
 8014612:	6863      	ldr	r3, [r4, #4]
 8014614:	6123      	str	r3, [r4, #16]
 8014616:	2300      	movs	r3, #0
 8014618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801461c:	e7a8      	b.n	8014570 <_printf_i+0x150>
 801461e:	6923      	ldr	r3, [r4, #16]
 8014620:	462a      	mov	r2, r5
 8014622:	4649      	mov	r1, r9
 8014624:	4640      	mov	r0, r8
 8014626:	47d0      	blx	sl
 8014628:	3001      	adds	r0, #1
 801462a:	d0ab      	beq.n	8014584 <_printf_i+0x164>
 801462c:	6823      	ldr	r3, [r4, #0]
 801462e:	079b      	lsls	r3, r3, #30
 8014630:	d413      	bmi.n	801465a <_printf_i+0x23a>
 8014632:	68e0      	ldr	r0, [r4, #12]
 8014634:	9b03      	ldr	r3, [sp, #12]
 8014636:	4298      	cmp	r0, r3
 8014638:	bfb8      	it	lt
 801463a:	4618      	movlt	r0, r3
 801463c:	e7a4      	b.n	8014588 <_printf_i+0x168>
 801463e:	2301      	movs	r3, #1
 8014640:	4632      	mov	r2, r6
 8014642:	4649      	mov	r1, r9
 8014644:	4640      	mov	r0, r8
 8014646:	47d0      	blx	sl
 8014648:	3001      	adds	r0, #1
 801464a:	d09b      	beq.n	8014584 <_printf_i+0x164>
 801464c:	3501      	adds	r5, #1
 801464e:	68e3      	ldr	r3, [r4, #12]
 8014650:	9903      	ldr	r1, [sp, #12]
 8014652:	1a5b      	subs	r3, r3, r1
 8014654:	42ab      	cmp	r3, r5
 8014656:	dcf2      	bgt.n	801463e <_printf_i+0x21e>
 8014658:	e7eb      	b.n	8014632 <_printf_i+0x212>
 801465a:	2500      	movs	r5, #0
 801465c:	f104 0619 	add.w	r6, r4, #25
 8014660:	e7f5      	b.n	801464e <_printf_i+0x22e>
 8014662:	bf00      	nop
 8014664:	08017fb5 	.word	0x08017fb5
 8014668:	08017fc6 	.word	0x08017fc6

0801466c <_sbrk_r>:
 801466c:	b538      	push	{r3, r4, r5, lr}
 801466e:	4d06      	ldr	r5, [pc, #24]	; (8014688 <_sbrk_r+0x1c>)
 8014670:	2300      	movs	r3, #0
 8014672:	4604      	mov	r4, r0
 8014674:	4608      	mov	r0, r1
 8014676:	602b      	str	r3, [r5, #0]
 8014678:	f7ec fcc2 	bl	8001000 <_sbrk>
 801467c:	1c43      	adds	r3, r0, #1
 801467e:	d102      	bne.n	8014686 <_sbrk_r+0x1a>
 8014680:	682b      	ldr	r3, [r5, #0]
 8014682:	b103      	cbz	r3, 8014686 <_sbrk_r+0x1a>
 8014684:	6023      	str	r3, [r4, #0]
 8014686:	bd38      	pop	{r3, r4, r5, pc}
 8014688:	240082c0 	.word	0x240082c0

0801468c <__sread>:
 801468c:	b510      	push	{r4, lr}
 801468e:	460c      	mov	r4, r1
 8014690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014694:	f000 fa6e 	bl	8014b74 <_read_r>
 8014698:	2800      	cmp	r0, #0
 801469a:	bfab      	itete	ge
 801469c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801469e:	89a3      	ldrhlt	r3, [r4, #12]
 80146a0:	181b      	addge	r3, r3, r0
 80146a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80146a6:	bfac      	ite	ge
 80146a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80146aa:	81a3      	strhlt	r3, [r4, #12]
 80146ac:	bd10      	pop	{r4, pc}

080146ae <__swrite>:
 80146ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146b2:	461f      	mov	r7, r3
 80146b4:	898b      	ldrh	r3, [r1, #12]
 80146b6:	05db      	lsls	r3, r3, #23
 80146b8:	4605      	mov	r5, r0
 80146ba:	460c      	mov	r4, r1
 80146bc:	4616      	mov	r6, r2
 80146be:	d505      	bpl.n	80146cc <__swrite+0x1e>
 80146c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146c4:	2302      	movs	r3, #2
 80146c6:	2200      	movs	r2, #0
 80146c8:	f000 f9d0 	bl	8014a6c <_lseek_r>
 80146cc:	89a3      	ldrh	r3, [r4, #12]
 80146ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80146d6:	81a3      	strh	r3, [r4, #12]
 80146d8:	4632      	mov	r2, r6
 80146da:	463b      	mov	r3, r7
 80146dc:	4628      	mov	r0, r5
 80146de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146e2:	f000 b869 	b.w	80147b8 <_write_r>

080146e6 <__sseek>:
 80146e6:	b510      	push	{r4, lr}
 80146e8:	460c      	mov	r4, r1
 80146ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146ee:	f000 f9bd 	bl	8014a6c <_lseek_r>
 80146f2:	1c43      	adds	r3, r0, #1
 80146f4:	89a3      	ldrh	r3, [r4, #12]
 80146f6:	bf15      	itete	ne
 80146f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80146fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80146fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014702:	81a3      	strheq	r3, [r4, #12]
 8014704:	bf18      	it	ne
 8014706:	81a3      	strhne	r3, [r4, #12]
 8014708:	bd10      	pop	{r4, pc}

0801470a <__sclose>:
 801470a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801470e:	f000 b8db 	b.w	80148c8 <_close_r>
	...

08014714 <__swbuf_r>:
 8014714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014716:	460e      	mov	r6, r1
 8014718:	4614      	mov	r4, r2
 801471a:	4605      	mov	r5, r0
 801471c:	b118      	cbz	r0, 8014726 <__swbuf_r+0x12>
 801471e:	6983      	ldr	r3, [r0, #24]
 8014720:	b90b      	cbnz	r3, 8014726 <__swbuf_r+0x12>
 8014722:	f7ff fb1b 	bl	8013d5c <__sinit>
 8014726:	4b21      	ldr	r3, [pc, #132]	; (80147ac <__swbuf_r+0x98>)
 8014728:	429c      	cmp	r4, r3
 801472a:	d12b      	bne.n	8014784 <__swbuf_r+0x70>
 801472c:	686c      	ldr	r4, [r5, #4]
 801472e:	69a3      	ldr	r3, [r4, #24]
 8014730:	60a3      	str	r3, [r4, #8]
 8014732:	89a3      	ldrh	r3, [r4, #12]
 8014734:	071a      	lsls	r2, r3, #28
 8014736:	d52f      	bpl.n	8014798 <__swbuf_r+0x84>
 8014738:	6923      	ldr	r3, [r4, #16]
 801473a:	b36b      	cbz	r3, 8014798 <__swbuf_r+0x84>
 801473c:	6923      	ldr	r3, [r4, #16]
 801473e:	6820      	ldr	r0, [r4, #0]
 8014740:	1ac0      	subs	r0, r0, r3
 8014742:	6963      	ldr	r3, [r4, #20]
 8014744:	b2f6      	uxtb	r6, r6
 8014746:	4283      	cmp	r3, r0
 8014748:	4637      	mov	r7, r6
 801474a:	dc04      	bgt.n	8014756 <__swbuf_r+0x42>
 801474c:	4621      	mov	r1, r4
 801474e:	4628      	mov	r0, r5
 8014750:	f000 f950 	bl	80149f4 <_fflush_r>
 8014754:	bb30      	cbnz	r0, 80147a4 <__swbuf_r+0x90>
 8014756:	68a3      	ldr	r3, [r4, #8]
 8014758:	3b01      	subs	r3, #1
 801475a:	60a3      	str	r3, [r4, #8]
 801475c:	6823      	ldr	r3, [r4, #0]
 801475e:	1c5a      	adds	r2, r3, #1
 8014760:	6022      	str	r2, [r4, #0]
 8014762:	701e      	strb	r6, [r3, #0]
 8014764:	6963      	ldr	r3, [r4, #20]
 8014766:	3001      	adds	r0, #1
 8014768:	4283      	cmp	r3, r0
 801476a:	d004      	beq.n	8014776 <__swbuf_r+0x62>
 801476c:	89a3      	ldrh	r3, [r4, #12]
 801476e:	07db      	lsls	r3, r3, #31
 8014770:	d506      	bpl.n	8014780 <__swbuf_r+0x6c>
 8014772:	2e0a      	cmp	r6, #10
 8014774:	d104      	bne.n	8014780 <__swbuf_r+0x6c>
 8014776:	4621      	mov	r1, r4
 8014778:	4628      	mov	r0, r5
 801477a:	f000 f93b 	bl	80149f4 <_fflush_r>
 801477e:	b988      	cbnz	r0, 80147a4 <__swbuf_r+0x90>
 8014780:	4638      	mov	r0, r7
 8014782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014784:	4b0a      	ldr	r3, [pc, #40]	; (80147b0 <__swbuf_r+0x9c>)
 8014786:	429c      	cmp	r4, r3
 8014788:	d101      	bne.n	801478e <__swbuf_r+0x7a>
 801478a:	68ac      	ldr	r4, [r5, #8]
 801478c:	e7cf      	b.n	801472e <__swbuf_r+0x1a>
 801478e:	4b09      	ldr	r3, [pc, #36]	; (80147b4 <__swbuf_r+0xa0>)
 8014790:	429c      	cmp	r4, r3
 8014792:	bf08      	it	eq
 8014794:	68ec      	ldreq	r4, [r5, #12]
 8014796:	e7ca      	b.n	801472e <__swbuf_r+0x1a>
 8014798:	4621      	mov	r1, r4
 801479a:	4628      	mov	r0, r5
 801479c:	f000 f81e 	bl	80147dc <__swsetup_r>
 80147a0:	2800      	cmp	r0, #0
 80147a2:	d0cb      	beq.n	801473c <__swbuf_r+0x28>
 80147a4:	f04f 37ff 	mov.w	r7, #4294967295
 80147a8:	e7ea      	b.n	8014780 <__swbuf_r+0x6c>
 80147aa:	bf00      	nop
 80147ac:	08017f64 	.word	0x08017f64
 80147b0:	08017f84 	.word	0x08017f84
 80147b4:	08017f44 	.word	0x08017f44

080147b8 <_write_r>:
 80147b8:	b538      	push	{r3, r4, r5, lr}
 80147ba:	4d07      	ldr	r5, [pc, #28]	; (80147d8 <_write_r+0x20>)
 80147bc:	4604      	mov	r4, r0
 80147be:	4608      	mov	r0, r1
 80147c0:	4611      	mov	r1, r2
 80147c2:	2200      	movs	r2, #0
 80147c4:	602a      	str	r2, [r5, #0]
 80147c6:	461a      	mov	r2, r3
 80147c8:	f7ec fbc9 	bl	8000f5e <_write>
 80147cc:	1c43      	adds	r3, r0, #1
 80147ce:	d102      	bne.n	80147d6 <_write_r+0x1e>
 80147d0:	682b      	ldr	r3, [r5, #0]
 80147d2:	b103      	cbz	r3, 80147d6 <_write_r+0x1e>
 80147d4:	6023      	str	r3, [r4, #0]
 80147d6:	bd38      	pop	{r3, r4, r5, pc}
 80147d8:	240082c0 	.word	0x240082c0

080147dc <__swsetup_r>:
 80147dc:	4b32      	ldr	r3, [pc, #200]	; (80148a8 <__swsetup_r+0xcc>)
 80147de:	b570      	push	{r4, r5, r6, lr}
 80147e0:	681d      	ldr	r5, [r3, #0]
 80147e2:	4606      	mov	r6, r0
 80147e4:	460c      	mov	r4, r1
 80147e6:	b125      	cbz	r5, 80147f2 <__swsetup_r+0x16>
 80147e8:	69ab      	ldr	r3, [r5, #24]
 80147ea:	b913      	cbnz	r3, 80147f2 <__swsetup_r+0x16>
 80147ec:	4628      	mov	r0, r5
 80147ee:	f7ff fab5 	bl	8013d5c <__sinit>
 80147f2:	4b2e      	ldr	r3, [pc, #184]	; (80148ac <__swsetup_r+0xd0>)
 80147f4:	429c      	cmp	r4, r3
 80147f6:	d10f      	bne.n	8014818 <__swsetup_r+0x3c>
 80147f8:	686c      	ldr	r4, [r5, #4]
 80147fa:	89a3      	ldrh	r3, [r4, #12]
 80147fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014800:	0719      	lsls	r1, r3, #28
 8014802:	d42c      	bmi.n	801485e <__swsetup_r+0x82>
 8014804:	06dd      	lsls	r5, r3, #27
 8014806:	d411      	bmi.n	801482c <__swsetup_r+0x50>
 8014808:	2309      	movs	r3, #9
 801480a:	6033      	str	r3, [r6, #0]
 801480c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014810:	81a3      	strh	r3, [r4, #12]
 8014812:	f04f 30ff 	mov.w	r0, #4294967295
 8014816:	e03e      	b.n	8014896 <__swsetup_r+0xba>
 8014818:	4b25      	ldr	r3, [pc, #148]	; (80148b0 <__swsetup_r+0xd4>)
 801481a:	429c      	cmp	r4, r3
 801481c:	d101      	bne.n	8014822 <__swsetup_r+0x46>
 801481e:	68ac      	ldr	r4, [r5, #8]
 8014820:	e7eb      	b.n	80147fa <__swsetup_r+0x1e>
 8014822:	4b24      	ldr	r3, [pc, #144]	; (80148b4 <__swsetup_r+0xd8>)
 8014824:	429c      	cmp	r4, r3
 8014826:	bf08      	it	eq
 8014828:	68ec      	ldreq	r4, [r5, #12]
 801482a:	e7e6      	b.n	80147fa <__swsetup_r+0x1e>
 801482c:	0758      	lsls	r0, r3, #29
 801482e:	d512      	bpl.n	8014856 <__swsetup_r+0x7a>
 8014830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014832:	b141      	cbz	r1, 8014846 <__swsetup_r+0x6a>
 8014834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014838:	4299      	cmp	r1, r3
 801483a:	d002      	beq.n	8014842 <__swsetup_r+0x66>
 801483c:	4630      	mov	r0, r6
 801483e:	f7ff fb47 	bl	8013ed0 <_free_r>
 8014842:	2300      	movs	r3, #0
 8014844:	6363      	str	r3, [r4, #52]	; 0x34
 8014846:	89a3      	ldrh	r3, [r4, #12]
 8014848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801484c:	81a3      	strh	r3, [r4, #12]
 801484e:	2300      	movs	r3, #0
 8014850:	6063      	str	r3, [r4, #4]
 8014852:	6923      	ldr	r3, [r4, #16]
 8014854:	6023      	str	r3, [r4, #0]
 8014856:	89a3      	ldrh	r3, [r4, #12]
 8014858:	f043 0308 	orr.w	r3, r3, #8
 801485c:	81a3      	strh	r3, [r4, #12]
 801485e:	6923      	ldr	r3, [r4, #16]
 8014860:	b94b      	cbnz	r3, 8014876 <__swsetup_r+0x9a>
 8014862:	89a3      	ldrh	r3, [r4, #12]
 8014864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801486c:	d003      	beq.n	8014876 <__swsetup_r+0x9a>
 801486e:	4621      	mov	r1, r4
 8014870:	4630      	mov	r0, r6
 8014872:	f000 f933 	bl	8014adc <__smakebuf_r>
 8014876:	89a0      	ldrh	r0, [r4, #12]
 8014878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801487c:	f010 0301 	ands.w	r3, r0, #1
 8014880:	d00a      	beq.n	8014898 <__swsetup_r+0xbc>
 8014882:	2300      	movs	r3, #0
 8014884:	60a3      	str	r3, [r4, #8]
 8014886:	6963      	ldr	r3, [r4, #20]
 8014888:	425b      	negs	r3, r3
 801488a:	61a3      	str	r3, [r4, #24]
 801488c:	6923      	ldr	r3, [r4, #16]
 801488e:	b943      	cbnz	r3, 80148a2 <__swsetup_r+0xc6>
 8014890:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014894:	d1ba      	bne.n	801480c <__swsetup_r+0x30>
 8014896:	bd70      	pop	{r4, r5, r6, pc}
 8014898:	0781      	lsls	r1, r0, #30
 801489a:	bf58      	it	pl
 801489c:	6963      	ldrpl	r3, [r4, #20]
 801489e:	60a3      	str	r3, [r4, #8]
 80148a0:	e7f4      	b.n	801488c <__swsetup_r+0xb0>
 80148a2:	2000      	movs	r0, #0
 80148a4:	e7f7      	b.n	8014896 <__swsetup_r+0xba>
 80148a6:	bf00      	nop
 80148a8:	24000034 	.word	0x24000034
 80148ac:	08017f64 	.word	0x08017f64
 80148b0:	08017f84 	.word	0x08017f84
 80148b4:	08017f44 	.word	0x08017f44

080148b8 <abort>:
 80148b8:	b508      	push	{r3, lr}
 80148ba:	2006      	movs	r0, #6
 80148bc:	f000 f994 	bl	8014be8 <raise>
 80148c0:	2001      	movs	r0, #1
 80148c2:	f7ec fb25 	bl	8000f10 <_exit>
	...

080148c8 <_close_r>:
 80148c8:	b538      	push	{r3, r4, r5, lr}
 80148ca:	4d06      	ldr	r5, [pc, #24]	; (80148e4 <_close_r+0x1c>)
 80148cc:	2300      	movs	r3, #0
 80148ce:	4604      	mov	r4, r0
 80148d0:	4608      	mov	r0, r1
 80148d2:	602b      	str	r3, [r5, #0]
 80148d4:	f7ec fb5f 	bl	8000f96 <_close>
 80148d8:	1c43      	adds	r3, r0, #1
 80148da:	d102      	bne.n	80148e2 <_close_r+0x1a>
 80148dc:	682b      	ldr	r3, [r5, #0]
 80148de:	b103      	cbz	r3, 80148e2 <_close_r+0x1a>
 80148e0:	6023      	str	r3, [r4, #0]
 80148e2:	bd38      	pop	{r3, r4, r5, pc}
 80148e4:	240082c0 	.word	0x240082c0

080148e8 <__sflush_r>:
 80148e8:	898a      	ldrh	r2, [r1, #12]
 80148ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148ee:	4605      	mov	r5, r0
 80148f0:	0710      	lsls	r0, r2, #28
 80148f2:	460c      	mov	r4, r1
 80148f4:	d458      	bmi.n	80149a8 <__sflush_r+0xc0>
 80148f6:	684b      	ldr	r3, [r1, #4]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	dc05      	bgt.n	8014908 <__sflush_r+0x20>
 80148fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80148fe:	2b00      	cmp	r3, #0
 8014900:	dc02      	bgt.n	8014908 <__sflush_r+0x20>
 8014902:	2000      	movs	r0, #0
 8014904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801490a:	2e00      	cmp	r6, #0
 801490c:	d0f9      	beq.n	8014902 <__sflush_r+0x1a>
 801490e:	2300      	movs	r3, #0
 8014910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014914:	682f      	ldr	r7, [r5, #0]
 8014916:	602b      	str	r3, [r5, #0]
 8014918:	d032      	beq.n	8014980 <__sflush_r+0x98>
 801491a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801491c:	89a3      	ldrh	r3, [r4, #12]
 801491e:	075a      	lsls	r2, r3, #29
 8014920:	d505      	bpl.n	801492e <__sflush_r+0x46>
 8014922:	6863      	ldr	r3, [r4, #4]
 8014924:	1ac0      	subs	r0, r0, r3
 8014926:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014928:	b10b      	cbz	r3, 801492e <__sflush_r+0x46>
 801492a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801492c:	1ac0      	subs	r0, r0, r3
 801492e:	2300      	movs	r3, #0
 8014930:	4602      	mov	r2, r0
 8014932:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014934:	6a21      	ldr	r1, [r4, #32]
 8014936:	4628      	mov	r0, r5
 8014938:	47b0      	blx	r6
 801493a:	1c43      	adds	r3, r0, #1
 801493c:	89a3      	ldrh	r3, [r4, #12]
 801493e:	d106      	bne.n	801494e <__sflush_r+0x66>
 8014940:	6829      	ldr	r1, [r5, #0]
 8014942:	291d      	cmp	r1, #29
 8014944:	d82c      	bhi.n	80149a0 <__sflush_r+0xb8>
 8014946:	4a2a      	ldr	r2, [pc, #168]	; (80149f0 <__sflush_r+0x108>)
 8014948:	40ca      	lsrs	r2, r1
 801494a:	07d6      	lsls	r6, r2, #31
 801494c:	d528      	bpl.n	80149a0 <__sflush_r+0xb8>
 801494e:	2200      	movs	r2, #0
 8014950:	6062      	str	r2, [r4, #4]
 8014952:	04d9      	lsls	r1, r3, #19
 8014954:	6922      	ldr	r2, [r4, #16]
 8014956:	6022      	str	r2, [r4, #0]
 8014958:	d504      	bpl.n	8014964 <__sflush_r+0x7c>
 801495a:	1c42      	adds	r2, r0, #1
 801495c:	d101      	bne.n	8014962 <__sflush_r+0x7a>
 801495e:	682b      	ldr	r3, [r5, #0]
 8014960:	b903      	cbnz	r3, 8014964 <__sflush_r+0x7c>
 8014962:	6560      	str	r0, [r4, #84]	; 0x54
 8014964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014966:	602f      	str	r7, [r5, #0]
 8014968:	2900      	cmp	r1, #0
 801496a:	d0ca      	beq.n	8014902 <__sflush_r+0x1a>
 801496c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014970:	4299      	cmp	r1, r3
 8014972:	d002      	beq.n	801497a <__sflush_r+0x92>
 8014974:	4628      	mov	r0, r5
 8014976:	f7ff faab 	bl	8013ed0 <_free_r>
 801497a:	2000      	movs	r0, #0
 801497c:	6360      	str	r0, [r4, #52]	; 0x34
 801497e:	e7c1      	b.n	8014904 <__sflush_r+0x1c>
 8014980:	6a21      	ldr	r1, [r4, #32]
 8014982:	2301      	movs	r3, #1
 8014984:	4628      	mov	r0, r5
 8014986:	47b0      	blx	r6
 8014988:	1c41      	adds	r1, r0, #1
 801498a:	d1c7      	bne.n	801491c <__sflush_r+0x34>
 801498c:	682b      	ldr	r3, [r5, #0]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d0c4      	beq.n	801491c <__sflush_r+0x34>
 8014992:	2b1d      	cmp	r3, #29
 8014994:	d001      	beq.n	801499a <__sflush_r+0xb2>
 8014996:	2b16      	cmp	r3, #22
 8014998:	d101      	bne.n	801499e <__sflush_r+0xb6>
 801499a:	602f      	str	r7, [r5, #0]
 801499c:	e7b1      	b.n	8014902 <__sflush_r+0x1a>
 801499e:	89a3      	ldrh	r3, [r4, #12]
 80149a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149a4:	81a3      	strh	r3, [r4, #12]
 80149a6:	e7ad      	b.n	8014904 <__sflush_r+0x1c>
 80149a8:	690f      	ldr	r7, [r1, #16]
 80149aa:	2f00      	cmp	r7, #0
 80149ac:	d0a9      	beq.n	8014902 <__sflush_r+0x1a>
 80149ae:	0793      	lsls	r3, r2, #30
 80149b0:	680e      	ldr	r6, [r1, #0]
 80149b2:	bf08      	it	eq
 80149b4:	694b      	ldreq	r3, [r1, #20]
 80149b6:	600f      	str	r7, [r1, #0]
 80149b8:	bf18      	it	ne
 80149ba:	2300      	movne	r3, #0
 80149bc:	eba6 0807 	sub.w	r8, r6, r7
 80149c0:	608b      	str	r3, [r1, #8]
 80149c2:	f1b8 0f00 	cmp.w	r8, #0
 80149c6:	dd9c      	ble.n	8014902 <__sflush_r+0x1a>
 80149c8:	6a21      	ldr	r1, [r4, #32]
 80149ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80149cc:	4643      	mov	r3, r8
 80149ce:	463a      	mov	r2, r7
 80149d0:	4628      	mov	r0, r5
 80149d2:	47b0      	blx	r6
 80149d4:	2800      	cmp	r0, #0
 80149d6:	dc06      	bgt.n	80149e6 <__sflush_r+0xfe>
 80149d8:	89a3      	ldrh	r3, [r4, #12]
 80149da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149de:	81a3      	strh	r3, [r4, #12]
 80149e0:	f04f 30ff 	mov.w	r0, #4294967295
 80149e4:	e78e      	b.n	8014904 <__sflush_r+0x1c>
 80149e6:	4407      	add	r7, r0
 80149e8:	eba8 0800 	sub.w	r8, r8, r0
 80149ec:	e7e9      	b.n	80149c2 <__sflush_r+0xda>
 80149ee:	bf00      	nop
 80149f0:	20400001 	.word	0x20400001

080149f4 <_fflush_r>:
 80149f4:	b538      	push	{r3, r4, r5, lr}
 80149f6:	690b      	ldr	r3, [r1, #16]
 80149f8:	4605      	mov	r5, r0
 80149fa:	460c      	mov	r4, r1
 80149fc:	b913      	cbnz	r3, 8014a04 <_fflush_r+0x10>
 80149fe:	2500      	movs	r5, #0
 8014a00:	4628      	mov	r0, r5
 8014a02:	bd38      	pop	{r3, r4, r5, pc}
 8014a04:	b118      	cbz	r0, 8014a0e <_fflush_r+0x1a>
 8014a06:	6983      	ldr	r3, [r0, #24]
 8014a08:	b90b      	cbnz	r3, 8014a0e <_fflush_r+0x1a>
 8014a0a:	f7ff f9a7 	bl	8013d5c <__sinit>
 8014a0e:	4b14      	ldr	r3, [pc, #80]	; (8014a60 <_fflush_r+0x6c>)
 8014a10:	429c      	cmp	r4, r3
 8014a12:	d11b      	bne.n	8014a4c <_fflush_r+0x58>
 8014a14:	686c      	ldr	r4, [r5, #4]
 8014a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d0ef      	beq.n	80149fe <_fflush_r+0xa>
 8014a1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014a20:	07d0      	lsls	r0, r2, #31
 8014a22:	d404      	bmi.n	8014a2e <_fflush_r+0x3a>
 8014a24:	0599      	lsls	r1, r3, #22
 8014a26:	d402      	bmi.n	8014a2e <_fflush_r+0x3a>
 8014a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a2a:	f7ff fa47 	bl	8013ebc <__retarget_lock_acquire_recursive>
 8014a2e:	4628      	mov	r0, r5
 8014a30:	4621      	mov	r1, r4
 8014a32:	f7ff ff59 	bl	80148e8 <__sflush_r>
 8014a36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a38:	07da      	lsls	r2, r3, #31
 8014a3a:	4605      	mov	r5, r0
 8014a3c:	d4e0      	bmi.n	8014a00 <_fflush_r+0xc>
 8014a3e:	89a3      	ldrh	r3, [r4, #12]
 8014a40:	059b      	lsls	r3, r3, #22
 8014a42:	d4dd      	bmi.n	8014a00 <_fflush_r+0xc>
 8014a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a46:	f7ff fa3a 	bl	8013ebe <__retarget_lock_release_recursive>
 8014a4a:	e7d9      	b.n	8014a00 <_fflush_r+0xc>
 8014a4c:	4b05      	ldr	r3, [pc, #20]	; (8014a64 <_fflush_r+0x70>)
 8014a4e:	429c      	cmp	r4, r3
 8014a50:	d101      	bne.n	8014a56 <_fflush_r+0x62>
 8014a52:	68ac      	ldr	r4, [r5, #8]
 8014a54:	e7df      	b.n	8014a16 <_fflush_r+0x22>
 8014a56:	4b04      	ldr	r3, [pc, #16]	; (8014a68 <_fflush_r+0x74>)
 8014a58:	429c      	cmp	r4, r3
 8014a5a:	bf08      	it	eq
 8014a5c:	68ec      	ldreq	r4, [r5, #12]
 8014a5e:	e7da      	b.n	8014a16 <_fflush_r+0x22>
 8014a60:	08017f64 	.word	0x08017f64
 8014a64:	08017f84 	.word	0x08017f84
 8014a68:	08017f44 	.word	0x08017f44

08014a6c <_lseek_r>:
 8014a6c:	b538      	push	{r3, r4, r5, lr}
 8014a6e:	4d07      	ldr	r5, [pc, #28]	; (8014a8c <_lseek_r+0x20>)
 8014a70:	4604      	mov	r4, r0
 8014a72:	4608      	mov	r0, r1
 8014a74:	4611      	mov	r1, r2
 8014a76:	2200      	movs	r2, #0
 8014a78:	602a      	str	r2, [r5, #0]
 8014a7a:	461a      	mov	r2, r3
 8014a7c:	f7ec fab2 	bl	8000fe4 <_lseek>
 8014a80:	1c43      	adds	r3, r0, #1
 8014a82:	d102      	bne.n	8014a8a <_lseek_r+0x1e>
 8014a84:	682b      	ldr	r3, [r5, #0]
 8014a86:	b103      	cbz	r3, 8014a8a <_lseek_r+0x1e>
 8014a88:	6023      	str	r3, [r4, #0]
 8014a8a:	bd38      	pop	{r3, r4, r5, pc}
 8014a8c:	240082c0 	.word	0x240082c0

08014a90 <__swhatbuf_r>:
 8014a90:	b570      	push	{r4, r5, r6, lr}
 8014a92:	460e      	mov	r6, r1
 8014a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a98:	2900      	cmp	r1, #0
 8014a9a:	b096      	sub	sp, #88	; 0x58
 8014a9c:	4614      	mov	r4, r2
 8014a9e:	461d      	mov	r5, r3
 8014aa0:	da08      	bge.n	8014ab4 <__swhatbuf_r+0x24>
 8014aa2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	602a      	str	r2, [r5, #0]
 8014aaa:	061a      	lsls	r2, r3, #24
 8014aac:	d410      	bmi.n	8014ad0 <__swhatbuf_r+0x40>
 8014aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014ab2:	e00e      	b.n	8014ad2 <__swhatbuf_r+0x42>
 8014ab4:	466a      	mov	r2, sp
 8014ab6:	f000 f8b3 	bl	8014c20 <_fstat_r>
 8014aba:	2800      	cmp	r0, #0
 8014abc:	dbf1      	blt.n	8014aa2 <__swhatbuf_r+0x12>
 8014abe:	9a01      	ldr	r2, [sp, #4]
 8014ac0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014ac4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014ac8:	425a      	negs	r2, r3
 8014aca:	415a      	adcs	r2, r3
 8014acc:	602a      	str	r2, [r5, #0]
 8014ace:	e7ee      	b.n	8014aae <__swhatbuf_r+0x1e>
 8014ad0:	2340      	movs	r3, #64	; 0x40
 8014ad2:	2000      	movs	r0, #0
 8014ad4:	6023      	str	r3, [r4, #0]
 8014ad6:	b016      	add	sp, #88	; 0x58
 8014ad8:	bd70      	pop	{r4, r5, r6, pc}
	...

08014adc <__smakebuf_r>:
 8014adc:	898b      	ldrh	r3, [r1, #12]
 8014ade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014ae0:	079d      	lsls	r5, r3, #30
 8014ae2:	4606      	mov	r6, r0
 8014ae4:	460c      	mov	r4, r1
 8014ae6:	d507      	bpl.n	8014af8 <__smakebuf_r+0x1c>
 8014ae8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014aec:	6023      	str	r3, [r4, #0]
 8014aee:	6123      	str	r3, [r4, #16]
 8014af0:	2301      	movs	r3, #1
 8014af2:	6163      	str	r3, [r4, #20]
 8014af4:	b002      	add	sp, #8
 8014af6:	bd70      	pop	{r4, r5, r6, pc}
 8014af8:	ab01      	add	r3, sp, #4
 8014afa:	466a      	mov	r2, sp
 8014afc:	f7ff ffc8 	bl	8014a90 <__swhatbuf_r>
 8014b00:	9900      	ldr	r1, [sp, #0]
 8014b02:	4605      	mov	r5, r0
 8014b04:	4630      	mov	r0, r6
 8014b06:	f7ff fa4f 	bl	8013fa8 <_malloc_r>
 8014b0a:	b948      	cbnz	r0, 8014b20 <__smakebuf_r+0x44>
 8014b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b10:	059a      	lsls	r2, r3, #22
 8014b12:	d4ef      	bmi.n	8014af4 <__smakebuf_r+0x18>
 8014b14:	f023 0303 	bic.w	r3, r3, #3
 8014b18:	f043 0302 	orr.w	r3, r3, #2
 8014b1c:	81a3      	strh	r3, [r4, #12]
 8014b1e:	e7e3      	b.n	8014ae8 <__smakebuf_r+0xc>
 8014b20:	4b0d      	ldr	r3, [pc, #52]	; (8014b58 <__smakebuf_r+0x7c>)
 8014b22:	62b3      	str	r3, [r6, #40]	; 0x28
 8014b24:	89a3      	ldrh	r3, [r4, #12]
 8014b26:	6020      	str	r0, [r4, #0]
 8014b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b2c:	81a3      	strh	r3, [r4, #12]
 8014b2e:	9b00      	ldr	r3, [sp, #0]
 8014b30:	6163      	str	r3, [r4, #20]
 8014b32:	9b01      	ldr	r3, [sp, #4]
 8014b34:	6120      	str	r0, [r4, #16]
 8014b36:	b15b      	cbz	r3, 8014b50 <__smakebuf_r+0x74>
 8014b38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b3c:	4630      	mov	r0, r6
 8014b3e:	f000 f881 	bl	8014c44 <_isatty_r>
 8014b42:	b128      	cbz	r0, 8014b50 <__smakebuf_r+0x74>
 8014b44:	89a3      	ldrh	r3, [r4, #12]
 8014b46:	f023 0303 	bic.w	r3, r3, #3
 8014b4a:	f043 0301 	orr.w	r3, r3, #1
 8014b4e:	81a3      	strh	r3, [r4, #12]
 8014b50:	89a0      	ldrh	r0, [r4, #12]
 8014b52:	4305      	orrs	r5, r0
 8014b54:	81a5      	strh	r5, [r4, #12]
 8014b56:	e7cd      	b.n	8014af4 <__smakebuf_r+0x18>
 8014b58:	08013cf5 	.word	0x08013cf5

08014b5c <__malloc_lock>:
 8014b5c:	4801      	ldr	r0, [pc, #4]	; (8014b64 <__malloc_lock+0x8>)
 8014b5e:	f7ff b9ad 	b.w	8013ebc <__retarget_lock_acquire_recursive>
 8014b62:	bf00      	nop
 8014b64:	240082c4 	.word	0x240082c4

08014b68 <__malloc_unlock>:
 8014b68:	4801      	ldr	r0, [pc, #4]	; (8014b70 <__malloc_unlock+0x8>)
 8014b6a:	f7ff b9a8 	b.w	8013ebe <__retarget_lock_release_recursive>
 8014b6e:	bf00      	nop
 8014b70:	240082c4 	.word	0x240082c4

08014b74 <_read_r>:
 8014b74:	b538      	push	{r3, r4, r5, lr}
 8014b76:	4d07      	ldr	r5, [pc, #28]	; (8014b94 <_read_r+0x20>)
 8014b78:	4604      	mov	r4, r0
 8014b7a:	4608      	mov	r0, r1
 8014b7c:	4611      	mov	r1, r2
 8014b7e:	2200      	movs	r2, #0
 8014b80:	602a      	str	r2, [r5, #0]
 8014b82:	461a      	mov	r2, r3
 8014b84:	f7ec f9ce 	bl	8000f24 <_read>
 8014b88:	1c43      	adds	r3, r0, #1
 8014b8a:	d102      	bne.n	8014b92 <_read_r+0x1e>
 8014b8c:	682b      	ldr	r3, [r5, #0]
 8014b8e:	b103      	cbz	r3, 8014b92 <_read_r+0x1e>
 8014b90:	6023      	str	r3, [r4, #0]
 8014b92:	bd38      	pop	{r3, r4, r5, pc}
 8014b94:	240082c0 	.word	0x240082c0

08014b98 <_raise_r>:
 8014b98:	291f      	cmp	r1, #31
 8014b9a:	b538      	push	{r3, r4, r5, lr}
 8014b9c:	4604      	mov	r4, r0
 8014b9e:	460d      	mov	r5, r1
 8014ba0:	d904      	bls.n	8014bac <_raise_r+0x14>
 8014ba2:	2316      	movs	r3, #22
 8014ba4:	6003      	str	r3, [r0, #0]
 8014ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8014baa:	bd38      	pop	{r3, r4, r5, pc}
 8014bac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014bae:	b112      	cbz	r2, 8014bb6 <_raise_r+0x1e>
 8014bb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014bb4:	b94b      	cbnz	r3, 8014bca <_raise_r+0x32>
 8014bb6:	4620      	mov	r0, r4
 8014bb8:	f000 f830 	bl	8014c1c <_getpid_r>
 8014bbc:	462a      	mov	r2, r5
 8014bbe:	4601      	mov	r1, r0
 8014bc0:	4620      	mov	r0, r4
 8014bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014bc6:	f000 b817 	b.w	8014bf8 <_kill_r>
 8014bca:	2b01      	cmp	r3, #1
 8014bcc:	d00a      	beq.n	8014be4 <_raise_r+0x4c>
 8014bce:	1c59      	adds	r1, r3, #1
 8014bd0:	d103      	bne.n	8014bda <_raise_r+0x42>
 8014bd2:	2316      	movs	r3, #22
 8014bd4:	6003      	str	r3, [r0, #0]
 8014bd6:	2001      	movs	r0, #1
 8014bd8:	e7e7      	b.n	8014baa <_raise_r+0x12>
 8014bda:	2400      	movs	r4, #0
 8014bdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014be0:	4628      	mov	r0, r5
 8014be2:	4798      	blx	r3
 8014be4:	2000      	movs	r0, #0
 8014be6:	e7e0      	b.n	8014baa <_raise_r+0x12>

08014be8 <raise>:
 8014be8:	4b02      	ldr	r3, [pc, #8]	; (8014bf4 <raise+0xc>)
 8014bea:	4601      	mov	r1, r0
 8014bec:	6818      	ldr	r0, [r3, #0]
 8014bee:	f7ff bfd3 	b.w	8014b98 <_raise_r>
 8014bf2:	bf00      	nop
 8014bf4:	24000034 	.word	0x24000034

08014bf8 <_kill_r>:
 8014bf8:	b538      	push	{r3, r4, r5, lr}
 8014bfa:	4d07      	ldr	r5, [pc, #28]	; (8014c18 <_kill_r+0x20>)
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	4604      	mov	r4, r0
 8014c00:	4608      	mov	r0, r1
 8014c02:	4611      	mov	r1, r2
 8014c04:	602b      	str	r3, [r5, #0]
 8014c06:	f7ec f971 	bl	8000eec <_kill>
 8014c0a:	1c43      	adds	r3, r0, #1
 8014c0c:	d102      	bne.n	8014c14 <_kill_r+0x1c>
 8014c0e:	682b      	ldr	r3, [r5, #0]
 8014c10:	b103      	cbz	r3, 8014c14 <_kill_r+0x1c>
 8014c12:	6023      	str	r3, [r4, #0]
 8014c14:	bd38      	pop	{r3, r4, r5, pc}
 8014c16:	bf00      	nop
 8014c18:	240082c0 	.word	0x240082c0

08014c1c <_getpid_r>:
 8014c1c:	f7ec b95e 	b.w	8000edc <_getpid>

08014c20 <_fstat_r>:
 8014c20:	b538      	push	{r3, r4, r5, lr}
 8014c22:	4d07      	ldr	r5, [pc, #28]	; (8014c40 <_fstat_r+0x20>)
 8014c24:	2300      	movs	r3, #0
 8014c26:	4604      	mov	r4, r0
 8014c28:	4608      	mov	r0, r1
 8014c2a:	4611      	mov	r1, r2
 8014c2c:	602b      	str	r3, [r5, #0]
 8014c2e:	f7ec f9be 	bl	8000fae <_fstat>
 8014c32:	1c43      	adds	r3, r0, #1
 8014c34:	d102      	bne.n	8014c3c <_fstat_r+0x1c>
 8014c36:	682b      	ldr	r3, [r5, #0]
 8014c38:	b103      	cbz	r3, 8014c3c <_fstat_r+0x1c>
 8014c3a:	6023      	str	r3, [r4, #0]
 8014c3c:	bd38      	pop	{r3, r4, r5, pc}
 8014c3e:	bf00      	nop
 8014c40:	240082c0 	.word	0x240082c0

08014c44 <_isatty_r>:
 8014c44:	b538      	push	{r3, r4, r5, lr}
 8014c46:	4d06      	ldr	r5, [pc, #24]	; (8014c60 <_isatty_r+0x1c>)
 8014c48:	2300      	movs	r3, #0
 8014c4a:	4604      	mov	r4, r0
 8014c4c:	4608      	mov	r0, r1
 8014c4e:	602b      	str	r3, [r5, #0]
 8014c50:	f7ec f9bd 	bl	8000fce <_isatty>
 8014c54:	1c43      	adds	r3, r0, #1
 8014c56:	d102      	bne.n	8014c5e <_isatty_r+0x1a>
 8014c58:	682b      	ldr	r3, [r5, #0]
 8014c5a:	b103      	cbz	r3, 8014c5e <_isatty_r+0x1a>
 8014c5c:	6023      	str	r3, [r4, #0]
 8014c5e:	bd38      	pop	{r3, r4, r5, pc}
 8014c60:	240082c0 	.word	0x240082c0

08014c64 <_init>:
 8014c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c66:	bf00      	nop
 8014c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c6a:	bc08      	pop	{r3}
 8014c6c:	469e      	mov	lr, r3
 8014c6e:	4770      	bx	lr

08014c70 <_fini>:
 8014c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c72:	bf00      	nop
 8014c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c76:	bc08      	pop	{r3}
 8014c78:	469e      	mov	lr, r3
 8014c7a:	4770      	bx	lr
