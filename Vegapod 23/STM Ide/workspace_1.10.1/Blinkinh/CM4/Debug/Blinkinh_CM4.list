
Blinkinh_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003248  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  081034e0  081034e0  000134e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081034f0  081034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081034f4  081034f4  000134f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000114  10000000  081034f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c0  10000114  0810360c  00020114  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  100001d4  0810360c  000201d4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
  9 .debug_info   000102ef  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001bf5  00000000  00000000  00030433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000cc0  00000000  00000000  00032028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000bf8  00000000  00000000  00032ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039b1d  00000000  00000000  000338e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e198  00000000  00000000  0006d3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001869df  00000000  00000000  0007b595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00201f74  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003650  00000000  00000000  00201fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000114 	.word	0x10000114
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081034c8 	.word	0x081034c8

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000118 	.word	0x10000118
 81002d4:	081034c8 	.word	0x081034c8

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_dmul>:
 8100650:	b570      	push	{r4, r5, r6, lr}
 8100652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 810065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810065e:	bf1d      	ittte	ne
 8100660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100664:	ea94 0f0c 	teqne	r4, ip
 8100668:	ea95 0f0c 	teqne	r5, ip
 810066c:	f000 f8de 	bleq	810082c <__aeabi_dmul+0x1dc>
 8100670:	442c      	add	r4, r5
 8100672:	ea81 0603 	eor.w	r6, r1, r3
 8100676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 810067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 810067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8100682:	bf18      	it	ne
 8100684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 810068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100690:	d038      	beq.n	8100704 <__aeabi_dmul+0xb4>
 8100692:	fba0 ce02 	umull	ip, lr, r0, r2
 8100696:	f04f 0500 	mov.w	r5, #0
 810069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 810069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006a6:	f04f 0600 	mov.w	r6, #0
 81006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006ae:	f09c 0f00 	teq	ip, #0
 81006b2:	bf18      	it	ne
 81006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 81006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006c4:	d204      	bcs.n	81006d0 <__aeabi_dmul+0x80>
 81006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006ca:	416d      	adcs	r5, r5
 81006cc:	eb46 0606 	adc.w	r6, r6, r6
 81006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81006e8:	bf88      	it	hi
 81006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81006ee:	d81e      	bhi.n	810072e <__aeabi_dmul+0xde>
 81006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81006f4:	bf08      	it	eq
 81006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81006fa:	f150 0000 	adcs.w	r0, r0, #0
 81006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100702:	bd70      	pop	{r4, r5, r6, pc}
 8100704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100708:	ea46 0101 	orr.w	r1, r6, r1
 810070c:	ea40 0002 	orr.w	r0, r0, r2
 8100710:	ea81 0103 	eor.w	r1, r1, r3
 8100714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100718:	bfc2      	ittt	gt
 810071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 810071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100722:	bd70      	popgt	{r4, r5, r6, pc}
 8100724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100728:	f04f 0e00 	mov.w	lr, #0
 810072c:	3c01      	subs	r4, #1
 810072e:	f300 80ab 	bgt.w	8100888 <__aeabi_dmul+0x238>
 8100732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8100736:	bfde      	ittt	le
 8100738:	2000      	movle	r0, #0
 810073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 810073e:	bd70      	pople	{r4, r5, r6, pc}
 8100740:	f1c4 0400 	rsb	r4, r4, #0
 8100744:	3c20      	subs	r4, #32
 8100746:	da35      	bge.n	81007b4 <__aeabi_dmul+0x164>
 8100748:	340c      	adds	r4, #12
 810074a:	dc1b      	bgt.n	8100784 <__aeabi_dmul+0x134>
 810074c:	f104 0414 	add.w	r4, r4, #20
 8100750:	f1c4 0520 	rsb	r5, r4, #32
 8100754:	fa00 f305 	lsl.w	r3, r0, r5
 8100758:	fa20 f004 	lsr.w	r0, r0, r4
 810075c:	fa01 f205 	lsl.w	r2, r1, r5
 8100760:	ea40 0002 	orr.w	r0, r0, r2
 8100764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 810076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100770:	fa21 f604 	lsr.w	r6, r1, r4
 8100774:	eb42 0106 	adc.w	r1, r2, r6
 8100778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810077c:	bf08      	it	eq
 810077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100782:	bd70      	pop	{r4, r5, r6, pc}
 8100784:	f1c4 040c 	rsb	r4, r4, #12
 8100788:	f1c4 0520 	rsb	r5, r4, #32
 810078c:	fa00 f304 	lsl.w	r3, r0, r4
 8100790:	fa20 f005 	lsr.w	r0, r0, r5
 8100794:	fa01 f204 	lsl.w	r2, r1, r4
 8100798:	ea40 0002 	orr.w	r0, r0, r2
 810079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007a4:	f141 0100 	adc.w	r1, r1, #0
 81007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007ac:	bf08      	it	eq
 81007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007b2:	bd70      	pop	{r4, r5, r6, pc}
 81007b4:	f1c4 0520 	rsb	r5, r4, #32
 81007b8:	fa00 f205 	lsl.w	r2, r0, r5
 81007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 81007c0:	fa20 f304 	lsr.w	r3, r0, r4
 81007c4:	fa01 f205 	lsl.w	r2, r1, r5
 81007c8:	ea43 0302 	orr.w	r3, r3, r2
 81007cc:	fa21 f004 	lsr.w	r0, r1, r4
 81007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007d4:	fa21 f204 	lsr.w	r2, r1, r4
 81007d8:	ea20 0002 	bic.w	r0, r0, r2
 81007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007e4:	bf08      	it	eq
 81007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ea:	bd70      	pop	{r4, r5, r6, pc}
 81007ec:	f094 0f00 	teq	r4, #0
 81007f0:	d10f      	bne.n	8100812 <__aeabi_dmul+0x1c2>
 81007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81007f6:	0040      	lsls	r0, r0, #1
 81007f8:	eb41 0101 	adc.w	r1, r1, r1
 81007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100800:	bf08      	it	eq
 8100802:	3c01      	subeq	r4, #1
 8100804:	d0f7      	beq.n	81007f6 <__aeabi_dmul+0x1a6>
 8100806:	ea41 0106 	orr.w	r1, r1, r6
 810080a:	f095 0f00 	teq	r5, #0
 810080e:	bf18      	it	ne
 8100810:	4770      	bxne	lr
 8100812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8100816:	0052      	lsls	r2, r2, #1
 8100818:	eb43 0303 	adc.w	r3, r3, r3
 810081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100820:	bf08      	it	eq
 8100822:	3d01      	subeq	r5, #1
 8100824:	d0f7      	beq.n	8100816 <__aeabi_dmul+0x1c6>
 8100826:	ea43 0306 	orr.w	r3, r3, r6
 810082a:	4770      	bx	lr
 810082c:	ea94 0f0c 	teq	r4, ip
 8100830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100834:	bf18      	it	ne
 8100836:	ea95 0f0c 	teqne	r5, ip
 810083a:	d00c      	beq.n	8100856 <__aeabi_dmul+0x206>
 810083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100840:	bf18      	it	ne
 8100842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100846:	d1d1      	bne.n	81007ec <__aeabi_dmul+0x19c>
 8100848:	ea81 0103 	eor.w	r1, r1, r3
 810084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100850:	f04f 0000 	mov.w	r0, #0
 8100854:	bd70      	pop	{r4, r5, r6, pc}
 8100856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 810085a:	bf06      	itte	eq
 810085c:	4610      	moveq	r0, r2
 810085e:	4619      	moveq	r1, r3
 8100860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100864:	d019      	beq.n	810089a <__aeabi_dmul+0x24a>
 8100866:	ea94 0f0c 	teq	r4, ip
 810086a:	d102      	bne.n	8100872 <__aeabi_dmul+0x222>
 810086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100870:	d113      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100872:	ea95 0f0c 	teq	r5, ip
 8100876:	d105      	bne.n	8100884 <__aeabi_dmul+0x234>
 8100878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 810087c:	bf1c      	itt	ne
 810087e:	4610      	movne	r0, r2
 8100880:	4619      	movne	r1, r3
 8100882:	d10a      	bne.n	810089a <__aeabi_dmul+0x24a>
 8100884:	ea81 0103 	eor.w	r1, r1, r3
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100894:	f04f 0000 	mov.w	r0, #0
 8100898:	bd70      	pop	{r4, r5, r6, pc}
 810089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 810089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008a2:	bd70      	pop	{r4, r5, r6, pc}

081008a4 <__aeabi_ddiv>:
 81008a4:	b570      	push	{r4, r5, r6, lr}
 81008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008b2:	bf1d      	ittte	ne
 81008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008b8:	ea94 0f0c 	teqne	r4, ip
 81008bc:	ea95 0f0c 	teqne	r5, ip
 81008c0:	f000 f8a7 	bleq	8100a12 <__aeabi_ddiv+0x16e>
 81008c4:	eba4 0405 	sub.w	r4, r4, r5
 81008c8:	ea81 0e03 	eor.w	lr, r1, r3
 81008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008d4:	f000 8088 	beq.w	81009e8 <__aeabi_ddiv+0x144>
 81008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81008fc:	429d      	cmp	r5, r3
 81008fe:	bf08      	it	eq
 8100900:	4296      	cmpeq	r6, r2
 8100902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8100906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 810090a:	d202      	bcs.n	8100912 <__aeabi_ddiv+0x6e>
 810090c:	085b      	lsrs	r3, r3, #1
 810090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8100912:	1ab6      	subs	r6, r6, r2
 8100914:	eb65 0503 	sbc.w	r5, r5, r3
 8100918:	085b      	lsrs	r3, r3, #1
 810091a:	ea4f 0232 	mov.w	r2, r2, rrx
 810091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8100922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8100926:	ebb6 0e02 	subs.w	lr, r6, r2
 810092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810092e:	bf22      	ittt	cs
 8100930:	1ab6      	subcs	r6, r6, r2
 8100932:	4675      	movcs	r5, lr
 8100934:	ea40 000c 	orrcs.w	r0, r0, ip
 8100938:	085b      	lsrs	r3, r3, #1
 810093a:	ea4f 0232 	mov.w	r2, r2, rrx
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100980:	ea55 0e06 	orrs.w	lr, r5, r6
 8100984:	d018      	beq.n	81009b8 <__aeabi_ddiv+0x114>
 8100986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 810098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 810098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 810099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 810099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009a2:	d1c0      	bne.n	8100926 <__aeabi_ddiv+0x82>
 81009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009a8:	d10b      	bne.n	81009c2 <__aeabi_ddiv+0x11e>
 81009aa:	ea41 0100 	orr.w	r1, r1, r0
 81009ae:	f04f 0000 	mov.w	r0, #0
 81009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009b6:	e7b6      	b.n	8100926 <__aeabi_ddiv+0x82>
 81009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009bc:	bf04      	itt	eq
 81009be:	4301      	orreq	r1, r0
 81009c0:	2000      	moveq	r0, #0
 81009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009c6:	bf88      	it	hi
 81009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009cc:	f63f aeaf 	bhi.w	810072e <__aeabi_dmul+0xde>
 81009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 81009d4:	bf04      	itt	eq
 81009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009de:	f150 0000 	adcs.w	r0, r0, #0
 81009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009e6:	bd70      	pop	{r4, r5, r6, pc}
 81009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 81009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 81009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 81009f4:	bfc2      	ittt	gt
 81009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 81009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8100a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a04:	f04f 0e00 	mov.w	lr, #0
 8100a08:	3c01      	subs	r4, #1
 8100a0a:	e690      	b.n	810072e <__aeabi_dmul+0xde>
 8100a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8100a10:	e68d      	b.n	810072e <__aeabi_dmul+0xde>
 8100a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a16:	ea94 0f0c 	teq	r4, ip
 8100a1a:	bf08      	it	eq
 8100a1c:	ea95 0f0c 	teqeq	r5, ip
 8100a20:	f43f af3b 	beq.w	810089a <__aeabi_dmul+0x24a>
 8100a24:	ea94 0f0c 	teq	r4, ip
 8100a28:	d10a      	bne.n	8100a40 <__aeabi_ddiv+0x19c>
 8100a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a2e:	f47f af34 	bne.w	810089a <__aeabi_dmul+0x24a>
 8100a32:	ea95 0f0c 	teq	r5, ip
 8100a36:	f47f af25 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a3a:	4610      	mov	r0, r2
 8100a3c:	4619      	mov	r1, r3
 8100a3e:	e72c      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a40:	ea95 0f0c 	teq	r5, ip
 8100a44:	d106      	bne.n	8100a54 <__aeabi_ddiv+0x1b0>
 8100a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a4a:	f43f aefd 	beq.w	8100848 <__aeabi_dmul+0x1f8>
 8100a4e:	4610      	mov	r0, r2
 8100a50:	4619      	mov	r1, r3
 8100a52:	e722      	b.n	810089a <__aeabi_dmul+0x24a>
 8100a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a58:	bf18      	it	ne
 8100a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a5e:	f47f aec5 	bne.w	81007ec <__aeabi_dmul+0x19c>
 8100a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a66:	f47f af0d 	bne.w	8100884 <__aeabi_dmul+0x234>
 8100a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a6e:	f47f aeeb 	bne.w	8100848 <__aeabi_dmul+0x1f8>
 8100a72:	e712      	b.n	810089a <__aeabi_dmul+0x24a>

08100a74 <__aeabi_d2uiz>:
 8100a74:	004a      	lsls	r2, r1, #1
 8100a76:	d211      	bcs.n	8100a9c <__aeabi_d2uiz+0x28>
 8100a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100a7c:	d211      	bcs.n	8100aa2 <__aeabi_d2uiz+0x2e>
 8100a7e:	d50d      	bpl.n	8100a9c <__aeabi_d2uiz+0x28>
 8100a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100a88:	d40e      	bmi.n	8100aa8 <__aeabi_d2uiz+0x34>
 8100a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100a96:	fa23 f002 	lsr.w	r0, r3, r2
 8100a9a:	4770      	bx	lr
 8100a9c:	f04f 0000 	mov.w	r0, #0
 8100aa0:	4770      	bx	lr
 8100aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100aa6:	d102      	bne.n	8100aae <__aeabi_d2uiz+0x3a>
 8100aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8100aac:	4770      	bx	lr
 8100aae:	f04f 0000 	mov.w	r0, #0
 8100ab2:	4770      	bx	lr

08100ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100ab4:	b480      	push	{r7}
 8100ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100ab8:	4b09      	ldr	r3, [pc, #36]	; (8100ae0 <SystemInit+0x2c>)
 8100aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100abe:	4a08      	ldr	r2, [pc, #32]	; (8100ae0 <SystemInit+0x2c>)
 8100ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100ac8:	4b05      	ldr	r3, [pc, #20]	; (8100ae0 <SystemInit+0x2c>)
 8100aca:	691b      	ldr	r3, [r3, #16]
 8100acc:	4a04      	ldr	r2, [pc, #16]	; (8100ae0 <SystemInit+0x2c>)
 8100ace:	f043 0310 	orr.w	r3, r3, #16
 8100ad2:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100ad4:	bf00      	nop
 8100ad6:	46bd      	mov	sp, r7
 8100ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100adc:	4770      	bx	lr
 8100ade:	bf00      	nop
 8100ae0:	e000ed00 	.word	0xe000ed00

08100ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100ae4:	b5b0      	push	{r4, r5, r7, lr}
 8100ae6:	b082      	sub	sp, #8
 8100ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	samples = sizeof(lookUp1)/sizeof(lookUp1[0]);
 8100aea:	4b6e      	ldr	r3, [pc, #440]	; (8100ca4 <main+0x1c0>)
 8100aec:	2215      	movs	r2, #21
 8100aee:	601a      	str	r2, [r3, #0]
    maxCount = (((uint32_t)240000000)/(sinFreq*samples));
 8100af0:	4b6d      	ldr	r3, [pc, #436]	; (8100ca8 <main+0x1c4>)
 8100af2:	681b      	ldr	r3, [r3, #0]
 8100af4:	4a6b      	ldr	r2, [pc, #428]	; (8100ca4 <main+0x1c0>)
 8100af6:	6812      	ldr	r2, [r2, #0]
 8100af8:	fb02 f303 	mul.w	r3, r2, r3
 8100afc:	4a6b      	ldr	r2, [pc, #428]	; (8100cac <main+0x1c8>)
 8100afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8100b02:	4a6b      	ldr	r2, [pc, #428]	; (8100cb0 <main+0x1cc>)
 8100b04:	6013      	str	r3, [r2, #0]
//    lookUp1 = (uint32_t*) malloc(samples * sizeof(uint32_t));
//    lookUp2 = (uint32_t*) malloc(samples * sizeof(uint32_t));
//    lookUp3 = (uint32_t*) malloc(samples * sizeof(uint32_t));

    for (int i = 0; i < samples; i++) {
 8100b06:	2300      	movs	r3, #0
 8100b08:	607b      	str	r3, [r7, #4]
 8100b0a:	e074      	b.n	8100bf6 <main+0x112>
//    	lookUp1[i] = (sin(6.0*(3.14/3.0)*(((float)i)/((float)(samples-1))) + ((2*3.14)/3)) * 800) + 800;
//    	lookUp2[i] = (sin(6.0*(3.14/3.0)*(((float)i)/((float)(samples-1))) + ((4*3.14)/3)) * 800) + 800;
//    	lookUp3[i] = (sin(6.0*(3.14/3.0)*(((float)i)/((float)(samples-1))) + ((6*3.14)/3)) * 800) + 800;
        lookUp1[i] = (lookUp1[i] / 1600.0) * maxCount;
 8100b0c:	4a69      	ldr	r2, [pc, #420]	; (8100cb4 <main+0x1d0>)
 8100b0e:	687b      	ldr	r3, [r7, #4]
 8100b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100b14:	4618      	mov	r0, r3
 8100b16:	f7ff fd21 	bl	810055c <__aeabi_ui2d>
 8100b1a:	f04f 0200 	mov.w	r2, #0
 8100b1e:	4b66      	ldr	r3, [pc, #408]	; (8100cb8 <main+0x1d4>)
 8100b20:	f7ff fec0 	bl	81008a4 <__aeabi_ddiv>
 8100b24:	4602      	mov	r2, r0
 8100b26:	460b      	mov	r3, r1
 8100b28:	4614      	mov	r4, r2
 8100b2a:	461d      	mov	r5, r3
 8100b2c:	4b60      	ldr	r3, [pc, #384]	; (8100cb0 <main+0x1cc>)
 8100b2e:	681b      	ldr	r3, [r3, #0]
 8100b30:	4618      	mov	r0, r3
 8100b32:	f7ff fd13 	bl	810055c <__aeabi_ui2d>
 8100b36:	4602      	mov	r2, r0
 8100b38:	460b      	mov	r3, r1
 8100b3a:	4620      	mov	r0, r4
 8100b3c:	4629      	mov	r1, r5
 8100b3e:	f7ff fd87 	bl	8100650 <__aeabi_dmul>
 8100b42:	4602      	mov	r2, r0
 8100b44:	460b      	mov	r3, r1
 8100b46:	4610      	mov	r0, r2
 8100b48:	4619      	mov	r1, r3
 8100b4a:	f7ff ff93 	bl	8100a74 <__aeabi_d2uiz>
 8100b4e:	4602      	mov	r2, r0
 8100b50:	4958      	ldr	r1, [pc, #352]	; (8100cb4 <main+0x1d0>)
 8100b52:	687b      	ldr	r3, [r7, #4]
 8100b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        lookUp2[i] = (lookUp2[i] / 1600.0) * maxCount;
 8100b58:	4a58      	ldr	r2, [pc, #352]	; (8100cbc <main+0x1d8>)
 8100b5a:	687b      	ldr	r3, [r7, #4]
 8100b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100b60:	4618      	mov	r0, r3
 8100b62:	f7ff fcfb 	bl	810055c <__aeabi_ui2d>
 8100b66:	f04f 0200 	mov.w	r2, #0
 8100b6a:	4b53      	ldr	r3, [pc, #332]	; (8100cb8 <main+0x1d4>)
 8100b6c:	f7ff fe9a 	bl	81008a4 <__aeabi_ddiv>
 8100b70:	4602      	mov	r2, r0
 8100b72:	460b      	mov	r3, r1
 8100b74:	4614      	mov	r4, r2
 8100b76:	461d      	mov	r5, r3
 8100b78:	4b4d      	ldr	r3, [pc, #308]	; (8100cb0 <main+0x1cc>)
 8100b7a:	681b      	ldr	r3, [r3, #0]
 8100b7c:	4618      	mov	r0, r3
 8100b7e:	f7ff fced 	bl	810055c <__aeabi_ui2d>
 8100b82:	4602      	mov	r2, r0
 8100b84:	460b      	mov	r3, r1
 8100b86:	4620      	mov	r0, r4
 8100b88:	4629      	mov	r1, r5
 8100b8a:	f7ff fd61 	bl	8100650 <__aeabi_dmul>
 8100b8e:	4602      	mov	r2, r0
 8100b90:	460b      	mov	r3, r1
 8100b92:	4610      	mov	r0, r2
 8100b94:	4619      	mov	r1, r3
 8100b96:	f7ff ff6d 	bl	8100a74 <__aeabi_d2uiz>
 8100b9a:	4602      	mov	r2, r0
 8100b9c:	4947      	ldr	r1, [pc, #284]	; (8100cbc <main+0x1d8>)
 8100b9e:	687b      	ldr	r3, [r7, #4]
 8100ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        lookUp3[i] = (lookUp3[i] / 1600.0) * maxCount;
 8100ba4:	4a46      	ldr	r2, [pc, #280]	; (8100cc0 <main+0x1dc>)
 8100ba6:	687b      	ldr	r3, [r7, #4]
 8100ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100bac:	4618      	mov	r0, r3
 8100bae:	f7ff fcd5 	bl	810055c <__aeabi_ui2d>
 8100bb2:	f04f 0200 	mov.w	r2, #0
 8100bb6:	4b40      	ldr	r3, [pc, #256]	; (8100cb8 <main+0x1d4>)
 8100bb8:	f7ff fe74 	bl	81008a4 <__aeabi_ddiv>
 8100bbc:	4602      	mov	r2, r0
 8100bbe:	460b      	mov	r3, r1
 8100bc0:	4614      	mov	r4, r2
 8100bc2:	461d      	mov	r5, r3
 8100bc4:	4b3a      	ldr	r3, [pc, #232]	; (8100cb0 <main+0x1cc>)
 8100bc6:	681b      	ldr	r3, [r3, #0]
 8100bc8:	4618      	mov	r0, r3
 8100bca:	f7ff fcc7 	bl	810055c <__aeabi_ui2d>
 8100bce:	4602      	mov	r2, r0
 8100bd0:	460b      	mov	r3, r1
 8100bd2:	4620      	mov	r0, r4
 8100bd4:	4629      	mov	r1, r5
 8100bd6:	f7ff fd3b 	bl	8100650 <__aeabi_dmul>
 8100bda:	4602      	mov	r2, r0
 8100bdc:	460b      	mov	r3, r1
 8100bde:	4610      	mov	r0, r2
 8100be0:	4619      	mov	r1, r3
 8100be2:	f7ff ff47 	bl	8100a74 <__aeabi_d2uiz>
 8100be6:	4602      	mov	r2, r0
 8100be8:	4935      	ldr	r1, [pc, #212]	; (8100cc0 <main+0x1dc>)
 8100bea:	687b      	ldr	r3, [r7, #4]
 8100bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < samples; i++) {
 8100bf0:	687b      	ldr	r3, [r7, #4]
 8100bf2:	3301      	adds	r3, #1
 8100bf4:	607b      	str	r3, [r7, #4]
 8100bf6:	687a      	ldr	r2, [r7, #4]
 8100bf8:	4b2a      	ldr	r3, [pc, #168]	; (8100ca4 <main+0x1c0>)
 8100bfa:	681b      	ldr	r3, [r3, #0]
 8100bfc:	429a      	cmp	r2, r3
 8100bfe:	d385      	bcc.n	8100b0c <main+0x28>
      }
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100c00:	4b30      	ldr	r3, [pc, #192]	; (8100cc4 <main+0x1e0>)
 8100c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c06:	4a2f      	ldr	r2, [pc, #188]	; (8100cc4 <main+0x1e0>)
 8100c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c10:	4b2c      	ldr	r3, [pc, #176]	; (8100cc4 <main+0x1e0>)
 8100c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100c1a:	603b      	str	r3, [r7, #0]
 8100c1c:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100c1e:	2001      	movs	r0, #1
 8100c20:	f000 ffe0 	bl	8101be4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100c24:	f001 f86a 	bl	8101cfc <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100c28:	2201      	movs	r2, #1
 8100c2a:	2102      	movs	r1, #2
 8100c2c:	2000      	movs	r0, #0
 8100c2e:	f000 ffeb 	bl	8101c08 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100c32:	4b25      	ldr	r3, [pc, #148]	; (8100cc8 <main+0x1e4>)
 8100c34:	681b      	ldr	r3, [r3, #0]
 8100c36:	091b      	lsrs	r3, r3, #4
 8100c38:	f003 030f 	and.w	r3, r3, #15
 8100c3c:	2b07      	cmp	r3, #7
 8100c3e:	d108      	bne.n	8100c52 <main+0x16e>
 8100c40:	4b22      	ldr	r3, [pc, #136]	; (8100ccc <main+0x1e8>)
 8100c42:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100c46:	4a21      	ldr	r2, [pc, #132]	; (8100ccc <main+0x1e8>)
 8100c48:	f043 0301 	orr.w	r3, r3, #1
 8100c4c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100c50:	e007      	b.n	8100c62 <main+0x17e>
 8100c52:	4b1e      	ldr	r3, [pc, #120]	; (8100ccc <main+0x1e8>)
 8100c54:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100c58:	4a1c      	ldr	r2, [pc, #112]	; (8100ccc <main+0x1e8>)
 8100c5a:	f043 0301 	orr.w	r3, r3, #1
 8100c5e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100c62:	f000 fc29 	bl	81014b8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100c66:	f000 f9d5 	bl	8101014 <MX_GPIO_Init>
  MX_TIM1_Init();
 8100c6a:	f000 f833 	bl	8100cd4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8100c6e:	f000 f913 	bl	8100e98 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE );
 8100c72:	4b17      	ldr	r3, [pc, #92]	; (8100cd0 <main+0x1ec>)
 8100c74:	681b      	ldr	r3, [r3, #0]
 8100c76:	68da      	ldr	r2, [r3, #12]
 8100c78:	4b15      	ldr	r3, [pc, #84]	; (8100cd0 <main+0x1ec>)
 8100c7a:	681b      	ldr	r3, [r3, #0]
 8100c7c:	f042 0201 	orr.w	r2, r2, #1
 8100c80:	60da      	str	r2, [r3, #12]
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8100c82:	2100      	movs	r1, #0
 8100c84:	4812      	ldr	r0, [pc, #72]	; (8100cd0 <main+0x1ec>)
 8100c86:	f001 fa79 	bl	810217c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);
 8100c8a:	2104      	movs	r1, #4
 8100c8c:	4810      	ldr	r0, [pc, #64]	; (8100cd0 <main+0x1ec>)
 8100c8e:	f001 fa75 	bl	810217c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_3);
 8100c92:	2108      	movs	r1, #8
 8100c94:	480e      	ldr	r0, [pc, #56]	; (8100cd0 <main+0x1ec>)
 8100c96:	f001 fa71 	bl	810217c <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8100c9a:	210c      	movs	r1, #12
 8100c9c:	480c      	ldr	r0, [pc, #48]	; (8100cd0 <main+0x1ec>)
 8100c9e:	f001 fa6d 	bl	810217c <HAL_TIM_OC_Start_IT>
//  uint32_t lastt;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100ca2:	e7fe      	b.n	8100ca2 <main+0x1be>
 8100ca4:	1000000c 	.word	0x1000000c
 8100ca8:	10000008 	.word	0x10000008
 8100cac:	0e4e1c00 	.word	0x0e4e1c00
 8100cb0:	100001c8 	.word	0x100001c8
 8100cb4:	10000010 	.word	0x10000010
 8100cb8:	40990000 	.word	0x40990000
 8100cbc:	10000064 	.word	0x10000064
 8100cc0:	100000b8 	.word	0x100000b8
 8100cc4:	58024400 	.word	0x58024400
 8100cc8:	e000ed00 	.word	0xe000ed00
 8100ccc:	58026400 	.word	0x58026400
 8100cd0:	1000017c 	.word	0x1000017c

08100cd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8100cd4:	b580      	push	{r7, lr}
 8100cd6:	b09a      	sub	sp, #104	; 0x68
 8100cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8100cda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8100cde:	2200      	movs	r2, #0
 8100ce0:	601a      	str	r2, [r3, #0]
 8100ce2:	605a      	str	r2, [r3, #4]
 8100ce4:	609a      	str	r2, [r3, #8]
 8100ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100ce8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100cec:	2200      	movs	r2, #0
 8100cee:	601a      	str	r2, [r3, #0]
 8100cf0:	605a      	str	r2, [r3, #4]
 8100cf2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100cf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100cf8:	2200      	movs	r2, #0
 8100cfa:	601a      	str	r2, [r3, #0]
 8100cfc:	605a      	str	r2, [r3, #4]
 8100cfe:	609a      	str	r2, [r3, #8]
 8100d00:	60da      	str	r2, [r3, #12]
 8100d02:	611a      	str	r2, [r3, #16]
 8100d04:	615a      	str	r2, [r3, #20]
 8100d06:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100d08:	1d3b      	adds	r3, r7, #4
 8100d0a:	222c      	movs	r2, #44	; 0x2c
 8100d0c:	2100      	movs	r1, #0
 8100d0e:	4618      	mov	r0, r3
 8100d10:	f002 fbd2 	bl	81034b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8100d14:	4b5e      	ldr	r3, [pc, #376]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100d16:	4a5f      	ldr	r2, [pc, #380]	; (8100e94 <MX_TIM1_Init+0x1c0>)
 8100d18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20000;
 8100d1a:	4b5d      	ldr	r3, [pc, #372]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100d1c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8100d20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100d22:	4b5b      	ldr	r3, [pc, #364]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100d24:	2200      	movs	r2, #0
 8100d26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8100d28:	4b59      	ldr	r3, [pc, #356]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100d2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8100d2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100d30:	4b57      	ldr	r3, [pc, #348]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100d32:	2200      	movs	r2, #0
 8100d34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8100d36:	4b56      	ldr	r3, [pc, #344]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100d38:	2200      	movs	r2, #0
 8100d3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8100d3c:	4b54      	ldr	r3, [pc, #336]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100d3e:	2280      	movs	r2, #128	; 0x80
 8100d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8100d42:	4853      	ldr	r0, [pc, #332]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100d44:	f001 f962 	bl	810200c <HAL_TIM_Base_Init>
 8100d48:	4603      	mov	r3, r0
 8100d4a:	2b00      	cmp	r3, #0
 8100d4c:	d001      	beq.n	8100d52 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8100d4e:	f000 f9bd 	bl	81010cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8100d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100d56:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8100d58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8100d5c:	4619      	mov	r1, r3
 8100d5e:	484c      	ldr	r0, [pc, #304]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100d60:	f001 fd00 	bl	8102764 <HAL_TIM_ConfigClockSource>
 8100d64:	4603      	mov	r3, r0
 8100d66:	2b00      	cmp	r3, #0
 8100d68:	d001      	beq.n	8100d6e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8100d6a:	f000 f9af 	bl	81010cc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8100d6e:	4848      	ldr	r0, [pc, #288]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100d70:	f001 f9a3 	bl	81020ba <HAL_TIM_OC_Init>
 8100d74:	4603      	mov	r3, r0
 8100d76:	2b00      	cmp	r3, #0
 8100d78:	d001      	beq.n	8100d7e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8100d7a:	f000 f9a7 	bl	81010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100d7e:	2300      	movs	r3, #0
 8100d80:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8100d82:	2300      	movs	r3, #0
 8100d84:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100d86:	2300      	movs	r3, #0
 8100d88:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8100d8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100d8e:	4619      	mov	r1, r3
 8100d90:	483f      	ldr	r0, [pc, #252]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100d92:	f002 fa43 	bl	810321c <HAL_TIMEx_MasterConfigSynchronization>
 8100d96:	4603      	mov	r3, r0
 8100d98:	2b00      	cmp	r3, #0
 8100d9a:	d001      	beq.n	8100da0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8100d9c:	f000 f996 	bl	81010cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8100da0:	2300      	movs	r3, #0
 8100da2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1024;
 8100da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8100da8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100daa:	2300      	movs	r3, #0
 8100dac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100dae:	2300      	movs	r3, #0
 8100db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100db2:	2300      	movs	r3, #0
 8100db4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100db6:	2300      	movs	r3, #0
 8100db8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100dba:	2300      	movs	r3, #0
 8100dbc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8100dbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100dc2:	2200      	movs	r2, #0
 8100dc4:	4619      	mov	r1, r3
 8100dc6:	4832      	ldr	r0, [pc, #200]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100dc8:	f001 fc52 	bl	8102670 <HAL_TIM_OC_ConfigChannel>
 8100dcc:	4603      	mov	r3, r0
 8100dce:	2b00      	cmp	r3, #0
 8100dd0:	d001      	beq.n	8100dd6 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8100dd2:	f000 f97b 	bl	81010cc <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8100dd6:	4b2e      	ldr	r3, [pc, #184]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100dd8:	681b      	ldr	r3, [r3, #0]
 8100dda:	699a      	ldr	r2, [r3, #24]
 8100ddc:	4b2c      	ldr	r3, [pc, #176]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100dde:	681b      	ldr	r3, [r3, #0]
 8100de0:	f042 0208 	orr.w	r2, r2, #8
 8100de4:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 2048;
 8100de6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8100dea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100dec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100df0:	2204      	movs	r2, #4
 8100df2:	4619      	mov	r1, r3
 8100df4:	4826      	ldr	r0, [pc, #152]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100df6:	f001 fc3b 	bl	8102670 <HAL_TIM_OC_ConfigChannel>
 8100dfa:	4603      	mov	r3, r0
 8100dfc:	2b00      	cmp	r3, #0
 8100dfe:	d001      	beq.n	8100e04 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8100e00:	f000 f964 	bl	81010cc <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8100e04:	4b22      	ldr	r3, [pc, #136]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100e06:	681b      	ldr	r3, [r3, #0]
 8100e08:	699a      	ldr	r2, [r3, #24]
 8100e0a:	4b21      	ldr	r3, [pc, #132]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100e0c:	681b      	ldr	r3, [r3, #0]
 8100e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8100e12:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 4096;
 8100e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100e18:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8100e1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100e1e:	2208      	movs	r2, #8
 8100e20:	4619      	mov	r1, r3
 8100e22:	481b      	ldr	r0, [pc, #108]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100e24:	f001 fc24 	bl	8102670 <HAL_TIM_OC_ConfigChannel>
 8100e28:	4603      	mov	r3, r0
 8100e2a:	2b00      	cmp	r3, #0
 8100e2c:	d001      	beq.n	8100e32 <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8100e2e:	f000 f94d 	bl	81010cc <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 8100e32:	4b17      	ldr	r3, [pc, #92]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100e34:	681b      	ldr	r3, [r3, #0]
 8100e36:	69da      	ldr	r2, [r3, #28]
 8100e38:	4b15      	ldr	r3, [pc, #84]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100e3a:	681b      	ldr	r3, [r3, #0]
 8100e3c:	f042 0208 	orr.w	r2, r2, #8
 8100e40:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100e42:	2300      	movs	r3, #0
 8100e44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100e46:	2300      	movs	r3, #0
 8100e48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100e4a:	2300      	movs	r3, #0
 8100e4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100e4e:	2300      	movs	r3, #0
 8100e50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100e52:	2300      	movs	r3, #0
 8100e54:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100e56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100e5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100e5c:	2300      	movs	r3, #0
 8100e5e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8100e60:	2300      	movs	r3, #0
 8100e62:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8100e64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8100e68:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100e6a:	2300      	movs	r3, #0
 8100e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100e6e:	2300      	movs	r3, #0
 8100e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8100e72:	1d3b      	adds	r3, r7, #4
 8100e74:	4619      	mov	r1, r3
 8100e76:	4806      	ldr	r0, [pc, #24]	; (8100e90 <MX_TIM1_Init+0x1bc>)
 8100e78:	f002 fa5e 	bl	8103338 <HAL_TIMEx_ConfigBreakDeadTime>
 8100e7c:	4603      	mov	r3, r0
 8100e7e:	2b00      	cmp	r3, #0
 8100e80:	d001      	beq.n	8100e86 <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8100e82:	f000 f923 	bl	81010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8100e86:	bf00      	nop
 8100e88:	3768      	adds	r7, #104	; 0x68
 8100e8a:	46bd      	mov	sp, r7
 8100e8c:	bd80      	pop	{r7, pc}
 8100e8e:	bf00      	nop
 8100e90:	10000130 	.word	0x10000130
 8100e94:	40010000 	.word	0x40010000

08100e98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8100e98:	b580      	push	{r7, lr}
 8100e9a:	b08e      	sub	sp, #56	; 0x38
 8100e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8100e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8100ea2:	2200      	movs	r2, #0
 8100ea4:	601a      	str	r2, [r3, #0]
 8100ea6:	605a      	str	r2, [r3, #4]
 8100ea8:	609a      	str	r2, [r3, #8]
 8100eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100eac:	f107 031c 	add.w	r3, r7, #28
 8100eb0:	2200      	movs	r2, #0
 8100eb2:	601a      	str	r2, [r3, #0]
 8100eb4:	605a      	str	r2, [r3, #4]
 8100eb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100eb8:	463b      	mov	r3, r7
 8100eba:	2200      	movs	r2, #0
 8100ebc:	601a      	str	r2, [r3, #0]
 8100ebe:	605a      	str	r2, [r3, #4]
 8100ec0:	609a      	str	r2, [r3, #8]
 8100ec2:	60da      	str	r2, [r3, #12]
 8100ec4:	611a      	str	r2, [r3, #16]
 8100ec6:	615a      	str	r2, [r3, #20]
 8100ec8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8100eca:	4b50      	ldr	r3, [pc, #320]	; (810100c <MX_TIM2_Init+0x174>)
 8100ecc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100ed0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8100ed2:	4b4e      	ldr	r3, [pc, #312]	; (810100c <MX_TIM2_Init+0x174>)
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100ed8:	4b4c      	ldr	r3, [pc, #304]	; (810100c <MX_TIM2_Init+0x174>)
 8100eda:	2200      	movs	r2, #0
 8100edc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = maxCount;
 8100ede:	4b4c      	ldr	r3, [pc, #304]	; (8101010 <MX_TIM2_Init+0x178>)
 8100ee0:	681b      	ldr	r3, [r3, #0]
 8100ee2:	4a4a      	ldr	r2, [pc, #296]	; (810100c <MX_TIM2_Init+0x174>)
 8100ee4:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100ee6:	4b49      	ldr	r3, [pc, #292]	; (810100c <MX_TIM2_Init+0x174>)
 8100ee8:	2200      	movs	r2, #0
 8100eea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8100eec:	4b47      	ldr	r3, [pc, #284]	; (810100c <MX_TIM2_Init+0x174>)
 8100eee:	2280      	movs	r2, #128	; 0x80
 8100ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8100ef2:	4846      	ldr	r0, [pc, #280]	; (810100c <MX_TIM2_Init+0x174>)
 8100ef4:	f001 f88a 	bl	810200c <HAL_TIM_Base_Init>
 8100ef8:	4603      	mov	r3, r0
 8100efa:	2b00      	cmp	r3, #0
 8100efc:	d001      	beq.n	8100f02 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8100efe:	f000 f8e5 	bl	81010cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8100f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100f06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8100f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8100f0c:	4619      	mov	r1, r3
 8100f0e:	483f      	ldr	r0, [pc, #252]	; (810100c <MX_TIM2_Init+0x174>)
 8100f10:	f001 fc28 	bl	8102764 <HAL_TIM_ConfigClockSource>
 8100f14:	4603      	mov	r3, r0
 8100f16:	2b00      	cmp	r3, #0
 8100f18:	d001      	beq.n	8100f1e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8100f1a:	f000 f8d7 	bl	81010cc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8100f1e:	483b      	ldr	r0, [pc, #236]	; (810100c <MX_TIM2_Init+0x174>)
 8100f20:	f001 f8cb 	bl	81020ba <HAL_TIM_OC_Init>
 8100f24:	4603      	mov	r3, r0
 8100f26:	2b00      	cmp	r3, #0
 8100f28:	d001      	beq.n	8100f2e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8100f2a:	f000 f8cf 	bl	81010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100f2e:	2300      	movs	r3, #0
 8100f30:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100f32:	2300      	movs	r3, #0
 8100f34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8100f36:	f107 031c 	add.w	r3, r7, #28
 8100f3a:	4619      	mov	r1, r3
 8100f3c:	4833      	ldr	r0, [pc, #204]	; (810100c <MX_TIM2_Init+0x174>)
 8100f3e:	f002 f96d 	bl	810321c <HAL_TIMEx_MasterConfigSynchronization>
 8100f42:	4603      	mov	r3, r0
 8100f44:	2b00      	cmp	r3, #0
 8100f46:	d001      	beq.n	8100f4c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8100f48:	f000 f8c0 	bl	81010cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8100f4c:	2300      	movs	r3, #0
 8100f4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8100f50:	2300      	movs	r3, #0
 8100f52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100f54:	2300      	movs	r3, #0
 8100f56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100f58:	2300      	movs	r3, #0
 8100f5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8100f5c:	463b      	mov	r3, r7
 8100f5e:	2200      	movs	r2, #0
 8100f60:	4619      	mov	r1, r3
 8100f62:	482a      	ldr	r0, [pc, #168]	; (810100c <MX_TIM2_Init+0x174>)
 8100f64:	f001 fb84 	bl	8102670 <HAL_TIM_OC_ConfigChannel>
 8100f68:	4603      	mov	r3, r0
 8100f6a:	2b00      	cmp	r3, #0
 8100f6c:	d001      	beq.n	8100f72 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8100f6e:	f000 f8ad 	bl	81010cc <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8100f72:	4b26      	ldr	r3, [pc, #152]	; (810100c <MX_TIM2_Init+0x174>)
 8100f74:	681b      	ldr	r3, [r3, #0]
 8100f76:	699a      	ldr	r2, [r3, #24]
 8100f78:	4b24      	ldr	r3, [pc, #144]	; (810100c <MX_TIM2_Init+0x174>)
 8100f7a:	681b      	ldr	r3, [r3, #0]
 8100f7c:	f042 0208 	orr.w	r2, r2, #8
 8100f80:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 0;
 8100f82:	2300      	movs	r3, #0
 8100f84:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100f86:	463b      	mov	r3, r7
 8100f88:	2204      	movs	r2, #4
 8100f8a:	4619      	mov	r1, r3
 8100f8c:	481f      	ldr	r0, [pc, #124]	; (810100c <MX_TIM2_Init+0x174>)
 8100f8e:	f001 fb6f 	bl	8102670 <HAL_TIM_OC_ConfigChannel>
 8100f92:	4603      	mov	r3, r0
 8100f94:	2b00      	cmp	r3, #0
 8100f96:	d001      	beq.n	8100f9c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8100f98:	f000 f898 	bl	81010cc <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_2);
 8100f9c:	4b1b      	ldr	r3, [pc, #108]	; (810100c <MX_TIM2_Init+0x174>)
 8100f9e:	681b      	ldr	r3, [r3, #0]
 8100fa0:	699a      	ldr	r2, [r3, #24]
 8100fa2:	4b1a      	ldr	r3, [pc, #104]	; (810100c <MX_TIM2_Init+0x174>)
 8100fa4:	681b      	ldr	r3, [r3, #0]
 8100fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8100faa:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 0;
 8100fac:	2300      	movs	r3, #0
 8100fae:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8100fb0:	463b      	mov	r3, r7
 8100fb2:	2208      	movs	r2, #8
 8100fb4:	4619      	mov	r1, r3
 8100fb6:	4815      	ldr	r0, [pc, #84]	; (810100c <MX_TIM2_Init+0x174>)
 8100fb8:	f001 fb5a 	bl	8102670 <HAL_TIM_OC_ConfigChannel>
 8100fbc:	4603      	mov	r3, r0
 8100fbe:	2b00      	cmp	r3, #0
 8100fc0:	d001      	beq.n	8100fc6 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8100fc2:	f000 f883 	bl	81010cc <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_3);
 8100fc6:	4b11      	ldr	r3, [pc, #68]	; (810100c <MX_TIM2_Init+0x174>)
 8100fc8:	681b      	ldr	r3, [r3, #0]
 8100fca:	69da      	ldr	r2, [r3, #28]
 8100fcc:	4b0f      	ldr	r3, [pc, #60]	; (810100c <MX_TIM2_Init+0x174>)
 8100fce:	681b      	ldr	r3, [r3, #0]
 8100fd0:	f042 0208 	orr.w	r2, r2, #8
 8100fd4:	61da      	str	r2, [r3, #28]
  sConfigOC.Pulse = maxCount;
 8100fd6:	4b0e      	ldr	r3, [pc, #56]	; (8101010 <MX_TIM2_Init+0x178>)
 8100fd8:	681b      	ldr	r3, [r3, #0]
 8100fda:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8100fdc:	463b      	mov	r3, r7
 8100fde:	220c      	movs	r2, #12
 8100fe0:	4619      	mov	r1, r3
 8100fe2:	480a      	ldr	r0, [pc, #40]	; (810100c <MX_TIM2_Init+0x174>)
 8100fe4:	f001 fb44 	bl	8102670 <HAL_TIM_OC_ConfigChannel>
 8100fe8:	4603      	mov	r3, r0
 8100fea:	2b00      	cmp	r3, #0
 8100fec:	d001      	beq.n	8100ff2 <MX_TIM2_Init+0x15a>
  {
    Error_Handler();
 8100fee:	f000 f86d 	bl	81010cc <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_4);
 8100ff2:	4b06      	ldr	r3, [pc, #24]	; (810100c <MX_TIM2_Init+0x174>)
 8100ff4:	681b      	ldr	r3, [r3, #0]
 8100ff6:	69da      	ldr	r2, [r3, #28]
 8100ff8:	4b04      	ldr	r3, [pc, #16]	; (810100c <MX_TIM2_Init+0x174>)
 8100ffa:	681b      	ldr	r3, [r3, #0]
 8100ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8101000:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8101002:	bf00      	nop
 8101004:	3738      	adds	r7, #56	; 0x38
 8101006:	46bd      	mov	sp, r7
 8101008:	bd80      	pop	{r7, pc}
 810100a:	bf00      	nop
 810100c:	1000017c 	.word	0x1000017c
 8101010:	100001c8 	.word	0x100001c8

08101014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101014:	b580      	push	{r7, lr}
 8101016:	b088      	sub	sp, #32
 8101018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810101a:	f107 030c 	add.w	r3, r7, #12
 810101e:	2200      	movs	r2, #0
 8101020:	601a      	str	r2, [r3, #0]
 8101022:	605a      	str	r2, [r3, #4]
 8101024:	609a      	str	r2, [r3, #8]
 8101026:	60da      	str	r2, [r3, #12]
 8101028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810102a:	4b25      	ldr	r3, [pc, #148]	; (81010c0 <MX_GPIO_Init+0xac>)
 810102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101030:	4a23      	ldr	r2, [pc, #140]	; (81010c0 <MX_GPIO_Init+0xac>)
 8101032:	f043 0302 	orr.w	r3, r3, #2
 8101036:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810103a:	4b21      	ldr	r3, [pc, #132]	; (81010c0 <MX_GPIO_Init+0xac>)
 810103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101040:	f003 0302 	and.w	r3, r3, #2
 8101044:	60bb      	str	r3, [r7, #8]
 8101046:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101048:	4b1d      	ldr	r3, [pc, #116]	; (81010c0 <MX_GPIO_Init+0xac>)
 810104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810104e:	4a1c      	ldr	r2, [pc, #112]	; (81010c0 <MX_GPIO_Init+0xac>)
 8101050:	f043 0310 	orr.w	r3, r3, #16
 8101054:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101058:	4b19      	ldr	r3, [pc, #100]	; (81010c0 <MX_GPIO_Init+0xac>)
 810105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810105e:	f003 0310 	and.w	r3, r3, #16
 8101062:	607b      	str	r3, [r7, #4]
 8101064:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8101066:	2200      	movs	r2, #0
 8101068:	f244 0101 	movw	r1, #16385	; 0x4001
 810106c:	4815      	ldr	r0, [pc, #84]	; (81010c4 <MX_GPIO_Init+0xb0>)
 810106e:	f000 fd9f 	bl	8101bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8101072:	2200      	movs	r2, #0
 8101074:	2102      	movs	r1, #2
 8101076:	4814      	ldr	r0, [pc, #80]	; (81010c8 <MX_GPIO_Init+0xb4>)
 8101078:	f000 fd9a 	bl	8101bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 810107c:	f244 0301 	movw	r3, #16385	; 0x4001
 8101080:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101082:	2301      	movs	r3, #1
 8101084:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101086:	2300      	movs	r3, #0
 8101088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810108a:	2300      	movs	r3, #0
 810108c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810108e:	f107 030c 	add.w	r3, r7, #12
 8101092:	4619      	mov	r1, r3
 8101094:	480b      	ldr	r0, [pc, #44]	; (81010c4 <MX_GPIO_Init+0xb0>)
 8101096:	f000 fbdb 	bl	8101850 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 810109a:	2302      	movs	r3, #2
 810109c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810109e:	2301      	movs	r3, #1
 81010a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010a2:	2300      	movs	r3, #0
 81010a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81010a6:	2300      	movs	r3, #0
 81010a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 81010aa:	f107 030c 	add.w	r3, r7, #12
 81010ae:	4619      	mov	r1, r3
 81010b0:	4805      	ldr	r0, [pc, #20]	; (81010c8 <MX_GPIO_Init+0xb4>)
 81010b2:	f000 fbcd 	bl	8101850 <HAL_GPIO_Init>

}
 81010b6:	bf00      	nop
 81010b8:	3720      	adds	r7, #32
 81010ba:	46bd      	mov	sp, r7
 81010bc:	bd80      	pop	{r7, pc}
 81010be:	bf00      	nop
 81010c0:	58024400 	.word	0x58024400
 81010c4:	58020400 	.word	0x58020400
 81010c8:	58021000 	.word	0x58021000

081010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81010cc:	b480      	push	{r7}
 81010ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81010d0:	b672      	cpsid	i
}
 81010d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81010d4:	e7fe      	b.n	81010d4 <Error_Handler+0x8>
	...

081010d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81010d8:	b480      	push	{r7}
 81010da:	b083      	sub	sp, #12
 81010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81010de:	4b0a      	ldr	r3, [pc, #40]	; (8101108 <HAL_MspInit+0x30>)
 81010e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81010e4:	4a08      	ldr	r2, [pc, #32]	; (8101108 <HAL_MspInit+0x30>)
 81010e6:	f043 0302 	orr.w	r3, r3, #2
 81010ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81010ee:	4b06      	ldr	r3, [pc, #24]	; (8101108 <HAL_MspInit+0x30>)
 81010f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81010f4:	f003 0302 	and.w	r3, r3, #2
 81010f8:	607b      	str	r3, [r7, #4]
 81010fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81010fc:	bf00      	nop
 81010fe:	370c      	adds	r7, #12
 8101100:	46bd      	mov	sp, r7
 8101102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101106:	4770      	bx	lr
 8101108:	58024400 	.word	0x58024400

0810110c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 810110c:	b580      	push	{r7, lr}
 810110e:	b084      	sub	sp, #16
 8101110:	af00      	add	r7, sp, #0
 8101112:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8101114:	687b      	ldr	r3, [r7, #4]
 8101116:	681b      	ldr	r3, [r3, #0]
 8101118:	4a29      	ldr	r2, [pc, #164]	; (81011c0 <HAL_TIM_Base_MspInit+0xb4>)
 810111a:	4293      	cmp	r3, r2
 810111c:	d12f      	bne.n	810117e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 810111e:	4b29      	ldr	r3, [pc, #164]	; (81011c4 <HAL_TIM_Base_MspInit+0xb8>)
 8101120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101124:	4a27      	ldr	r2, [pc, #156]	; (81011c4 <HAL_TIM_Base_MspInit+0xb8>)
 8101126:	f043 0301 	orr.w	r3, r3, #1
 810112a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810112e:	4b25      	ldr	r3, [pc, #148]	; (81011c4 <HAL_TIM_Base_MspInit+0xb8>)
 8101130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101134:	f003 0301 	and.w	r3, r3, #1
 8101138:	60fb      	str	r3, [r7, #12]
 810113a:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 810113c:	2200      	movs	r2, #0
 810113e:	2100      	movs	r1, #0
 8101140:	2018      	movs	r0, #24
 8101142:	f000 fb3c 	bl	81017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8101146:	2018      	movs	r0, #24
 8101148:	f000 fb53 	bl	81017f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 810114c:	2200      	movs	r2, #0
 810114e:	2100      	movs	r1, #0
 8101150:	2019      	movs	r0, #25
 8101152:	f000 fb34 	bl	81017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8101156:	2019      	movs	r0, #25
 8101158:	f000 fb4b 	bl	81017f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 810115c:	2200      	movs	r2, #0
 810115e:	2100      	movs	r1, #0
 8101160:	201a      	movs	r0, #26
 8101162:	f000 fb2c 	bl	81017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8101166:	201a      	movs	r0, #26
 8101168:	f000 fb43 	bl	81017f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 810116c:	2200      	movs	r2, #0
 810116e:	2100      	movs	r1, #0
 8101170:	201b      	movs	r0, #27
 8101172:	f000 fb24 	bl	81017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8101176:	201b      	movs	r0, #27
 8101178:	f000 fb3b 	bl	81017f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 810117c:	e01b      	b.n	81011b6 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 810117e:	687b      	ldr	r3, [r7, #4]
 8101180:	681b      	ldr	r3, [r3, #0]
 8101182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101186:	d116      	bne.n	81011b6 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8101188:	4b0e      	ldr	r3, [pc, #56]	; (81011c4 <HAL_TIM_Base_MspInit+0xb8>)
 810118a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810118e:	4a0d      	ldr	r2, [pc, #52]	; (81011c4 <HAL_TIM_Base_MspInit+0xb8>)
 8101190:	f043 0301 	orr.w	r3, r3, #1
 8101194:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101198:	4b0a      	ldr	r3, [pc, #40]	; (81011c4 <HAL_TIM_Base_MspInit+0xb8>)
 810119a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810119e:	f003 0301 	and.w	r3, r3, #1
 81011a2:	60bb      	str	r3, [r7, #8]
 81011a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 81011a6:	2200      	movs	r2, #0
 81011a8:	2100      	movs	r1, #0
 81011aa:	201c      	movs	r0, #28
 81011ac:	f000 fb07 	bl	81017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 81011b0:	201c      	movs	r0, #28
 81011b2:	f000 fb1e 	bl	81017f2 <HAL_NVIC_EnableIRQ>
}
 81011b6:	bf00      	nop
 81011b8:	3710      	adds	r7, #16
 81011ba:	46bd      	mov	sp, r7
 81011bc:	bd80      	pop	{r7, pc}
 81011be:	bf00      	nop
 81011c0:	40010000 	.word	0x40010000
 81011c4:	58024400 	.word	0x58024400

081011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81011c8:	b480      	push	{r7}
 81011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81011cc:	e7fe      	b.n	81011cc <NMI_Handler+0x4>

081011ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81011ce:	b480      	push	{r7}
 81011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81011d2:	e7fe      	b.n	81011d2 <HardFault_Handler+0x4>

081011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81011d4:	b480      	push	{r7}
 81011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81011d8:	e7fe      	b.n	81011d8 <MemManage_Handler+0x4>

081011da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81011da:	b480      	push	{r7}
 81011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81011de:	e7fe      	b.n	81011de <BusFault_Handler+0x4>

081011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81011e0:	b480      	push	{r7}
 81011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81011e4:	e7fe      	b.n	81011e4 <UsageFault_Handler+0x4>

081011e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81011e6:	b480      	push	{r7}
 81011e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81011ea:	bf00      	nop
 81011ec:	46bd      	mov	sp, r7
 81011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011f2:	4770      	bx	lr

081011f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81011f4:	b480      	push	{r7}
 81011f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81011f8:	bf00      	nop
 81011fa:	46bd      	mov	sp, r7
 81011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101200:	4770      	bx	lr

08101202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101202:	b480      	push	{r7}
 8101204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101206:	bf00      	nop
 8101208:	46bd      	mov	sp, r7
 810120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810120e:	4770      	bx	lr

08101210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101210:	b580      	push	{r7, lr}
 8101212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101214:	f000 f9e4 	bl	81015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101218:	bf00      	nop
 810121a:	bd80      	pop	{r7, pc}

0810121c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 810121c:	b580      	push	{r7, lr}
 810121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8101220:	4802      	ldr	r0, [pc, #8]	; (810122c <TIM1_BRK_IRQHandler+0x10>)
 8101222:	f001 f905 	bl	8102430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8101226:	bf00      	nop
 8101228:	bd80      	pop	{r7, pc}
 810122a:	bf00      	nop
 810122c:	10000130 	.word	0x10000130

08101230 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8101230:	b580      	push	{r7, lr}
 8101232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8101234:	480a      	ldr	r0, [pc, #40]	; (8101260 <TIM1_UP_IRQHandler+0x30>)
 8101236:	f001 f8fb 	bl	8102430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 810123a:	2201      	movs	r2, #1
 810123c:	2101      	movs	r1, #1
 810123e:	4809      	ldr	r0, [pc, #36]	; (8101264 <TIM1_UP_IRQHandler+0x34>)
 8101240:	f000 fcb6 	bl	8101bb0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8101244:	2201      	movs	r2, #1
 8101246:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810124a:	4806      	ldr	r0, [pc, #24]	; (8101264 <TIM1_UP_IRQHandler+0x34>)
 810124c:	f000 fcb0 	bl	8101bb0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8101250:	2201      	movs	r2, #1
 8101252:	2102      	movs	r1, #2
 8101254:	4804      	ldr	r0, [pc, #16]	; (8101268 <TIM1_UP_IRQHandler+0x38>)
 8101256:	f000 fcab 	bl	8101bb0 <HAL_GPIO_WritePin>
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 810125a:	bf00      	nop
 810125c:	bd80      	pop	{r7, pc}
 810125e:	bf00      	nop
 8101260:	10000130 	.word	0x10000130
 8101264:	58020400 	.word	0x58020400
 8101268:	58021000 	.word	0x58021000

0810126c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 810126c:	b580      	push	{r7, lr}
 810126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8101270:	4802      	ldr	r0, [pc, #8]	; (810127c <TIM1_TRG_COM_IRQHandler+0x10>)
 8101272:	f001 f8dd 	bl	8102430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8101276:	bf00      	nop
 8101278:	bd80      	pop	{r7, pc}
 810127a:	bf00      	nop
 810127c:	10000130 	.word	0x10000130

08101280 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8101280:	b580      	push	{r7, lr}
 8101282:	b082      	sub	sp, #8
 8101284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	int channel = 0;
 8101286:	2300      	movs	r3, #0
 8101288:	607b      	str	r3, [r7, #4]
	if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC1) == 1)
 810128a:	4b1e      	ldr	r3, [pc, #120]	; (8101304 <TIM1_CC_IRQHandler+0x84>)
 810128c:	681b      	ldr	r3, [r3, #0]
 810128e:	691b      	ldr	r3, [r3, #16]
 8101290:	f003 0302 	and.w	r3, r3, #2
 8101294:	2b02      	cmp	r3, #2
 8101296:	d102      	bne.n	810129e <TIM1_CC_IRQHandler+0x1e>
	{
		channel = 1;
 8101298:	2301      	movs	r3, #1
 810129a:	607b      	str	r3, [r7, #4]
 810129c:	e012      	b.n	81012c4 <TIM1_CC_IRQHandler+0x44>
	}
	else if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC2) == 1)
 810129e:	4b19      	ldr	r3, [pc, #100]	; (8101304 <TIM1_CC_IRQHandler+0x84>)
 81012a0:	681b      	ldr	r3, [r3, #0]
 81012a2:	691b      	ldr	r3, [r3, #16]
 81012a4:	f003 0304 	and.w	r3, r3, #4
 81012a8:	2b04      	cmp	r3, #4
 81012aa:	d102      	bne.n	81012b2 <TIM1_CC_IRQHandler+0x32>
		{
			channel = 2;
 81012ac:	2302      	movs	r3, #2
 81012ae:	607b      	str	r3, [r7, #4]
 81012b0:	e008      	b.n	81012c4 <TIM1_CC_IRQHandler+0x44>
		}
	else if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_CC3) == 1)
 81012b2:	4b14      	ldr	r3, [pc, #80]	; (8101304 <TIM1_CC_IRQHandler+0x84>)
 81012b4:	681b      	ldr	r3, [r3, #0]
 81012b6:	691b      	ldr	r3, [r3, #16]
 81012b8:	f003 0308 	and.w	r3, r3, #8
 81012bc:	2b08      	cmp	r3, #8
 81012be:	d101      	bne.n	81012c4 <TIM1_CC_IRQHandler+0x44>
		{
			channel = 3;
 81012c0:	2303      	movs	r3, #3
 81012c2:	607b      	str	r3, [r7, #4]
		}
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 81012c4:	480f      	ldr	r0, [pc, #60]	; (8101304 <TIM1_CC_IRQHandler+0x84>)
 81012c6:	f001 f8b3 	bl	8102430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
//  HAL_TIM_OC_GetState(&htim1)

//  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  if (channel == 1)
 81012ca:	687b      	ldr	r3, [r7, #4]
 81012cc:	2b01      	cmp	r3, #1
 81012ce:	d104      	bne.n	81012da <TIM1_CC_IRQHandler+0x5a>
    {
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 81012d0:	2200      	movs	r2, #0
 81012d2:	2101      	movs	r1, #1
 81012d4:	480c      	ldr	r0, [pc, #48]	; (8101308 <TIM1_CC_IRQHandler+0x88>)
 81012d6:	f000 fc6b 	bl	8101bb0 <HAL_GPIO_WritePin>
    }
  if (channel == 2)
 81012da:	687b      	ldr	r3, [r7, #4]
 81012dc:	2b02      	cmp	r3, #2
 81012de:	d104      	bne.n	81012ea <TIM1_CC_IRQHandler+0x6a>
  {
  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 81012e0:	2200      	movs	r2, #0
 81012e2:	2102      	movs	r1, #2
 81012e4:	4809      	ldr	r0, [pc, #36]	; (810130c <TIM1_CC_IRQHandler+0x8c>)
 81012e6:	f000 fc63 	bl	8101bb0 <HAL_GPIO_WritePin>
  }
  if (channel == 3)
 81012ea:	687b      	ldr	r3, [r7, #4]
 81012ec:	2b03      	cmp	r3, #3
 81012ee:	d105      	bne.n	81012fc <TIM1_CC_IRQHandler+0x7c>
    {
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 81012f0:	2200      	movs	r2, #0
 81012f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 81012f6:	4804      	ldr	r0, [pc, #16]	; (8101308 <TIM1_CC_IRQHandler+0x88>)
 81012f8:	f000 fc5a 	bl	8101bb0 <HAL_GPIO_WritePin>
    }
  /* USER CODE END TIM1_CC_IRQn 1 */
}
 81012fc:	bf00      	nop
 81012fe:	3708      	adds	r7, #8
 8101300:	46bd      	mov	sp, r7
 8101302:	bd80      	pop	{r7, pc}
 8101304:	10000130 	.word	0x10000130
 8101308:	58020400 	.word	0x58020400
 810130c:	58021000 	.word	0x58021000

08101310 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8101310:	b580      	push	{r7, lr}
 8101312:	b088      	sub	sp, #32
 8101314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	int channel1 = 0, channel2 = 0, channel3 = 0, ovf = 0;
 8101316:	2300      	movs	r3, #0
 8101318:	61fb      	str	r3, [r7, #28]
 810131a:	2300      	movs	r3, #0
 810131c:	61bb      	str	r3, [r7, #24]
 810131e:	2300      	movs	r3, #0
 8101320:	617b      	str	r3, [r7, #20]
 8101322:	2300      	movs	r3, #0
 8101324:	613b      	str	r3, [r7, #16]
		if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_CC1) == 1)
 8101326:	4b47      	ldr	r3, [pc, #284]	; (8101444 <TIM2_IRQHandler+0x134>)
 8101328:	681b      	ldr	r3, [r3, #0]
 810132a:	691b      	ldr	r3, [r3, #16]
 810132c:	f003 0302 	and.w	r3, r3, #2
 8101330:	2b02      	cmp	r3, #2
 8101332:	d101      	bne.n	8101338 <TIM2_IRQHandler+0x28>
		{
			channel1 = 1;
 8101334:	2301      	movs	r3, #1
 8101336:	61fb      	str	r3, [r7, #28]
		}
		if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_CC2) == 1)
 8101338:	4b42      	ldr	r3, [pc, #264]	; (8101444 <TIM2_IRQHandler+0x134>)
 810133a:	681b      	ldr	r3, [r3, #0]
 810133c:	691b      	ldr	r3, [r3, #16]
 810133e:	f003 0304 	and.w	r3, r3, #4
 8101342:	2b04      	cmp	r3, #4
 8101344:	d101      	bne.n	810134a <TIM2_IRQHandler+0x3a>
			{
				channel2 = 1;
 8101346:	2301      	movs	r3, #1
 8101348:	61bb      	str	r3, [r7, #24]
			}
		if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_CC3) == 1)
 810134a:	4b3e      	ldr	r3, [pc, #248]	; (8101444 <TIM2_IRQHandler+0x134>)
 810134c:	681b      	ldr	r3, [r3, #0]
 810134e:	691b      	ldr	r3, [r3, #16]
 8101350:	f003 0308 	and.w	r3, r3, #8
 8101354:	2b08      	cmp	r3, #8
 8101356:	d101      	bne.n	810135c <TIM2_IRQHandler+0x4c>
			{
				channel3 = 1;
 8101358:	2301      	movs	r3, #1
 810135a:	617b      	str	r3, [r7, #20]
			}
		if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_CC4) == 1)
 810135c:	4b39      	ldr	r3, [pc, #228]	; (8101444 <TIM2_IRQHandler+0x134>)
 810135e:	681b      	ldr	r3, [r3, #0]
 8101360:	691b      	ldr	r3, [r3, #16]
 8101362:	f003 0310 	and.w	r3, r3, #16
 8101366:	2b10      	cmp	r3, #16
 8101368:	d101      	bne.n	810136e <TIM2_IRQHandler+0x5e>
			{
				ovf = 1;
 810136a:	2301      	movs	r3, #1
 810136c:	613b      	str	r3, [r7, #16]
			}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 810136e:	4835      	ldr	r0, [pc, #212]	; (8101444 <TIM2_IRQHandler+0x134>)
 8101370:	f001 f85e 	bl	8102430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if (channel1 == 1)
 8101374:	69fb      	ldr	r3, [r7, #28]
 8101376:	2b01      	cmp	r3, #1
 8101378:	d104      	bne.n	8101384 <TIM2_IRQHandler+0x74>
      {
      	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 810137a:	2200      	movs	r2, #0
 810137c:	2101      	movs	r1, #1
 810137e:	4832      	ldr	r0, [pc, #200]	; (8101448 <TIM2_IRQHandler+0x138>)
 8101380:	f000 fc16 	bl	8101bb0 <HAL_GPIO_WritePin>
      }
    if (channel2 == 1)
 8101384:	69bb      	ldr	r3, [r7, #24]
 8101386:	2b01      	cmp	r3, #1
 8101388:	d104      	bne.n	8101394 <TIM2_IRQHandler+0x84>
    {
    	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 810138a:	2200      	movs	r2, #0
 810138c:	2102      	movs	r1, #2
 810138e:	482f      	ldr	r0, [pc, #188]	; (810144c <TIM2_IRQHandler+0x13c>)
 8101390:	f000 fc0e 	bl	8101bb0 <HAL_GPIO_WritePin>
    }
    if (channel3 == 1)
 8101394:	697b      	ldr	r3, [r7, #20]
 8101396:	2b01      	cmp	r3, #1
 8101398:	d105      	bne.n	81013a6 <TIM2_IRQHandler+0x96>
      {
      	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 810139a:	2200      	movs	r2, #0
 810139c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 81013a0:	4829      	ldr	r0, [pc, #164]	; (8101448 <TIM2_IRQHandler+0x138>)
 81013a2:	f000 fc05 	bl	8101bb0 <HAL_GPIO_WritePin>
      }
    if (ovf == 1) {
 81013a6:	693b      	ldr	r3, [r7, #16]
 81013a8:	2b01      	cmp	r3, #1
 81013aa:	d146      	bne.n	810143a <TIM2_IRQHandler+0x12a>
    	if (num < samples - 1)
 81013ac:	4b28      	ldr	r3, [pc, #160]	; (8101450 <TIM2_IRQHandler+0x140>)
 81013ae:	681b      	ldr	r3, [r3, #0]
 81013b0:	1e5a      	subs	r2, r3, #1
 81013b2:	4b28      	ldr	r3, [pc, #160]	; (8101454 <TIM2_IRQHandler+0x144>)
 81013b4:	681b      	ldr	r3, [r3, #0]
 81013b6:	429a      	cmp	r2, r3
 81013b8:	d905      	bls.n	81013c6 <TIM2_IRQHandler+0xb6>
    		num++;
 81013ba:	4b26      	ldr	r3, [pc, #152]	; (8101454 <TIM2_IRQHandler+0x144>)
 81013bc:	681b      	ldr	r3, [r3, #0]
 81013be:	3301      	adds	r3, #1
 81013c0:	4a24      	ldr	r2, [pc, #144]	; (8101454 <TIM2_IRQHandler+0x144>)
 81013c2:	6013      	str	r3, [r2, #0]
 81013c4:	e002      	b.n	81013cc <TIM2_IRQHandler+0xbc>
    	else
    		num = 0;
 81013c6:	4b23      	ldr	r3, [pc, #140]	; (8101454 <TIM2_IRQHandler+0x144>)
 81013c8:	2200      	movs	r2, #0
 81013ca:	601a      	str	r2, [r3, #0]
    	uint32_t val1 = lookUp1[num],val2 = lookUp2[num],val3 = lookUp3[num];
 81013cc:	4b21      	ldr	r3, [pc, #132]	; (8101454 <TIM2_IRQHandler+0x144>)
 81013ce:	681b      	ldr	r3, [r3, #0]
 81013d0:	4a21      	ldr	r2, [pc, #132]	; (8101458 <TIM2_IRQHandler+0x148>)
 81013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81013d6:	60fb      	str	r3, [r7, #12]
 81013d8:	4b1e      	ldr	r3, [pc, #120]	; (8101454 <TIM2_IRQHandler+0x144>)
 81013da:	681b      	ldr	r3, [r3, #0]
 81013dc:	4a1f      	ldr	r2, [pc, #124]	; (810145c <TIM2_IRQHandler+0x14c>)
 81013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81013e2:	60bb      	str	r3, [r7, #8]
 81013e4:	4b1b      	ldr	r3, [pc, #108]	; (8101454 <TIM2_IRQHandler+0x144>)
 81013e6:	681b      	ldr	r3, [r3, #0]
 81013e8:	4a1d      	ldr	r2, [pc, #116]	; (8101460 <TIM2_IRQHandler+0x150>)
 81013ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81013ee:	607b      	str	r3, [r7, #4]
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, val1);
 81013f0:	4b14      	ldr	r3, [pc, #80]	; (8101444 <TIM2_IRQHandler+0x134>)
 81013f2:	681b      	ldr	r3, [r3, #0]
 81013f4:	68fa      	ldr	r2, [r7, #12]
 81013f6:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, val2);
 81013f8:	4b12      	ldr	r3, [pc, #72]	; (8101444 <TIM2_IRQHandler+0x134>)
 81013fa:	681b      	ldr	r3, [r3, #0]
 81013fc:	68ba      	ldr	r2, [r7, #8]
 81013fe:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, val3);
 8101400:	4b10      	ldr	r3, [pc, #64]	; (8101444 <TIM2_IRQHandler+0x134>)
 8101402:	681b      	ldr	r3, [r3, #0]
 8101404:	687a      	ldr	r2, [r7, #4]
 8101406:	63da      	str	r2, [r3, #60]	; 0x3c
//      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ((sin(2 * 180 * sinFreq * (micros() / 100000000.0) + 360) * (maxCount/2)) + (maxCount/2)));
//      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, ((sin(2 * 180 * sinFreq * (micros() / 100000000.0) + 720) * (maxCount/2)) + (maxCount/2)));
      if (val1 > 0)
 8101408:	68fb      	ldr	r3, [r7, #12]
 810140a:	2b00      	cmp	r3, #0
 810140c:	d004      	beq.n	8101418 <TIM2_IRQHandler+0x108>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 810140e:	2201      	movs	r2, #1
 8101410:	2101      	movs	r1, #1
 8101412:	480d      	ldr	r0, [pc, #52]	; (8101448 <TIM2_IRQHandler+0x138>)
 8101414:	f000 fbcc 	bl	8101bb0 <HAL_GPIO_WritePin>
      if (val2 > 0)
 8101418:	68bb      	ldr	r3, [r7, #8]
 810141a:	2b00      	cmp	r3, #0
 810141c:	d005      	beq.n	810142a <TIM2_IRQHandler+0x11a>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 810141e:	2201      	movs	r2, #1
 8101420:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101424:	4808      	ldr	r0, [pc, #32]	; (8101448 <TIM2_IRQHandler+0x138>)
 8101426:	f000 fbc3 	bl	8101bb0 <HAL_GPIO_WritePin>
      if (val3 > 0)
 810142a:	687b      	ldr	r3, [r7, #4]
 810142c:	2b00      	cmp	r3, #0
 810142e:	d004      	beq.n	810143a <TIM2_IRQHandler+0x12a>
    	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8101430:	2201      	movs	r2, #1
 8101432:	2102      	movs	r1, #2
 8101434:	4805      	ldr	r0, [pc, #20]	; (810144c <TIM2_IRQHandler+0x13c>)
 8101436:	f000 fbbb 	bl	8101bb0 <HAL_GPIO_WritePin>
    }
  /* USER CODE END TIM2_IRQn 1 */
}
 810143a:	bf00      	nop
 810143c:	3720      	adds	r7, #32
 810143e:	46bd      	mov	sp, r7
 8101440:	bd80      	pop	{r7, pc}
 8101442:	bf00      	nop
 8101444:	1000017c 	.word	0x1000017c
 8101448:	58020400 	.word	0x58020400
 810144c:	58021000 	.word	0x58021000
 8101450:	1000000c 	.word	0x1000000c
 8101454:	100001cc 	.word	0x100001cc
 8101458:	10000010 	.word	0x10000010
 810145c:	10000064 	.word	0x10000064
 8101460:	100000b8 	.word	0x100000b8

08101464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101464:	f8df d034 	ldr.w	sp, [pc, #52]	; 810149c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101468:	f7ff fb24 	bl	8100ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810146c:	480c      	ldr	r0, [pc, #48]	; (81014a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810146e:	490d      	ldr	r1, [pc, #52]	; (81014a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101470:	4a0d      	ldr	r2, [pc, #52]	; (81014a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101474:	e002      	b.n	810147c <LoopCopyDataInit>

08101476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810147a:	3304      	adds	r3, #4

0810147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101480:	d3f9      	bcc.n	8101476 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101482:	4a0a      	ldr	r2, [pc, #40]	; (81014ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101484:	4c0a      	ldr	r4, [pc, #40]	; (81014b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101488:	e001      	b.n	810148e <LoopFillZerobss>

0810148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810148c:	3204      	adds	r2, #4

0810148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101490:	d3fb      	bcc.n	810148a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101492:	f001 ffed 	bl	8103470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101496:	f7ff fb25 	bl	8100ae4 <main>
  bx  lr
 810149a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810149c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81014a0:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81014a4:	10000114 	.word	0x10000114
  ldr r2, =_sidata
 81014a8:	081034f8 	.word	0x081034f8
  ldr r2, =_sbss
 81014ac:	10000114 	.word	0x10000114
  ldr r4, =_ebss
 81014b0:	100001d4 	.word	0x100001d4

081014b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81014b4:	e7fe      	b.n	81014b4 <ADC3_IRQHandler>
	...

081014b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81014b8:	b580      	push	{r7, lr}
 81014ba:	b082      	sub	sp, #8
 81014bc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81014be:	4b28      	ldr	r3, [pc, #160]	; (8101560 <HAL_Init+0xa8>)
 81014c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81014c4:	4a26      	ldr	r2, [pc, #152]	; (8101560 <HAL_Init+0xa8>)
 81014c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81014ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81014ce:	4b24      	ldr	r3, [pc, #144]	; (8101560 <HAL_Init+0xa8>)
 81014d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81014d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81014d8:	603b      	str	r3, [r7, #0]
 81014da:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81014dc:	4b21      	ldr	r3, [pc, #132]	; (8101564 <HAL_Init+0xac>)
 81014de:	681b      	ldr	r3, [r3, #0]
 81014e0:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81014e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81014e8:	4a1e      	ldr	r2, [pc, #120]	; (8101564 <HAL_Init+0xac>)
 81014ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81014ee:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81014f0:	4b1c      	ldr	r3, [pc, #112]	; (8101564 <HAL_Init+0xac>)
 81014f2:	681b      	ldr	r3, [r3, #0]
 81014f4:	4a1b      	ldr	r2, [pc, #108]	; (8101564 <HAL_Init+0xac>)
 81014f6:	f043 0301 	orr.w	r3, r3, #1
 81014fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81014fc:	2003      	movs	r0, #3
 81014fe:	f000 f953 	bl	81017a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101502:	f000 fc09 	bl	8101d18 <HAL_RCC_GetSysClockFreq>
 8101506:	4602      	mov	r2, r0
 8101508:	4b15      	ldr	r3, [pc, #84]	; (8101560 <HAL_Init+0xa8>)
 810150a:	699b      	ldr	r3, [r3, #24]
 810150c:	0a1b      	lsrs	r3, r3, #8
 810150e:	f003 030f 	and.w	r3, r3, #15
 8101512:	4915      	ldr	r1, [pc, #84]	; (8101568 <HAL_Init+0xb0>)
 8101514:	5ccb      	ldrb	r3, [r1, r3]
 8101516:	f003 031f 	and.w	r3, r3, #31
 810151a:	fa22 f303 	lsr.w	r3, r2, r3
 810151e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101520:	4b0f      	ldr	r3, [pc, #60]	; (8101560 <HAL_Init+0xa8>)
 8101522:	699b      	ldr	r3, [r3, #24]
 8101524:	f003 030f 	and.w	r3, r3, #15
 8101528:	4a0f      	ldr	r2, [pc, #60]	; (8101568 <HAL_Init+0xb0>)
 810152a:	5cd3      	ldrb	r3, [r2, r3]
 810152c:	f003 031f 	and.w	r3, r3, #31
 8101530:	687a      	ldr	r2, [r7, #4]
 8101532:	fa22 f303 	lsr.w	r3, r2, r3
 8101536:	4a0d      	ldr	r2, [pc, #52]	; (810156c <HAL_Init+0xb4>)
 8101538:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810153a:	4b0c      	ldr	r3, [pc, #48]	; (810156c <HAL_Init+0xb4>)
 810153c:	681b      	ldr	r3, [r3, #0]
 810153e:	4a0c      	ldr	r2, [pc, #48]	; (8101570 <HAL_Init+0xb8>)
 8101540:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101542:	2000      	movs	r0, #0
 8101544:	f000 f816 	bl	8101574 <HAL_InitTick>
 8101548:	4603      	mov	r3, r0
 810154a:	2b00      	cmp	r3, #0
 810154c:	d001      	beq.n	8101552 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810154e:	2301      	movs	r3, #1
 8101550:	e002      	b.n	8101558 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101552:	f7ff fdc1 	bl	81010d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101556:	2300      	movs	r3, #0
}
 8101558:	4618      	mov	r0, r3
 810155a:	3708      	adds	r7, #8
 810155c:	46bd      	mov	sp, r7
 810155e:	bd80      	pop	{r7, pc}
 8101560:	58024400 	.word	0x58024400
 8101564:	40024400 	.word	0x40024400
 8101568:	081034e0 	.word	0x081034e0
 810156c:	10000004 	.word	0x10000004
 8101570:	10000000 	.word	0x10000000

08101574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101574:	b580      	push	{r7, lr}
 8101576:	b082      	sub	sp, #8
 8101578:	af00      	add	r7, sp, #0
 810157a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810157c:	4b15      	ldr	r3, [pc, #84]	; (81015d4 <HAL_InitTick+0x60>)
 810157e:	781b      	ldrb	r3, [r3, #0]
 8101580:	2b00      	cmp	r3, #0
 8101582:	d101      	bne.n	8101588 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101584:	2301      	movs	r3, #1
 8101586:	e021      	b.n	81015cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101588:	4b13      	ldr	r3, [pc, #76]	; (81015d8 <HAL_InitTick+0x64>)
 810158a:	681a      	ldr	r2, [r3, #0]
 810158c:	4b11      	ldr	r3, [pc, #68]	; (81015d4 <HAL_InitTick+0x60>)
 810158e:	781b      	ldrb	r3, [r3, #0]
 8101590:	4619      	mov	r1, r3
 8101592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101596:	fbb3 f3f1 	udiv	r3, r3, r1
 810159a:	fbb2 f3f3 	udiv	r3, r2, r3
 810159e:	4618      	mov	r0, r3
 81015a0:	f000 f935 	bl	810180e <HAL_SYSTICK_Config>
 81015a4:	4603      	mov	r3, r0
 81015a6:	2b00      	cmp	r3, #0
 81015a8:	d001      	beq.n	81015ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81015aa:	2301      	movs	r3, #1
 81015ac:	e00e      	b.n	81015cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81015ae:	687b      	ldr	r3, [r7, #4]
 81015b0:	2b0f      	cmp	r3, #15
 81015b2:	d80a      	bhi.n	81015ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81015b4:	2200      	movs	r2, #0
 81015b6:	6879      	ldr	r1, [r7, #4]
 81015b8:	f04f 30ff 	mov.w	r0, #4294967295
 81015bc:	f000 f8ff 	bl	81017be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81015c0:	4a06      	ldr	r2, [pc, #24]	; (81015dc <HAL_InitTick+0x68>)
 81015c2:	687b      	ldr	r3, [r7, #4]
 81015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81015c6:	2300      	movs	r3, #0
 81015c8:	e000      	b.n	81015cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 81015ca:	2301      	movs	r3, #1
}
 81015cc:	4618      	mov	r0, r3
 81015ce:	3708      	adds	r7, #8
 81015d0:	46bd      	mov	sp, r7
 81015d2:	bd80      	pop	{r7, pc}
 81015d4:	10000110 	.word	0x10000110
 81015d8:	10000000 	.word	0x10000000
 81015dc:	1000010c 	.word	0x1000010c

081015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81015e0:	b480      	push	{r7}
 81015e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81015e4:	4b06      	ldr	r3, [pc, #24]	; (8101600 <HAL_IncTick+0x20>)
 81015e6:	781b      	ldrb	r3, [r3, #0]
 81015e8:	461a      	mov	r2, r3
 81015ea:	4b06      	ldr	r3, [pc, #24]	; (8101604 <HAL_IncTick+0x24>)
 81015ec:	681b      	ldr	r3, [r3, #0]
 81015ee:	4413      	add	r3, r2
 81015f0:	4a04      	ldr	r2, [pc, #16]	; (8101604 <HAL_IncTick+0x24>)
 81015f2:	6013      	str	r3, [r2, #0]
}
 81015f4:	bf00      	nop
 81015f6:	46bd      	mov	sp, r7
 81015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015fc:	4770      	bx	lr
 81015fe:	bf00      	nop
 8101600:	10000110 	.word	0x10000110
 8101604:	100001d0 	.word	0x100001d0

08101608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101608:	b480      	push	{r7}
 810160a:	b085      	sub	sp, #20
 810160c:	af00      	add	r7, sp, #0
 810160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101610:	687b      	ldr	r3, [r7, #4]
 8101612:	f003 0307 	and.w	r3, r3, #7
 8101616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101618:	4b0c      	ldr	r3, [pc, #48]	; (810164c <__NVIC_SetPriorityGrouping+0x44>)
 810161a:	68db      	ldr	r3, [r3, #12]
 810161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810161e:	68ba      	ldr	r2, [r7, #8]
 8101620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101624:	4013      	ands	r3, r2
 8101626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101628:	68fb      	ldr	r3, [r7, #12]
 810162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810162c:	68bb      	ldr	r3, [r7, #8]
 810162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810163a:	4a04      	ldr	r2, [pc, #16]	; (810164c <__NVIC_SetPriorityGrouping+0x44>)
 810163c:	68bb      	ldr	r3, [r7, #8]
 810163e:	60d3      	str	r3, [r2, #12]
}
 8101640:	bf00      	nop
 8101642:	3714      	adds	r7, #20
 8101644:	46bd      	mov	sp, r7
 8101646:	f85d 7b04 	ldr.w	r7, [sp], #4
 810164a:	4770      	bx	lr
 810164c:	e000ed00 	.word	0xe000ed00

08101650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101650:	b480      	push	{r7}
 8101652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101654:	4b04      	ldr	r3, [pc, #16]	; (8101668 <__NVIC_GetPriorityGrouping+0x18>)
 8101656:	68db      	ldr	r3, [r3, #12]
 8101658:	0a1b      	lsrs	r3, r3, #8
 810165a:	f003 0307 	and.w	r3, r3, #7
}
 810165e:	4618      	mov	r0, r3
 8101660:	46bd      	mov	sp, r7
 8101662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101666:	4770      	bx	lr
 8101668:	e000ed00 	.word	0xe000ed00

0810166c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810166c:	b480      	push	{r7}
 810166e:	b083      	sub	sp, #12
 8101670:	af00      	add	r7, sp, #0
 8101672:	4603      	mov	r3, r0
 8101674:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810167a:	2b00      	cmp	r3, #0
 810167c:	db0b      	blt.n	8101696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810167e:	88fb      	ldrh	r3, [r7, #6]
 8101680:	f003 021f 	and.w	r2, r3, #31
 8101684:	4907      	ldr	r1, [pc, #28]	; (81016a4 <__NVIC_EnableIRQ+0x38>)
 8101686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810168a:	095b      	lsrs	r3, r3, #5
 810168c:	2001      	movs	r0, #1
 810168e:	fa00 f202 	lsl.w	r2, r0, r2
 8101692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101696:	bf00      	nop
 8101698:	370c      	adds	r7, #12
 810169a:	46bd      	mov	sp, r7
 810169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016a0:	4770      	bx	lr
 81016a2:	bf00      	nop
 81016a4:	e000e100 	.word	0xe000e100

081016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81016a8:	b480      	push	{r7}
 81016aa:	b083      	sub	sp, #12
 81016ac:	af00      	add	r7, sp, #0
 81016ae:	4603      	mov	r3, r0
 81016b0:	6039      	str	r1, [r7, #0]
 81016b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81016b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016b8:	2b00      	cmp	r3, #0
 81016ba:	db0a      	blt.n	81016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81016bc:	683b      	ldr	r3, [r7, #0]
 81016be:	b2da      	uxtb	r2, r3
 81016c0:	490c      	ldr	r1, [pc, #48]	; (81016f4 <__NVIC_SetPriority+0x4c>)
 81016c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016c6:	0112      	lsls	r2, r2, #4
 81016c8:	b2d2      	uxtb	r2, r2
 81016ca:	440b      	add	r3, r1
 81016cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81016d0:	e00a      	b.n	81016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81016d2:	683b      	ldr	r3, [r7, #0]
 81016d4:	b2da      	uxtb	r2, r3
 81016d6:	4908      	ldr	r1, [pc, #32]	; (81016f8 <__NVIC_SetPriority+0x50>)
 81016d8:	88fb      	ldrh	r3, [r7, #6]
 81016da:	f003 030f 	and.w	r3, r3, #15
 81016de:	3b04      	subs	r3, #4
 81016e0:	0112      	lsls	r2, r2, #4
 81016e2:	b2d2      	uxtb	r2, r2
 81016e4:	440b      	add	r3, r1
 81016e6:	761a      	strb	r2, [r3, #24]
}
 81016e8:	bf00      	nop
 81016ea:	370c      	adds	r7, #12
 81016ec:	46bd      	mov	sp, r7
 81016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016f2:	4770      	bx	lr
 81016f4:	e000e100 	.word	0xe000e100
 81016f8:	e000ed00 	.word	0xe000ed00

081016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81016fc:	b480      	push	{r7}
 81016fe:	b089      	sub	sp, #36	; 0x24
 8101700:	af00      	add	r7, sp, #0
 8101702:	60f8      	str	r0, [r7, #12]
 8101704:	60b9      	str	r1, [r7, #8]
 8101706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101708:	68fb      	ldr	r3, [r7, #12]
 810170a:	f003 0307 	and.w	r3, r3, #7
 810170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101710:	69fb      	ldr	r3, [r7, #28]
 8101712:	f1c3 0307 	rsb	r3, r3, #7
 8101716:	2b04      	cmp	r3, #4
 8101718:	bf28      	it	cs
 810171a:	2304      	movcs	r3, #4
 810171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810171e:	69fb      	ldr	r3, [r7, #28]
 8101720:	3304      	adds	r3, #4
 8101722:	2b06      	cmp	r3, #6
 8101724:	d902      	bls.n	810172c <NVIC_EncodePriority+0x30>
 8101726:	69fb      	ldr	r3, [r7, #28]
 8101728:	3b03      	subs	r3, #3
 810172a:	e000      	b.n	810172e <NVIC_EncodePriority+0x32>
 810172c:	2300      	movs	r3, #0
 810172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101730:	f04f 32ff 	mov.w	r2, #4294967295
 8101734:	69bb      	ldr	r3, [r7, #24]
 8101736:	fa02 f303 	lsl.w	r3, r2, r3
 810173a:	43da      	mvns	r2, r3
 810173c:	68bb      	ldr	r3, [r7, #8]
 810173e:	401a      	ands	r2, r3
 8101740:	697b      	ldr	r3, [r7, #20]
 8101742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101744:	f04f 31ff 	mov.w	r1, #4294967295
 8101748:	697b      	ldr	r3, [r7, #20]
 810174a:	fa01 f303 	lsl.w	r3, r1, r3
 810174e:	43d9      	mvns	r1, r3
 8101750:	687b      	ldr	r3, [r7, #4]
 8101752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101754:	4313      	orrs	r3, r2
         );
}
 8101756:	4618      	mov	r0, r3
 8101758:	3724      	adds	r7, #36	; 0x24
 810175a:	46bd      	mov	sp, r7
 810175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101760:	4770      	bx	lr
	...

08101764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101764:	b580      	push	{r7, lr}
 8101766:	b082      	sub	sp, #8
 8101768:	af00      	add	r7, sp, #0
 810176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810176c:	687b      	ldr	r3, [r7, #4]
 810176e:	3b01      	subs	r3, #1
 8101770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101774:	d301      	bcc.n	810177a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101776:	2301      	movs	r3, #1
 8101778:	e00f      	b.n	810179a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810177a:	4a0a      	ldr	r2, [pc, #40]	; (81017a4 <SysTick_Config+0x40>)
 810177c:	687b      	ldr	r3, [r7, #4]
 810177e:	3b01      	subs	r3, #1
 8101780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101782:	210f      	movs	r1, #15
 8101784:	f04f 30ff 	mov.w	r0, #4294967295
 8101788:	f7ff ff8e 	bl	81016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810178c:	4b05      	ldr	r3, [pc, #20]	; (81017a4 <SysTick_Config+0x40>)
 810178e:	2200      	movs	r2, #0
 8101790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101792:	4b04      	ldr	r3, [pc, #16]	; (81017a4 <SysTick_Config+0x40>)
 8101794:	2207      	movs	r2, #7
 8101796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101798:	2300      	movs	r3, #0
}
 810179a:	4618      	mov	r0, r3
 810179c:	3708      	adds	r7, #8
 810179e:	46bd      	mov	sp, r7
 81017a0:	bd80      	pop	{r7, pc}
 81017a2:	bf00      	nop
 81017a4:	e000e010 	.word	0xe000e010

081017a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81017a8:	b580      	push	{r7, lr}
 81017aa:	b082      	sub	sp, #8
 81017ac:	af00      	add	r7, sp, #0
 81017ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81017b0:	6878      	ldr	r0, [r7, #4]
 81017b2:	f7ff ff29 	bl	8101608 <__NVIC_SetPriorityGrouping>
}
 81017b6:	bf00      	nop
 81017b8:	3708      	adds	r7, #8
 81017ba:	46bd      	mov	sp, r7
 81017bc:	bd80      	pop	{r7, pc}

081017be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81017be:	b580      	push	{r7, lr}
 81017c0:	b086      	sub	sp, #24
 81017c2:	af00      	add	r7, sp, #0
 81017c4:	4603      	mov	r3, r0
 81017c6:	60b9      	str	r1, [r7, #8]
 81017c8:	607a      	str	r2, [r7, #4]
 81017ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81017cc:	f7ff ff40 	bl	8101650 <__NVIC_GetPriorityGrouping>
 81017d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81017d2:	687a      	ldr	r2, [r7, #4]
 81017d4:	68b9      	ldr	r1, [r7, #8]
 81017d6:	6978      	ldr	r0, [r7, #20]
 81017d8:	f7ff ff90 	bl	81016fc <NVIC_EncodePriority>
 81017dc:	4602      	mov	r2, r0
 81017de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81017e2:	4611      	mov	r1, r2
 81017e4:	4618      	mov	r0, r3
 81017e6:	f7ff ff5f 	bl	81016a8 <__NVIC_SetPriority>
}
 81017ea:	bf00      	nop
 81017ec:	3718      	adds	r7, #24
 81017ee:	46bd      	mov	sp, r7
 81017f0:	bd80      	pop	{r7, pc}

081017f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81017f2:	b580      	push	{r7, lr}
 81017f4:	b082      	sub	sp, #8
 81017f6:	af00      	add	r7, sp, #0
 81017f8:	4603      	mov	r3, r0
 81017fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81017fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101800:	4618      	mov	r0, r3
 8101802:	f7ff ff33 	bl	810166c <__NVIC_EnableIRQ>
}
 8101806:	bf00      	nop
 8101808:	3708      	adds	r7, #8
 810180a:	46bd      	mov	sp, r7
 810180c:	bd80      	pop	{r7, pc}

0810180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810180e:	b580      	push	{r7, lr}
 8101810:	b082      	sub	sp, #8
 8101812:	af00      	add	r7, sp, #0
 8101814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101816:	6878      	ldr	r0, [r7, #4]
 8101818:	f7ff ffa4 	bl	8101764 <SysTick_Config>
 810181c:	4603      	mov	r3, r0
}
 810181e:	4618      	mov	r0, r3
 8101820:	3708      	adds	r7, #8
 8101822:	46bd      	mov	sp, r7
 8101824:	bd80      	pop	{r7, pc}
	...

08101828 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101828:	b480      	push	{r7}
 810182a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810182c:	4b07      	ldr	r3, [pc, #28]	; (810184c <HAL_GetCurrentCPUID+0x24>)
 810182e:	681b      	ldr	r3, [r3, #0]
 8101830:	091b      	lsrs	r3, r3, #4
 8101832:	f003 030f 	and.w	r3, r3, #15
 8101836:	2b07      	cmp	r3, #7
 8101838:	d101      	bne.n	810183e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810183a:	2303      	movs	r3, #3
 810183c:	e000      	b.n	8101840 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810183e:	2301      	movs	r3, #1
  }
}
 8101840:	4618      	mov	r0, r3
 8101842:	46bd      	mov	sp, r7
 8101844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101848:	4770      	bx	lr
 810184a:	bf00      	nop
 810184c:	e000ed00 	.word	0xe000ed00

08101850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101850:	b480      	push	{r7}
 8101852:	b089      	sub	sp, #36	; 0x24
 8101854:	af00      	add	r7, sp, #0
 8101856:	6078      	str	r0, [r7, #4]
 8101858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810185a:	2300      	movs	r3, #0
 810185c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810185e:	4b89      	ldr	r3, [pc, #548]	; (8101a84 <HAL_GPIO_Init+0x234>)
 8101860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101862:	e194      	b.n	8101b8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101864:	683b      	ldr	r3, [r7, #0]
 8101866:	681a      	ldr	r2, [r3, #0]
 8101868:	2101      	movs	r1, #1
 810186a:	69fb      	ldr	r3, [r7, #28]
 810186c:	fa01 f303 	lsl.w	r3, r1, r3
 8101870:	4013      	ands	r3, r2
 8101872:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101874:	693b      	ldr	r3, [r7, #16]
 8101876:	2b00      	cmp	r3, #0
 8101878:	f000 8186 	beq.w	8101b88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810187c:	683b      	ldr	r3, [r7, #0]
 810187e:	685b      	ldr	r3, [r3, #4]
 8101880:	f003 0303 	and.w	r3, r3, #3
 8101884:	2b01      	cmp	r3, #1
 8101886:	d005      	beq.n	8101894 <HAL_GPIO_Init+0x44>
 8101888:	683b      	ldr	r3, [r7, #0]
 810188a:	685b      	ldr	r3, [r3, #4]
 810188c:	f003 0303 	and.w	r3, r3, #3
 8101890:	2b02      	cmp	r3, #2
 8101892:	d130      	bne.n	81018f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101894:	687b      	ldr	r3, [r7, #4]
 8101896:	689b      	ldr	r3, [r3, #8]
 8101898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810189a:	69fb      	ldr	r3, [r7, #28]
 810189c:	005b      	lsls	r3, r3, #1
 810189e:	2203      	movs	r2, #3
 81018a0:	fa02 f303 	lsl.w	r3, r2, r3
 81018a4:	43db      	mvns	r3, r3
 81018a6:	69ba      	ldr	r2, [r7, #24]
 81018a8:	4013      	ands	r3, r2
 81018aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81018ac:	683b      	ldr	r3, [r7, #0]
 81018ae:	68da      	ldr	r2, [r3, #12]
 81018b0:	69fb      	ldr	r3, [r7, #28]
 81018b2:	005b      	lsls	r3, r3, #1
 81018b4:	fa02 f303 	lsl.w	r3, r2, r3
 81018b8:	69ba      	ldr	r2, [r7, #24]
 81018ba:	4313      	orrs	r3, r2
 81018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81018be:	687b      	ldr	r3, [r7, #4]
 81018c0:	69ba      	ldr	r2, [r7, #24]
 81018c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81018c4:	687b      	ldr	r3, [r7, #4]
 81018c6:	685b      	ldr	r3, [r3, #4]
 81018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81018ca:	2201      	movs	r2, #1
 81018cc:	69fb      	ldr	r3, [r7, #28]
 81018ce:	fa02 f303 	lsl.w	r3, r2, r3
 81018d2:	43db      	mvns	r3, r3
 81018d4:	69ba      	ldr	r2, [r7, #24]
 81018d6:	4013      	ands	r3, r2
 81018d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81018da:	683b      	ldr	r3, [r7, #0]
 81018dc:	685b      	ldr	r3, [r3, #4]
 81018de:	091b      	lsrs	r3, r3, #4
 81018e0:	f003 0201 	and.w	r2, r3, #1
 81018e4:	69fb      	ldr	r3, [r7, #28]
 81018e6:	fa02 f303 	lsl.w	r3, r2, r3
 81018ea:	69ba      	ldr	r2, [r7, #24]
 81018ec:	4313      	orrs	r3, r2
 81018ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81018f0:	687b      	ldr	r3, [r7, #4]
 81018f2:	69ba      	ldr	r2, [r7, #24]
 81018f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81018f6:	683b      	ldr	r3, [r7, #0]
 81018f8:	685b      	ldr	r3, [r3, #4]
 81018fa:	f003 0303 	and.w	r3, r3, #3
 81018fe:	2b03      	cmp	r3, #3
 8101900:	d017      	beq.n	8101932 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101902:	687b      	ldr	r3, [r7, #4]
 8101904:	68db      	ldr	r3, [r3, #12]
 8101906:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101908:	69fb      	ldr	r3, [r7, #28]
 810190a:	005b      	lsls	r3, r3, #1
 810190c:	2203      	movs	r2, #3
 810190e:	fa02 f303 	lsl.w	r3, r2, r3
 8101912:	43db      	mvns	r3, r3
 8101914:	69ba      	ldr	r2, [r7, #24]
 8101916:	4013      	ands	r3, r2
 8101918:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810191a:	683b      	ldr	r3, [r7, #0]
 810191c:	689a      	ldr	r2, [r3, #8]
 810191e:	69fb      	ldr	r3, [r7, #28]
 8101920:	005b      	lsls	r3, r3, #1
 8101922:	fa02 f303 	lsl.w	r3, r2, r3
 8101926:	69ba      	ldr	r2, [r7, #24]
 8101928:	4313      	orrs	r3, r2
 810192a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810192c:	687b      	ldr	r3, [r7, #4]
 810192e:	69ba      	ldr	r2, [r7, #24]
 8101930:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101932:	683b      	ldr	r3, [r7, #0]
 8101934:	685b      	ldr	r3, [r3, #4]
 8101936:	f003 0303 	and.w	r3, r3, #3
 810193a:	2b02      	cmp	r3, #2
 810193c:	d123      	bne.n	8101986 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810193e:	69fb      	ldr	r3, [r7, #28]
 8101940:	08da      	lsrs	r2, r3, #3
 8101942:	687b      	ldr	r3, [r7, #4]
 8101944:	3208      	adds	r2, #8
 8101946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810194c:	69fb      	ldr	r3, [r7, #28]
 810194e:	f003 0307 	and.w	r3, r3, #7
 8101952:	009b      	lsls	r3, r3, #2
 8101954:	220f      	movs	r2, #15
 8101956:	fa02 f303 	lsl.w	r3, r2, r3
 810195a:	43db      	mvns	r3, r3
 810195c:	69ba      	ldr	r2, [r7, #24]
 810195e:	4013      	ands	r3, r2
 8101960:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101962:	683b      	ldr	r3, [r7, #0]
 8101964:	691a      	ldr	r2, [r3, #16]
 8101966:	69fb      	ldr	r3, [r7, #28]
 8101968:	f003 0307 	and.w	r3, r3, #7
 810196c:	009b      	lsls	r3, r3, #2
 810196e:	fa02 f303 	lsl.w	r3, r2, r3
 8101972:	69ba      	ldr	r2, [r7, #24]
 8101974:	4313      	orrs	r3, r2
 8101976:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101978:	69fb      	ldr	r3, [r7, #28]
 810197a:	08da      	lsrs	r2, r3, #3
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	3208      	adds	r2, #8
 8101980:	69b9      	ldr	r1, [r7, #24]
 8101982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101986:	687b      	ldr	r3, [r7, #4]
 8101988:	681b      	ldr	r3, [r3, #0]
 810198a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810198c:	69fb      	ldr	r3, [r7, #28]
 810198e:	005b      	lsls	r3, r3, #1
 8101990:	2203      	movs	r2, #3
 8101992:	fa02 f303 	lsl.w	r3, r2, r3
 8101996:	43db      	mvns	r3, r3
 8101998:	69ba      	ldr	r2, [r7, #24]
 810199a:	4013      	ands	r3, r2
 810199c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810199e:	683b      	ldr	r3, [r7, #0]
 81019a0:	685b      	ldr	r3, [r3, #4]
 81019a2:	f003 0203 	and.w	r2, r3, #3
 81019a6:	69fb      	ldr	r3, [r7, #28]
 81019a8:	005b      	lsls	r3, r3, #1
 81019aa:	fa02 f303 	lsl.w	r3, r2, r3
 81019ae:	69ba      	ldr	r2, [r7, #24]
 81019b0:	4313      	orrs	r3, r2
 81019b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81019b4:	687b      	ldr	r3, [r7, #4]
 81019b6:	69ba      	ldr	r2, [r7, #24]
 81019b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81019ba:	683b      	ldr	r3, [r7, #0]
 81019bc:	685b      	ldr	r3, [r3, #4]
 81019be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81019c2:	2b00      	cmp	r3, #0
 81019c4:	f000 80e0 	beq.w	8101b88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81019c8:	4b2f      	ldr	r3, [pc, #188]	; (8101a88 <HAL_GPIO_Init+0x238>)
 81019ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81019ce:	4a2e      	ldr	r2, [pc, #184]	; (8101a88 <HAL_GPIO_Init+0x238>)
 81019d0:	f043 0302 	orr.w	r3, r3, #2
 81019d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81019d8:	4b2b      	ldr	r3, [pc, #172]	; (8101a88 <HAL_GPIO_Init+0x238>)
 81019da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81019de:	f003 0302 	and.w	r3, r3, #2
 81019e2:	60fb      	str	r3, [r7, #12]
 81019e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81019e6:	4a29      	ldr	r2, [pc, #164]	; (8101a8c <HAL_GPIO_Init+0x23c>)
 81019e8:	69fb      	ldr	r3, [r7, #28]
 81019ea:	089b      	lsrs	r3, r3, #2
 81019ec:	3302      	adds	r3, #2
 81019ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81019f4:	69fb      	ldr	r3, [r7, #28]
 81019f6:	f003 0303 	and.w	r3, r3, #3
 81019fa:	009b      	lsls	r3, r3, #2
 81019fc:	220f      	movs	r2, #15
 81019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8101a02:	43db      	mvns	r3, r3
 8101a04:	69ba      	ldr	r2, [r7, #24]
 8101a06:	4013      	ands	r3, r2
 8101a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101a0a:	687b      	ldr	r3, [r7, #4]
 8101a0c:	4a20      	ldr	r2, [pc, #128]	; (8101a90 <HAL_GPIO_Init+0x240>)
 8101a0e:	4293      	cmp	r3, r2
 8101a10:	d052      	beq.n	8101ab8 <HAL_GPIO_Init+0x268>
 8101a12:	687b      	ldr	r3, [r7, #4]
 8101a14:	4a1f      	ldr	r2, [pc, #124]	; (8101a94 <HAL_GPIO_Init+0x244>)
 8101a16:	4293      	cmp	r3, r2
 8101a18:	d031      	beq.n	8101a7e <HAL_GPIO_Init+0x22e>
 8101a1a:	687b      	ldr	r3, [r7, #4]
 8101a1c:	4a1e      	ldr	r2, [pc, #120]	; (8101a98 <HAL_GPIO_Init+0x248>)
 8101a1e:	4293      	cmp	r3, r2
 8101a20:	d02b      	beq.n	8101a7a <HAL_GPIO_Init+0x22a>
 8101a22:	687b      	ldr	r3, [r7, #4]
 8101a24:	4a1d      	ldr	r2, [pc, #116]	; (8101a9c <HAL_GPIO_Init+0x24c>)
 8101a26:	4293      	cmp	r3, r2
 8101a28:	d025      	beq.n	8101a76 <HAL_GPIO_Init+0x226>
 8101a2a:	687b      	ldr	r3, [r7, #4]
 8101a2c:	4a1c      	ldr	r2, [pc, #112]	; (8101aa0 <HAL_GPIO_Init+0x250>)
 8101a2e:	4293      	cmp	r3, r2
 8101a30:	d01f      	beq.n	8101a72 <HAL_GPIO_Init+0x222>
 8101a32:	687b      	ldr	r3, [r7, #4]
 8101a34:	4a1b      	ldr	r2, [pc, #108]	; (8101aa4 <HAL_GPIO_Init+0x254>)
 8101a36:	4293      	cmp	r3, r2
 8101a38:	d019      	beq.n	8101a6e <HAL_GPIO_Init+0x21e>
 8101a3a:	687b      	ldr	r3, [r7, #4]
 8101a3c:	4a1a      	ldr	r2, [pc, #104]	; (8101aa8 <HAL_GPIO_Init+0x258>)
 8101a3e:	4293      	cmp	r3, r2
 8101a40:	d013      	beq.n	8101a6a <HAL_GPIO_Init+0x21a>
 8101a42:	687b      	ldr	r3, [r7, #4]
 8101a44:	4a19      	ldr	r2, [pc, #100]	; (8101aac <HAL_GPIO_Init+0x25c>)
 8101a46:	4293      	cmp	r3, r2
 8101a48:	d00d      	beq.n	8101a66 <HAL_GPIO_Init+0x216>
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	4a18      	ldr	r2, [pc, #96]	; (8101ab0 <HAL_GPIO_Init+0x260>)
 8101a4e:	4293      	cmp	r3, r2
 8101a50:	d007      	beq.n	8101a62 <HAL_GPIO_Init+0x212>
 8101a52:	687b      	ldr	r3, [r7, #4]
 8101a54:	4a17      	ldr	r2, [pc, #92]	; (8101ab4 <HAL_GPIO_Init+0x264>)
 8101a56:	4293      	cmp	r3, r2
 8101a58:	d101      	bne.n	8101a5e <HAL_GPIO_Init+0x20e>
 8101a5a:	2309      	movs	r3, #9
 8101a5c:	e02d      	b.n	8101aba <HAL_GPIO_Init+0x26a>
 8101a5e:	230a      	movs	r3, #10
 8101a60:	e02b      	b.n	8101aba <HAL_GPIO_Init+0x26a>
 8101a62:	2308      	movs	r3, #8
 8101a64:	e029      	b.n	8101aba <HAL_GPIO_Init+0x26a>
 8101a66:	2307      	movs	r3, #7
 8101a68:	e027      	b.n	8101aba <HAL_GPIO_Init+0x26a>
 8101a6a:	2306      	movs	r3, #6
 8101a6c:	e025      	b.n	8101aba <HAL_GPIO_Init+0x26a>
 8101a6e:	2305      	movs	r3, #5
 8101a70:	e023      	b.n	8101aba <HAL_GPIO_Init+0x26a>
 8101a72:	2304      	movs	r3, #4
 8101a74:	e021      	b.n	8101aba <HAL_GPIO_Init+0x26a>
 8101a76:	2303      	movs	r3, #3
 8101a78:	e01f      	b.n	8101aba <HAL_GPIO_Init+0x26a>
 8101a7a:	2302      	movs	r3, #2
 8101a7c:	e01d      	b.n	8101aba <HAL_GPIO_Init+0x26a>
 8101a7e:	2301      	movs	r3, #1
 8101a80:	e01b      	b.n	8101aba <HAL_GPIO_Init+0x26a>
 8101a82:	bf00      	nop
 8101a84:	580000c0 	.word	0x580000c0
 8101a88:	58024400 	.word	0x58024400
 8101a8c:	58000400 	.word	0x58000400
 8101a90:	58020000 	.word	0x58020000
 8101a94:	58020400 	.word	0x58020400
 8101a98:	58020800 	.word	0x58020800
 8101a9c:	58020c00 	.word	0x58020c00
 8101aa0:	58021000 	.word	0x58021000
 8101aa4:	58021400 	.word	0x58021400
 8101aa8:	58021800 	.word	0x58021800
 8101aac:	58021c00 	.word	0x58021c00
 8101ab0:	58022000 	.word	0x58022000
 8101ab4:	58022400 	.word	0x58022400
 8101ab8:	2300      	movs	r3, #0
 8101aba:	69fa      	ldr	r2, [r7, #28]
 8101abc:	f002 0203 	and.w	r2, r2, #3
 8101ac0:	0092      	lsls	r2, r2, #2
 8101ac2:	4093      	lsls	r3, r2
 8101ac4:	69ba      	ldr	r2, [r7, #24]
 8101ac6:	4313      	orrs	r3, r2
 8101ac8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101aca:	4938      	ldr	r1, [pc, #224]	; (8101bac <HAL_GPIO_Init+0x35c>)
 8101acc:	69fb      	ldr	r3, [r7, #28]
 8101ace:	089b      	lsrs	r3, r3, #2
 8101ad0:	3302      	adds	r3, #2
 8101ad2:	69ba      	ldr	r2, [r7, #24]
 8101ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101adc:	681b      	ldr	r3, [r3, #0]
 8101ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101ae0:	693b      	ldr	r3, [r7, #16]
 8101ae2:	43db      	mvns	r3, r3
 8101ae4:	69ba      	ldr	r2, [r7, #24]
 8101ae6:	4013      	ands	r3, r2
 8101ae8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101aea:	683b      	ldr	r3, [r7, #0]
 8101aec:	685b      	ldr	r3, [r3, #4]
 8101aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101af2:	2b00      	cmp	r3, #0
 8101af4:	d003      	beq.n	8101afe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101af6:	69ba      	ldr	r2, [r7, #24]
 8101af8:	693b      	ldr	r3, [r7, #16]
 8101afa:	4313      	orrs	r3, r2
 8101afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101b02:	69bb      	ldr	r3, [r7, #24]
 8101b04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101b0a:	685b      	ldr	r3, [r3, #4]
 8101b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101b0e:	693b      	ldr	r3, [r7, #16]
 8101b10:	43db      	mvns	r3, r3
 8101b12:	69ba      	ldr	r2, [r7, #24]
 8101b14:	4013      	ands	r3, r2
 8101b16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101b18:	683b      	ldr	r3, [r7, #0]
 8101b1a:	685b      	ldr	r3, [r3, #4]
 8101b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101b20:	2b00      	cmp	r3, #0
 8101b22:	d003      	beq.n	8101b2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101b24:	69ba      	ldr	r2, [r7, #24]
 8101b26:	693b      	ldr	r3, [r7, #16]
 8101b28:	4313      	orrs	r3, r2
 8101b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101b30:	69bb      	ldr	r3, [r7, #24]
 8101b32:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101b34:	697b      	ldr	r3, [r7, #20]
 8101b36:	685b      	ldr	r3, [r3, #4]
 8101b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101b3a:	693b      	ldr	r3, [r7, #16]
 8101b3c:	43db      	mvns	r3, r3
 8101b3e:	69ba      	ldr	r2, [r7, #24]
 8101b40:	4013      	ands	r3, r2
 8101b42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101b44:	683b      	ldr	r3, [r7, #0]
 8101b46:	685b      	ldr	r3, [r3, #4]
 8101b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101b4c:	2b00      	cmp	r3, #0
 8101b4e:	d003      	beq.n	8101b58 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101b50:	69ba      	ldr	r2, [r7, #24]
 8101b52:	693b      	ldr	r3, [r7, #16]
 8101b54:	4313      	orrs	r3, r2
 8101b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101b58:	697b      	ldr	r3, [r7, #20]
 8101b5a:	69ba      	ldr	r2, [r7, #24]
 8101b5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101b5e:	697b      	ldr	r3, [r7, #20]
 8101b60:	681b      	ldr	r3, [r3, #0]
 8101b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101b64:	693b      	ldr	r3, [r7, #16]
 8101b66:	43db      	mvns	r3, r3
 8101b68:	69ba      	ldr	r2, [r7, #24]
 8101b6a:	4013      	ands	r3, r2
 8101b6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101b6e:	683b      	ldr	r3, [r7, #0]
 8101b70:	685b      	ldr	r3, [r3, #4]
 8101b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101b76:	2b00      	cmp	r3, #0
 8101b78:	d003      	beq.n	8101b82 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101b7a:	69ba      	ldr	r2, [r7, #24]
 8101b7c:	693b      	ldr	r3, [r7, #16]
 8101b7e:	4313      	orrs	r3, r2
 8101b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101b82:	697b      	ldr	r3, [r7, #20]
 8101b84:	69ba      	ldr	r2, [r7, #24]
 8101b86:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101b88:	69fb      	ldr	r3, [r7, #28]
 8101b8a:	3301      	adds	r3, #1
 8101b8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101b8e:	683b      	ldr	r3, [r7, #0]
 8101b90:	681a      	ldr	r2, [r3, #0]
 8101b92:	69fb      	ldr	r3, [r7, #28]
 8101b94:	fa22 f303 	lsr.w	r3, r2, r3
 8101b98:	2b00      	cmp	r3, #0
 8101b9a:	f47f ae63 	bne.w	8101864 <HAL_GPIO_Init+0x14>
  }
}
 8101b9e:	bf00      	nop
 8101ba0:	bf00      	nop
 8101ba2:	3724      	adds	r7, #36	; 0x24
 8101ba4:	46bd      	mov	sp, r7
 8101ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101baa:	4770      	bx	lr
 8101bac:	58000400 	.word	0x58000400

08101bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101bb0:	b480      	push	{r7}
 8101bb2:	b083      	sub	sp, #12
 8101bb4:	af00      	add	r7, sp, #0
 8101bb6:	6078      	str	r0, [r7, #4]
 8101bb8:	460b      	mov	r3, r1
 8101bba:	807b      	strh	r3, [r7, #2]
 8101bbc:	4613      	mov	r3, r2
 8101bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101bc0:	787b      	ldrb	r3, [r7, #1]
 8101bc2:	2b00      	cmp	r3, #0
 8101bc4:	d003      	beq.n	8101bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101bc6:	887a      	ldrh	r2, [r7, #2]
 8101bc8:	687b      	ldr	r3, [r7, #4]
 8101bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101bcc:	e003      	b.n	8101bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101bce:	887b      	ldrh	r3, [r7, #2]
 8101bd0:	041a      	lsls	r2, r3, #16
 8101bd2:	687b      	ldr	r3, [r7, #4]
 8101bd4:	619a      	str	r2, [r3, #24]
}
 8101bd6:	bf00      	nop
 8101bd8:	370c      	adds	r7, #12
 8101bda:	46bd      	mov	sp, r7
 8101bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101be0:	4770      	bx	lr
	...

08101be4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101be4:	b480      	push	{r7}
 8101be6:	b083      	sub	sp, #12
 8101be8:	af00      	add	r7, sp, #0
 8101bea:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101bec:	4b05      	ldr	r3, [pc, #20]	; (8101c04 <HAL_HSEM_ActivateNotification+0x20>)
 8101bee:	681a      	ldr	r2, [r3, #0]
 8101bf0:	4904      	ldr	r1, [pc, #16]	; (8101c04 <HAL_HSEM_ActivateNotification+0x20>)
 8101bf2:	687b      	ldr	r3, [r7, #4]
 8101bf4:	4313      	orrs	r3, r2
 8101bf6:	600b      	str	r3, [r1, #0]
#endif
}
 8101bf8:	bf00      	nop
 8101bfa:	370c      	adds	r7, #12
 8101bfc:	46bd      	mov	sp, r7
 8101bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c02:	4770      	bx	lr
 8101c04:	58026510 	.word	0x58026510

08101c08 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101c08:	b580      	push	{r7, lr}
 8101c0a:	b084      	sub	sp, #16
 8101c0c:	af00      	add	r7, sp, #0
 8101c0e:	60f8      	str	r0, [r7, #12]
 8101c10:	460b      	mov	r3, r1
 8101c12:	607a      	str	r2, [r7, #4]
 8101c14:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101c16:	4b37      	ldr	r3, [pc, #220]	; (8101cf4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c18:	681b      	ldr	r3, [r3, #0]
 8101c1a:	f023 0201 	bic.w	r2, r3, #1
 8101c1e:	4935      	ldr	r1, [pc, #212]	; (8101cf4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c20:	68fb      	ldr	r3, [r7, #12]
 8101c22:	4313      	orrs	r3, r2
 8101c24:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101c26:	687b      	ldr	r3, [r7, #4]
 8101c28:	2b00      	cmp	r3, #0
 8101c2a:	d123      	bne.n	8101c74 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101c2c:	f7ff fdfc 	bl	8101828 <HAL_GetCurrentCPUID>
 8101c30:	4603      	mov	r3, r0
 8101c32:	2b03      	cmp	r3, #3
 8101c34:	d158      	bne.n	8101ce8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101c36:	4b2f      	ldr	r3, [pc, #188]	; (8101cf4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c38:	691b      	ldr	r3, [r3, #16]
 8101c3a:	4a2e      	ldr	r2, [pc, #184]	; (8101cf4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c3c:	f023 0301 	bic.w	r3, r3, #1
 8101c40:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101c42:	4b2d      	ldr	r3, [pc, #180]	; (8101cf8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c44:	691b      	ldr	r3, [r3, #16]
 8101c46:	4a2c      	ldr	r2, [pc, #176]	; (8101cf8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c48:	f043 0304 	orr.w	r3, r3, #4
 8101c4c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101c4e:	f3bf 8f4f 	dsb	sy
}
 8101c52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101c54:	f3bf 8f6f 	isb	sy
}
 8101c58:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101c5a:	7afb      	ldrb	r3, [r7, #11]
 8101c5c:	2b01      	cmp	r3, #1
 8101c5e:	d101      	bne.n	8101c64 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101c60:	bf30      	wfi
 8101c62:	e000      	b.n	8101c66 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101c64:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101c66:	4b24      	ldr	r3, [pc, #144]	; (8101cf8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c68:	691b      	ldr	r3, [r3, #16]
 8101c6a:	4a23      	ldr	r2, [pc, #140]	; (8101cf8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c6c:	f023 0304 	bic.w	r3, r3, #4
 8101c70:	6113      	str	r3, [r2, #16]
 8101c72:	e03c      	b.n	8101cee <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101c74:	687b      	ldr	r3, [r7, #4]
 8101c76:	2b01      	cmp	r3, #1
 8101c78:	d123      	bne.n	8101cc2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101c7a:	f7ff fdd5 	bl	8101828 <HAL_GetCurrentCPUID>
 8101c7e:	4603      	mov	r3, r0
 8101c80:	2b01      	cmp	r3, #1
 8101c82:	d133      	bne.n	8101cec <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101c84:	4b1b      	ldr	r3, [pc, #108]	; (8101cf4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c86:	695b      	ldr	r3, [r3, #20]
 8101c88:	4a1a      	ldr	r2, [pc, #104]	; (8101cf4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c8a:	f023 0302 	bic.w	r3, r3, #2
 8101c8e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101c90:	4b19      	ldr	r3, [pc, #100]	; (8101cf8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c92:	691b      	ldr	r3, [r3, #16]
 8101c94:	4a18      	ldr	r2, [pc, #96]	; (8101cf8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101c96:	f043 0304 	orr.w	r3, r3, #4
 8101c9a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101c9c:	f3bf 8f4f 	dsb	sy
}
 8101ca0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101ca2:	f3bf 8f6f 	isb	sy
}
 8101ca6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101ca8:	7afb      	ldrb	r3, [r7, #11]
 8101caa:	2b01      	cmp	r3, #1
 8101cac:	d101      	bne.n	8101cb2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101cae:	bf30      	wfi
 8101cb0:	e000      	b.n	8101cb4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101cb2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101cb4:	4b10      	ldr	r3, [pc, #64]	; (8101cf8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101cb6:	691b      	ldr	r3, [r3, #16]
 8101cb8:	4a0f      	ldr	r2, [pc, #60]	; (8101cf8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101cba:	f023 0304 	bic.w	r3, r3, #4
 8101cbe:	6113      	str	r3, [r2, #16]
 8101cc0:	e015      	b.n	8101cee <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101cc2:	f7ff fdb1 	bl	8101828 <HAL_GetCurrentCPUID>
 8101cc6:	4603      	mov	r3, r0
 8101cc8:	2b03      	cmp	r3, #3
 8101cca:	d106      	bne.n	8101cda <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101ccc:	4b09      	ldr	r3, [pc, #36]	; (8101cf4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101cce:	691b      	ldr	r3, [r3, #16]
 8101cd0:	4a08      	ldr	r2, [pc, #32]	; (8101cf4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101cd2:	f023 0304 	bic.w	r3, r3, #4
 8101cd6:	6113      	str	r3, [r2, #16]
 8101cd8:	e009      	b.n	8101cee <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101cda:	4b06      	ldr	r3, [pc, #24]	; (8101cf4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101cdc:	695b      	ldr	r3, [r3, #20]
 8101cde:	4a05      	ldr	r2, [pc, #20]	; (8101cf4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101ce0:	f023 0304 	bic.w	r3, r3, #4
 8101ce4:	6153      	str	r3, [r2, #20]
 8101ce6:	e002      	b.n	8101cee <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101ce8:	bf00      	nop
 8101cea:	e000      	b.n	8101cee <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101cec:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101cee:	3710      	adds	r7, #16
 8101cf0:	46bd      	mov	sp, r7
 8101cf2:	bd80      	pop	{r7, pc}
 8101cf4:	58024800 	.word	0x58024800
 8101cf8:	e000ed00 	.word	0xe000ed00

08101cfc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101cfc:	b580      	push	{r7, lr}
 8101cfe:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101d00:	f7ff fd92 	bl	8101828 <HAL_GetCurrentCPUID>
 8101d04:	4603      	mov	r3, r0
 8101d06:	2b03      	cmp	r3, #3
 8101d08:	d101      	bne.n	8101d0e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101d0a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101d0c:	e001      	b.n	8101d12 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101d0e:	bf40      	sev
    __WFE ();
 8101d10:	bf20      	wfe
}
 8101d12:	bf00      	nop
 8101d14:	bd80      	pop	{r7, pc}
	...

08101d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101d18:	b480      	push	{r7}
 8101d1a:	b089      	sub	sp, #36	; 0x24
 8101d1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101d1e:	4bb3      	ldr	r3, [pc, #716]	; (8101fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d20:	691b      	ldr	r3, [r3, #16]
 8101d22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8101d26:	2b18      	cmp	r3, #24
 8101d28:	f200 8155 	bhi.w	8101fd6 <HAL_RCC_GetSysClockFreq+0x2be>
 8101d2c:	a201      	add	r2, pc, #4	; (adr r2, 8101d34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101d32:	bf00      	nop
 8101d34:	08101d99 	.word	0x08101d99
 8101d38:	08101fd7 	.word	0x08101fd7
 8101d3c:	08101fd7 	.word	0x08101fd7
 8101d40:	08101fd7 	.word	0x08101fd7
 8101d44:	08101fd7 	.word	0x08101fd7
 8101d48:	08101fd7 	.word	0x08101fd7
 8101d4c:	08101fd7 	.word	0x08101fd7
 8101d50:	08101fd7 	.word	0x08101fd7
 8101d54:	08101dbf 	.word	0x08101dbf
 8101d58:	08101fd7 	.word	0x08101fd7
 8101d5c:	08101fd7 	.word	0x08101fd7
 8101d60:	08101fd7 	.word	0x08101fd7
 8101d64:	08101fd7 	.word	0x08101fd7
 8101d68:	08101fd7 	.word	0x08101fd7
 8101d6c:	08101fd7 	.word	0x08101fd7
 8101d70:	08101fd7 	.word	0x08101fd7
 8101d74:	08101dc5 	.word	0x08101dc5
 8101d78:	08101fd7 	.word	0x08101fd7
 8101d7c:	08101fd7 	.word	0x08101fd7
 8101d80:	08101fd7 	.word	0x08101fd7
 8101d84:	08101fd7 	.word	0x08101fd7
 8101d88:	08101fd7 	.word	0x08101fd7
 8101d8c:	08101fd7 	.word	0x08101fd7
 8101d90:	08101fd7 	.word	0x08101fd7
 8101d94:	08101dcb 	.word	0x08101dcb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101d98:	4b94      	ldr	r3, [pc, #592]	; (8101fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d9a:	681b      	ldr	r3, [r3, #0]
 8101d9c:	f003 0320 	and.w	r3, r3, #32
 8101da0:	2b00      	cmp	r3, #0
 8101da2:	d009      	beq.n	8101db8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101da4:	4b91      	ldr	r3, [pc, #580]	; (8101fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101da6:	681b      	ldr	r3, [r3, #0]
 8101da8:	08db      	lsrs	r3, r3, #3
 8101daa:	f003 0303 	and.w	r3, r3, #3
 8101dae:	4a90      	ldr	r2, [pc, #576]	; (8101ff0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101db0:	fa22 f303 	lsr.w	r3, r2, r3
 8101db4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8101db6:	e111      	b.n	8101fdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101db8:	4b8d      	ldr	r3, [pc, #564]	; (8101ff0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101dba:	61bb      	str	r3, [r7, #24]
    break;
 8101dbc:	e10e      	b.n	8101fdc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101dbe:	4b8d      	ldr	r3, [pc, #564]	; (8101ff4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101dc0:	61bb      	str	r3, [r7, #24]
    break;
 8101dc2:	e10b      	b.n	8101fdc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101dc4:	4b8c      	ldr	r3, [pc, #560]	; (8101ff8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101dc6:	61bb      	str	r3, [r7, #24]
    break;
 8101dc8:	e108      	b.n	8101fdc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101dca:	4b88      	ldr	r3, [pc, #544]	; (8101fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101dce:	f003 0303 	and.w	r3, r3, #3
 8101dd2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101dd4:	4b85      	ldr	r3, [pc, #532]	; (8101fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101dd8:	091b      	lsrs	r3, r3, #4
 8101dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101dde:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101de0:	4b82      	ldr	r3, [pc, #520]	; (8101fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101de4:	f003 0301 	and.w	r3, r3, #1
 8101de8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8101dea:	4b80      	ldr	r3, [pc, #512]	; (8101fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101dee:	08db      	lsrs	r3, r3, #3
 8101df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101df4:	68fa      	ldr	r2, [r7, #12]
 8101df6:	fb02 f303 	mul.w	r3, r2, r3
 8101dfa:	ee07 3a90 	vmov	s15, r3
 8101dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101e02:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8101e06:	693b      	ldr	r3, [r7, #16]
 8101e08:	2b00      	cmp	r3, #0
 8101e0a:	f000 80e1 	beq.w	8101fd0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101e0e:	697b      	ldr	r3, [r7, #20]
 8101e10:	2b02      	cmp	r3, #2
 8101e12:	f000 8083 	beq.w	8101f1c <HAL_RCC_GetSysClockFreq+0x204>
 8101e16:	697b      	ldr	r3, [r7, #20]
 8101e18:	2b02      	cmp	r3, #2
 8101e1a:	f200 80a1 	bhi.w	8101f60 <HAL_RCC_GetSysClockFreq+0x248>
 8101e1e:	697b      	ldr	r3, [r7, #20]
 8101e20:	2b00      	cmp	r3, #0
 8101e22:	d003      	beq.n	8101e2c <HAL_RCC_GetSysClockFreq+0x114>
 8101e24:	697b      	ldr	r3, [r7, #20]
 8101e26:	2b01      	cmp	r3, #1
 8101e28:	d056      	beq.n	8101ed8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101e2a:	e099      	b.n	8101f60 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101e2c:	4b6f      	ldr	r3, [pc, #444]	; (8101fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e2e:	681b      	ldr	r3, [r3, #0]
 8101e30:	f003 0320 	and.w	r3, r3, #32
 8101e34:	2b00      	cmp	r3, #0
 8101e36:	d02d      	beq.n	8101e94 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101e38:	4b6c      	ldr	r3, [pc, #432]	; (8101fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e3a:	681b      	ldr	r3, [r3, #0]
 8101e3c:	08db      	lsrs	r3, r3, #3
 8101e3e:	f003 0303 	and.w	r3, r3, #3
 8101e42:	4a6b      	ldr	r2, [pc, #428]	; (8101ff0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101e44:	fa22 f303 	lsr.w	r3, r2, r3
 8101e48:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101e4a:	687b      	ldr	r3, [r7, #4]
 8101e4c:	ee07 3a90 	vmov	s15, r3
 8101e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101e54:	693b      	ldr	r3, [r7, #16]
 8101e56:	ee07 3a90 	vmov	s15, r3
 8101e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101e62:	4b62      	ldr	r3, [pc, #392]	; (8101fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101e6a:	ee07 3a90 	vmov	s15, r3
 8101e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101e72:	ed97 6a02 	vldr	s12, [r7, #8]
 8101e76:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101e92:	e087      	b.n	8101fa4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101e94:	693b      	ldr	r3, [r7, #16]
 8101e96:	ee07 3a90 	vmov	s15, r3
 8101e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101e9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102000 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101ea6:	4b51      	ldr	r3, [pc, #324]	; (8101fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101eae:	ee07 3a90 	vmov	s15, r3
 8101eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101eb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8101eba:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101ed6:	e065      	b.n	8101fa4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101ed8:	693b      	ldr	r3, [r7, #16]
 8101eda:	ee07 3a90 	vmov	s15, r3
 8101ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ee2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102004 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101eea:	4b40      	ldr	r3, [pc, #256]	; (8101fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101ef2:	ee07 3a90 	vmov	s15, r3
 8101ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101efa:	ed97 6a02 	vldr	s12, [r7, #8]
 8101efe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101f1a:	e043      	b.n	8101fa4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101f1c:	693b      	ldr	r3, [r7, #16]
 8101f1e:	ee07 3a90 	vmov	s15, r3
 8101f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f26:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102008 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f2e:	4b2f      	ldr	r3, [pc, #188]	; (8101fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101f36:	ee07 3a90 	vmov	s15, r3
 8101f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101f42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101f5e:	e021      	b.n	8101fa4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101f60:	693b      	ldr	r3, [r7, #16]
 8101f62:	ee07 3a90 	vmov	s15, r3
 8101f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f6a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102004 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f72:	4b1e      	ldr	r3, [pc, #120]	; (8101fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101f7a:	ee07 3a90 	vmov	s15, r3
 8101f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8101f86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101fa2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101fa4:	4b11      	ldr	r3, [pc, #68]	; (8101fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101fa8:	0a5b      	lsrs	r3, r3, #9
 8101faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101fae:	3301      	adds	r3, #1
 8101fb0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8101fb2:	683b      	ldr	r3, [r7, #0]
 8101fb4:	ee07 3a90 	vmov	s15, r3
 8101fb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101fbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8101fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101fc8:	ee17 3a90 	vmov	r3, s15
 8101fcc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101fce:	e005      	b.n	8101fdc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101fd0:	2300      	movs	r3, #0
 8101fd2:	61bb      	str	r3, [r7, #24]
    break;
 8101fd4:	e002      	b.n	8101fdc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8101fd6:	4b07      	ldr	r3, [pc, #28]	; (8101ff4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101fd8:	61bb      	str	r3, [r7, #24]
    break;
 8101fda:	bf00      	nop
  }

  return sysclockfreq;
 8101fdc:	69bb      	ldr	r3, [r7, #24]
}
 8101fde:	4618      	mov	r0, r3
 8101fe0:	3724      	adds	r7, #36	; 0x24
 8101fe2:	46bd      	mov	sp, r7
 8101fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fe8:	4770      	bx	lr
 8101fea:	bf00      	nop
 8101fec:	58024400 	.word	0x58024400
 8101ff0:	03d09000 	.word	0x03d09000
 8101ff4:	003d0900 	.word	0x003d0900
 8101ff8:	007a1200 	.word	0x007a1200
 8101ffc:	46000000 	.word	0x46000000
 8102000:	4c742400 	.word	0x4c742400
 8102004:	4a742400 	.word	0x4a742400
 8102008:	4af42400 	.word	0x4af42400

0810200c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810200c:	b580      	push	{r7, lr}
 810200e:	b082      	sub	sp, #8
 8102010:	af00      	add	r7, sp, #0
 8102012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	2b00      	cmp	r3, #0
 8102018:	d101      	bne.n	810201e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810201a:	2301      	movs	r3, #1
 810201c:	e049      	b.n	81020b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810201e:	687b      	ldr	r3, [r7, #4]
 8102020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8102024:	b2db      	uxtb	r3, r3
 8102026:	2b00      	cmp	r3, #0
 8102028:	d106      	bne.n	8102038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810202a:	687b      	ldr	r3, [r7, #4]
 810202c:	2200      	movs	r2, #0
 810202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8102032:	6878      	ldr	r0, [r7, #4]
 8102034:	f7ff f86a 	bl	810110c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8102038:	687b      	ldr	r3, [r7, #4]
 810203a:	2202      	movs	r2, #2
 810203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8102040:	687b      	ldr	r3, [r7, #4]
 8102042:	681a      	ldr	r2, [r3, #0]
 8102044:	687b      	ldr	r3, [r7, #4]
 8102046:	3304      	adds	r3, #4
 8102048:	4619      	mov	r1, r3
 810204a:	4610      	mov	r0, r2
 810204c:	f000 fcb4 	bl	81029b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8102050:	687b      	ldr	r3, [r7, #4]
 8102052:	2201      	movs	r2, #1
 8102054:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8102058:	687b      	ldr	r3, [r7, #4]
 810205a:	2201      	movs	r2, #1
 810205c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	2201      	movs	r2, #1
 8102064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8102068:	687b      	ldr	r3, [r7, #4]
 810206a:	2201      	movs	r2, #1
 810206c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8102070:	687b      	ldr	r3, [r7, #4]
 8102072:	2201      	movs	r2, #1
 8102074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8102078:	687b      	ldr	r3, [r7, #4]
 810207a:	2201      	movs	r2, #1
 810207c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8102080:	687b      	ldr	r3, [r7, #4]
 8102082:	2201      	movs	r2, #1
 8102084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8102088:	687b      	ldr	r3, [r7, #4]
 810208a:	2201      	movs	r2, #1
 810208c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102090:	687b      	ldr	r3, [r7, #4]
 8102092:	2201      	movs	r2, #1
 8102094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8102098:	687b      	ldr	r3, [r7, #4]
 810209a:	2201      	movs	r2, #1
 810209c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81020a0:	687b      	ldr	r3, [r7, #4]
 81020a2:	2201      	movs	r2, #1
 81020a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81020a8:	687b      	ldr	r3, [r7, #4]
 81020aa:	2201      	movs	r2, #1
 81020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81020b0:	2300      	movs	r3, #0
}
 81020b2:	4618      	mov	r0, r3
 81020b4:	3708      	adds	r7, #8
 81020b6:	46bd      	mov	sp, r7
 81020b8:	bd80      	pop	{r7, pc}

081020ba <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 81020ba:	b580      	push	{r7, lr}
 81020bc:	b082      	sub	sp, #8
 81020be:	af00      	add	r7, sp, #0
 81020c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81020c2:	687b      	ldr	r3, [r7, #4]
 81020c4:	2b00      	cmp	r3, #0
 81020c6:	d101      	bne.n	81020cc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 81020c8:	2301      	movs	r3, #1
 81020ca:	e049      	b.n	8102160 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81020cc:	687b      	ldr	r3, [r7, #4]
 81020ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81020d2:	b2db      	uxtb	r3, r3
 81020d4:	2b00      	cmp	r3, #0
 81020d6:	d106      	bne.n	81020e6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81020d8:	687b      	ldr	r3, [r7, #4]
 81020da:	2200      	movs	r2, #0
 81020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 81020e0:	6878      	ldr	r0, [r7, #4]
 81020e2:	f000 f841 	bl	8102168 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81020e6:	687b      	ldr	r3, [r7, #4]
 81020e8:	2202      	movs	r2, #2
 81020ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 81020ee:	687b      	ldr	r3, [r7, #4]
 81020f0:	681a      	ldr	r2, [r3, #0]
 81020f2:	687b      	ldr	r3, [r7, #4]
 81020f4:	3304      	adds	r3, #4
 81020f6:	4619      	mov	r1, r3
 81020f8:	4610      	mov	r0, r2
 81020fa:	f000 fc5d 	bl	81029b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81020fe:	687b      	ldr	r3, [r7, #4]
 8102100:	2201      	movs	r2, #1
 8102102:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8102106:	687b      	ldr	r3, [r7, #4]
 8102108:	2201      	movs	r2, #1
 810210a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810210e:	687b      	ldr	r3, [r7, #4]
 8102110:	2201      	movs	r2, #1
 8102112:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	2201      	movs	r2, #1
 810211a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810211e:	687b      	ldr	r3, [r7, #4]
 8102120:	2201      	movs	r2, #1
 8102122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8102126:	687b      	ldr	r3, [r7, #4]
 8102128:	2201      	movs	r2, #1
 810212a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810212e:	687b      	ldr	r3, [r7, #4]
 8102130:	2201      	movs	r2, #1
 8102132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	2201      	movs	r2, #1
 810213a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810213e:	687b      	ldr	r3, [r7, #4]
 8102140:	2201      	movs	r2, #1
 8102142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8102146:	687b      	ldr	r3, [r7, #4]
 8102148:	2201      	movs	r2, #1
 810214a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	2201      	movs	r2, #1
 8102152:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8102156:	687b      	ldr	r3, [r7, #4]
 8102158:	2201      	movs	r2, #1
 810215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810215e:	2300      	movs	r3, #0
}
 8102160:	4618      	mov	r0, r3
 8102162:	3708      	adds	r7, #8
 8102164:	46bd      	mov	sp, r7
 8102166:	bd80      	pop	{r7, pc}

08102168 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8102168:	b480      	push	{r7}
 810216a:	b083      	sub	sp, #12
 810216c:	af00      	add	r7, sp, #0
 810216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8102170:	bf00      	nop
 8102172:	370c      	adds	r7, #12
 8102174:	46bd      	mov	sp, r7
 8102176:	f85d 7b04 	ldr.w	r7, [sp], #4
 810217a:	4770      	bx	lr

0810217c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810217c:	b580      	push	{r7, lr}
 810217e:	b084      	sub	sp, #16
 8102180:	af00      	add	r7, sp, #0
 8102182:	6078      	str	r0, [r7, #4]
 8102184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8102186:	2300      	movs	r3, #0
 8102188:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810218a:	683b      	ldr	r3, [r7, #0]
 810218c:	2b00      	cmp	r3, #0
 810218e:	d109      	bne.n	81021a4 <HAL_TIM_OC_Start_IT+0x28>
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8102196:	b2db      	uxtb	r3, r3
 8102198:	2b01      	cmp	r3, #1
 810219a:	bf14      	ite	ne
 810219c:	2301      	movne	r3, #1
 810219e:	2300      	moveq	r3, #0
 81021a0:	b2db      	uxtb	r3, r3
 81021a2:	e03c      	b.n	810221e <HAL_TIM_OC_Start_IT+0xa2>
 81021a4:	683b      	ldr	r3, [r7, #0]
 81021a6:	2b04      	cmp	r3, #4
 81021a8:	d109      	bne.n	81021be <HAL_TIM_OC_Start_IT+0x42>
 81021aa:	687b      	ldr	r3, [r7, #4]
 81021ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 81021b0:	b2db      	uxtb	r3, r3
 81021b2:	2b01      	cmp	r3, #1
 81021b4:	bf14      	ite	ne
 81021b6:	2301      	movne	r3, #1
 81021b8:	2300      	moveq	r3, #0
 81021ba:	b2db      	uxtb	r3, r3
 81021bc:	e02f      	b.n	810221e <HAL_TIM_OC_Start_IT+0xa2>
 81021be:	683b      	ldr	r3, [r7, #0]
 81021c0:	2b08      	cmp	r3, #8
 81021c2:	d109      	bne.n	81021d8 <HAL_TIM_OC_Start_IT+0x5c>
 81021c4:	687b      	ldr	r3, [r7, #4]
 81021c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81021ca:	b2db      	uxtb	r3, r3
 81021cc:	2b01      	cmp	r3, #1
 81021ce:	bf14      	ite	ne
 81021d0:	2301      	movne	r3, #1
 81021d2:	2300      	moveq	r3, #0
 81021d4:	b2db      	uxtb	r3, r3
 81021d6:	e022      	b.n	810221e <HAL_TIM_OC_Start_IT+0xa2>
 81021d8:	683b      	ldr	r3, [r7, #0]
 81021da:	2b0c      	cmp	r3, #12
 81021dc:	d109      	bne.n	81021f2 <HAL_TIM_OC_Start_IT+0x76>
 81021de:	687b      	ldr	r3, [r7, #4]
 81021e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81021e4:	b2db      	uxtb	r3, r3
 81021e6:	2b01      	cmp	r3, #1
 81021e8:	bf14      	ite	ne
 81021ea:	2301      	movne	r3, #1
 81021ec:	2300      	moveq	r3, #0
 81021ee:	b2db      	uxtb	r3, r3
 81021f0:	e015      	b.n	810221e <HAL_TIM_OC_Start_IT+0xa2>
 81021f2:	683b      	ldr	r3, [r7, #0]
 81021f4:	2b10      	cmp	r3, #16
 81021f6:	d109      	bne.n	810220c <HAL_TIM_OC_Start_IT+0x90>
 81021f8:	687b      	ldr	r3, [r7, #4]
 81021fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81021fe:	b2db      	uxtb	r3, r3
 8102200:	2b01      	cmp	r3, #1
 8102202:	bf14      	ite	ne
 8102204:	2301      	movne	r3, #1
 8102206:	2300      	moveq	r3, #0
 8102208:	b2db      	uxtb	r3, r3
 810220a:	e008      	b.n	810221e <HAL_TIM_OC_Start_IT+0xa2>
 810220c:	687b      	ldr	r3, [r7, #4]
 810220e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8102212:	b2db      	uxtb	r3, r3
 8102214:	2b01      	cmp	r3, #1
 8102216:	bf14      	ite	ne
 8102218:	2301      	movne	r3, #1
 810221a:	2300      	moveq	r3, #0
 810221c:	b2db      	uxtb	r3, r3
 810221e:	2b00      	cmp	r3, #0
 8102220:	d001      	beq.n	8102226 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8102222:	2301      	movs	r3, #1
 8102224:	e0ec      	b.n	8102400 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8102226:	683b      	ldr	r3, [r7, #0]
 8102228:	2b00      	cmp	r3, #0
 810222a:	d104      	bne.n	8102236 <HAL_TIM_OC_Start_IT+0xba>
 810222c:	687b      	ldr	r3, [r7, #4]
 810222e:	2202      	movs	r2, #2
 8102230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8102234:	e023      	b.n	810227e <HAL_TIM_OC_Start_IT+0x102>
 8102236:	683b      	ldr	r3, [r7, #0]
 8102238:	2b04      	cmp	r3, #4
 810223a:	d104      	bne.n	8102246 <HAL_TIM_OC_Start_IT+0xca>
 810223c:	687b      	ldr	r3, [r7, #4]
 810223e:	2202      	movs	r2, #2
 8102240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8102244:	e01b      	b.n	810227e <HAL_TIM_OC_Start_IT+0x102>
 8102246:	683b      	ldr	r3, [r7, #0]
 8102248:	2b08      	cmp	r3, #8
 810224a:	d104      	bne.n	8102256 <HAL_TIM_OC_Start_IT+0xda>
 810224c:	687b      	ldr	r3, [r7, #4]
 810224e:	2202      	movs	r2, #2
 8102250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8102254:	e013      	b.n	810227e <HAL_TIM_OC_Start_IT+0x102>
 8102256:	683b      	ldr	r3, [r7, #0]
 8102258:	2b0c      	cmp	r3, #12
 810225a:	d104      	bne.n	8102266 <HAL_TIM_OC_Start_IT+0xea>
 810225c:	687b      	ldr	r3, [r7, #4]
 810225e:	2202      	movs	r2, #2
 8102260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8102264:	e00b      	b.n	810227e <HAL_TIM_OC_Start_IT+0x102>
 8102266:	683b      	ldr	r3, [r7, #0]
 8102268:	2b10      	cmp	r3, #16
 810226a:	d104      	bne.n	8102276 <HAL_TIM_OC_Start_IT+0xfa>
 810226c:	687b      	ldr	r3, [r7, #4]
 810226e:	2202      	movs	r2, #2
 8102270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8102274:	e003      	b.n	810227e <HAL_TIM_OC_Start_IT+0x102>
 8102276:	687b      	ldr	r3, [r7, #4]
 8102278:	2202      	movs	r2, #2
 810227a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 810227e:	683b      	ldr	r3, [r7, #0]
 8102280:	2b0c      	cmp	r3, #12
 8102282:	d841      	bhi.n	8102308 <HAL_TIM_OC_Start_IT+0x18c>
 8102284:	a201      	add	r2, pc, #4	; (adr r2, 810228c <HAL_TIM_OC_Start_IT+0x110>)
 8102286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810228a:	bf00      	nop
 810228c:	081022c1 	.word	0x081022c1
 8102290:	08102309 	.word	0x08102309
 8102294:	08102309 	.word	0x08102309
 8102298:	08102309 	.word	0x08102309
 810229c:	081022d3 	.word	0x081022d3
 81022a0:	08102309 	.word	0x08102309
 81022a4:	08102309 	.word	0x08102309
 81022a8:	08102309 	.word	0x08102309
 81022ac:	081022e5 	.word	0x081022e5
 81022b0:	08102309 	.word	0x08102309
 81022b4:	08102309 	.word	0x08102309
 81022b8:	08102309 	.word	0x08102309
 81022bc:	081022f7 	.word	0x081022f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 81022c0:	687b      	ldr	r3, [r7, #4]
 81022c2:	681b      	ldr	r3, [r3, #0]
 81022c4:	68da      	ldr	r2, [r3, #12]
 81022c6:	687b      	ldr	r3, [r7, #4]
 81022c8:	681b      	ldr	r3, [r3, #0]
 81022ca:	f042 0202 	orr.w	r2, r2, #2
 81022ce:	60da      	str	r2, [r3, #12]
      break;
 81022d0:	e01d      	b.n	810230e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 81022d2:	687b      	ldr	r3, [r7, #4]
 81022d4:	681b      	ldr	r3, [r3, #0]
 81022d6:	68da      	ldr	r2, [r3, #12]
 81022d8:	687b      	ldr	r3, [r7, #4]
 81022da:	681b      	ldr	r3, [r3, #0]
 81022dc:	f042 0204 	orr.w	r2, r2, #4
 81022e0:	60da      	str	r2, [r3, #12]
      break;
 81022e2:	e014      	b.n	810230e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 81022e4:	687b      	ldr	r3, [r7, #4]
 81022e6:	681b      	ldr	r3, [r3, #0]
 81022e8:	68da      	ldr	r2, [r3, #12]
 81022ea:	687b      	ldr	r3, [r7, #4]
 81022ec:	681b      	ldr	r3, [r3, #0]
 81022ee:	f042 0208 	orr.w	r2, r2, #8
 81022f2:	60da      	str	r2, [r3, #12]
      break;
 81022f4:	e00b      	b.n	810230e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 81022f6:	687b      	ldr	r3, [r7, #4]
 81022f8:	681b      	ldr	r3, [r3, #0]
 81022fa:	68da      	ldr	r2, [r3, #12]
 81022fc:	687b      	ldr	r3, [r7, #4]
 81022fe:	681b      	ldr	r3, [r3, #0]
 8102300:	f042 0210 	orr.w	r2, r2, #16
 8102304:	60da      	str	r2, [r3, #12]
      break;
 8102306:	e002      	b.n	810230e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8102308:	2301      	movs	r3, #1
 810230a:	73fb      	strb	r3, [r7, #15]
      break;
 810230c:	bf00      	nop
  }

  if (status == HAL_OK)
 810230e:	7bfb      	ldrb	r3, [r7, #15]
 8102310:	2b00      	cmp	r3, #0
 8102312:	d174      	bne.n	81023fe <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8102314:	687b      	ldr	r3, [r7, #4]
 8102316:	681b      	ldr	r3, [r3, #0]
 8102318:	2201      	movs	r2, #1
 810231a:	6839      	ldr	r1, [r7, #0]
 810231c:	4618      	mov	r0, r3
 810231e:	f000 ff57 	bl	81031d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8102322:	687b      	ldr	r3, [r7, #4]
 8102324:	681b      	ldr	r3, [r3, #0]
 8102326:	4a38      	ldr	r2, [pc, #224]	; (8102408 <HAL_TIM_OC_Start_IT+0x28c>)
 8102328:	4293      	cmp	r3, r2
 810232a:	d013      	beq.n	8102354 <HAL_TIM_OC_Start_IT+0x1d8>
 810232c:	687b      	ldr	r3, [r7, #4]
 810232e:	681b      	ldr	r3, [r3, #0]
 8102330:	4a36      	ldr	r2, [pc, #216]	; (810240c <HAL_TIM_OC_Start_IT+0x290>)
 8102332:	4293      	cmp	r3, r2
 8102334:	d00e      	beq.n	8102354 <HAL_TIM_OC_Start_IT+0x1d8>
 8102336:	687b      	ldr	r3, [r7, #4]
 8102338:	681b      	ldr	r3, [r3, #0]
 810233a:	4a35      	ldr	r2, [pc, #212]	; (8102410 <HAL_TIM_OC_Start_IT+0x294>)
 810233c:	4293      	cmp	r3, r2
 810233e:	d009      	beq.n	8102354 <HAL_TIM_OC_Start_IT+0x1d8>
 8102340:	687b      	ldr	r3, [r7, #4]
 8102342:	681b      	ldr	r3, [r3, #0]
 8102344:	4a33      	ldr	r2, [pc, #204]	; (8102414 <HAL_TIM_OC_Start_IT+0x298>)
 8102346:	4293      	cmp	r3, r2
 8102348:	d004      	beq.n	8102354 <HAL_TIM_OC_Start_IT+0x1d8>
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	681b      	ldr	r3, [r3, #0]
 810234e:	4a32      	ldr	r2, [pc, #200]	; (8102418 <HAL_TIM_OC_Start_IT+0x29c>)
 8102350:	4293      	cmp	r3, r2
 8102352:	d101      	bne.n	8102358 <HAL_TIM_OC_Start_IT+0x1dc>
 8102354:	2301      	movs	r3, #1
 8102356:	e000      	b.n	810235a <HAL_TIM_OC_Start_IT+0x1de>
 8102358:	2300      	movs	r3, #0
 810235a:	2b00      	cmp	r3, #0
 810235c:	d007      	beq.n	810236e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 810235e:	687b      	ldr	r3, [r7, #4]
 8102360:	681b      	ldr	r3, [r3, #0]
 8102362:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	681b      	ldr	r3, [r3, #0]
 8102368:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810236c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	681b      	ldr	r3, [r3, #0]
 8102372:	4a25      	ldr	r2, [pc, #148]	; (8102408 <HAL_TIM_OC_Start_IT+0x28c>)
 8102374:	4293      	cmp	r3, r2
 8102376:	d022      	beq.n	81023be <HAL_TIM_OC_Start_IT+0x242>
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	681b      	ldr	r3, [r3, #0]
 810237c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102380:	d01d      	beq.n	81023be <HAL_TIM_OC_Start_IT+0x242>
 8102382:	687b      	ldr	r3, [r7, #4]
 8102384:	681b      	ldr	r3, [r3, #0]
 8102386:	4a25      	ldr	r2, [pc, #148]	; (810241c <HAL_TIM_OC_Start_IT+0x2a0>)
 8102388:	4293      	cmp	r3, r2
 810238a:	d018      	beq.n	81023be <HAL_TIM_OC_Start_IT+0x242>
 810238c:	687b      	ldr	r3, [r7, #4]
 810238e:	681b      	ldr	r3, [r3, #0]
 8102390:	4a23      	ldr	r2, [pc, #140]	; (8102420 <HAL_TIM_OC_Start_IT+0x2a4>)
 8102392:	4293      	cmp	r3, r2
 8102394:	d013      	beq.n	81023be <HAL_TIM_OC_Start_IT+0x242>
 8102396:	687b      	ldr	r3, [r7, #4]
 8102398:	681b      	ldr	r3, [r3, #0]
 810239a:	4a22      	ldr	r2, [pc, #136]	; (8102424 <HAL_TIM_OC_Start_IT+0x2a8>)
 810239c:	4293      	cmp	r3, r2
 810239e:	d00e      	beq.n	81023be <HAL_TIM_OC_Start_IT+0x242>
 81023a0:	687b      	ldr	r3, [r7, #4]
 81023a2:	681b      	ldr	r3, [r3, #0]
 81023a4:	4a19      	ldr	r2, [pc, #100]	; (810240c <HAL_TIM_OC_Start_IT+0x290>)
 81023a6:	4293      	cmp	r3, r2
 81023a8:	d009      	beq.n	81023be <HAL_TIM_OC_Start_IT+0x242>
 81023aa:	687b      	ldr	r3, [r7, #4]
 81023ac:	681b      	ldr	r3, [r3, #0]
 81023ae:	4a1e      	ldr	r2, [pc, #120]	; (8102428 <HAL_TIM_OC_Start_IT+0x2ac>)
 81023b0:	4293      	cmp	r3, r2
 81023b2:	d004      	beq.n	81023be <HAL_TIM_OC_Start_IT+0x242>
 81023b4:	687b      	ldr	r3, [r7, #4]
 81023b6:	681b      	ldr	r3, [r3, #0]
 81023b8:	4a15      	ldr	r2, [pc, #84]	; (8102410 <HAL_TIM_OC_Start_IT+0x294>)
 81023ba:	4293      	cmp	r3, r2
 81023bc:	d115      	bne.n	81023ea <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81023be:	687b      	ldr	r3, [r7, #4]
 81023c0:	681b      	ldr	r3, [r3, #0]
 81023c2:	689a      	ldr	r2, [r3, #8]
 81023c4:	4b19      	ldr	r3, [pc, #100]	; (810242c <HAL_TIM_OC_Start_IT+0x2b0>)
 81023c6:	4013      	ands	r3, r2
 81023c8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81023ca:	68bb      	ldr	r3, [r7, #8]
 81023cc:	2b06      	cmp	r3, #6
 81023ce:	d015      	beq.n	81023fc <HAL_TIM_OC_Start_IT+0x280>
 81023d0:	68bb      	ldr	r3, [r7, #8]
 81023d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81023d6:	d011      	beq.n	81023fc <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 81023d8:	687b      	ldr	r3, [r7, #4]
 81023da:	681b      	ldr	r3, [r3, #0]
 81023dc:	681a      	ldr	r2, [r3, #0]
 81023de:	687b      	ldr	r3, [r7, #4]
 81023e0:	681b      	ldr	r3, [r3, #0]
 81023e2:	f042 0201 	orr.w	r2, r2, #1
 81023e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81023e8:	e008      	b.n	81023fc <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 81023ea:	687b      	ldr	r3, [r7, #4]
 81023ec:	681b      	ldr	r3, [r3, #0]
 81023ee:	681a      	ldr	r2, [r3, #0]
 81023f0:	687b      	ldr	r3, [r7, #4]
 81023f2:	681b      	ldr	r3, [r3, #0]
 81023f4:	f042 0201 	orr.w	r2, r2, #1
 81023f8:	601a      	str	r2, [r3, #0]
 81023fa:	e000      	b.n	81023fe <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81023fc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 81023fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8102400:	4618      	mov	r0, r3
 8102402:	3710      	adds	r7, #16
 8102404:	46bd      	mov	sp, r7
 8102406:	bd80      	pop	{r7, pc}
 8102408:	40010000 	.word	0x40010000
 810240c:	40010400 	.word	0x40010400
 8102410:	40014000 	.word	0x40014000
 8102414:	40014400 	.word	0x40014400
 8102418:	40014800 	.word	0x40014800
 810241c:	40000400 	.word	0x40000400
 8102420:	40000800 	.word	0x40000800
 8102424:	40000c00 	.word	0x40000c00
 8102428:	40001800 	.word	0x40001800
 810242c:	00010007 	.word	0x00010007

08102430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8102430:	b580      	push	{r7, lr}
 8102432:	b082      	sub	sp, #8
 8102434:	af00      	add	r7, sp, #0
 8102436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8102438:	687b      	ldr	r3, [r7, #4]
 810243a:	681b      	ldr	r3, [r3, #0]
 810243c:	691b      	ldr	r3, [r3, #16]
 810243e:	f003 0302 	and.w	r3, r3, #2
 8102442:	2b02      	cmp	r3, #2
 8102444:	d122      	bne.n	810248c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8102446:	687b      	ldr	r3, [r7, #4]
 8102448:	681b      	ldr	r3, [r3, #0]
 810244a:	68db      	ldr	r3, [r3, #12]
 810244c:	f003 0302 	and.w	r3, r3, #2
 8102450:	2b02      	cmp	r3, #2
 8102452:	d11b      	bne.n	810248c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8102454:	687b      	ldr	r3, [r7, #4]
 8102456:	681b      	ldr	r3, [r3, #0]
 8102458:	f06f 0202 	mvn.w	r2, #2
 810245c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810245e:	687b      	ldr	r3, [r7, #4]
 8102460:	2201      	movs	r2, #1
 8102462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8102464:	687b      	ldr	r3, [r7, #4]
 8102466:	681b      	ldr	r3, [r3, #0]
 8102468:	699b      	ldr	r3, [r3, #24]
 810246a:	f003 0303 	and.w	r3, r3, #3
 810246e:	2b00      	cmp	r3, #0
 8102470:	d003      	beq.n	810247a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8102472:	6878      	ldr	r0, [r7, #4]
 8102474:	f000 fa82 	bl	810297c <HAL_TIM_IC_CaptureCallback>
 8102478:	e005      	b.n	8102486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810247a:	6878      	ldr	r0, [r7, #4]
 810247c:	f000 fa74 	bl	8102968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102480:	6878      	ldr	r0, [r7, #4]
 8102482:	f000 fa85 	bl	8102990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102486:	687b      	ldr	r3, [r7, #4]
 8102488:	2200      	movs	r2, #0
 810248a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810248c:	687b      	ldr	r3, [r7, #4]
 810248e:	681b      	ldr	r3, [r3, #0]
 8102490:	691b      	ldr	r3, [r3, #16]
 8102492:	f003 0304 	and.w	r3, r3, #4
 8102496:	2b04      	cmp	r3, #4
 8102498:	d122      	bne.n	81024e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810249a:	687b      	ldr	r3, [r7, #4]
 810249c:	681b      	ldr	r3, [r3, #0]
 810249e:	68db      	ldr	r3, [r3, #12]
 81024a0:	f003 0304 	and.w	r3, r3, #4
 81024a4:	2b04      	cmp	r3, #4
 81024a6:	d11b      	bne.n	81024e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	681b      	ldr	r3, [r3, #0]
 81024ac:	f06f 0204 	mvn.w	r2, #4
 81024b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81024b2:	687b      	ldr	r3, [r7, #4]
 81024b4:	2202      	movs	r2, #2
 81024b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81024b8:	687b      	ldr	r3, [r7, #4]
 81024ba:	681b      	ldr	r3, [r3, #0]
 81024bc:	699b      	ldr	r3, [r3, #24]
 81024be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81024c2:	2b00      	cmp	r3, #0
 81024c4:	d003      	beq.n	81024ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81024c6:	6878      	ldr	r0, [r7, #4]
 81024c8:	f000 fa58 	bl	810297c <HAL_TIM_IC_CaptureCallback>
 81024cc:	e005      	b.n	81024da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81024ce:	6878      	ldr	r0, [r7, #4]
 81024d0:	f000 fa4a 	bl	8102968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81024d4:	6878      	ldr	r0, [r7, #4]
 81024d6:	f000 fa5b 	bl	8102990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	2200      	movs	r2, #0
 81024de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81024e0:	687b      	ldr	r3, [r7, #4]
 81024e2:	681b      	ldr	r3, [r3, #0]
 81024e4:	691b      	ldr	r3, [r3, #16]
 81024e6:	f003 0308 	and.w	r3, r3, #8
 81024ea:	2b08      	cmp	r3, #8
 81024ec:	d122      	bne.n	8102534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	681b      	ldr	r3, [r3, #0]
 81024f2:	68db      	ldr	r3, [r3, #12]
 81024f4:	f003 0308 	and.w	r3, r3, #8
 81024f8:	2b08      	cmp	r3, #8
 81024fa:	d11b      	bne.n	8102534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81024fc:	687b      	ldr	r3, [r7, #4]
 81024fe:	681b      	ldr	r3, [r3, #0]
 8102500:	f06f 0208 	mvn.w	r2, #8
 8102504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8102506:	687b      	ldr	r3, [r7, #4]
 8102508:	2204      	movs	r2, #4
 810250a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	681b      	ldr	r3, [r3, #0]
 8102510:	69db      	ldr	r3, [r3, #28]
 8102512:	f003 0303 	and.w	r3, r3, #3
 8102516:	2b00      	cmp	r3, #0
 8102518:	d003      	beq.n	8102522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810251a:	6878      	ldr	r0, [r7, #4]
 810251c:	f000 fa2e 	bl	810297c <HAL_TIM_IC_CaptureCallback>
 8102520:	e005      	b.n	810252e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8102522:	6878      	ldr	r0, [r7, #4]
 8102524:	f000 fa20 	bl	8102968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102528:	6878      	ldr	r0, [r7, #4]
 810252a:	f000 fa31 	bl	8102990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810252e:	687b      	ldr	r3, [r7, #4]
 8102530:	2200      	movs	r2, #0
 8102532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8102534:	687b      	ldr	r3, [r7, #4]
 8102536:	681b      	ldr	r3, [r3, #0]
 8102538:	691b      	ldr	r3, [r3, #16]
 810253a:	f003 0310 	and.w	r3, r3, #16
 810253e:	2b10      	cmp	r3, #16
 8102540:	d122      	bne.n	8102588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	681b      	ldr	r3, [r3, #0]
 8102546:	68db      	ldr	r3, [r3, #12]
 8102548:	f003 0310 	and.w	r3, r3, #16
 810254c:	2b10      	cmp	r3, #16
 810254e:	d11b      	bne.n	8102588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	681b      	ldr	r3, [r3, #0]
 8102554:	f06f 0210 	mvn.w	r2, #16
 8102558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810255a:	687b      	ldr	r3, [r7, #4]
 810255c:	2208      	movs	r2, #8
 810255e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8102560:	687b      	ldr	r3, [r7, #4]
 8102562:	681b      	ldr	r3, [r3, #0]
 8102564:	69db      	ldr	r3, [r3, #28]
 8102566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810256a:	2b00      	cmp	r3, #0
 810256c:	d003      	beq.n	8102576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810256e:	6878      	ldr	r0, [r7, #4]
 8102570:	f000 fa04 	bl	810297c <HAL_TIM_IC_CaptureCallback>
 8102574:	e005      	b.n	8102582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8102576:	6878      	ldr	r0, [r7, #4]
 8102578:	f000 f9f6 	bl	8102968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810257c:	6878      	ldr	r0, [r7, #4]
 810257e:	f000 fa07 	bl	8102990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102582:	687b      	ldr	r3, [r7, #4]
 8102584:	2200      	movs	r2, #0
 8102586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8102588:	687b      	ldr	r3, [r7, #4]
 810258a:	681b      	ldr	r3, [r3, #0]
 810258c:	691b      	ldr	r3, [r3, #16]
 810258e:	f003 0301 	and.w	r3, r3, #1
 8102592:	2b01      	cmp	r3, #1
 8102594:	d10e      	bne.n	81025b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	681b      	ldr	r3, [r3, #0]
 810259a:	68db      	ldr	r3, [r3, #12]
 810259c:	f003 0301 	and.w	r3, r3, #1
 81025a0:	2b01      	cmp	r3, #1
 81025a2:	d107      	bne.n	81025b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 81025a4:	687b      	ldr	r3, [r7, #4]
 81025a6:	681b      	ldr	r3, [r3, #0]
 81025a8:	f06f 0201 	mvn.w	r2, #1
 81025ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81025ae:	6878      	ldr	r0, [r7, #4]
 81025b0:	f000 f9d0 	bl	8102954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	691b      	ldr	r3, [r3, #16]
 81025ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81025be:	2b80      	cmp	r3, #128	; 0x80
 81025c0:	d10e      	bne.n	81025e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81025c2:	687b      	ldr	r3, [r7, #4]
 81025c4:	681b      	ldr	r3, [r3, #0]
 81025c6:	68db      	ldr	r3, [r3, #12]
 81025c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81025cc:	2b80      	cmp	r3, #128	; 0x80
 81025ce:	d107      	bne.n	81025e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81025d0:	687b      	ldr	r3, [r7, #4]
 81025d2:	681b      	ldr	r3, [r3, #0]
 81025d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81025d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81025da:	6878      	ldr	r0, [r7, #4]
 81025dc:	f000 ff34 	bl	8103448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81025e0:	687b      	ldr	r3, [r7, #4]
 81025e2:	681b      	ldr	r3, [r3, #0]
 81025e4:	691b      	ldr	r3, [r3, #16]
 81025e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81025ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81025ee:	d10e      	bne.n	810260e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81025f0:	687b      	ldr	r3, [r7, #4]
 81025f2:	681b      	ldr	r3, [r3, #0]
 81025f4:	68db      	ldr	r3, [r3, #12]
 81025f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81025fa:	2b80      	cmp	r3, #128	; 0x80
 81025fc:	d107      	bne.n	810260e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81025fe:	687b      	ldr	r3, [r7, #4]
 8102600:	681b      	ldr	r3, [r3, #0]
 8102602:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8102606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8102608:	6878      	ldr	r0, [r7, #4]
 810260a:	f000 ff27 	bl	810345c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	681b      	ldr	r3, [r3, #0]
 8102612:	691b      	ldr	r3, [r3, #16]
 8102614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102618:	2b40      	cmp	r3, #64	; 0x40
 810261a:	d10e      	bne.n	810263a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810261c:	687b      	ldr	r3, [r7, #4]
 810261e:	681b      	ldr	r3, [r3, #0]
 8102620:	68db      	ldr	r3, [r3, #12]
 8102622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102626:	2b40      	cmp	r3, #64	; 0x40
 8102628:	d107      	bne.n	810263a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810262a:	687b      	ldr	r3, [r7, #4]
 810262c:	681b      	ldr	r3, [r3, #0]
 810262e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8102632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8102634:	6878      	ldr	r0, [r7, #4]
 8102636:	f000 f9b5 	bl	81029a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	681b      	ldr	r3, [r3, #0]
 810263e:	691b      	ldr	r3, [r3, #16]
 8102640:	f003 0320 	and.w	r3, r3, #32
 8102644:	2b20      	cmp	r3, #32
 8102646:	d10e      	bne.n	8102666 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8102648:	687b      	ldr	r3, [r7, #4]
 810264a:	681b      	ldr	r3, [r3, #0]
 810264c:	68db      	ldr	r3, [r3, #12]
 810264e:	f003 0320 	and.w	r3, r3, #32
 8102652:	2b20      	cmp	r3, #32
 8102654:	d107      	bne.n	8102666 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8102656:	687b      	ldr	r3, [r7, #4]
 8102658:	681b      	ldr	r3, [r3, #0]
 810265a:	f06f 0220 	mvn.w	r2, #32
 810265e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8102660:	6878      	ldr	r0, [r7, #4]
 8102662:	f000 fee7 	bl	8103434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8102666:	bf00      	nop
 8102668:	3708      	adds	r7, #8
 810266a:	46bd      	mov	sp, r7
 810266c:	bd80      	pop	{r7, pc}
	...

08102670 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8102670:	b580      	push	{r7, lr}
 8102672:	b086      	sub	sp, #24
 8102674:	af00      	add	r7, sp, #0
 8102676:	60f8      	str	r0, [r7, #12]
 8102678:	60b9      	str	r1, [r7, #8]
 810267a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810267c:	2300      	movs	r3, #0
 810267e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8102680:	68fb      	ldr	r3, [r7, #12]
 8102682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8102686:	2b01      	cmp	r3, #1
 8102688:	d101      	bne.n	810268e <HAL_TIM_OC_ConfigChannel+0x1e>
 810268a:	2302      	movs	r3, #2
 810268c:	e066      	b.n	810275c <HAL_TIM_OC_ConfigChannel+0xec>
 810268e:	68fb      	ldr	r3, [r7, #12]
 8102690:	2201      	movs	r2, #1
 8102692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8102696:	687b      	ldr	r3, [r7, #4]
 8102698:	2b14      	cmp	r3, #20
 810269a:	d857      	bhi.n	810274c <HAL_TIM_OC_ConfigChannel+0xdc>
 810269c:	a201      	add	r2, pc, #4	; (adr r2, 81026a4 <HAL_TIM_OC_ConfigChannel+0x34>)
 810269e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81026a2:	bf00      	nop
 81026a4:	081026f9 	.word	0x081026f9
 81026a8:	0810274d 	.word	0x0810274d
 81026ac:	0810274d 	.word	0x0810274d
 81026b0:	0810274d 	.word	0x0810274d
 81026b4:	08102707 	.word	0x08102707
 81026b8:	0810274d 	.word	0x0810274d
 81026bc:	0810274d 	.word	0x0810274d
 81026c0:	0810274d 	.word	0x0810274d
 81026c4:	08102715 	.word	0x08102715
 81026c8:	0810274d 	.word	0x0810274d
 81026cc:	0810274d 	.word	0x0810274d
 81026d0:	0810274d 	.word	0x0810274d
 81026d4:	08102723 	.word	0x08102723
 81026d8:	0810274d 	.word	0x0810274d
 81026dc:	0810274d 	.word	0x0810274d
 81026e0:	0810274d 	.word	0x0810274d
 81026e4:	08102731 	.word	0x08102731
 81026e8:	0810274d 	.word	0x0810274d
 81026ec:	0810274d 	.word	0x0810274d
 81026f0:	0810274d 	.word	0x0810274d
 81026f4:	0810273f 	.word	0x0810273f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81026f8:	68fb      	ldr	r3, [r7, #12]
 81026fa:	681b      	ldr	r3, [r3, #0]
 81026fc:	68b9      	ldr	r1, [r7, #8]
 81026fe:	4618      	mov	r0, r3
 8102700:	f000 f9f4 	bl	8102aec <TIM_OC1_SetConfig>
      break;
 8102704:	e025      	b.n	8102752 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8102706:	68fb      	ldr	r3, [r7, #12]
 8102708:	681b      	ldr	r3, [r3, #0]
 810270a:	68b9      	ldr	r1, [r7, #8]
 810270c:	4618      	mov	r0, r3
 810270e:	f000 fa7d 	bl	8102c0c <TIM_OC2_SetConfig>
      break;
 8102712:	e01e      	b.n	8102752 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8102714:	68fb      	ldr	r3, [r7, #12]
 8102716:	681b      	ldr	r3, [r3, #0]
 8102718:	68b9      	ldr	r1, [r7, #8]
 810271a:	4618      	mov	r0, r3
 810271c:	f000 fb00 	bl	8102d20 <TIM_OC3_SetConfig>
      break;
 8102720:	e017      	b.n	8102752 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8102722:	68fb      	ldr	r3, [r7, #12]
 8102724:	681b      	ldr	r3, [r3, #0]
 8102726:	68b9      	ldr	r1, [r7, #8]
 8102728:	4618      	mov	r0, r3
 810272a:	f000 fb81 	bl	8102e30 <TIM_OC4_SetConfig>
      break;
 810272e:	e010      	b.n	8102752 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8102730:	68fb      	ldr	r3, [r7, #12]
 8102732:	681b      	ldr	r3, [r3, #0]
 8102734:	68b9      	ldr	r1, [r7, #8]
 8102736:	4618      	mov	r0, r3
 8102738:	f000 fbe4 	bl	8102f04 <TIM_OC5_SetConfig>
      break;
 810273c:	e009      	b.n	8102752 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810273e:	68fb      	ldr	r3, [r7, #12]
 8102740:	681b      	ldr	r3, [r3, #0]
 8102742:	68b9      	ldr	r1, [r7, #8]
 8102744:	4618      	mov	r0, r3
 8102746:	f000 fc41 	bl	8102fcc <TIM_OC6_SetConfig>
      break;
 810274a:	e002      	b.n	8102752 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 810274c:	2301      	movs	r3, #1
 810274e:	75fb      	strb	r3, [r7, #23]
      break;
 8102750:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8102752:	68fb      	ldr	r3, [r7, #12]
 8102754:	2200      	movs	r2, #0
 8102756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810275a:	7dfb      	ldrb	r3, [r7, #23]
}
 810275c:	4618      	mov	r0, r3
 810275e:	3718      	adds	r7, #24
 8102760:	46bd      	mov	sp, r7
 8102762:	bd80      	pop	{r7, pc}

08102764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8102764:	b580      	push	{r7, lr}
 8102766:	b084      	sub	sp, #16
 8102768:	af00      	add	r7, sp, #0
 810276a:	6078      	str	r0, [r7, #4]
 810276c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810276e:	2300      	movs	r3, #0
 8102770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8102772:	687b      	ldr	r3, [r7, #4]
 8102774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8102778:	2b01      	cmp	r3, #1
 810277a:	d101      	bne.n	8102780 <HAL_TIM_ConfigClockSource+0x1c>
 810277c:	2302      	movs	r3, #2
 810277e:	e0de      	b.n	810293e <HAL_TIM_ConfigClockSource+0x1da>
 8102780:	687b      	ldr	r3, [r7, #4]
 8102782:	2201      	movs	r2, #1
 8102784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	2202      	movs	r2, #2
 810278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	689b      	ldr	r3, [r3, #8]
 8102796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8102798:	68bb      	ldr	r3, [r7, #8]
 810279a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 810279e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81027a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81027a4:	68bb      	ldr	r3, [r7, #8]
 81027a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81027aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 81027ac:	687b      	ldr	r3, [r7, #4]
 81027ae:	681b      	ldr	r3, [r3, #0]
 81027b0:	68ba      	ldr	r2, [r7, #8]
 81027b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81027b4:	683b      	ldr	r3, [r7, #0]
 81027b6:	681b      	ldr	r3, [r3, #0]
 81027b8:	4a63      	ldr	r2, [pc, #396]	; (8102948 <HAL_TIM_ConfigClockSource+0x1e4>)
 81027ba:	4293      	cmp	r3, r2
 81027bc:	f000 80a9 	beq.w	8102912 <HAL_TIM_ConfigClockSource+0x1ae>
 81027c0:	4a61      	ldr	r2, [pc, #388]	; (8102948 <HAL_TIM_ConfigClockSource+0x1e4>)
 81027c2:	4293      	cmp	r3, r2
 81027c4:	f200 80ae 	bhi.w	8102924 <HAL_TIM_ConfigClockSource+0x1c0>
 81027c8:	4a60      	ldr	r2, [pc, #384]	; (810294c <HAL_TIM_ConfigClockSource+0x1e8>)
 81027ca:	4293      	cmp	r3, r2
 81027cc:	f000 80a1 	beq.w	8102912 <HAL_TIM_ConfigClockSource+0x1ae>
 81027d0:	4a5e      	ldr	r2, [pc, #376]	; (810294c <HAL_TIM_ConfigClockSource+0x1e8>)
 81027d2:	4293      	cmp	r3, r2
 81027d4:	f200 80a6 	bhi.w	8102924 <HAL_TIM_ConfigClockSource+0x1c0>
 81027d8:	4a5d      	ldr	r2, [pc, #372]	; (8102950 <HAL_TIM_ConfigClockSource+0x1ec>)
 81027da:	4293      	cmp	r3, r2
 81027dc:	f000 8099 	beq.w	8102912 <HAL_TIM_ConfigClockSource+0x1ae>
 81027e0:	4a5b      	ldr	r2, [pc, #364]	; (8102950 <HAL_TIM_ConfigClockSource+0x1ec>)
 81027e2:	4293      	cmp	r3, r2
 81027e4:	f200 809e 	bhi.w	8102924 <HAL_TIM_ConfigClockSource+0x1c0>
 81027e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 81027ec:	f000 8091 	beq.w	8102912 <HAL_TIM_ConfigClockSource+0x1ae>
 81027f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 81027f4:	f200 8096 	bhi.w	8102924 <HAL_TIM_ConfigClockSource+0x1c0>
 81027f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81027fc:	f000 8089 	beq.w	8102912 <HAL_TIM_ConfigClockSource+0x1ae>
 8102800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102804:	f200 808e 	bhi.w	8102924 <HAL_TIM_ConfigClockSource+0x1c0>
 8102808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810280c:	d03e      	beq.n	810288c <HAL_TIM_ConfigClockSource+0x128>
 810280e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102812:	f200 8087 	bhi.w	8102924 <HAL_TIM_ConfigClockSource+0x1c0>
 8102816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810281a:	f000 8086 	beq.w	810292a <HAL_TIM_ConfigClockSource+0x1c6>
 810281e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102822:	d87f      	bhi.n	8102924 <HAL_TIM_ConfigClockSource+0x1c0>
 8102824:	2b70      	cmp	r3, #112	; 0x70
 8102826:	d01a      	beq.n	810285e <HAL_TIM_ConfigClockSource+0xfa>
 8102828:	2b70      	cmp	r3, #112	; 0x70
 810282a:	d87b      	bhi.n	8102924 <HAL_TIM_ConfigClockSource+0x1c0>
 810282c:	2b60      	cmp	r3, #96	; 0x60
 810282e:	d050      	beq.n	81028d2 <HAL_TIM_ConfigClockSource+0x16e>
 8102830:	2b60      	cmp	r3, #96	; 0x60
 8102832:	d877      	bhi.n	8102924 <HAL_TIM_ConfigClockSource+0x1c0>
 8102834:	2b50      	cmp	r3, #80	; 0x50
 8102836:	d03c      	beq.n	81028b2 <HAL_TIM_ConfigClockSource+0x14e>
 8102838:	2b50      	cmp	r3, #80	; 0x50
 810283a:	d873      	bhi.n	8102924 <HAL_TIM_ConfigClockSource+0x1c0>
 810283c:	2b40      	cmp	r3, #64	; 0x40
 810283e:	d058      	beq.n	81028f2 <HAL_TIM_ConfigClockSource+0x18e>
 8102840:	2b40      	cmp	r3, #64	; 0x40
 8102842:	d86f      	bhi.n	8102924 <HAL_TIM_ConfigClockSource+0x1c0>
 8102844:	2b30      	cmp	r3, #48	; 0x30
 8102846:	d064      	beq.n	8102912 <HAL_TIM_ConfigClockSource+0x1ae>
 8102848:	2b30      	cmp	r3, #48	; 0x30
 810284a:	d86b      	bhi.n	8102924 <HAL_TIM_ConfigClockSource+0x1c0>
 810284c:	2b20      	cmp	r3, #32
 810284e:	d060      	beq.n	8102912 <HAL_TIM_ConfigClockSource+0x1ae>
 8102850:	2b20      	cmp	r3, #32
 8102852:	d867      	bhi.n	8102924 <HAL_TIM_ConfigClockSource+0x1c0>
 8102854:	2b00      	cmp	r3, #0
 8102856:	d05c      	beq.n	8102912 <HAL_TIM_ConfigClockSource+0x1ae>
 8102858:	2b10      	cmp	r3, #16
 810285a:	d05a      	beq.n	8102912 <HAL_TIM_ConfigClockSource+0x1ae>
 810285c:	e062      	b.n	8102924 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810285e:	687b      	ldr	r3, [r7, #4]
 8102860:	6818      	ldr	r0, [r3, #0]
 8102862:	683b      	ldr	r3, [r7, #0]
 8102864:	6899      	ldr	r1, [r3, #8]
 8102866:	683b      	ldr	r3, [r7, #0]
 8102868:	685a      	ldr	r2, [r3, #4]
 810286a:	683b      	ldr	r3, [r7, #0]
 810286c:	68db      	ldr	r3, [r3, #12]
 810286e:	f000 fc8f 	bl	8103190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8102872:	687b      	ldr	r3, [r7, #4]
 8102874:	681b      	ldr	r3, [r3, #0]
 8102876:	689b      	ldr	r3, [r3, #8]
 8102878:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810287a:	68bb      	ldr	r3, [r7, #8]
 810287c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8102880:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	681b      	ldr	r3, [r3, #0]
 8102886:	68ba      	ldr	r2, [r7, #8]
 8102888:	609a      	str	r2, [r3, #8]
      break;
 810288a:	e04f      	b.n	810292c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	6818      	ldr	r0, [r3, #0]
 8102890:	683b      	ldr	r3, [r7, #0]
 8102892:	6899      	ldr	r1, [r3, #8]
 8102894:	683b      	ldr	r3, [r7, #0]
 8102896:	685a      	ldr	r2, [r3, #4]
 8102898:	683b      	ldr	r3, [r7, #0]
 810289a:	68db      	ldr	r3, [r3, #12]
 810289c:	f000 fc78 	bl	8103190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 81028a0:	687b      	ldr	r3, [r7, #4]
 81028a2:	681b      	ldr	r3, [r3, #0]
 81028a4:	689a      	ldr	r2, [r3, #8]
 81028a6:	687b      	ldr	r3, [r7, #4]
 81028a8:	681b      	ldr	r3, [r3, #0]
 81028aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81028ae:	609a      	str	r2, [r3, #8]
      break;
 81028b0:	e03c      	b.n	810292c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81028b2:	687b      	ldr	r3, [r7, #4]
 81028b4:	6818      	ldr	r0, [r3, #0]
 81028b6:	683b      	ldr	r3, [r7, #0]
 81028b8:	6859      	ldr	r1, [r3, #4]
 81028ba:	683b      	ldr	r3, [r7, #0]
 81028bc:	68db      	ldr	r3, [r3, #12]
 81028be:	461a      	mov	r2, r3
 81028c0:	f000 fbea 	bl	8103098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 81028c4:	687b      	ldr	r3, [r7, #4]
 81028c6:	681b      	ldr	r3, [r3, #0]
 81028c8:	2150      	movs	r1, #80	; 0x50
 81028ca:	4618      	mov	r0, r3
 81028cc:	f000 fc43 	bl	8103156 <TIM_ITRx_SetConfig>
      break;
 81028d0:	e02c      	b.n	810292c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 81028d2:	687b      	ldr	r3, [r7, #4]
 81028d4:	6818      	ldr	r0, [r3, #0]
 81028d6:	683b      	ldr	r3, [r7, #0]
 81028d8:	6859      	ldr	r1, [r3, #4]
 81028da:	683b      	ldr	r3, [r7, #0]
 81028dc:	68db      	ldr	r3, [r3, #12]
 81028de:	461a      	mov	r2, r3
 81028e0:	f000 fc09 	bl	81030f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 81028e4:	687b      	ldr	r3, [r7, #4]
 81028e6:	681b      	ldr	r3, [r3, #0]
 81028e8:	2160      	movs	r1, #96	; 0x60
 81028ea:	4618      	mov	r0, r3
 81028ec:	f000 fc33 	bl	8103156 <TIM_ITRx_SetConfig>
      break;
 81028f0:	e01c      	b.n	810292c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81028f2:	687b      	ldr	r3, [r7, #4]
 81028f4:	6818      	ldr	r0, [r3, #0]
 81028f6:	683b      	ldr	r3, [r7, #0]
 81028f8:	6859      	ldr	r1, [r3, #4]
 81028fa:	683b      	ldr	r3, [r7, #0]
 81028fc:	68db      	ldr	r3, [r3, #12]
 81028fe:	461a      	mov	r2, r3
 8102900:	f000 fbca 	bl	8103098 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8102904:	687b      	ldr	r3, [r7, #4]
 8102906:	681b      	ldr	r3, [r3, #0]
 8102908:	2140      	movs	r1, #64	; 0x40
 810290a:	4618      	mov	r0, r3
 810290c:	f000 fc23 	bl	8103156 <TIM_ITRx_SetConfig>
      break;
 8102910:	e00c      	b.n	810292c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8102912:	687b      	ldr	r3, [r7, #4]
 8102914:	681a      	ldr	r2, [r3, #0]
 8102916:	683b      	ldr	r3, [r7, #0]
 8102918:	681b      	ldr	r3, [r3, #0]
 810291a:	4619      	mov	r1, r3
 810291c:	4610      	mov	r0, r2
 810291e:	f000 fc1a 	bl	8103156 <TIM_ITRx_SetConfig>
      break;
 8102922:	e003      	b.n	810292c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8102924:	2301      	movs	r3, #1
 8102926:	73fb      	strb	r3, [r7, #15]
      break;
 8102928:	e000      	b.n	810292c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810292a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 810292c:	687b      	ldr	r3, [r7, #4]
 810292e:	2201      	movs	r2, #1
 8102930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8102934:	687b      	ldr	r3, [r7, #4]
 8102936:	2200      	movs	r2, #0
 8102938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810293c:	7bfb      	ldrb	r3, [r7, #15]
}
 810293e:	4618      	mov	r0, r3
 8102940:	3710      	adds	r7, #16
 8102942:	46bd      	mov	sp, r7
 8102944:	bd80      	pop	{r7, pc}
 8102946:	bf00      	nop
 8102948:	00100040 	.word	0x00100040
 810294c:	00100030 	.word	0x00100030
 8102950:	00100020 	.word	0x00100020

08102954 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8102954:	b480      	push	{r7}
 8102956:	b083      	sub	sp, #12
 8102958:	af00      	add	r7, sp, #0
 810295a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 810295c:	bf00      	nop
 810295e:	370c      	adds	r7, #12
 8102960:	46bd      	mov	sp, r7
 8102962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102966:	4770      	bx	lr

08102968 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8102968:	b480      	push	{r7}
 810296a:	b083      	sub	sp, #12
 810296c:	af00      	add	r7, sp, #0
 810296e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8102970:	bf00      	nop
 8102972:	370c      	adds	r7, #12
 8102974:	46bd      	mov	sp, r7
 8102976:	f85d 7b04 	ldr.w	r7, [sp], #4
 810297a:	4770      	bx	lr

0810297c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810297c:	b480      	push	{r7}
 810297e:	b083      	sub	sp, #12
 8102980:	af00      	add	r7, sp, #0
 8102982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8102984:	bf00      	nop
 8102986:	370c      	adds	r7, #12
 8102988:	46bd      	mov	sp, r7
 810298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810298e:	4770      	bx	lr

08102990 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8102990:	b480      	push	{r7}
 8102992:	b083      	sub	sp, #12
 8102994:	af00      	add	r7, sp, #0
 8102996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8102998:	bf00      	nop
 810299a:	370c      	adds	r7, #12
 810299c:	46bd      	mov	sp, r7
 810299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029a2:	4770      	bx	lr

081029a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81029a4:	b480      	push	{r7}
 81029a6:	b083      	sub	sp, #12
 81029a8:	af00      	add	r7, sp, #0
 81029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81029ac:	bf00      	nop
 81029ae:	370c      	adds	r7, #12
 81029b0:	46bd      	mov	sp, r7
 81029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029b6:	4770      	bx	lr

081029b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81029b8:	b480      	push	{r7}
 81029ba:	b085      	sub	sp, #20
 81029bc:	af00      	add	r7, sp, #0
 81029be:	6078      	str	r0, [r7, #4]
 81029c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81029c2:	687b      	ldr	r3, [r7, #4]
 81029c4:	681b      	ldr	r3, [r3, #0]
 81029c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	4a40      	ldr	r2, [pc, #256]	; (8102acc <TIM_Base_SetConfig+0x114>)
 81029cc:	4293      	cmp	r3, r2
 81029ce:	d013      	beq.n	81029f8 <TIM_Base_SetConfig+0x40>
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81029d6:	d00f      	beq.n	81029f8 <TIM_Base_SetConfig+0x40>
 81029d8:	687b      	ldr	r3, [r7, #4]
 81029da:	4a3d      	ldr	r2, [pc, #244]	; (8102ad0 <TIM_Base_SetConfig+0x118>)
 81029dc:	4293      	cmp	r3, r2
 81029de:	d00b      	beq.n	81029f8 <TIM_Base_SetConfig+0x40>
 81029e0:	687b      	ldr	r3, [r7, #4]
 81029e2:	4a3c      	ldr	r2, [pc, #240]	; (8102ad4 <TIM_Base_SetConfig+0x11c>)
 81029e4:	4293      	cmp	r3, r2
 81029e6:	d007      	beq.n	81029f8 <TIM_Base_SetConfig+0x40>
 81029e8:	687b      	ldr	r3, [r7, #4]
 81029ea:	4a3b      	ldr	r2, [pc, #236]	; (8102ad8 <TIM_Base_SetConfig+0x120>)
 81029ec:	4293      	cmp	r3, r2
 81029ee:	d003      	beq.n	81029f8 <TIM_Base_SetConfig+0x40>
 81029f0:	687b      	ldr	r3, [r7, #4]
 81029f2:	4a3a      	ldr	r2, [pc, #232]	; (8102adc <TIM_Base_SetConfig+0x124>)
 81029f4:	4293      	cmp	r3, r2
 81029f6:	d108      	bne.n	8102a0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81029f8:	68fb      	ldr	r3, [r7, #12]
 81029fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81029fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8102a00:	683b      	ldr	r3, [r7, #0]
 8102a02:	685b      	ldr	r3, [r3, #4]
 8102a04:	68fa      	ldr	r2, [r7, #12]
 8102a06:	4313      	orrs	r3, r2
 8102a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	4a2f      	ldr	r2, [pc, #188]	; (8102acc <TIM_Base_SetConfig+0x114>)
 8102a0e:	4293      	cmp	r3, r2
 8102a10:	d01f      	beq.n	8102a52 <TIM_Base_SetConfig+0x9a>
 8102a12:	687b      	ldr	r3, [r7, #4]
 8102a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102a18:	d01b      	beq.n	8102a52 <TIM_Base_SetConfig+0x9a>
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	4a2c      	ldr	r2, [pc, #176]	; (8102ad0 <TIM_Base_SetConfig+0x118>)
 8102a1e:	4293      	cmp	r3, r2
 8102a20:	d017      	beq.n	8102a52 <TIM_Base_SetConfig+0x9a>
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	4a2b      	ldr	r2, [pc, #172]	; (8102ad4 <TIM_Base_SetConfig+0x11c>)
 8102a26:	4293      	cmp	r3, r2
 8102a28:	d013      	beq.n	8102a52 <TIM_Base_SetConfig+0x9a>
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	4a2a      	ldr	r2, [pc, #168]	; (8102ad8 <TIM_Base_SetConfig+0x120>)
 8102a2e:	4293      	cmp	r3, r2
 8102a30:	d00f      	beq.n	8102a52 <TIM_Base_SetConfig+0x9a>
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	4a29      	ldr	r2, [pc, #164]	; (8102adc <TIM_Base_SetConfig+0x124>)
 8102a36:	4293      	cmp	r3, r2
 8102a38:	d00b      	beq.n	8102a52 <TIM_Base_SetConfig+0x9a>
 8102a3a:	687b      	ldr	r3, [r7, #4]
 8102a3c:	4a28      	ldr	r2, [pc, #160]	; (8102ae0 <TIM_Base_SetConfig+0x128>)
 8102a3e:	4293      	cmp	r3, r2
 8102a40:	d007      	beq.n	8102a52 <TIM_Base_SetConfig+0x9a>
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	4a27      	ldr	r2, [pc, #156]	; (8102ae4 <TIM_Base_SetConfig+0x12c>)
 8102a46:	4293      	cmp	r3, r2
 8102a48:	d003      	beq.n	8102a52 <TIM_Base_SetConfig+0x9a>
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	4a26      	ldr	r2, [pc, #152]	; (8102ae8 <TIM_Base_SetConfig+0x130>)
 8102a4e:	4293      	cmp	r3, r2
 8102a50:	d108      	bne.n	8102a64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8102a52:	68fb      	ldr	r3, [r7, #12]
 8102a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8102a5a:	683b      	ldr	r3, [r7, #0]
 8102a5c:	68db      	ldr	r3, [r3, #12]
 8102a5e:	68fa      	ldr	r2, [r7, #12]
 8102a60:	4313      	orrs	r3, r2
 8102a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8102a64:	68fb      	ldr	r3, [r7, #12]
 8102a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8102a6a:	683b      	ldr	r3, [r7, #0]
 8102a6c:	695b      	ldr	r3, [r3, #20]
 8102a6e:	4313      	orrs	r3, r2
 8102a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	68fa      	ldr	r2, [r7, #12]
 8102a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8102a78:	683b      	ldr	r3, [r7, #0]
 8102a7a:	689a      	ldr	r2, [r3, #8]
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8102a80:	683b      	ldr	r3, [r7, #0]
 8102a82:	681a      	ldr	r2, [r3, #0]
 8102a84:	687b      	ldr	r3, [r7, #4]
 8102a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8102a88:	687b      	ldr	r3, [r7, #4]
 8102a8a:	4a10      	ldr	r2, [pc, #64]	; (8102acc <TIM_Base_SetConfig+0x114>)
 8102a8c:	4293      	cmp	r3, r2
 8102a8e:	d00f      	beq.n	8102ab0 <TIM_Base_SetConfig+0xf8>
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	4a12      	ldr	r2, [pc, #72]	; (8102adc <TIM_Base_SetConfig+0x124>)
 8102a94:	4293      	cmp	r3, r2
 8102a96:	d00b      	beq.n	8102ab0 <TIM_Base_SetConfig+0xf8>
 8102a98:	687b      	ldr	r3, [r7, #4]
 8102a9a:	4a11      	ldr	r2, [pc, #68]	; (8102ae0 <TIM_Base_SetConfig+0x128>)
 8102a9c:	4293      	cmp	r3, r2
 8102a9e:	d007      	beq.n	8102ab0 <TIM_Base_SetConfig+0xf8>
 8102aa0:	687b      	ldr	r3, [r7, #4]
 8102aa2:	4a10      	ldr	r2, [pc, #64]	; (8102ae4 <TIM_Base_SetConfig+0x12c>)
 8102aa4:	4293      	cmp	r3, r2
 8102aa6:	d003      	beq.n	8102ab0 <TIM_Base_SetConfig+0xf8>
 8102aa8:	687b      	ldr	r3, [r7, #4]
 8102aaa:	4a0f      	ldr	r2, [pc, #60]	; (8102ae8 <TIM_Base_SetConfig+0x130>)
 8102aac:	4293      	cmp	r3, r2
 8102aae:	d103      	bne.n	8102ab8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8102ab0:	683b      	ldr	r3, [r7, #0]
 8102ab2:	691a      	ldr	r2, [r3, #16]
 8102ab4:	687b      	ldr	r3, [r7, #4]
 8102ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	2201      	movs	r2, #1
 8102abc:	615a      	str	r2, [r3, #20]
}
 8102abe:	bf00      	nop
 8102ac0:	3714      	adds	r7, #20
 8102ac2:	46bd      	mov	sp, r7
 8102ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ac8:	4770      	bx	lr
 8102aca:	bf00      	nop
 8102acc:	40010000 	.word	0x40010000
 8102ad0:	40000400 	.word	0x40000400
 8102ad4:	40000800 	.word	0x40000800
 8102ad8:	40000c00 	.word	0x40000c00
 8102adc:	40010400 	.word	0x40010400
 8102ae0:	40014000 	.word	0x40014000
 8102ae4:	40014400 	.word	0x40014400
 8102ae8:	40014800 	.word	0x40014800

08102aec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8102aec:	b480      	push	{r7}
 8102aee:	b087      	sub	sp, #28
 8102af0:	af00      	add	r7, sp, #0
 8102af2:	6078      	str	r0, [r7, #4]
 8102af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8102af6:	687b      	ldr	r3, [r7, #4]
 8102af8:	6a1b      	ldr	r3, [r3, #32]
 8102afa:	f023 0201 	bic.w	r2, r3, #1
 8102afe:	687b      	ldr	r3, [r7, #4]
 8102b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	6a1b      	ldr	r3, [r3, #32]
 8102b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102b08:	687b      	ldr	r3, [r7, #4]
 8102b0a:	685b      	ldr	r3, [r3, #4]
 8102b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8102b0e:	687b      	ldr	r3, [r7, #4]
 8102b10:	699b      	ldr	r3, [r3, #24]
 8102b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8102b14:	68fb      	ldr	r3, [r7, #12]
 8102b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8102b20:	68fb      	ldr	r3, [r7, #12]
 8102b22:	f023 0303 	bic.w	r3, r3, #3
 8102b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8102b28:	683b      	ldr	r3, [r7, #0]
 8102b2a:	681b      	ldr	r3, [r3, #0]
 8102b2c:	68fa      	ldr	r2, [r7, #12]
 8102b2e:	4313      	orrs	r3, r2
 8102b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8102b32:	697b      	ldr	r3, [r7, #20]
 8102b34:	f023 0302 	bic.w	r3, r3, #2
 8102b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8102b3a:	683b      	ldr	r3, [r7, #0]
 8102b3c:	689b      	ldr	r3, [r3, #8]
 8102b3e:	697a      	ldr	r2, [r7, #20]
 8102b40:	4313      	orrs	r3, r2
 8102b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8102b44:	687b      	ldr	r3, [r7, #4]
 8102b46:	4a2c      	ldr	r2, [pc, #176]	; (8102bf8 <TIM_OC1_SetConfig+0x10c>)
 8102b48:	4293      	cmp	r3, r2
 8102b4a:	d00f      	beq.n	8102b6c <TIM_OC1_SetConfig+0x80>
 8102b4c:	687b      	ldr	r3, [r7, #4]
 8102b4e:	4a2b      	ldr	r2, [pc, #172]	; (8102bfc <TIM_OC1_SetConfig+0x110>)
 8102b50:	4293      	cmp	r3, r2
 8102b52:	d00b      	beq.n	8102b6c <TIM_OC1_SetConfig+0x80>
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	4a2a      	ldr	r2, [pc, #168]	; (8102c00 <TIM_OC1_SetConfig+0x114>)
 8102b58:	4293      	cmp	r3, r2
 8102b5a:	d007      	beq.n	8102b6c <TIM_OC1_SetConfig+0x80>
 8102b5c:	687b      	ldr	r3, [r7, #4]
 8102b5e:	4a29      	ldr	r2, [pc, #164]	; (8102c04 <TIM_OC1_SetConfig+0x118>)
 8102b60:	4293      	cmp	r3, r2
 8102b62:	d003      	beq.n	8102b6c <TIM_OC1_SetConfig+0x80>
 8102b64:	687b      	ldr	r3, [r7, #4]
 8102b66:	4a28      	ldr	r2, [pc, #160]	; (8102c08 <TIM_OC1_SetConfig+0x11c>)
 8102b68:	4293      	cmp	r3, r2
 8102b6a:	d10c      	bne.n	8102b86 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8102b6c:	697b      	ldr	r3, [r7, #20]
 8102b6e:	f023 0308 	bic.w	r3, r3, #8
 8102b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8102b74:	683b      	ldr	r3, [r7, #0]
 8102b76:	68db      	ldr	r3, [r3, #12]
 8102b78:	697a      	ldr	r2, [r7, #20]
 8102b7a:	4313      	orrs	r3, r2
 8102b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8102b7e:	697b      	ldr	r3, [r7, #20]
 8102b80:	f023 0304 	bic.w	r3, r3, #4
 8102b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102b86:	687b      	ldr	r3, [r7, #4]
 8102b88:	4a1b      	ldr	r2, [pc, #108]	; (8102bf8 <TIM_OC1_SetConfig+0x10c>)
 8102b8a:	4293      	cmp	r3, r2
 8102b8c:	d00f      	beq.n	8102bae <TIM_OC1_SetConfig+0xc2>
 8102b8e:	687b      	ldr	r3, [r7, #4]
 8102b90:	4a1a      	ldr	r2, [pc, #104]	; (8102bfc <TIM_OC1_SetConfig+0x110>)
 8102b92:	4293      	cmp	r3, r2
 8102b94:	d00b      	beq.n	8102bae <TIM_OC1_SetConfig+0xc2>
 8102b96:	687b      	ldr	r3, [r7, #4]
 8102b98:	4a19      	ldr	r2, [pc, #100]	; (8102c00 <TIM_OC1_SetConfig+0x114>)
 8102b9a:	4293      	cmp	r3, r2
 8102b9c:	d007      	beq.n	8102bae <TIM_OC1_SetConfig+0xc2>
 8102b9e:	687b      	ldr	r3, [r7, #4]
 8102ba0:	4a18      	ldr	r2, [pc, #96]	; (8102c04 <TIM_OC1_SetConfig+0x118>)
 8102ba2:	4293      	cmp	r3, r2
 8102ba4:	d003      	beq.n	8102bae <TIM_OC1_SetConfig+0xc2>
 8102ba6:	687b      	ldr	r3, [r7, #4]
 8102ba8:	4a17      	ldr	r2, [pc, #92]	; (8102c08 <TIM_OC1_SetConfig+0x11c>)
 8102baa:	4293      	cmp	r3, r2
 8102bac:	d111      	bne.n	8102bd2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8102bae:	693b      	ldr	r3, [r7, #16]
 8102bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8102bb6:	693b      	ldr	r3, [r7, #16]
 8102bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8102bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8102bbe:	683b      	ldr	r3, [r7, #0]
 8102bc0:	695b      	ldr	r3, [r3, #20]
 8102bc2:	693a      	ldr	r2, [r7, #16]
 8102bc4:	4313      	orrs	r3, r2
 8102bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8102bc8:	683b      	ldr	r3, [r7, #0]
 8102bca:	699b      	ldr	r3, [r3, #24]
 8102bcc:	693a      	ldr	r2, [r7, #16]
 8102bce:	4313      	orrs	r3, r2
 8102bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	693a      	ldr	r2, [r7, #16]
 8102bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8102bd8:	687b      	ldr	r3, [r7, #4]
 8102bda:	68fa      	ldr	r2, [r7, #12]
 8102bdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8102bde:	683b      	ldr	r3, [r7, #0]
 8102be0:	685a      	ldr	r2, [r3, #4]
 8102be2:	687b      	ldr	r3, [r7, #4]
 8102be4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	697a      	ldr	r2, [r7, #20]
 8102bea:	621a      	str	r2, [r3, #32]
}
 8102bec:	bf00      	nop
 8102bee:	371c      	adds	r7, #28
 8102bf0:	46bd      	mov	sp, r7
 8102bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bf6:	4770      	bx	lr
 8102bf8:	40010000 	.word	0x40010000
 8102bfc:	40010400 	.word	0x40010400
 8102c00:	40014000 	.word	0x40014000
 8102c04:	40014400 	.word	0x40014400
 8102c08:	40014800 	.word	0x40014800

08102c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8102c0c:	b480      	push	{r7}
 8102c0e:	b087      	sub	sp, #28
 8102c10:	af00      	add	r7, sp, #0
 8102c12:	6078      	str	r0, [r7, #4]
 8102c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8102c16:	687b      	ldr	r3, [r7, #4]
 8102c18:	6a1b      	ldr	r3, [r3, #32]
 8102c1a:	f023 0210 	bic.w	r2, r3, #16
 8102c1e:	687b      	ldr	r3, [r7, #4]
 8102c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102c22:	687b      	ldr	r3, [r7, #4]
 8102c24:	6a1b      	ldr	r3, [r3, #32]
 8102c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102c28:	687b      	ldr	r3, [r7, #4]
 8102c2a:	685b      	ldr	r3, [r3, #4]
 8102c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8102c2e:	687b      	ldr	r3, [r7, #4]
 8102c30:	699b      	ldr	r3, [r3, #24]
 8102c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8102c34:	68fb      	ldr	r3, [r7, #12]
 8102c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8102c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8102c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8102c40:	68fb      	ldr	r3, [r7, #12]
 8102c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8102c48:	683b      	ldr	r3, [r7, #0]
 8102c4a:	681b      	ldr	r3, [r3, #0]
 8102c4c:	021b      	lsls	r3, r3, #8
 8102c4e:	68fa      	ldr	r2, [r7, #12]
 8102c50:	4313      	orrs	r3, r2
 8102c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8102c54:	697b      	ldr	r3, [r7, #20]
 8102c56:	f023 0320 	bic.w	r3, r3, #32
 8102c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8102c5c:	683b      	ldr	r3, [r7, #0]
 8102c5e:	689b      	ldr	r3, [r3, #8]
 8102c60:	011b      	lsls	r3, r3, #4
 8102c62:	697a      	ldr	r2, [r7, #20]
 8102c64:	4313      	orrs	r3, r2
 8102c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8102c68:	687b      	ldr	r3, [r7, #4]
 8102c6a:	4a28      	ldr	r2, [pc, #160]	; (8102d0c <TIM_OC2_SetConfig+0x100>)
 8102c6c:	4293      	cmp	r3, r2
 8102c6e:	d003      	beq.n	8102c78 <TIM_OC2_SetConfig+0x6c>
 8102c70:	687b      	ldr	r3, [r7, #4]
 8102c72:	4a27      	ldr	r2, [pc, #156]	; (8102d10 <TIM_OC2_SetConfig+0x104>)
 8102c74:	4293      	cmp	r3, r2
 8102c76:	d10d      	bne.n	8102c94 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8102c78:	697b      	ldr	r3, [r7, #20]
 8102c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8102c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8102c80:	683b      	ldr	r3, [r7, #0]
 8102c82:	68db      	ldr	r3, [r3, #12]
 8102c84:	011b      	lsls	r3, r3, #4
 8102c86:	697a      	ldr	r2, [r7, #20]
 8102c88:	4313      	orrs	r3, r2
 8102c8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8102c8c:	697b      	ldr	r3, [r7, #20]
 8102c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8102c92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102c94:	687b      	ldr	r3, [r7, #4]
 8102c96:	4a1d      	ldr	r2, [pc, #116]	; (8102d0c <TIM_OC2_SetConfig+0x100>)
 8102c98:	4293      	cmp	r3, r2
 8102c9a:	d00f      	beq.n	8102cbc <TIM_OC2_SetConfig+0xb0>
 8102c9c:	687b      	ldr	r3, [r7, #4]
 8102c9e:	4a1c      	ldr	r2, [pc, #112]	; (8102d10 <TIM_OC2_SetConfig+0x104>)
 8102ca0:	4293      	cmp	r3, r2
 8102ca2:	d00b      	beq.n	8102cbc <TIM_OC2_SetConfig+0xb0>
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	4a1b      	ldr	r2, [pc, #108]	; (8102d14 <TIM_OC2_SetConfig+0x108>)
 8102ca8:	4293      	cmp	r3, r2
 8102caa:	d007      	beq.n	8102cbc <TIM_OC2_SetConfig+0xb0>
 8102cac:	687b      	ldr	r3, [r7, #4]
 8102cae:	4a1a      	ldr	r2, [pc, #104]	; (8102d18 <TIM_OC2_SetConfig+0x10c>)
 8102cb0:	4293      	cmp	r3, r2
 8102cb2:	d003      	beq.n	8102cbc <TIM_OC2_SetConfig+0xb0>
 8102cb4:	687b      	ldr	r3, [r7, #4]
 8102cb6:	4a19      	ldr	r2, [pc, #100]	; (8102d1c <TIM_OC2_SetConfig+0x110>)
 8102cb8:	4293      	cmp	r3, r2
 8102cba:	d113      	bne.n	8102ce4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8102cbc:	693b      	ldr	r3, [r7, #16]
 8102cbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8102cc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8102cc4:	693b      	ldr	r3, [r7, #16]
 8102cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8102cca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8102ccc:	683b      	ldr	r3, [r7, #0]
 8102cce:	695b      	ldr	r3, [r3, #20]
 8102cd0:	009b      	lsls	r3, r3, #2
 8102cd2:	693a      	ldr	r2, [r7, #16]
 8102cd4:	4313      	orrs	r3, r2
 8102cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8102cd8:	683b      	ldr	r3, [r7, #0]
 8102cda:	699b      	ldr	r3, [r3, #24]
 8102cdc:	009b      	lsls	r3, r3, #2
 8102cde:	693a      	ldr	r2, [r7, #16]
 8102ce0:	4313      	orrs	r3, r2
 8102ce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102ce4:	687b      	ldr	r3, [r7, #4]
 8102ce6:	693a      	ldr	r2, [r7, #16]
 8102ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8102cea:	687b      	ldr	r3, [r7, #4]
 8102cec:	68fa      	ldr	r2, [r7, #12]
 8102cee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8102cf0:	683b      	ldr	r3, [r7, #0]
 8102cf2:	685a      	ldr	r2, [r3, #4]
 8102cf4:	687b      	ldr	r3, [r7, #4]
 8102cf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	697a      	ldr	r2, [r7, #20]
 8102cfc:	621a      	str	r2, [r3, #32]
}
 8102cfe:	bf00      	nop
 8102d00:	371c      	adds	r7, #28
 8102d02:	46bd      	mov	sp, r7
 8102d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d08:	4770      	bx	lr
 8102d0a:	bf00      	nop
 8102d0c:	40010000 	.word	0x40010000
 8102d10:	40010400 	.word	0x40010400
 8102d14:	40014000 	.word	0x40014000
 8102d18:	40014400 	.word	0x40014400
 8102d1c:	40014800 	.word	0x40014800

08102d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8102d20:	b480      	push	{r7}
 8102d22:	b087      	sub	sp, #28
 8102d24:	af00      	add	r7, sp, #0
 8102d26:	6078      	str	r0, [r7, #4]
 8102d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8102d2a:	687b      	ldr	r3, [r7, #4]
 8102d2c:	6a1b      	ldr	r3, [r3, #32]
 8102d2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8102d32:	687b      	ldr	r3, [r7, #4]
 8102d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102d36:	687b      	ldr	r3, [r7, #4]
 8102d38:	6a1b      	ldr	r3, [r3, #32]
 8102d3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102d3c:	687b      	ldr	r3, [r7, #4]
 8102d3e:	685b      	ldr	r3, [r3, #4]
 8102d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	69db      	ldr	r3, [r3, #28]
 8102d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8102d48:	68fb      	ldr	r3, [r7, #12]
 8102d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8102d54:	68fb      	ldr	r3, [r7, #12]
 8102d56:	f023 0303 	bic.w	r3, r3, #3
 8102d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8102d5c:	683b      	ldr	r3, [r7, #0]
 8102d5e:	681b      	ldr	r3, [r3, #0]
 8102d60:	68fa      	ldr	r2, [r7, #12]
 8102d62:	4313      	orrs	r3, r2
 8102d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8102d66:	697b      	ldr	r3, [r7, #20]
 8102d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8102d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8102d6e:	683b      	ldr	r3, [r7, #0]
 8102d70:	689b      	ldr	r3, [r3, #8]
 8102d72:	021b      	lsls	r3, r3, #8
 8102d74:	697a      	ldr	r2, [r7, #20]
 8102d76:	4313      	orrs	r3, r2
 8102d78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8102d7a:	687b      	ldr	r3, [r7, #4]
 8102d7c:	4a27      	ldr	r2, [pc, #156]	; (8102e1c <TIM_OC3_SetConfig+0xfc>)
 8102d7e:	4293      	cmp	r3, r2
 8102d80:	d003      	beq.n	8102d8a <TIM_OC3_SetConfig+0x6a>
 8102d82:	687b      	ldr	r3, [r7, #4]
 8102d84:	4a26      	ldr	r2, [pc, #152]	; (8102e20 <TIM_OC3_SetConfig+0x100>)
 8102d86:	4293      	cmp	r3, r2
 8102d88:	d10d      	bne.n	8102da6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8102d8a:	697b      	ldr	r3, [r7, #20]
 8102d8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8102d90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8102d92:	683b      	ldr	r3, [r7, #0]
 8102d94:	68db      	ldr	r3, [r3, #12]
 8102d96:	021b      	lsls	r3, r3, #8
 8102d98:	697a      	ldr	r2, [r7, #20]
 8102d9a:	4313      	orrs	r3, r2
 8102d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8102d9e:	697b      	ldr	r3, [r7, #20]
 8102da0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8102da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102da6:	687b      	ldr	r3, [r7, #4]
 8102da8:	4a1c      	ldr	r2, [pc, #112]	; (8102e1c <TIM_OC3_SetConfig+0xfc>)
 8102daa:	4293      	cmp	r3, r2
 8102dac:	d00f      	beq.n	8102dce <TIM_OC3_SetConfig+0xae>
 8102dae:	687b      	ldr	r3, [r7, #4]
 8102db0:	4a1b      	ldr	r2, [pc, #108]	; (8102e20 <TIM_OC3_SetConfig+0x100>)
 8102db2:	4293      	cmp	r3, r2
 8102db4:	d00b      	beq.n	8102dce <TIM_OC3_SetConfig+0xae>
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	4a1a      	ldr	r2, [pc, #104]	; (8102e24 <TIM_OC3_SetConfig+0x104>)
 8102dba:	4293      	cmp	r3, r2
 8102dbc:	d007      	beq.n	8102dce <TIM_OC3_SetConfig+0xae>
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	4a19      	ldr	r2, [pc, #100]	; (8102e28 <TIM_OC3_SetConfig+0x108>)
 8102dc2:	4293      	cmp	r3, r2
 8102dc4:	d003      	beq.n	8102dce <TIM_OC3_SetConfig+0xae>
 8102dc6:	687b      	ldr	r3, [r7, #4]
 8102dc8:	4a18      	ldr	r2, [pc, #96]	; (8102e2c <TIM_OC3_SetConfig+0x10c>)
 8102dca:	4293      	cmp	r3, r2
 8102dcc:	d113      	bne.n	8102df6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8102dce:	693b      	ldr	r3, [r7, #16]
 8102dd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8102dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8102dd6:	693b      	ldr	r3, [r7, #16]
 8102dd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8102ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8102dde:	683b      	ldr	r3, [r7, #0]
 8102de0:	695b      	ldr	r3, [r3, #20]
 8102de2:	011b      	lsls	r3, r3, #4
 8102de4:	693a      	ldr	r2, [r7, #16]
 8102de6:	4313      	orrs	r3, r2
 8102de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8102dea:	683b      	ldr	r3, [r7, #0]
 8102dec:	699b      	ldr	r3, [r3, #24]
 8102dee:	011b      	lsls	r3, r3, #4
 8102df0:	693a      	ldr	r2, [r7, #16]
 8102df2:	4313      	orrs	r3, r2
 8102df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102df6:	687b      	ldr	r3, [r7, #4]
 8102df8:	693a      	ldr	r2, [r7, #16]
 8102dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8102dfc:	687b      	ldr	r3, [r7, #4]
 8102dfe:	68fa      	ldr	r2, [r7, #12]
 8102e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8102e02:	683b      	ldr	r3, [r7, #0]
 8102e04:	685a      	ldr	r2, [r3, #4]
 8102e06:	687b      	ldr	r3, [r7, #4]
 8102e08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102e0a:	687b      	ldr	r3, [r7, #4]
 8102e0c:	697a      	ldr	r2, [r7, #20]
 8102e0e:	621a      	str	r2, [r3, #32]
}
 8102e10:	bf00      	nop
 8102e12:	371c      	adds	r7, #28
 8102e14:	46bd      	mov	sp, r7
 8102e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e1a:	4770      	bx	lr
 8102e1c:	40010000 	.word	0x40010000
 8102e20:	40010400 	.word	0x40010400
 8102e24:	40014000 	.word	0x40014000
 8102e28:	40014400 	.word	0x40014400
 8102e2c:	40014800 	.word	0x40014800

08102e30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8102e30:	b480      	push	{r7}
 8102e32:	b087      	sub	sp, #28
 8102e34:	af00      	add	r7, sp, #0
 8102e36:	6078      	str	r0, [r7, #4]
 8102e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8102e3a:	687b      	ldr	r3, [r7, #4]
 8102e3c:	6a1b      	ldr	r3, [r3, #32]
 8102e3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8102e42:	687b      	ldr	r3, [r7, #4]
 8102e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102e46:	687b      	ldr	r3, [r7, #4]
 8102e48:	6a1b      	ldr	r3, [r3, #32]
 8102e4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102e4c:	687b      	ldr	r3, [r7, #4]
 8102e4e:	685b      	ldr	r3, [r3, #4]
 8102e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8102e52:	687b      	ldr	r3, [r7, #4]
 8102e54:	69db      	ldr	r3, [r3, #28]
 8102e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8102e58:	68fb      	ldr	r3, [r7, #12]
 8102e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8102e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8102e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8102e64:	68fb      	ldr	r3, [r7, #12]
 8102e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8102e6c:	683b      	ldr	r3, [r7, #0]
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	021b      	lsls	r3, r3, #8
 8102e72:	68fa      	ldr	r2, [r7, #12]
 8102e74:	4313      	orrs	r3, r2
 8102e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8102e78:	693b      	ldr	r3, [r7, #16]
 8102e7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8102e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8102e80:	683b      	ldr	r3, [r7, #0]
 8102e82:	689b      	ldr	r3, [r3, #8]
 8102e84:	031b      	lsls	r3, r3, #12
 8102e86:	693a      	ldr	r2, [r7, #16]
 8102e88:	4313      	orrs	r3, r2
 8102e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102e8c:	687b      	ldr	r3, [r7, #4]
 8102e8e:	4a18      	ldr	r2, [pc, #96]	; (8102ef0 <TIM_OC4_SetConfig+0xc0>)
 8102e90:	4293      	cmp	r3, r2
 8102e92:	d00f      	beq.n	8102eb4 <TIM_OC4_SetConfig+0x84>
 8102e94:	687b      	ldr	r3, [r7, #4]
 8102e96:	4a17      	ldr	r2, [pc, #92]	; (8102ef4 <TIM_OC4_SetConfig+0xc4>)
 8102e98:	4293      	cmp	r3, r2
 8102e9a:	d00b      	beq.n	8102eb4 <TIM_OC4_SetConfig+0x84>
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	4a16      	ldr	r2, [pc, #88]	; (8102ef8 <TIM_OC4_SetConfig+0xc8>)
 8102ea0:	4293      	cmp	r3, r2
 8102ea2:	d007      	beq.n	8102eb4 <TIM_OC4_SetConfig+0x84>
 8102ea4:	687b      	ldr	r3, [r7, #4]
 8102ea6:	4a15      	ldr	r2, [pc, #84]	; (8102efc <TIM_OC4_SetConfig+0xcc>)
 8102ea8:	4293      	cmp	r3, r2
 8102eaa:	d003      	beq.n	8102eb4 <TIM_OC4_SetConfig+0x84>
 8102eac:	687b      	ldr	r3, [r7, #4]
 8102eae:	4a14      	ldr	r2, [pc, #80]	; (8102f00 <TIM_OC4_SetConfig+0xd0>)
 8102eb0:	4293      	cmp	r3, r2
 8102eb2:	d109      	bne.n	8102ec8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8102eb4:	697b      	ldr	r3, [r7, #20]
 8102eb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8102eba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8102ebc:	683b      	ldr	r3, [r7, #0]
 8102ebe:	695b      	ldr	r3, [r3, #20]
 8102ec0:	019b      	lsls	r3, r3, #6
 8102ec2:	697a      	ldr	r2, [r7, #20]
 8102ec4:	4313      	orrs	r3, r2
 8102ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102ec8:	687b      	ldr	r3, [r7, #4]
 8102eca:	697a      	ldr	r2, [r7, #20]
 8102ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8102ece:	687b      	ldr	r3, [r7, #4]
 8102ed0:	68fa      	ldr	r2, [r7, #12]
 8102ed2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8102ed4:	683b      	ldr	r3, [r7, #0]
 8102ed6:	685a      	ldr	r2, [r3, #4]
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102edc:	687b      	ldr	r3, [r7, #4]
 8102ede:	693a      	ldr	r2, [r7, #16]
 8102ee0:	621a      	str	r2, [r3, #32]
}
 8102ee2:	bf00      	nop
 8102ee4:	371c      	adds	r7, #28
 8102ee6:	46bd      	mov	sp, r7
 8102ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eec:	4770      	bx	lr
 8102eee:	bf00      	nop
 8102ef0:	40010000 	.word	0x40010000
 8102ef4:	40010400 	.word	0x40010400
 8102ef8:	40014000 	.word	0x40014000
 8102efc:	40014400 	.word	0x40014400
 8102f00:	40014800 	.word	0x40014800

08102f04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8102f04:	b480      	push	{r7}
 8102f06:	b087      	sub	sp, #28
 8102f08:	af00      	add	r7, sp, #0
 8102f0a:	6078      	str	r0, [r7, #4]
 8102f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8102f0e:	687b      	ldr	r3, [r7, #4]
 8102f10:	6a1b      	ldr	r3, [r3, #32]
 8102f12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8102f16:	687b      	ldr	r3, [r7, #4]
 8102f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102f1a:	687b      	ldr	r3, [r7, #4]
 8102f1c:	6a1b      	ldr	r3, [r3, #32]
 8102f1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102f20:	687b      	ldr	r3, [r7, #4]
 8102f22:	685b      	ldr	r3, [r3, #4]
 8102f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8102f26:	687b      	ldr	r3, [r7, #4]
 8102f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8102f2c:	68fb      	ldr	r3, [r7, #12]
 8102f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8102f38:	683b      	ldr	r3, [r7, #0]
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	68fa      	ldr	r2, [r7, #12]
 8102f3e:	4313      	orrs	r3, r2
 8102f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8102f42:	693b      	ldr	r3, [r7, #16]
 8102f44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8102f48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8102f4a:	683b      	ldr	r3, [r7, #0]
 8102f4c:	689b      	ldr	r3, [r3, #8]
 8102f4e:	041b      	lsls	r3, r3, #16
 8102f50:	693a      	ldr	r2, [r7, #16]
 8102f52:	4313      	orrs	r3, r2
 8102f54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102f56:	687b      	ldr	r3, [r7, #4]
 8102f58:	4a17      	ldr	r2, [pc, #92]	; (8102fb8 <TIM_OC5_SetConfig+0xb4>)
 8102f5a:	4293      	cmp	r3, r2
 8102f5c:	d00f      	beq.n	8102f7e <TIM_OC5_SetConfig+0x7a>
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	4a16      	ldr	r2, [pc, #88]	; (8102fbc <TIM_OC5_SetConfig+0xb8>)
 8102f62:	4293      	cmp	r3, r2
 8102f64:	d00b      	beq.n	8102f7e <TIM_OC5_SetConfig+0x7a>
 8102f66:	687b      	ldr	r3, [r7, #4]
 8102f68:	4a15      	ldr	r2, [pc, #84]	; (8102fc0 <TIM_OC5_SetConfig+0xbc>)
 8102f6a:	4293      	cmp	r3, r2
 8102f6c:	d007      	beq.n	8102f7e <TIM_OC5_SetConfig+0x7a>
 8102f6e:	687b      	ldr	r3, [r7, #4]
 8102f70:	4a14      	ldr	r2, [pc, #80]	; (8102fc4 <TIM_OC5_SetConfig+0xc0>)
 8102f72:	4293      	cmp	r3, r2
 8102f74:	d003      	beq.n	8102f7e <TIM_OC5_SetConfig+0x7a>
 8102f76:	687b      	ldr	r3, [r7, #4]
 8102f78:	4a13      	ldr	r2, [pc, #76]	; (8102fc8 <TIM_OC5_SetConfig+0xc4>)
 8102f7a:	4293      	cmp	r3, r2
 8102f7c:	d109      	bne.n	8102f92 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8102f7e:	697b      	ldr	r3, [r7, #20]
 8102f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102f84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8102f86:	683b      	ldr	r3, [r7, #0]
 8102f88:	695b      	ldr	r3, [r3, #20]
 8102f8a:	021b      	lsls	r3, r3, #8
 8102f8c:	697a      	ldr	r2, [r7, #20]
 8102f8e:	4313      	orrs	r3, r2
 8102f90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102f92:	687b      	ldr	r3, [r7, #4]
 8102f94:	697a      	ldr	r2, [r7, #20]
 8102f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8102f98:	687b      	ldr	r3, [r7, #4]
 8102f9a:	68fa      	ldr	r2, [r7, #12]
 8102f9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8102f9e:	683b      	ldr	r3, [r7, #0]
 8102fa0:	685a      	ldr	r2, [r3, #4]
 8102fa2:	687b      	ldr	r3, [r7, #4]
 8102fa4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102fa6:	687b      	ldr	r3, [r7, #4]
 8102fa8:	693a      	ldr	r2, [r7, #16]
 8102faa:	621a      	str	r2, [r3, #32]
}
 8102fac:	bf00      	nop
 8102fae:	371c      	adds	r7, #28
 8102fb0:	46bd      	mov	sp, r7
 8102fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fb6:	4770      	bx	lr
 8102fb8:	40010000 	.word	0x40010000
 8102fbc:	40010400 	.word	0x40010400
 8102fc0:	40014000 	.word	0x40014000
 8102fc4:	40014400 	.word	0x40014400
 8102fc8:	40014800 	.word	0x40014800

08102fcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8102fcc:	b480      	push	{r7}
 8102fce:	b087      	sub	sp, #28
 8102fd0:	af00      	add	r7, sp, #0
 8102fd2:	6078      	str	r0, [r7, #4]
 8102fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8102fd6:	687b      	ldr	r3, [r7, #4]
 8102fd8:	6a1b      	ldr	r3, [r3, #32]
 8102fda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8102fde:	687b      	ldr	r3, [r7, #4]
 8102fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102fe2:	687b      	ldr	r3, [r7, #4]
 8102fe4:	6a1b      	ldr	r3, [r3, #32]
 8102fe6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102fe8:	687b      	ldr	r3, [r7, #4]
 8102fea:	685b      	ldr	r3, [r3, #4]
 8102fec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8102ff4:	68fb      	ldr	r3, [r7, #12]
 8102ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8102ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8102ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8103000:	683b      	ldr	r3, [r7, #0]
 8103002:	681b      	ldr	r3, [r3, #0]
 8103004:	021b      	lsls	r3, r3, #8
 8103006:	68fa      	ldr	r2, [r7, #12]
 8103008:	4313      	orrs	r3, r2
 810300a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810300c:	693b      	ldr	r3, [r7, #16]
 810300e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8103012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8103014:	683b      	ldr	r3, [r7, #0]
 8103016:	689b      	ldr	r3, [r3, #8]
 8103018:	051b      	lsls	r3, r3, #20
 810301a:	693a      	ldr	r2, [r7, #16]
 810301c:	4313      	orrs	r3, r2
 810301e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103020:	687b      	ldr	r3, [r7, #4]
 8103022:	4a18      	ldr	r2, [pc, #96]	; (8103084 <TIM_OC6_SetConfig+0xb8>)
 8103024:	4293      	cmp	r3, r2
 8103026:	d00f      	beq.n	8103048 <TIM_OC6_SetConfig+0x7c>
 8103028:	687b      	ldr	r3, [r7, #4]
 810302a:	4a17      	ldr	r2, [pc, #92]	; (8103088 <TIM_OC6_SetConfig+0xbc>)
 810302c:	4293      	cmp	r3, r2
 810302e:	d00b      	beq.n	8103048 <TIM_OC6_SetConfig+0x7c>
 8103030:	687b      	ldr	r3, [r7, #4]
 8103032:	4a16      	ldr	r2, [pc, #88]	; (810308c <TIM_OC6_SetConfig+0xc0>)
 8103034:	4293      	cmp	r3, r2
 8103036:	d007      	beq.n	8103048 <TIM_OC6_SetConfig+0x7c>
 8103038:	687b      	ldr	r3, [r7, #4]
 810303a:	4a15      	ldr	r2, [pc, #84]	; (8103090 <TIM_OC6_SetConfig+0xc4>)
 810303c:	4293      	cmp	r3, r2
 810303e:	d003      	beq.n	8103048 <TIM_OC6_SetConfig+0x7c>
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	4a14      	ldr	r2, [pc, #80]	; (8103094 <TIM_OC6_SetConfig+0xc8>)
 8103044:	4293      	cmp	r3, r2
 8103046:	d109      	bne.n	810305c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8103048:	697b      	ldr	r3, [r7, #20]
 810304a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810304e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8103050:	683b      	ldr	r3, [r7, #0]
 8103052:	695b      	ldr	r3, [r3, #20]
 8103054:	029b      	lsls	r3, r3, #10
 8103056:	697a      	ldr	r2, [r7, #20]
 8103058:	4313      	orrs	r3, r2
 810305a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	697a      	ldr	r2, [r7, #20]
 8103060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8103062:	687b      	ldr	r3, [r7, #4]
 8103064:	68fa      	ldr	r2, [r7, #12]
 8103066:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8103068:	683b      	ldr	r3, [r7, #0]
 810306a:	685a      	ldr	r2, [r3, #4]
 810306c:	687b      	ldr	r3, [r7, #4]
 810306e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	693a      	ldr	r2, [r7, #16]
 8103074:	621a      	str	r2, [r3, #32]
}
 8103076:	bf00      	nop
 8103078:	371c      	adds	r7, #28
 810307a:	46bd      	mov	sp, r7
 810307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103080:	4770      	bx	lr
 8103082:	bf00      	nop
 8103084:	40010000 	.word	0x40010000
 8103088:	40010400 	.word	0x40010400
 810308c:	40014000 	.word	0x40014000
 8103090:	40014400 	.word	0x40014400
 8103094:	40014800 	.word	0x40014800

08103098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8103098:	b480      	push	{r7}
 810309a:	b087      	sub	sp, #28
 810309c:	af00      	add	r7, sp, #0
 810309e:	60f8      	str	r0, [r7, #12]
 81030a0:	60b9      	str	r1, [r7, #8]
 81030a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 81030a4:	68fb      	ldr	r3, [r7, #12]
 81030a6:	6a1b      	ldr	r3, [r3, #32]
 81030a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81030aa:	68fb      	ldr	r3, [r7, #12]
 81030ac:	6a1b      	ldr	r3, [r3, #32]
 81030ae:	f023 0201 	bic.w	r2, r3, #1
 81030b2:	68fb      	ldr	r3, [r7, #12]
 81030b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81030b6:	68fb      	ldr	r3, [r7, #12]
 81030b8:	699b      	ldr	r3, [r3, #24]
 81030ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81030bc:	693b      	ldr	r3, [r7, #16]
 81030be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81030c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81030c4:	687b      	ldr	r3, [r7, #4]
 81030c6:	011b      	lsls	r3, r3, #4
 81030c8:	693a      	ldr	r2, [r7, #16]
 81030ca:	4313      	orrs	r3, r2
 81030cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81030ce:	697b      	ldr	r3, [r7, #20]
 81030d0:	f023 030a 	bic.w	r3, r3, #10
 81030d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 81030d6:	697a      	ldr	r2, [r7, #20]
 81030d8:	68bb      	ldr	r3, [r7, #8]
 81030da:	4313      	orrs	r3, r2
 81030dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81030de:	68fb      	ldr	r3, [r7, #12]
 81030e0:	693a      	ldr	r2, [r7, #16]
 81030e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81030e4:	68fb      	ldr	r3, [r7, #12]
 81030e6:	697a      	ldr	r2, [r7, #20]
 81030e8:	621a      	str	r2, [r3, #32]
}
 81030ea:	bf00      	nop
 81030ec:	371c      	adds	r7, #28
 81030ee:	46bd      	mov	sp, r7
 81030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030f4:	4770      	bx	lr

081030f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81030f6:	b480      	push	{r7}
 81030f8:	b087      	sub	sp, #28
 81030fa:	af00      	add	r7, sp, #0
 81030fc:	60f8      	str	r0, [r7, #12]
 81030fe:	60b9      	str	r1, [r7, #8]
 8103100:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8103102:	68fb      	ldr	r3, [r7, #12]
 8103104:	6a1b      	ldr	r3, [r3, #32]
 8103106:	f023 0210 	bic.w	r2, r3, #16
 810310a:	68fb      	ldr	r3, [r7, #12]
 810310c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810310e:	68fb      	ldr	r3, [r7, #12]
 8103110:	699b      	ldr	r3, [r3, #24]
 8103112:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8103114:	68fb      	ldr	r3, [r7, #12]
 8103116:	6a1b      	ldr	r3, [r3, #32]
 8103118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810311a:	697b      	ldr	r3, [r7, #20]
 810311c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8103120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8103122:	687b      	ldr	r3, [r7, #4]
 8103124:	031b      	lsls	r3, r3, #12
 8103126:	697a      	ldr	r2, [r7, #20]
 8103128:	4313      	orrs	r3, r2
 810312a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810312c:	693b      	ldr	r3, [r7, #16]
 810312e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8103132:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8103134:	68bb      	ldr	r3, [r7, #8]
 8103136:	011b      	lsls	r3, r3, #4
 8103138:	693a      	ldr	r2, [r7, #16]
 810313a:	4313      	orrs	r3, r2
 810313c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810313e:	68fb      	ldr	r3, [r7, #12]
 8103140:	697a      	ldr	r2, [r7, #20]
 8103142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8103144:	68fb      	ldr	r3, [r7, #12]
 8103146:	693a      	ldr	r2, [r7, #16]
 8103148:	621a      	str	r2, [r3, #32]
}
 810314a:	bf00      	nop
 810314c:	371c      	adds	r7, #28
 810314e:	46bd      	mov	sp, r7
 8103150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103154:	4770      	bx	lr

08103156 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8103156:	b480      	push	{r7}
 8103158:	b085      	sub	sp, #20
 810315a:	af00      	add	r7, sp, #0
 810315c:	6078      	str	r0, [r7, #4]
 810315e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	689b      	ldr	r3, [r3, #8]
 8103164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8103166:	68fb      	ldr	r3, [r7, #12]
 8103168:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 810316c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8103172:	683a      	ldr	r2, [r7, #0]
 8103174:	68fb      	ldr	r3, [r7, #12]
 8103176:	4313      	orrs	r3, r2
 8103178:	f043 0307 	orr.w	r3, r3, #7
 810317c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810317e:	687b      	ldr	r3, [r7, #4]
 8103180:	68fa      	ldr	r2, [r7, #12]
 8103182:	609a      	str	r2, [r3, #8]
}
 8103184:	bf00      	nop
 8103186:	3714      	adds	r7, #20
 8103188:	46bd      	mov	sp, r7
 810318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810318e:	4770      	bx	lr

08103190 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8103190:	b480      	push	{r7}
 8103192:	b087      	sub	sp, #28
 8103194:	af00      	add	r7, sp, #0
 8103196:	60f8      	str	r0, [r7, #12]
 8103198:	60b9      	str	r1, [r7, #8]
 810319a:	607a      	str	r2, [r7, #4]
 810319c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810319e:	68fb      	ldr	r3, [r7, #12]
 81031a0:	689b      	ldr	r3, [r3, #8]
 81031a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81031a4:	697b      	ldr	r3, [r7, #20]
 81031a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81031aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81031ac:	683b      	ldr	r3, [r7, #0]
 81031ae:	021a      	lsls	r2, r3, #8
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	431a      	orrs	r2, r3
 81031b4:	68bb      	ldr	r3, [r7, #8]
 81031b6:	4313      	orrs	r3, r2
 81031b8:	697a      	ldr	r2, [r7, #20]
 81031ba:	4313      	orrs	r3, r2
 81031bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81031be:	68fb      	ldr	r3, [r7, #12]
 81031c0:	697a      	ldr	r2, [r7, #20]
 81031c2:	609a      	str	r2, [r3, #8]
}
 81031c4:	bf00      	nop
 81031c6:	371c      	adds	r7, #28
 81031c8:	46bd      	mov	sp, r7
 81031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031ce:	4770      	bx	lr

081031d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81031d0:	b480      	push	{r7}
 81031d2:	b087      	sub	sp, #28
 81031d4:	af00      	add	r7, sp, #0
 81031d6:	60f8      	str	r0, [r7, #12]
 81031d8:	60b9      	str	r1, [r7, #8]
 81031da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 81031dc:	68bb      	ldr	r3, [r7, #8]
 81031de:	f003 031f 	and.w	r3, r3, #31
 81031e2:	2201      	movs	r2, #1
 81031e4:	fa02 f303 	lsl.w	r3, r2, r3
 81031e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 81031ea:	68fb      	ldr	r3, [r7, #12]
 81031ec:	6a1a      	ldr	r2, [r3, #32]
 81031ee:	697b      	ldr	r3, [r7, #20]
 81031f0:	43db      	mvns	r3, r3
 81031f2:	401a      	ands	r2, r3
 81031f4:	68fb      	ldr	r3, [r7, #12]
 81031f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 81031f8:	68fb      	ldr	r3, [r7, #12]
 81031fa:	6a1a      	ldr	r2, [r3, #32]
 81031fc:	68bb      	ldr	r3, [r7, #8]
 81031fe:	f003 031f 	and.w	r3, r3, #31
 8103202:	6879      	ldr	r1, [r7, #4]
 8103204:	fa01 f303 	lsl.w	r3, r1, r3
 8103208:	431a      	orrs	r2, r3
 810320a:	68fb      	ldr	r3, [r7, #12]
 810320c:	621a      	str	r2, [r3, #32]
}
 810320e:	bf00      	nop
 8103210:	371c      	adds	r7, #28
 8103212:	46bd      	mov	sp, r7
 8103214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103218:	4770      	bx	lr
	...

0810321c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 810321c:	b480      	push	{r7}
 810321e:	b085      	sub	sp, #20
 8103220:	af00      	add	r7, sp, #0
 8103222:	6078      	str	r0, [r7, #4]
 8103224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8103226:	687b      	ldr	r3, [r7, #4]
 8103228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810322c:	2b01      	cmp	r3, #1
 810322e:	d101      	bne.n	8103234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8103230:	2302      	movs	r3, #2
 8103232:	e06d      	b.n	8103310 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	2201      	movs	r2, #1
 8103238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	2202      	movs	r2, #2
 8103240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8103244:	687b      	ldr	r3, [r7, #4]
 8103246:	681b      	ldr	r3, [r3, #0]
 8103248:	685b      	ldr	r3, [r3, #4]
 810324a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810324c:	687b      	ldr	r3, [r7, #4]
 810324e:	681b      	ldr	r3, [r3, #0]
 8103250:	689b      	ldr	r3, [r3, #8]
 8103252:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	681b      	ldr	r3, [r3, #0]
 8103258:	4a30      	ldr	r2, [pc, #192]	; (810331c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810325a:	4293      	cmp	r3, r2
 810325c:	d004      	beq.n	8103268 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810325e:	687b      	ldr	r3, [r7, #4]
 8103260:	681b      	ldr	r3, [r3, #0]
 8103262:	4a2f      	ldr	r2, [pc, #188]	; (8103320 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8103264:	4293      	cmp	r3, r2
 8103266:	d108      	bne.n	810327a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8103268:	68fb      	ldr	r3, [r7, #12]
 810326a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810326e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8103270:	683b      	ldr	r3, [r7, #0]
 8103272:	685b      	ldr	r3, [r3, #4]
 8103274:	68fa      	ldr	r2, [r7, #12]
 8103276:	4313      	orrs	r3, r2
 8103278:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810327a:	68fb      	ldr	r3, [r7, #12]
 810327c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103280:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8103282:	683b      	ldr	r3, [r7, #0]
 8103284:	681b      	ldr	r3, [r3, #0]
 8103286:	68fa      	ldr	r2, [r7, #12]
 8103288:	4313      	orrs	r3, r2
 810328a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810328c:	687b      	ldr	r3, [r7, #4]
 810328e:	681b      	ldr	r3, [r3, #0]
 8103290:	68fa      	ldr	r2, [r7, #12]
 8103292:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	681b      	ldr	r3, [r3, #0]
 8103298:	4a20      	ldr	r2, [pc, #128]	; (810331c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810329a:	4293      	cmp	r3, r2
 810329c:	d022      	beq.n	81032e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81032a6:	d01d      	beq.n	81032e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	681b      	ldr	r3, [r3, #0]
 81032ac:	4a1d      	ldr	r2, [pc, #116]	; (8103324 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81032ae:	4293      	cmp	r3, r2
 81032b0:	d018      	beq.n	81032e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	681b      	ldr	r3, [r3, #0]
 81032b6:	4a1c      	ldr	r2, [pc, #112]	; (8103328 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81032b8:	4293      	cmp	r3, r2
 81032ba:	d013      	beq.n	81032e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	681b      	ldr	r3, [r3, #0]
 81032c0:	4a1a      	ldr	r2, [pc, #104]	; (810332c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81032c2:	4293      	cmp	r3, r2
 81032c4:	d00e      	beq.n	81032e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81032c6:	687b      	ldr	r3, [r7, #4]
 81032c8:	681b      	ldr	r3, [r3, #0]
 81032ca:	4a15      	ldr	r2, [pc, #84]	; (8103320 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81032cc:	4293      	cmp	r3, r2
 81032ce:	d009      	beq.n	81032e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81032d0:	687b      	ldr	r3, [r7, #4]
 81032d2:	681b      	ldr	r3, [r3, #0]
 81032d4:	4a16      	ldr	r2, [pc, #88]	; (8103330 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 81032d6:	4293      	cmp	r3, r2
 81032d8:	d004      	beq.n	81032e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81032da:	687b      	ldr	r3, [r7, #4]
 81032dc:	681b      	ldr	r3, [r3, #0]
 81032de:	4a15      	ldr	r2, [pc, #84]	; (8103334 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 81032e0:	4293      	cmp	r3, r2
 81032e2:	d10c      	bne.n	81032fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 81032e4:	68bb      	ldr	r3, [r7, #8]
 81032e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81032ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 81032ec:	683b      	ldr	r3, [r7, #0]
 81032ee:	689b      	ldr	r3, [r3, #8]
 81032f0:	68ba      	ldr	r2, [r7, #8]
 81032f2:	4313      	orrs	r3, r2
 81032f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 81032f6:	687b      	ldr	r3, [r7, #4]
 81032f8:	681b      	ldr	r3, [r3, #0]
 81032fa:	68ba      	ldr	r2, [r7, #8]
 81032fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 81032fe:	687b      	ldr	r3, [r7, #4]
 8103300:	2201      	movs	r2, #1
 8103302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8103306:	687b      	ldr	r3, [r7, #4]
 8103308:	2200      	movs	r2, #0
 810330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810330e:	2300      	movs	r3, #0
}
 8103310:	4618      	mov	r0, r3
 8103312:	3714      	adds	r7, #20
 8103314:	46bd      	mov	sp, r7
 8103316:	f85d 7b04 	ldr.w	r7, [sp], #4
 810331a:	4770      	bx	lr
 810331c:	40010000 	.word	0x40010000
 8103320:	40010400 	.word	0x40010400
 8103324:	40000400 	.word	0x40000400
 8103328:	40000800 	.word	0x40000800
 810332c:	40000c00 	.word	0x40000c00
 8103330:	40001800 	.word	0x40001800
 8103334:	40014000 	.word	0x40014000

08103338 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8103338:	b480      	push	{r7}
 810333a:	b085      	sub	sp, #20
 810333c:	af00      	add	r7, sp, #0
 810333e:	6078      	str	r0, [r7, #4]
 8103340:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8103342:	2300      	movs	r3, #0
 8103344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810334c:	2b01      	cmp	r3, #1
 810334e:	d101      	bne.n	8103354 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8103350:	2302      	movs	r3, #2
 8103352:	e065      	b.n	8103420 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8103354:	687b      	ldr	r3, [r7, #4]
 8103356:	2201      	movs	r2, #1
 8103358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810335c:	68fb      	ldr	r3, [r7, #12]
 810335e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8103362:	683b      	ldr	r3, [r7, #0]
 8103364:	68db      	ldr	r3, [r3, #12]
 8103366:	4313      	orrs	r3, r2
 8103368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810336a:	68fb      	ldr	r3, [r7, #12]
 810336c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103370:	683b      	ldr	r3, [r7, #0]
 8103372:	689b      	ldr	r3, [r3, #8]
 8103374:	4313      	orrs	r3, r2
 8103376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8103378:	68fb      	ldr	r3, [r7, #12]
 810337a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 810337e:	683b      	ldr	r3, [r7, #0]
 8103380:	685b      	ldr	r3, [r3, #4]
 8103382:	4313      	orrs	r3, r2
 8103384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8103386:	68fb      	ldr	r3, [r7, #12]
 8103388:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 810338c:	683b      	ldr	r3, [r7, #0]
 810338e:	681b      	ldr	r3, [r3, #0]
 8103390:	4313      	orrs	r3, r2
 8103392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8103394:	68fb      	ldr	r3, [r7, #12]
 8103396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810339a:	683b      	ldr	r3, [r7, #0]
 810339c:	691b      	ldr	r3, [r3, #16]
 810339e:	4313      	orrs	r3, r2
 81033a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 81033a2:	68fb      	ldr	r3, [r7, #12]
 81033a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 81033a8:	683b      	ldr	r3, [r7, #0]
 81033aa:	695b      	ldr	r3, [r3, #20]
 81033ac:	4313      	orrs	r3, r2
 81033ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 81033b0:	68fb      	ldr	r3, [r7, #12]
 81033b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81033b6:	683b      	ldr	r3, [r7, #0]
 81033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81033ba:	4313      	orrs	r3, r2
 81033bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 81033be:	68fb      	ldr	r3, [r7, #12]
 81033c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 81033c4:	683b      	ldr	r3, [r7, #0]
 81033c6:	699b      	ldr	r3, [r3, #24]
 81033c8:	041b      	lsls	r3, r3, #16
 81033ca:	4313      	orrs	r3, r2
 81033cc:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	681b      	ldr	r3, [r3, #0]
 81033d2:	4a16      	ldr	r2, [pc, #88]	; (810342c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 81033d4:	4293      	cmp	r3, r2
 81033d6:	d004      	beq.n	81033e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 81033d8:	687b      	ldr	r3, [r7, #4]
 81033da:	681b      	ldr	r3, [r3, #0]
 81033dc:	4a14      	ldr	r2, [pc, #80]	; (8103430 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 81033de:	4293      	cmp	r3, r2
 81033e0:	d115      	bne.n	810340e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 81033e2:	68fb      	ldr	r3, [r7, #12]
 81033e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 81033e8:	683b      	ldr	r3, [r7, #0]
 81033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81033ec:	051b      	lsls	r3, r3, #20
 81033ee:	4313      	orrs	r3, r2
 81033f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 81033f2:	68fb      	ldr	r3, [r7, #12]
 81033f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81033f8:	683b      	ldr	r3, [r7, #0]
 81033fa:	69db      	ldr	r3, [r3, #28]
 81033fc:	4313      	orrs	r3, r2
 81033fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8103400:	68fb      	ldr	r3, [r7, #12]
 8103402:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8103406:	683b      	ldr	r3, [r7, #0]
 8103408:	6a1b      	ldr	r3, [r3, #32]
 810340a:	4313      	orrs	r3, r2
 810340c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	681b      	ldr	r3, [r3, #0]
 8103412:	68fa      	ldr	r2, [r7, #12]
 8103414:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	2200      	movs	r2, #0
 810341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810341e:	2300      	movs	r3, #0
}
 8103420:	4618      	mov	r0, r3
 8103422:	3714      	adds	r7, #20
 8103424:	46bd      	mov	sp, r7
 8103426:	f85d 7b04 	ldr.w	r7, [sp], #4
 810342a:	4770      	bx	lr
 810342c:	40010000 	.word	0x40010000
 8103430:	40010400 	.word	0x40010400

08103434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8103434:	b480      	push	{r7}
 8103436:	b083      	sub	sp, #12
 8103438:	af00      	add	r7, sp, #0
 810343a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810343c:	bf00      	nop
 810343e:	370c      	adds	r7, #12
 8103440:	46bd      	mov	sp, r7
 8103442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103446:	4770      	bx	lr

08103448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8103448:	b480      	push	{r7}
 810344a:	b083      	sub	sp, #12
 810344c:	af00      	add	r7, sp, #0
 810344e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8103450:	bf00      	nop
 8103452:	370c      	adds	r7, #12
 8103454:	46bd      	mov	sp, r7
 8103456:	f85d 7b04 	ldr.w	r7, [sp], #4
 810345a:	4770      	bx	lr

0810345c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810345c:	b480      	push	{r7}
 810345e:	b083      	sub	sp, #12
 8103460:	af00      	add	r7, sp, #0
 8103462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8103464:	bf00      	nop
 8103466:	370c      	adds	r7, #12
 8103468:	46bd      	mov	sp, r7
 810346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810346e:	4770      	bx	lr

08103470 <__libc_init_array>:
 8103470:	b570      	push	{r4, r5, r6, lr}
 8103472:	4d0d      	ldr	r5, [pc, #52]	; (81034a8 <__libc_init_array+0x38>)
 8103474:	4c0d      	ldr	r4, [pc, #52]	; (81034ac <__libc_init_array+0x3c>)
 8103476:	1b64      	subs	r4, r4, r5
 8103478:	10a4      	asrs	r4, r4, #2
 810347a:	2600      	movs	r6, #0
 810347c:	42a6      	cmp	r6, r4
 810347e:	d109      	bne.n	8103494 <__libc_init_array+0x24>
 8103480:	4d0b      	ldr	r5, [pc, #44]	; (81034b0 <__libc_init_array+0x40>)
 8103482:	4c0c      	ldr	r4, [pc, #48]	; (81034b4 <__libc_init_array+0x44>)
 8103484:	f000 f820 	bl	81034c8 <_init>
 8103488:	1b64      	subs	r4, r4, r5
 810348a:	10a4      	asrs	r4, r4, #2
 810348c:	2600      	movs	r6, #0
 810348e:	42a6      	cmp	r6, r4
 8103490:	d105      	bne.n	810349e <__libc_init_array+0x2e>
 8103492:	bd70      	pop	{r4, r5, r6, pc}
 8103494:	f855 3b04 	ldr.w	r3, [r5], #4
 8103498:	4798      	blx	r3
 810349a:	3601      	adds	r6, #1
 810349c:	e7ee      	b.n	810347c <__libc_init_array+0xc>
 810349e:	f855 3b04 	ldr.w	r3, [r5], #4
 81034a2:	4798      	blx	r3
 81034a4:	3601      	adds	r6, #1
 81034a6:	e7f2      	b.n	810348e <__libc_init_array+0x1e>
 81034a8:	081034f0 	.word	0x081034f0
 81034ac:	081034f0 	.word	0x081034f0
 81034b0:	081034f0 	.word	0x081034f0
 81034b4:	081034f4 	.word	0x081034f4

081034b8 <memset>:
 81034b8:	4402      	add	r2, r0
 81034ba:	4603      	mov	r3, r0
 81034bc:	4293      	cmp	r3, r2
 81034be:	d100      	bne.n	81034c2 <memset+0xa>
 81034c0:	4770      	bx	lr
 81034c2:	f803 1b01 	strb.w	r1, [r3], #1
 81034c6:	e7f9      	b.n	81034bc <memset+0x4>

081034c8 <_init>:
 81034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81034ca:	bf00      	nop
 81034cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81034ce:	bc08      	pop	{r3}
 81034d0:	469e      	mov	lr, r3
 81034d2:	4770      	bx	lr

081034d4 <_fini>:
 81034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81034d6:	bf00      	nop
 81034d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81034da:	bc08      	pop	{r3}
 81034dc:	469e      	mov	lr, r3
 81034de:	4770      	bx	lr
