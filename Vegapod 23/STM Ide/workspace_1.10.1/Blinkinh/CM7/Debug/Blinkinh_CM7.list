
Blinkinh_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d5c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800602c  0800602c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800602c  0800602c  0001602c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006034  08006034  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800603c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800604c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  080060ac  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006ac  240000d0  0800610c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400077c  0800610c  0002077c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001912d  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000028c6  00000000  00000000  0003922b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001030  00000000  00000000  0003baf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000f48  00000000  00000000  0003cb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a2d4  00000000  00000000  0003da70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001470f  00000000  00000000  00077d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00180133  00000000  00000000  0008c453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0020c586  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000044a0  00000000  00000000  0020c5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005fdc 	.word	0x08005fdc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08005fdc 	.word	0x08005fdc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <main+0x9c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 f9ed 	bl	8000b10 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fc1b 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f835 	bl	80007a8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <main+0x9c>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <main+0x9c>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <main+0x9c>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fb95 	bl	8001e8c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f001 fbab 	bl	8001ec0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <main+0x9c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 f9bf 	bl	8000b10 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f957 	bl	8000a44 <MX_GPIO_Init>
  MX_ETH_Init();
 8000796:	f000 f88b 	bl	80008b0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f8d5 	bl	8000948 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079e:	f000 f91f 	bl	80009e0 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <main+0x9a>
 80007a4:	58024400 	.word	0x58024400

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09c      	sub	sp, #112	; 0x70
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	224c      	movs	r2, #76	; 0x4c
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f005 fc08 	bl	8005fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2220      	movs	r2, #32
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f005 fc02 	bl	8005fcc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007c8:	2004      	movs	r0, #4
 80007ca:	f001 fcd5 	bl	8002178 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <SystemClock_Config+0xfc>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	4a33      	ldr	r2, [pc, #204]	; (80008a4 <SystemClock_Config+0xfc>)
 80007d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007dc:	6193      	str	r3, [r2, #24]
 80007de:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <SystemClock_Config+0xfc>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <SystemClock_Config+0x100>)
 80007ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ec:	4a2e      	ldr	r2, [pc, #184]	; (80008a8 <SystemClock_Config+0x100>)
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007f4:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <SystemClock_Config+0x100>)
 80007f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000800:	bf00      	nop
 8000802:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <SystemClock_Config+0xfc>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800080e:	d1f8      	bne.n	8000802 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000810:	4b26      	ldr	r3, [pc, #152]	; (80008ac <SystemClock_Config+0x104>)
 8000812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000814:	f023 0303 	bic.w	r3, r3, #3
 8000818:	4a24      	ldr	r2, [pc, #144]	; (80008ac <SystemClock_Config+0x104>)
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000820:	2301      	movs	r3, #1
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000824:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082e:	2302      	movs	r3, #2
 8000830:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000836:	2378      	movs	r3, #120	; 0x78
 8000838:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800083a:	2302      	movs	r3, #2
 800083c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000846:	230c      	movs	r3, #12
 8000848:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800084a:	2300      	movs	r3, #0
 800084c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	4618      	mov	r0, r3
 8000858:	f001 fcf8 	bl	800224c <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000862:	f000 f955 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000866:	233f      	movs	r3, #63	; 0x3f
 8000868:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2303      	movs	r3, #3
 800086c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000872:	2308      	movs	r3, #8
 8000874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800087e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000882:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2104      	movs	r1, #4
 800088c:	4618      	mov	r0, r3
 800088e:	f002 f90b 	bl	8002aa8 <HAL_RCC_ClockConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000898:	f000 f93a 	bl	8000b10 <Error_Handler>
  }
}
 800089c:	bf00      	nop
 800089e:	3770      	adds	r7, #112	; 0x70
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	58024800 	.word	0x58024800
 80008a8:	58000400 	.word	0x58000400
 80008ac:	58024400 	.word	0x58024400

080008b0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_ETH_Init+0x80>)
 80008b6:	4a1f      	ldr	r2, [pc, #124]	; (8000934 <MX_ETH_Init+0x84>)
 80008b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_ETH_Init+0x88>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <MX_ETH_Init+0x88>)
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <MX_ETH_Init+0x88>)
 80008c8:	22e1      	movs	r2, #225	; 0xe1
 80008ca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_ETH_Init+0x88>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <MX_ETH_Init+0x88>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_ETH_Init+0x88>)
 80008da:	2200      	movs	r2, #0
 80008dc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_ETH_Init+0x80>)
 80008e0:	4a15      	ldr	r2, [pc, #84]	; (8000938 <MX_ETH_Init+0x88>)
 80008e2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_ETH_Init+0x80>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_ETH_Init+0x80>)
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <MX_ETH_Init+0x8c>)
 80008ee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_ETH_Init+0x80>)
 80008f2:	4a13      	ldr	r2, [pc, #76]	; (8000940 <MX_ETH_Init+0x90>)
 80008f4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_ETH_Init+0x80>)
 80008f8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008fc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008fe:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_ETH_Init+0x80>)
 8000900:	f000 fcf0 	bl	80012e4 <HAL_ETH_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800090a:	f000 f901 	bl	8000b10 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800090e:	2238      	movs	r2, #56	; 0x38
 8000910:	2100      	movs	r1, #0
 8000912:	480c      	ldr	r0, [pc, #48]	; (8000944 <MX_ETH_Init+0x94>)
 8000914:	f005 fb5a 	bl	8005fcc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_ETH_Init+0x94>)
 800091a:	2221      	movs	r2, #33	; 0x21
 800091c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_ETH_Init+0x94>)
 8000920:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000924:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_ETH_Init+0x94>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	24000124 	.word	0x24000124
 8000934:	40028000 	.word	0x40028000
 8000938:	24000770 	.word	0x24000770
 800093c:	24000070 	.word	0x24000070
 8000940:	24000010 	.word	0x24000010
 8000944:	240000ec 	.word	0x240000ec

08000948 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800094e:	4a23      	ldr	r2, [pc, #140]	; (80009dc <MX_USART3_UART_Init+0x94>)
 8000950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000990:	4811      	ldr	r0, [pc, #68]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000992:	f003 ff7d 	bl	8004890 <HAL_UART_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800099c:	f000 f8b8 	bl	8000b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a0:	2100      	movs	r1, #0
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 80009a4:	f004 ff1a 	bl	80057dc <HAL_UARTEx_SetTxFifoThreshold>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009ae:	f000 f8af 	bl	8000b10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4808      	ldr	r0, [pc, #32]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 80009b6:	f004 ff4f 	bl	8005858 <HAL_UARTEx_SetRxFifoThreshold>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009c0:	f000 f8a6 	bl	8000b10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 80009c6:	f004 fed0 	bl	800576a <HAL_UARTEx_DisableFifoMode>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009d0:	f000 f89e 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	240001d4 	.word	0x240001d4
 80009dc:	40004800 	.word	0x40004800

080009e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e6:	4a16      	ldr	r2, [pc, #88]	; (8000a40 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ec:	2209      	movs	r2, #9
 80009ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009fe:	2202      	movs	r2, #2
 8000a00:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a28:	f001 fa5e 	bl	8001ee8 <HAL_PCD_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a32:	f000 f86d 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	24000264 	.word	0x24000264
 8000a40:	40080000 	.word	0x40080000

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	4a2e      	ldr	r2, [pc, #184]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	4a27      	ldr	r2, [pc, #156]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a78:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	4a1f      	ldr	r2, [pc, #124]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	4a10      	ldr	r2, [pc, #64]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000aca:	f043 0308 	orr.w	r3, r3, #8
 8000ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	f003 0308 	and.w	r3, r3, #8
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae6:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_GPIO_Init+0xc8>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

}
 8000afe:	bf00      	nop
 8000b00:	371c      	adds	r7, #28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	58024400 	.word	0x58024400

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <HAL_MspInit+0x30>)
 8000b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b28:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x30>)
 8000b2a:	f043 0302 	orr.w	r3, r3, #2
 8000b2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x30>)
 8000b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	58024400 	.word	0x58024400

08000b50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a59      	ldr	r2, [pc, #356]	; (8000cd4 <HAL_ETH_MspInit+0x184>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	f040 80ab 	bne.w	8000cca <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b74:	4b58      	ldr	r3, [pc, #352]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000b76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b7a:	4a57      	ldr	r2, [pc, #348]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b84:	4b54      	ldr	r3, [pc, #336]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000b86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b8e:	623b      	str	r3, [r7, #32]
 8000b90:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b92:	4b51      	ldr	r3, [pc, #324]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000b94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b98:	4a4f      	ldr	r2, [pc, #316]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ba2:	4b4d      	ldr	r3, [pc, #308]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000ba4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bb0:	4b49      	ldr	r3, [pc, #292]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000bb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb6:	4a48      	ldr	r2, [pc, #288]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bc0:	4b45      	ldr	r3, [pc, #276]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000bc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	4b42      	ldr	r3, [pc, #264]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	4a40      	ldr	r2, [pc, #256]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bde:	4b3e      	ldr	r3, [pc, #248]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b3a      	ldr	r3, [pc, #232]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	4a39      	ldr	r2, [pc, #228]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfc:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	4b33      	ldr	r3, [pc, #204]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a31      	ldr	r2, [pc, #196]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000c12:	f043 0302 	orr.w	r3, r3, #2
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	4a2a      	ldr	r2, [pc, #168]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c38:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <HAL_ETH_MspInit+0x188>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c46:	2332      	movs	r3, #50	; 0x32
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c56:	230b      	movs	r3, #11
 8000c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	481e      	ldr	r0, [pc, #120]	; (8000cdc <HAL_ETH_MspInit+0x18c>)
 8000c62:	f000 ff63 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c66:	2386      	movs	r3, #134	; 0x86
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c76:	230b      	movs	r3, #11
 8000c78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4817      	ldr	r0, [pc, #92]	; (8000ce0 <HAL_ETH_MspInit+0x190>)
 8000c82:	f000 ff53 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c98:	230b      	movs	r3, #11
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4810      	ldr	r0, [pc, #64]	; (8000ce4 <HAL_ETH_MspInit+0x194>)
 8000ca4:	f000 ff42 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ca8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cba:	230b      	movs	r3, #11
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <HAL_ETH_MspInit+0x198>)
 8000cc6:	f000 ff31 	bl	8001b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3738      	adds	r7, #56	; 0x38
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40028000 	.word	0x40028000
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020800 	.word	0x58020800
 8000ce0:	58020000 	.word	0x58020000
 8000ce4:	58020400 	.word	0x58020400
 8000ce8:	58021800 	.word	0x58021800

08000cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0b8      	sub	sp, #224	; 0xe0
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	22bc      	movs	r2, #188	; 0xbc
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f005 f95d 	bl	8005fcc <memset>
  if(huart->Instance==USART3)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a25      	ldr	r2, [pc, #148]	; (8000dac <HAL_UART_MspInit+0xc0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d142      	bne.n	8000da2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f002 fa48 	bl	80031c0 <HAL_RCCEx_PeriphCLKConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d36:	f7ff feeb 	bl	8000b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_UART_MspInit+0xc4>)
 8000d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d40:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <HAL_UART_MspInit+0xc4>)
 8000d42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d46:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_UART_MspInit+0xc4>)
 8000d4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_UART_MspInit+0xc4>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <HAL_UART_MspInit+0xc4>)
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_UART_MspInit+0xc4>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d90:	2307      	movs	r3, #7
 8000d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <HAL_UART_MspInit+0xc8>)
 8000d9e:	f000 fec5 	bl	8001b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	37e0      	adds	r7, #224	; 0xe0
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40004800 	.word	0x40004800
 8000db0:	58024400 	.word	0x58024400
 8000db4:	58020c00 	.word	0x58020c00

08000db8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b0b8      	sub	sp, #224	; 0xe0
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	22bc      	movs	r2, #188	; 0xbc
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f005 f8f7 	bl	8005fcc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a36      	ldr	r2, [pc, #216]	; (8000ebc <HAL_PCD_MspInit+0x104>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d165      	bne.n	8000eb4 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000de8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000dec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000df2:	2318      	movs	r3, #24
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000e02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e06:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000e0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 f9d1 	bl	80031c0 <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000e24:	f7ff fe74 	bl	8000b10 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e28:	f001 fa00 	bl	800222c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <HAL_PCD_MspInit+0x108>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	4a23      	ldr	r2, [pc, #140]	; (8000ec0 <HAL_PCD_MspInit+0x108>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3c:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_PCD_MspInit+0x108>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e4a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000e4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e64:	230a      	movs	r3, #10
 8000e66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4814      	ldr	r0, [pc, #80]	; (8000ec4 <HAL_PCD_MspInit+0x10c>)
 8000e72:	f000 fe5b 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <HAL_PCD_MspInit+0x10c>)
 8000e92:	f000 fe4b 	bl	8001b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_PCD_MspInit+0x108>)
 8000e98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e9c:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_PCD_MspInit+0x108>)
 8000e9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ea2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_PCD_MspInit+0x108>)
 8000ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	37e0      	adds	r7, #224	; 0xe0
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40080000 	.word	0x40080000
 8000ec0:	58024400 	.word	0x58024400
 8000ec4:	58020000 	.word	0x58020000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f89e 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f20:	f7ff fb5c 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f26:	490d      	ldr	r1, [pc, #52]	; (8000f5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f3c:	4c0a      	ldr	r4, [pc, #40]	; (8000f68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f005 f81b 	bl	8005f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff fbdb 	bl	8000708 <main>
  bx  lr
 8000f52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f54:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f5c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f60:	0800603c 	.word	0x0800603c
  ldr r2, =_sbss
 8000f64:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000f68:	2400077c 	.word	0x2400077c

08000f6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC3_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f76:	2003      	movs	r0, #3
 8000f78:	f000 f982 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f7c:	f001 ff4a 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8000f80:	4602      	mov	r2, r0
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_Init+0x68>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	0a1b      	lsrs	r3, r3, #8
 8000f88:	f003 030f 	and.w	r3, r3, #15
 8000f8c:	4913      	ldr	r1, [pc, #76]	; (8000fdc <HAL_Init+0x6c>)
 8000f8e:	5ccb      	ldrb	r3, [r1, r3]
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	fa22 f303 	lsr.w	r3, r2, r3
 8000f98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_Init+0x68>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_Init+0x6c>)
 8000fa4:	5cd3      	ldrb	r3, [r2, r3]
 8000fa6:	f003 031f 	and.w	r3, r3, #31
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <HAL_Init+0x70>)
 8000fb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <HAL_Init+0x74>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f814 	bl	8000fe8 <HAL_InitTick>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e002      	b.n	8000fd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fca:	f7ff fda7 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	08005ff4 	.word	0x08005ff4
 8000fe0:	24000004 	.word	0x24000004
 8000fe4:	24000000 	.word	0x24000000

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_InitTick+0x60>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e021      	b.n	8001040 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_InitTick+0x64>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_InitTick+0x60>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f959 	bl	80012ca <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f931 	bl	8001296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <HAL_InitTick+0x68>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2400000c 	.word	0x2400000c
 800104c:	24000000 	.word	0x24000000
 8001050:	24000008 	.word	0x24000008

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	2400000c 	.word	0x2400000c
 8001078:	24000778 	.word	0x24000778

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	24000778 	.word	0x24000778

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2400000c 	.word	0x2400000c

080010dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetREVID+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	0c1b      	lsrs	r3, r3, #16
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	5c001000 	.word	0x5c001000

080010f4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001104:	4904      	ldr	r1, [pc, #16]	; (8001118 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4313      	orrs	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	58000400 	.word	0x58000400

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <__NVIC_SetPriorityGrouping+0x40>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	4313      	orrs	r3, r2
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <__NVIC_SetPriorityGrouping+0x40>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00
 8001160:	05fa0000 	.word	0x05fa0000

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff8e 	bl	8001180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff47 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff5e 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff90 	bl	80011d4 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5f 	bl	8001180 <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffb2 	bl	800123c <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e0cf      	b.n	8001496 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d106      	bne.n	800130e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2223      	movs	r2, #35	; 0x23
 8001304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fc21 	bl	8000b50 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b64      	ldr	r3, [pc, #400]	; (80014a0 <HAL_ETH_Init+0x1bc>)
 8001310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001314:	4a62      	ldr	r2, [pc, #392]	; (80014a0 <HAL_ETH_Init+0x1bc>)
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800131e:	4b60      	ldr	r3, [pc, #384]	; (80014a0 <HAL_ETH_Init+0x1bc>)
 8001320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7a1b      	ldrb	r3, [r3, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d103      	bne.n	800133c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff fedd 	bl	80010f4 <HAL_SYSCFG_ETHInterfaceSelect>
 800133a:	e003      	b.n	8001344 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800133c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001340:	f7ff fed8 	bl	80010f4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001344:	4b57      	ldr	r3, [pc, #348]	; (80014a4 <HAL_ETH_Init+0x1c0>)
 8001346:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800135e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001360:	f7ff fe8c 	bl	800107c <HAL_GetTick>
 8001364:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001366:	e011      	b.n	800138c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001368:	f7ff fe88 	bl	800107c <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001376:	d909      	bls.n	800138c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2204      	movs	r2, #4
 800137c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	22e0      	movs	r2, #224	; 0xe0
 8001384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e084      	b.n	8001496 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1e4      	bne.n	8001368 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 f886 	bl	80014b0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013a4:	f001 feb0 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a3f      	ldr	r2, [pc, #252]	; (80014a8 <HAL_ETH_Init+0x1c4>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	0c9a      	lsrs	r2, r3, #18
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3a01      	subs	r2, #1
 80013b8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 fa71 	bl	80018a4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80013ce:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013de:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d009      	beq.n	8001402 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	22e0      	movs	r2, #224	; 0xe0
 80013fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e049      	b.n	8001496 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800140e:	4b27      	ldr	r3, [pc, #156]	; (80014ac <HAL_ETH_Init+0x1c8>)
 8001410:	4013      	ands	r3, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6952      	ldr	r2, [r2, #20]
 8001416:	0051      	lsls	r1, r2, #1
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	430b      	orrs	r3, r1
 800141e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001422:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 fad9 	bl	80019de <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 fb1f 	bl	8001a70 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	3305      	adds	r3, #5
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	021a      	lsls	r2, r3, #8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	3304      	adds	r3, #4
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	3303      	adds	r3, #3
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	061a      	lsls	r2, r3, #24
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	3302      	adds	r3, #2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	041b      	lsls	r3, r3, #16
 8001464:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	3301      	adds	r3, #1
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001470:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800147e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001480:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2210      	movs	r2, #16
 8001490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	58024400 	.word	0x58024400
 80014a4:	58000400 	.word	0x58000400
 80014a8:	431bde83 	.word	0x431bde83
 80014ac:	ffff8001 	.word	0xffff8001

080014b0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014ca:	f001 fe1d 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 80014ce:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4a1e      	ldr	r2, [pc, #120]	; (800154c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d908      	bls.n	80014ea <HAL_ETH_SetMDIOClockRange+0x3a>
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d804      	bhi.n	80014ea <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	e027      	b.n	800153a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	4a18      	ldr	r2, [pc, #96]	; (8001550 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d908      	bls.n	8001504 <HAL_ETH_SetMDIOClockRange+0x54>
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d204      	bcs.n	8001504 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	e01a      	b.n	800153a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4a13      	ldr	r2, [pc, #76]	; (8001554 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d303      	bcc.n	8001514 <HAL_ETH_SetMDIOClockRange+0x64>
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d911      	bls.n	8001538 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d908      	bls.n	800152e <HAL_ETH_SetMDIOClockRange+0x7e>
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <HAL_ETH_SetMDIOClockRange+0xac>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d804      	bhi.n	800152e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	e005      	b.n	800153a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	e000      	b.n	800153a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001538:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	01312cff 	.word	0x01312cff
 8001550:	02160ebf 	.word	0x02160ebf
 8001554:	03938700 	.word	0x03938700
 8001558:	05f5e0ff 	.word	0x05f5e0ff
 800155c:	08f0d17f 	.word	0x08f0d17f

08001560 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001572:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	791b      	ldrb	r3, [r3, #4]
 8001578:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800157a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	7b1b      	ldrb	r3, [r3, #12]
 8001580:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001582:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	7b5b      	ldrb	r3, [r3, #13]
 8001588:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800158a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	7b9b      	ldrb	r3, [r3, #14]
 8001590:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001592:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	7bdb      	ldrb	r3, [r3, #15]
 8001598:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800159a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	7c12      	ldrb	r2, [r2, #16]
 80015a0:	2a00      	cmp	r2, #0
 80015a2:	d102      	bne.n	80015aa <ETH_SetMACConfig+0x4a>
 80015a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015a8:	e000      	b.n	80015ac <ETH_SetMACConfig+0x4c>
 80015aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80015ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	7c52      	ldrb	r2, [r2, #17]
 80015b2:	2a00      	cmp	r2, #0
 80015b4:	d102      	bne.n	80015bc <ETH_SetMACConfig+0x5c>
 80015b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ba:	e000      	b.n	80015be <ETH_SetMACConfig+0x5e>
 80015bc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80015be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	7c9b      	ldrb	r3, [r3, #18]
 80015c4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80015c6:	431a      	orrs	r2, r3
               macconf->Speed |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80015cc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80015d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	7f1b      	ldrb	r3, [r3, #28]
 80015d8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80015da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	7f5b      	ldrb	r3, [r3, #29]
 80015e0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80015e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	7f92      	ldrb	r2, [r2, #30]
 80015e8:	2a00      	cmp	r2, #0
 80015ea:	d102      	bne.n	80015f2 <ETH_SetMACConfig+0x92>
 80015ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f0:	e000      	b.n	80015f4 <ETH_SetMACConfig+0x94>
 80015f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80015f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	7fdb      	ldrb	r3, [r3, #31]
 80015fa:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80015fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001604:	2a00      	cmp	r2, #0
 8001606:	d102      	bne.n	800160e <ETH_SetMACConfig+0xae>
 8001608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800160c:	e000      	b.n	8001610 <ETH_SetMACConfig+0xb0>
 800160e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001610:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001616:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800161e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001620:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001626:	4313      	orrs	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b56      	ldr	r3, [pc, #344]	; (800178c <ETH_SetMACConfig+0x22c>)
 8001632:	4013      	ands	r3, r2
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	68f9      	ldr	r1, [r7, #12]
 800163a:	430b      	orrs	r3, r1
 800163c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001642:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800164a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800164c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001654:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800165e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001660:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001668:	2a00      	cmp	r2, #0
 800166a:	d102      	bne.n	8001672 <ETH_SetMACConfig+0x112>
 800166c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001670:	e000      	b.n	8001674 <ETH_SetMACConfig+0x114>
 8001672:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001674:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800167a:	4313      	orrs	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	4b42      	ldr	r3, [pc, #264]	; (8001790 <ETH_SetMACConfig+0x230>)
 8001686:	4013      	ands	r3, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	68f9      	ldr	r1, [r7, #12]
 800168e:	430b      	orrs	r3, r1
 8001690:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001698:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800169e:	4313      	orrs	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <ETH_SetMACConfig+0x234>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	68f9      	ldr	r1, [r7, #12]
 80016b2:	430b      	orrs	r3, r1
 80016b4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016bc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d101      	bne.n	80016d2 <ETH_SetMACConfig+0x172>
 80016ce:	2280      	movs	r2, #128	; 0x80
 80016d0:	e000      	b.n	80016d4 <ETH_SetMACConfig+0x174>
 80016d2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80016d4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016da:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016dc:	4313      	orrs	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016e6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80016ea:	4013      	ands	r3, r2
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	68f9      	ldr	r1, [r7, #12]
 80016f2:	430b      	orrs	r3, r1
 80016f4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80016fc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001704:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001706:	4313      	orrs	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001712:	f023 0103 	bic.w	r1, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	430a      	orrs	r2, r1
 800171e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800172a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001746:	2a00      	cmp	r2, #0
 8001748:	d101      	bne.n	800174e <ETH_SetMACConfig+0x1ee>
 800174a:	2240      	movs	r2, #64	; 0x40
 800174c:	e000      	b.n	8001750 <ETH_SetMACConfig+0x1f0>
 800174e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001750:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001758:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800175a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001762:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001764:	4313      	orrs	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001770:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	430a      	orrs	r2, r1
 800177c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	00048083 	.word	0x00048083
 8001790:	c0f88000 	.word	0xc0f88000
 8001794:	fffffef0 	.word	0xfffffef0

08001798 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b38      	ldr	r3, [pc, #224]	; (8001890 <ETH_SetDMAConfig+0xf8>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	6811      	ldr	r1, [r2, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	430b      	orrs	r3, r1
 80017ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017be:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	791b      	ldrb	r3, [r3, #4]
 80017c4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017ca:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	7b1b      	ldrb	r3, [r3, #12]
 80017d0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <ETH_SetDMAConfig+0xfc>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	68f9      	ldr	r1, [r7, #12]
 80017ea:	430b      	orrs	r3, r1
 80017ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017f0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	7b5b      	ldrb	r3, [r3, #13]
 80017f6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80017fc:	4313      	orrs	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001808:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800180c:	4b22      	ldr	r3, [pc, #136]	; (8001898 <ETH_SetDMAConfig+0x100>)
 800180e:	4013      	ands	r3, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	68f9      	ldr	r1, [r7, #12]
 8001816:	430b      	orrs	r3, r1
 8001818:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800181c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	7d1b      	ldrb	r3, [r3, #20]
 8001828:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800182a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	7f5b      	ldrb	r3, [r3, #29]
 8001830:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001832:	4313      	orrs	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <ETH_SetDMAConfig+0x104>)
 8001844:	4013      	ands	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	68f9      	ldr	r1, [r7, #12]
 800184c:	430b      	orrs	r3, r1
 800184e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001852:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	7f1b      	ldrb	r3, [r3, #28]
 800185a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001860:	4313      	orrs	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <ETH_SetDMAConfig+0x108>)
 8001872:	4013      	ands	r3, r2
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	430b      	orrs	r3, r1
 800187c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001880:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	ffff87fd 	.word	0xffff87fd
 8001894:	ffff2ffe 	.word	0xffff2ffe
 8001898:	fffec000 	.word	0xfffec000
 800189c:	ffc0efef 	.word	0xffc0efef
 80018a0:	7fc0ffff 	.word	0x7fc0ffff

080018a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0a4      	sub	sp, #144	; 0x90
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80018ac:	2301      	movs	r3, #1
 80018ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018b2:	2300      	movs	r3, #0
 80018b4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80018c2:	2301      	movs	r3, #1
 80018c4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80018c8:	2301      	movs	r3, #1
 80018ca:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80018da:	2301      	movs	r3, #1
 80018dc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80018e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80018fc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001900:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800190c:	2301      	movs	r3, #1
 800190e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800191e:	2300      	movs	r3, #0
 8001920:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001922:	2300      	movs	r3, #0
 8001924:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001926:	2300      	movs	r3, #0
 8001928:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001936:	2301      	movs	r3, #1
 8001938:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800193c:	2320      	movs	r3, #32
 800193e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001942:	2301      	movs	r3, #1
 8001944:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800194e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001954:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001958:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001960:	2302      	movs	r3, #2
 8001962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001978:	2301      	movs	r3, #1
 800197a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800197e:	2300      	movs	r3, #0
 8001980:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001982:	2301      	movs	r3, #1
 8001984:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198c:	4619      	mov	r1, r3
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff fde6 	bl	8001560 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001994:	2301      	movs	r3, #1
 8001996:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001998:	2301      	movs	r3, #1
 800199a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80019c4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	4619      	mov	r1, r3
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fee1 	bl	8001798 <ETH_SetDMAConfig>
}
 80019d6:	bf00      	nop
 80019d8:	3790      	adds	r7, #144	; 0x90
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80019de:	b480      	push	{r7}
 80019e0:	b085      	sub	sp, #20
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	e01d      	b.n	8001a28 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68d9      	ldr	r1, [r3, #12]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a16:	68b9      	ldr	r1, [r7, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	3206      	adds	r2, #6
 8001a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3301      	adds	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d9de      	bls.n	80019ec <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2303      	movs	r3, #3
 8001a40:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a50:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a60:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e023      	b.n	8001ac6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6919      	ldr	r1, [r3, #16]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	3212      	adds	r2, #18
 8001abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d9d8      	bls.n	8001a7e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af2:	461a      	mov	r2, r3
 8001af4:	2303      	movs	r3, #3
 8001af6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691a      	ldr	r2, [r3, #16]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b06:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b3a:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <HAL_GPIO_Init+0x234>)
 8001b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b3e:	e194      	b.n	8001e6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2101      	movs	r1, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8186 	beq.w	8001e64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d005      	beq.n	8001b70 <HAL_GPIO_Init+0x44>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d130      	bne.n	8001bd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	f003 0201 	and.w	r2, r3, #1
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d017      	beq.n	8001c0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d123      	bne.n	8001c62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	08da      	lsrs	r2, r3, #3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3208      	adds	r2, #8
 8001c5c:	69b9      	ldr	r1, [r7, #24]
 8001c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0203 	and.w	r2, r3, #3
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80e0 	beq.w	8001e64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <HAL_GPIO_Init+0x238>)
 8001ca6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001caa:	4a2e      	ldr	r2, [pc, #184]	; (8001d64 <HAL_GPIO_Init+0x238>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <HAL_GPIO_Init+0x238>)
 8001cb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc2:	4a29      	ldr	r2, [pc, #164]	; (8001d68 <HAL_GPIO_Init+0x23c>)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	3302      	adds	r3, #2
 8001cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	220f      	movs	r2, #15
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a20      	ldr	r2, [pc, #128]	; (8001d6c <HAL_GPIO_Init+0x240>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d052      	beq.n	8001d94 <HAL_GPIO_Init+0x268>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_GPIO_Init+0x244>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d031      	beq.n	8001d5a <HAL_GPIO_Init+0x22e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <HAL_GPIO_Init+0x248>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d02b      	beq.n	8001d56 <HAL_GPIO_Init+0x22a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <HAL_GPIO_Init+0x24c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d025      	beq.n	8001d52 <HAL_GPIO_Init+0x226>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <HAL_GPIO_Init+0x250>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01f      	beq.n	8001d4e <HAL_GPIO_Init+0x222>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a1b      	ldr	r2, [pc, #108]	; (8001d80 <HAL_GPIO_Init+0x254>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d019      	beq.n	8001d4a <HAL_GPIO_Init+0x21e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a1a      	ldr	r2, [pc, #104]	; (8001d84 <HAL_GPIO_Init+0x258>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0x21a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_GPIO_Init+0x25c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00d      	beq.n	8001d42 <HAL_GPIO_Init+0x216>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a18      	ldr	r2, [pc, #96]	; (8001d8c <HAL_GPIO_Init+0x260>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <HAL_GPIO_Init+0x212>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <HAL_GPIO_Init+0x264>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_GPIO_Init+0x20e>
 8001d36:	2309      	movs	r3, #9
 8001d38:	e02d      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d3a:	230a      	movs	r3, #10
 8001d3c:	e02b      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d3e:	2308      	movs	r3, #8
 8001d40:	e029      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d42:	2307      	movs	r3, #7
 8001d44:	e027      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d46:	2306      	movs	r3, #6
 8001d48:	e025      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	e023      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d4e:	2304      	movs	r3, #4
 8001d50:	e021      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d52:	2303      	movs	r3, #3
 8001d54:	e01f      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e01d      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e01b      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d5e:	bf00      	nop
 8001d60:	58000080 	.word	0x58000080
 8001d64:	58024400 	.word	0x58024400
 8001d68:	58000400 	.word	0x58000400
 8001d6c:	58020000 	.word	0x58020000
 8001d70:	58020400 	.word	0x58020400
 8001d74:	58020800 	.word	0x58020800
 8001d78:	58020c00 	.word	0x58020c00
 8001d7c:	58021000 	.word	0x58021000
 8001d80:	58021400 	.word	0x58021400
 8001d84:	58021800 	.word	0x58021800
 8001d88:	58021c00 	.word	0x58021c00
 8001d8c:	58022000 	.word	0x58022000
 8001d90:	58022400 	.word	0x58022400
 8001d94:	2300      	movs	r3, #0
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	f002 0203 	and.w	r2, r2, #3
 8001d9c:	0092      	lsls	r2, r2, #2
 8001d9e:	4093      	lsls	r3, r2
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da6:	4938      	ldr	r1, [pc, #224]	; (8001e88 <HAL_GPIO_Init+0x35c>)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	3301      	adds	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f47f ae63 	bne.w	8001b40 <HAL_GPIO_Init+0x14>
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
 8001e7e:	3724      	adds	r7, #36	; 0x24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	58000400 	.word	0x58000400

08001e8c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001e94:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <HAL_HSEM_FastTake+0x2c>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3320      	adds	r3, #32
 8001e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_HSEM_FastTake+0x30>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d101      	bne.n	8001ea8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e000      	b.n	8001eaa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	58026400 	.word	0x58026400
 8001ebc:	80000300 	.word	0x80000300

08001ec0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001eca:	4906      	ldr	r1, [pc, #24]	; (8001ee4 <HAL_HSEM_Release+0x24>)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	58026400 	.word	0x58026400

08001ee8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eea:	b08f      	sub	sp, #60	; 0x3c
 8001eec:	af0a      	add	r7, sp, #40	; 0x28
 8001eee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e116      	b.n	8002128 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d106      	bne.n	8001f1a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7fe ff4f 	bl	8000db8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d102      	bne.n	8001f34 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f003 fd87 	bl	8005a4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	687e      	ldr	r6, [r7, #4]
 8001f46:	466d      	mov	r5, sp
 8001f48:	f106 0410 	add.w	r4, r6, #16
 8001f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f58:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f5c:	1d33      	adds	r3, r6, #4
 8001f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f60:	6838      	ldr	r0, [r7, #0]
 8001f62:	f003 fd05 	bl	8005970 <USB_CoreInit>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0d7      	b.n	8002128 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fd75 	bl	8005a6e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	e04a      	b.n	8002020 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	333d      	adds	r3, #61	; 0x3d
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	333c      	adds	r3, #60	; 0x3c
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	b298      	uxth	r0, r3
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3344      	adds	r3, #68	; 0x44
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3340      	adds	r3, #64	; 0x40
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	3348      	adds	r3, #72	; 0x48
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	334c      	adds	r3, #76	; 0x4c
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	3354      	adds	r3, #84	; 0x54
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	3301      	adds	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	d3af      	bcc.n	8001f8a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800202a:	2300      	movs	r3, #0
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	e044      	b.n	80020ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	3301      	adds	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d3b5      	bcc.n	8002030 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	687e      	ldr	r6, [r7, #4]
 80020cc:	466d      	mov	r5, sp
 80020ce:	f106 0410 	add.w	r4, r6, #16
 80020d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020de:	e885 0003 	stmia.w	r5, {r0, r1}
 80020e2:	1d33      	adds	r3, r6, #4
 80020e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e6:	6838      	ldr	r0, [r7, #0]
 80020e8:	f003 fd0e 	bl	8005b08 <USB_DevInit>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e014      	b.n	8002128 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	2b01      	cmp	r3, #1
 8002114:	d102      	bne.n	800211c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f80a 	bl	8002130 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f003 fecc 	bl	8005ebe <USB_DevDisconnect>

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002130 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_PCDEx_ActivateLPM+0x44>)
 8002160:	4313      	orrs	r3, r2
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	10000003 	.word	0x10000003

08002178 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002180:	4b29      	ldr	r3, [pc, #164]	; (8002228 <HAL_PWREx_ConfigSupply+0xb0>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	2b06      	cmp	r3, #6
 800218a:	d00a      	beq.n	80021a2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800218c:	4b26      	ldr	r3, [pc, #152]	; (8002228 <HAL_PWREx_ConfigSupply+0xb0>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	429a      	cmp	r2, r3
 8002198:	d001      	beq.n	800219e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e040      	b.n	8002220 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	e03e      	b.n	8002220 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021a2:	4b21      	ldr	r3, [pc, #132]	; (8002228 <HAL_PWREx_ConfigSupply+0xb0>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80021aa:	491f      	ldr	r1, [pc, #124]	; (8002228 <HAL_PWREx_ConfigSupply+0xb0>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021b2:	f7fe ff63 	bl	800107c <HAL_GetTick>
 80021b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021b8:	e009      	b.n	80021ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021ba:	f7fe ff5f 	bl	800107c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021c8:	d901      	bls.n	80021ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e028      	b.n	8002220 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_PWREx_ConfigSupply+0xb0>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021da:	d1ee      	bne.n	80021ba <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b1e      	cmp	r3, #30
 80021e0:	d008      	beq.n	80021f4 <HAL_PWREx_ConfigSupply+0x7c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b2e      	cmp	r3, #46	; 0x2e
 80021e6:	d005      	beq.n	80021f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b1d      	cmp	r3, #29
 80021ec:	d002      	beq.n	80021f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b2d      	cmp	r3, #45	; 0x2d
 80021f2:	d114      	bne.n	800221e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80021f4:	f7fe ff42 	bl	800107c <HAL_GetTick>
 80021f8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021fa:	e009      	b.n	8002210 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021fc:	f7fe ff3e 	bl	800107c <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800220a:	d901      	bls.n	8002210 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e007      	b.n	8002220 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_PWREx_ConfigSupply+0xb0>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221c:	d1ee      	bne.n	80021fc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	58024800 	.word	0x58024800

0800222c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a04      	ldr	r2, [pc, #16]	; (8002248 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	58024800 	.word	0x58024800

0800224c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08c      	sub	sp, #48	; 0x30
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	f000 bc1d 	b.w	8002a9a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8087 	beq.w	800237c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800226e:	4b99      	ldr	r3, [pc, #612]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002278:	4b96      	ldr	r3, [pc, #600]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002280:	2b10      	cmp	r3, #16
 8002282:	d007      	beq.n	8002294 <HAL_RCC_OscConfig+0x48>
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	2b18      	cmp	r3, #24
 8002288:	d110      	bne.n	80022ac <HAL_RCC_OscConfig+0x60>
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d10b      	bne.n	80022ac <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002294:	4b8f      	ldr	r3, [pc, #572]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d06c      	beq.n	800237a <HAL_RCC_OscConfig+0x12e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d168      	bne.n	800237a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e3f6      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d106      	bne.n	80022c4 <HAL_RCC_OscConfig+0x78>
 80022b6:	4b87      	ldr	r3, [pc, #540]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a86      	ldr	r2, [pc, #536]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e02e      	b.n	8002322 <HAL_RCC_OscConfig+0xd6>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10c      	bne.n	80022e6 <HAL_RCC_OscConfig+0x9a>
 80022cc:	4b81      	ldr	r3, [pc, #516]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a80      	ldr	r2, [pc, #512]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80022d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b7e      	ldr	r3, [pc, #504]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a7d      	ldr	r2, [pc, #500]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80022de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e01d      	b.n	8002322 <HAL_RCC_OscConfig+0xd6>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ee:	d10c      	bne.n	800230a <HAL_RCC_OscConfig+0xbe>
 80022f0:	4b78      	ldr	r3, [pc, #480]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a77      	ldr	r2, [pc, #476]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80022f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b75      	ldr	r3, [pc, #468]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a74      	ldr	r2, [pc, #464]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 8002302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	e00b      	b.n	8002322 <HAL_RCC_OscConfig+0xd6>
 800230a:	4b72      	ldr	r3, [pc, #456]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a71      	ldr	r2, [pc, #452]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 8002310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a6e      	ldr	r2, [pc, #440]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 800231c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d013      	beq.n	8002352 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7fe fea7 	bl	800107c <HAL_GetTick>
 800232e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002332:	f7fe fea3 	bl	800107c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b64      	cmp	r3, #100	; 0x64
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e3aa      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002344:	4b63      	ldr	r3, [pc, #396]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0xe6>
 8002350:	e014      	b.n	800237c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fe fe93 	bl	800107c <HAL_GetTick>
 8002356:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235a:	f7fe fe8f 	bl	800107c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b64      	cmp	r3, #100	; 0x64
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e396      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800236c:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x10e>
 8002378:	e000      	b.n	800237c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 80cb 	beq.w	8002520 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238a:	4b52      	ldr	r3, [pc, #328]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002392:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002394:	4b4f      	ldr	r3, [pc, #316]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_RCC_OscConfig+0x164>
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	2b18      	cmp	r3, #24
 80023a4:	d156      	bne.n	8002454 <HAL_RCC_OscConfig+0x208>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d151      	bne.n	8002454 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b0:	4b48      	ldr	r3, [pc, #288]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_OscConfig+0x17c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e368      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023c8:	4b42      	ldr	r3, [pc, #264]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 0219 	bic.w	r2, r3, #25
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	493f      	ldr	r1, [pc, #252]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023da:	f7fe fe4f 	bl	800107c <HAL_GetTick>
 80023de:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e2:	f7fe fe4b 	bl	800107c <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e352      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023f4:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002400:	f7fe fe6c 	bl	80010dc <HAL_GetREVID>
 8002404:	4603      	mov	r3, r0
 8002406:	f241 0203 	movw	r2, #4099	; 0x1003
 800240a:	4293      	cmp	r3, r2
 800240c:	d817      	bhi.n	800243e <HAL_RCC_OscConfig+0x1f2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b40      	cmp	r3, #64	; 0x40
 8002414:	d108      	bne.n	8002428 <HAL_RCC_OscConfig+0x1dc>
 8002416:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800241e:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 8002420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002424:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002426:	e07b      	b.n	8002520 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002428:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	031b      	lsls	r3, r3, #12
 8002436:	4927      	ldr	r1, [pc, #156]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800243c:	e070      	b.n	8002520 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	061b      	lsls	r3, r3, #24
 800244c:	4921      	ldr	r1, [pc, #132]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002452:	e065      	b.n	8002520 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d048      	beq.n	80024ee <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800245c:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 0219 	bic.w	r2, r3, #25
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	491a      	ldr	r1, [pc, #104]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246e:	f7fe fe05 	bl	800107c <HAL_GetTick>
 8002472:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002476:	f7fe fe01 	bl	800107c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e308      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002494:	f7fe fe22 	bl	80010dc <HAL_GetREVID>
 8002498:	4603      	mov	r3, r0
 800249a:	f241 0203 	movw	r2, #4099	; 0x1003
 800249e:	4293      	cmp	r3, r2
 80024a0:	d81a      	bhi.n	80024d8 <HAL_RCC_OscConfig+0x28c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d108      	bne.n	80024bc <HAL_RCC_OscConfig+0x270>
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024b2:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80024b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b8:	6053      	str	r3, [r2, #4]
 80024ba:	e031      	b.n	8002520 <HAL_RCC_OscConfig+0x2d4>
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	031b      	lsls	r3, r3, #12
 80024ca:	4902      	ldr	r1, [pc, #8]	; (80024d4 <HAL_RCC_OscConfig+0x288>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
 80024d0:	e026      	b.n	8002520 <HAL_RCC_OscConfig+0x2d4>
 80024d2:	bf00      	nop
 80024d4:	58024400 	.word	0x58024400
 80024d8:	4b9a      	ldr	r3, [pc, #616]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	061b      	lsls	r3, r3, #24
 80024e6:	4997      	ldr	r1, [pc, #604]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
 80024ec:	e018      	b.n	8002520 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ee:	4b95      	ldr	r3, [pc, #596]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a94      	ldr	r2, [pc, #592]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7fe fdbf 	bl	800107c <HAL_GetTick>
 80024fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002502:	f7fe fdbb 	bl	800107c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e2c2      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002514:	4b8b      	ldr	r3, [pc, #556]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f0      	bne.n	8002502 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80a9 	beq.w	8002680 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252e:	4b85      	ldr	r3, [pc, #532]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002536:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002538:	4b82      	ldr	r3, [pc, #520]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2b08      	cmp	r3, #8
 8002542:	d007      	beq.n	8002554 <HAL_RCC_OscConfig+0x308>
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2b18      	cmp	r3, #24
 8002548:	d13a      	bne.n	80025c0 <HAL_RCC_OscConfig+0x374>
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d135      	bne.n	80025c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002554:	4b7b      	ldr	r3, [pc, #492]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_OscConfig+0x320>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b80      	cmp	r3, #128	; 0x80
 8002566:	d001      	beq.n	800256c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e296      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800256c:	f7fe fdb6 	bl	80010dc <HAL_GetREVID>
 8002570:	4603      	mov	r3, r0
 8002572:	f241 0203 	movw	r2, #4099	; 0x1003
 8002576:	4293      	cmp	r3, r2
 8002578:	d817      	bhi.n	80025aa <HAL_RCC_OscConfig+0x35e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	2b20      	cmp	r3, #32
 8002580:	d108      	bne.n	8002594 <HAL_RCC_OscConfig+0x348>
 8002582:	4b70      	ldr	r3, [pc, #448]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800258a:	4a6e      	ldr	r2, [pc, #440]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 800258c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002590:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002592:	e075      	b.n	8002680 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002594:	4b6b      	ldr	r3, [pc, #428]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	069b      	lsls	r3, r3, #26
 80025a2:	4968      	ldr	r1, [pc, #416]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025a8:	e06a      	b.n	8002680 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025aa:	4b66      	ldr	r3, [pc, #408]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	061b      	lsls	r3, r3, #24
 80025b8:	4962      	ldr	r1, [pc, #392]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025be:	e05f      	b.n	8002680 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d042      	beq.n	800264e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025c8:	4b5e      	ldr	r3, [pc, #376]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a5d      	ldr	r2, [pc, #372]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 80025ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe fd52 	bl	800107c <HAL_GetTick>
 80025d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80025dc:	f7fe fd4e 	bl	800107c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e255      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025ee:	4b55      	ldr	r3, [pc, #340]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025fa:	f7fe fd6f 	bl	80010dc <HAL_GetREVID>
 80025fe:	4603      	mov	r3, r0
 8002600:	f241 0203 	movw	r2, #4099	; 0x1003
 8002604:	4293      	cmp	r3, r2
 8002606:	d817      	bhi.n	8002638 <HAL_RCC_OscConfig+0x3ec>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	2b20      	cmp	r3, #32
 800260e:	d108      	bne.n	8002622 <HAL_RCC_OscConfig+0x3d6>
 8002610:	4b4c      	ldr	r3, [pc, #304]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002618:	4a4a      	ldr	r2, [pc, #296]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 800261a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800261e:	6053      	str	r3, [r2, #4]
 8002620:	e02e      	b.n	8002680 <HAL_RCC_OscConfig+0x434>
 8002622:	4b48      	ldr	r3, [pc, #288]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	069b      	lsls	r3, r3, #26
 8002630:	4944      	ldr	r1, [pc, #272]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
 8002636:	e023      	b.n	8002680 <HAL_RCC_OscConfig+0x434>
 8002638:	4b42      	ldr	r3, [pc, #264]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	493f      	ldr	r1, [pc, #252]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002648:	4313      	orrs	r3, r2
 800264a:	60cb      	str	r3, [r1, #12]
 800264c:	e018      	b.n	8002680 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800264e:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a3c      	ldr	r2, [pc, #240]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7fe fd0f 	bl	800107c <HAL_GetTick>
 800265e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002662:	f7fe fd0b 	bl	800107c <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e212      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002674:	4b33      	ldr	r3, [pc, #204]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d036      	beq.n	80026fa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d019      	beq.n	80026c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002694:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002698:	4a2a      	ldr	r2, [pc, #168]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7fe fcec 	bl	800107c <HAL_GetTick>
 80026a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a8:	f7fe fce8 	bl	800107c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e1ef      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026ba:	4b22      	ldr	r3, [pc, #136]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 80026bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x45c>
 80026c6:	e018      	b.n	80026fa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c8:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 80026ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026cc:	4a1d      	ldr	r2, [pc, #116]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe fcd2 	bl	800107c <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026dc:	f7fe fcce 	bl	800107c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e1d5      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 80026f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d039      	beq.n	800277a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d01c      	beq.n	8002748 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800270e:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002714:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002718:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800271a:	f7fe fcaf 	bl	800107c <HAL_GetTick>
 800271e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002722:	f7fe fcab 	bl	800107c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e1b2      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_RCC_OscConfig+0x4f8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x4d6>
 8002740:	e01b      	b.n	800277a <HAL_RCC_OscConfig+0x52e>
 8002742:	bf00      	nop
 8002744:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002748:	4b9b      	ldr	r3, [pc, #620]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a9a      	ldr	r2, [pc, #616]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 800274e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002752:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002754:	f7fe fc92 	bl	800107c <HAL_GetTick>
 8002758:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800275c:	f7fe fc8e 	bl	800107c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e195      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800276e:	4b92      	ldr	r3, [pc, #584]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 8081 	beq.w	800288a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002788:	4b8c      	ldr	r3, [pc, #560]	; (80029bc <HAL_RCC_OscConfig+0x770>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a8b      	ldr	r2, [pc, #556]	; (80029bc <HAL_RCC_OscConfig+0x770>)
 800278e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002792:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002794:	f7fe fc72 	bl	800107c <HAL_GetTick>
 8002798:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800279c:	f7fe fc6e 	bl	800107c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e175      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ae:	4b83      	ldr	r3, [pc, #524]	; (80029bc <HAL_RCC_OscConfig+0x770>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d106      	bne.n	80027d0 <HAL_RCC_OscConfig+0x584>
 80027c2:	4b7d      	ldr	r3, [pc, #500]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c6:	4a7c      	ldr	r2, [pc, #496]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6713      	str	r3, [r2, #112]	; 0x70
 80027ce:	e02d      	b.n	800282c <HAL_RCC_OscConfig+0x5e0>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10c      	bne.n	80027f2 <HAL_RCC_OscConfig+0x5a6>
 80027d8:	4b77      	ldr	r3, [pc, #476]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a76      	ldr	r2, [pc, #472]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	4b74      	ldr	r3, [pc, #464]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	4a73      	ldr	r2, [pc, #460]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 80027ea:	f023 0304 	bic.w	r3, r3, #4
 80027ee:	6713      	str	r3, [r2, #112]	; 0x70
 80027f0:	e01c      	b.n	800282c <HAL_RCC_OscConfig+0x5e0>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b05      	cmp	r3, #5
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x5c8>
 80027fa:	4b6f      	ldr	r3, [pc, #444]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a6e      	ldr	r2, [pc, #440]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
 8002806:	4b6c      	ldr	r3, [pc, #432]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	4a6b      	ldr	r2, [pc, #428]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6713      	str	r3, [r2, #112]	; 0x70
 8002812:	e00b      	b.n	800282c <HAL_RCC_OscConfig+0x5e0>
 8002814:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	4a67      	ldr	r2, [pc, #412]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 800281a:	f023 0301 	bic.w	r3, r3, #1
 800281e:	6713      	str	r3, [r2, #112]	; 0x70
 8002820:	4b65      	ldr	r3, [pc, #404]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002824:	4a64      	ldr	r2, [pc, #400]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002826:	f023 0304 	bic.w	r3, r3, #4
 800282a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d015      	beq.n	8002860 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7fe fc22 	bl	800107c <HAL_GetTick>
 8002838:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7fe fc1e 	bl	800107c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e123      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002852:	4b59      	ldr	r3, [pc, #356]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0ee      	beq.n	800283c <HAL_RCC_OscConfig+0x5f0>
 800285e:	e014      	b.n	800288a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002860:	f7fe fc0c 	bl	800107c <HAL_GetTick>
 8002864:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002866:	e00a      	b.n	800287e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002868:	f7fe fc08 	bl	800107c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e10d      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800287e:	4b4e      	ldr	r3, [pc, #312]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1ee      	bne.n	8002868 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8102 	beq.w	8002a98 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002894:	4b48      	ldr	r3, [pc, #288]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800289c:	2b18      	cmp	r3, #24
 800289e:	f000 80bd 	beq.w	8002a1c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	f040 809e 	bne.w	80029e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ac:	4b42      	ldr	r3, [pc, #264]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a41      	ldr	r2, [pc, #260]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 80028b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fbe0 	bl	800107c <HAL_GetTick>
 80028bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe fbdc 	bl	800107c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0e3      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028d2:	4b39      	ldr	r3, [pc, #228]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028de:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 80028e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028e2:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <HAL_RCC_OscConfig+0x774>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028ee:	0112      	lsls	r2, r2, #4
 80028f0:	430a      	orrs	r2, r1
 80028f2:	4931      	ldr	r1, [pc, #196]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	628b      	str	r3, [r1, #40]	; 0x28
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	3b01      	subs	r3, #1
 80028fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002906:	3b01      	subs	r3, #1
 8002908:	025b      	lsls	r3, r3, #9
 800290a:	b29b      	uxth	r3, r3
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002912:	3b01      	subs	r3, #1
 8002914:	041b      	lsls	r3, r3, #16
 8002916:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	3b01      	subs	r3, #1
 8002922:	061b      	lsls	r3, r3, #24
 8002924:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002928:	4923      	ldr	r1, [pc, #140]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 800292a:	4313      	orrs	r3, r2
 800292c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800292e:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	4a21      	ldr	r2, [pc, #132]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800293a:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 800293c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800293e:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <HAL_RCC_OscConfig+0x778>)
 8002940:	4013      	ands	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002946:	00d2      	lsls	r2, r2, #3
 8002948:	491b      	ldr	r1, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 800294a:	4313      	orrs	r3, r2
 800294c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	f023 020c 	bic.w	r2, r3, #12
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4917      	ldr	r1, [pc, #92]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 800295c:	4313      	orrs	r3, r2
 800295e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002960:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	f023 0202 	bic.w	r2, r3, #2
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	4912      	ldr	r1, [pc, #72]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 800296e:	4313      	orrs	r3, r2
 8002970:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	4a10      	ldr	r2, [pc, #64]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	4a0d      	ldr	r2, [pc, #52]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002988:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800298a:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002994:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	4a07      	ldr	r2, [pc, #28]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <HAL_RCC_OscConfig+0x76c>)
 80029a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fe fb65 	bl	800107c <HAL_GetTick>
 80029b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029b4:	e011      	b.n	80029da <HAL_RCC_OscConfig+0x78e>
 80029b6:	bf00      	nop
 80029b8:	58024400 	.word	0x58024400
 80029bc:	58024800 	.word	0x58024800
 80029c0:	fffffc0c 	.word	0xfffffc0c
 80029c4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c8:	f7fe fb58 	bl	800107c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e05f      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029da:	4b32      	ldr	r3, [pc, #200]	; (8002aa4 <HAL_RCC_OscConfig+0x858>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x77c>
 80029e6:	e057      	b.n	8002a98 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e8:	4b2e      	ldr	r3, [pc, #184]	; (8002aa4 <HAL_RCC_OscConfig+0x858>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2d      	ldr	r2, [pc, #180]	; (8002aa4 <HAL_RCC_OscConfig+0x858>)
 80029ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fb42 	bl	800107c <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe fb3e 	bl	800107c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e045      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a0e:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <HAL_RCC_OscConfig+0x858>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x7b0>
 8002a1a:	e03d      	b.n	8002a98 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a1c:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_RCC_OscConfig+0x858>)
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_RCC_OscConfig+0x858>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d031      	beq.n	8002a94 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f003 0203 	and.w	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d12a      	bne.n	8002a94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d122      	bne.n	8002a94 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d11a      	bne.n	8002a94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	0a5b      	lsrs	r3, r3, #9
 8002a62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d111      	bne.n	8002a94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	0c1b      	lsrs	r3, r3, #16
 8002a74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d108      	bne.n	8002a94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	0e1b      	lsrs	r3, r3, #24
 8002a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3730      	adds	r7, #48	; 0x30
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	58024400 	.word	0x58024400

08002aa8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e19c      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002abc:	4b8a      	ldr	r3, [pc, #552]	; (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d910      	bls.n	8002aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b87      	ldr	r3, [pc, #540]	; (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 020f 	bic.w	r2, r3, #15
 8002ad2:	4985      	ldr	r1, [pc, #532]	; (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	4b83      	ldr	r3, [pc, #524]	; (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e184      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d010      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	4b7b      	ldr	r3, [pc, #492]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d908      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b08:	4b78      	ldr	r3, [pc, #480]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	4975      	ldr	r1, [pc, #468]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695a      	ldr	r2, [r3, #20]
 8002b2a:	4b70      	ldr	r3, [pc, #448]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d908      	bls.n	8002b48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b36:	4b6d      	ldr	r3, [pc, #436]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	496a      	ldr	r1, [pc, #424]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d010      	beq.n	8002b76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699a      	ldr	r2, [r3, #24]
 8002b58:	4b64      	ldr	r3, [pc, #400]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d908      	bls.n	8002b76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b64:	4b61      	ldr	r3, [pc, #388]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	495e      	ldr	r1, [pc, #376]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d010      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	4b59      	ldr	r3, [pc, #356]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d908      	bls.n	8002ba4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b92:	4b56      	ldr	r3, [pc, #344]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	4953      	ldr	r1, [pc, #332]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d010      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	4b4d      	ldr	r3, [pc, #308]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d908      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc0:	4b4a      	ldr	r3, [pc, #296]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f023 020f 	bic.w	r2, r3, #15
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4947      	ldr	r1, [pc, #284]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d055      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002bde:	4b43      	ldr	r3, [pc, #268]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4940      	ldr	r1, [pc, #256]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d107      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bf8:	4b3c      	ldr	r3, [pc, #240]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d121      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0f6      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d107      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c10:	4b36      	ldr	r3, [pc, #216]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d115      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0ea      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c28:	4b30      	ldr	r3, [pc, #192]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0de      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c38:	4b2c      	ldr	r3, [pc, #176]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0d6      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c48:	4b28      	ldr	r3, [pc, #160]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f023 0207 	bic.w	r2, r3, #7
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4925      	ldr	r1, [pc, #148]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5a:	f7fe fa0f 	bl	800107c <HAL_GetTick>
 8002c5e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c60:	e00a      	b.n	8002c78 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c62:	f7fe fa0b 	bl	800107c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e0be      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c78:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d1eb      	bne.n	8002c62 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d010      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	4b14      	ldr	r3, [pc, #80]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d208      	bcs.n	8002cb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	f023 020f 	bic.w	r2, r3, #15
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	490e      	ldr	r1, [pc, #56]	; (8002cec <HAL_RCC_ClockConfig+0x244>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d214      	bcs.n	8002cf0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f023 020f 	bic.w	r2, r3, #15
 8002cce:	4906      	ldr	r1, [pc, #24]	; (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <HAL_RCC_ClockConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e086      	b.n	8002df6 <HAL_RCC_ClockConfig+0x34e>
 8002ce8:	52002000 	.word	0x52002000
 8002cec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	4b3f      	ldr	r3, [pc, #252]	; (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d208      	bcs.n	8002d1e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d0c:	4b3c      	ldr	r3, [pc, #240]	; (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	4939      	ldr	r1, [pc, #228]	; (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d010      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d208      	bcs.n	8002d4c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d3a:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	492e      	ldr	r1, [pc, #184]	; (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d010      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	4b28      	ldr	r3, [pc, #160]	; (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d208      	bcs.n	8002d7a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d68:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	4922      	ldr	r1, [pc, #136]	; (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d010      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d208      	bcs.n	8002da8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d96:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	4917      	ldr	r1, [pc, #92]	; (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002da8:	f000 f834 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	4912      	ldr	r1, [pc, #72]	; (8002e04 <HAL_RCC_ClockConfig+0x35c>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dc6:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <HAL_RCC_ClockConfig+0x358>)
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	4a0d      	ldr	r2, [pc, #52]	; (8002e04 <HAL_RCC_ClockConfig+0x35c>)
 8002dd0:	5cd3      	ldrb	r3, [r2, r3]
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ddc:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <HAL_RCC_ClockConfig+0x360>)
 8002dde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002de0:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <HAL_RCC_ClockConfig+0x364>)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_RCC_ClockConfig+0x368>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe f8fc 	bl	8000fe8 <HAL_InitTick>
 8002df0:	4603      	mov	r3, r0
 8002df2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	58024400 	.word	0x58024400
 8002e04:	08005ff4 	.word	0x08005ff4
 8002e08:	24000004 	.word	0x24000004
 8002e0c:	24000000 	.word	0x24000000
 8002e10:	24000008 	.word	0x24000008

08002e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e1a:	4bb3      	ldr	r3, [pc, #716]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e22:	2b18      	cmp	r3, #24
 8002e24:	f200 8155 	bhi.w	80030d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e95 	.word	0x08002e95
 8002e34:	080030d3 	.word	0x080030d3
 8002e38:	080030d3 	.word	0x080030d3
 8002e3c:	080030d3 	.word	0x080030d3
 8002e40:	080030d3 	.word	0x080030d3
 8002e44:	080030d3 	.word	0x080030d3
 8002e48:	080030d3 	.word	0x080030d3
 8002e4c:	080030d3 	.word	0x080030d3
 8002e50:	08002ebb 	.word	0x08002ebb
 8002e54:	080030d3 	.word	0x080030d3
 8002e58:	080030d3 	.word	0x080030d3
 8002e5c:	080030d3 	.word	0x080030d3
 8002e60:	080030d3 	.word	0x080030d3
 8002e64:	080030d3 	.word	0x080030d3
 8002e68:	080030d3 	.word	0x080030d3
 8002e6c:	080030d3 	.word	0x080030d3
 8002e70:	08002ec1 	.word	0x08002ec1
 8002e74:	080030d3 	.word	0x080030d3
 8002e78:	080030d3 	.word	0x080030d3
 8002e7c:	080030d3 	.word	0x080030d3
 8002e80:	080030d3 	.word	0x080030d3
 8002e84:	080030d3 	.word	0x080030d3
 8002e88:	080030d3 	.word	0x080030d3
 8002e8c:	080030d3 	.word	0x080030d3
 8002e90:	08002ec7 	.word	0x08002ec7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e94:	4b94      	ldr	r3, [pc, #592]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ea0:	4b91      	ldr	r3, [pc, #580]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	08db      	lsrs	r3, r3, #3
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	4a90      	ldr	r2, [pc, #576]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002eb2:	e111      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002eb4:	4b8d      	ldr	r3, [pc, #564]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eb6:	61bb      	str	r3, [r7, #24]
    break;
 8002eb8:	e10e      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002eba:	4b8d      	ldr	r3, [pc, #564]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ebc:	61bb      	str	r3, [r7, #24]
    break;
 8002ebe:	e10b      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002ec0:	4b8c      	ldr	r3, [pc, #560]	; (80030f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ec2:	61bb      	str	r3, [r7, #24]
    break;
 8002ec4:	e108      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ec6:	4b88      	ldr	r3, [pc, #544]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002ed0:	4b85      	ldr	r3, [pc, #532]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	091b      	lsrs	r3, r3, #4
 8002ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eda:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002edc:	4b82      	ldr	r3, [pc, #520]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ee6:	4b80      	ldr	r3, [pc, #512]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eea:	08db      	lsrs	r3, r3, #3
 8002eec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80e1 	beq.w	80030cc <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	f000 8083 	beq.w	8003018 <HAL_RCC_GetSysClockFreq+0x204>
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	f200 80a1 	bhi.w	800305c <HAL_RCC_GetSysClockFreq+0x248>
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x114>
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d056      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f26:	e099      	b.n	800305c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f28:	4b6f      	ldr	r3, [pc, #444]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d02d      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f34:	4b6c      	ldr	r3, [pc, #432]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	08db      	lsrs	r3, r3, #3
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	4a6b      	ldr	r2, [pc, #428]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
 8002f44:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	ee07 3a90 	vmov	s15, r3
 8002f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f5e:	4b62      	ldr	r3, [pc, #392]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f72:	eddf 5a61 	vldr	s11, [pc, #388]	; 80030f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002f8e:	e087      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80030fc <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa2:	4b51      	ldr	r3, [pc, #324]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002faa:	ee07 3a90 	vmov	s15, r3
 8002fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fb6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80030f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fd2:	e065      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fde:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003100 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe6:	4b40      	ldr	r3, [pc, #256]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ffa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80030f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800300a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800300e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003016:	e043      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	ee07 3a90 	vmov	s15, r3
 800301e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003022:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003104 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800302a:	4b2f      	ldr	r3, [pc, #188]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800303a:	ed97 6a02 	vldr	s12, [r7, #8]
 800303e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80030f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800304a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800304e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800305a:	e021      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003066:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003100 <HAL_RCC_GetSysClockFreq+0x2ec>
 800306a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800307e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003082:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80030f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800308a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800308e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800309e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80030a0:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	0a5b      	lsrs	r3, r3, #9
 80030a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030aa:	3301      	adds	r3, #1
 80030ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	ee07 3a90 	vmov	s15, r3
 80030b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80030bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030c4:	ee17 3a90 	vmov	r3, s15
 80030c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80030ca:	e005      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61bb      	str	r3, [r7, #24]
    break;
 80030d0:	e002      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80030d2:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030d4:	61bb      	str	r3, [r7, #24]
    break;
 80030d6:	bf00      	nop
  }

  return sysclockfreq;
 80030d8:	69bb      	ldr	r3, [r7, #24]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	; 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	58024400 	.word	0x58024400
 80030ec:	03d09000 	.word	0x03d09000
 80030f0:	003d0900 	.word	0x003d0900
 80030f4:	007a1200 	.word	0x007a1200
 80030f8:	46000000 	.word	0x46000000
 80030fc:	4c742400 	.word	0x4c742400
 8003100:	4a742400 	.word	0x4a742400
 8003104:	4af42400 	.word	0x4af42400

08003108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800310e:	f7ff fe81 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8003112:	4602      	mov	r2, r0
 8003114:	4b10      	ldr	r3, [pc, #64]	; (8003158 <HAL_RCC_GetHCLKFreq+0x50>)
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	490f      	ldr	r1, [pc, #60]	; (800315c <HAL_RCC_GetHCLKFreq+0x54>)
 8003120:	5ccb      	ldrb	r3, [r1, r3]
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	fa22 f303 	lsr.w	r3, r2, r3
 800312a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <HAL_RCC_GetHCLKFreq+0x50>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	4a09      	ldr	r2, [pc, #36]	; (800315c <HAL_RCC_GetHCLKFreq+0x54>)
 8003136:	5cd3      	ldrb	r3, [r2, r3]
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	fa22 f303 	lsr.w	r3, r2, r3
 8003142:	4a07      	ldr	r2, [pc, #28]	; (8003160 <HAL_RCC_GetHCLKFreq+0x58>)
 8003144:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003146:	4a07      	ldr	r2, [pc, #28]	; (8003164 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <HAL_RCC_GetHCLKFreq+0x58>)
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	58024400 	.word	0x58024400
 800315c:	08005ff4 	.word	0x08005ff4
 8003160:	24000004 	.word	0x24000004
 8003164:	24000000 	.word	0x24000000

08003168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800316c:	f7ff ffcc 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	4904      	ldr	r1, [pc, #16]	; (8003190 <HAL_RCC_GetPCLK1Freq+0x28>)
 800317e:	5ccb      	ldrb	r3, [r1, r3]
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003188:	4618      	mov	r0, r3
 800318a:	bd80      	pop	{r7, pc}
 800318c:	58024400 	.word	0x58024400
 8003190:	08005ff4 	.word	0x08005ff4

08003194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003198:	f7ff ffb6 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 800319c:	4602      	mov	r2, r0
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	4904      	ldr	r1, [pc, #16]	; (80031bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80031aa:	5ccb      	ldrb	r3, [r1, r3]
 80031ac:	f003 031f 	and.w	r3, r3, #31
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	58024400 	.word	0x58024400
 80031bc:	08005ff4 	.word	0x08005ff4

080031c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031c8:	2300      	movs	r3, #0
 80031ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031cc:	2300      	movs	r3, #0
 80031ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d03f      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031e4:	d02a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031ea:	d824      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031f0:	d018      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031f6:	d81e      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003200:	d007      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003202:	e018      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003204:	4ba3      	ldr	r3, [pc, #652]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	4aa2      	ldr	r2, [pc, #648]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800320a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003210:	e015      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3304      	adds	r3, #4
 8003216:	2102      	movs	r1, #2
 8003218:	4618      	mov	r0, r3
 800321a:	f001 f9d5 	bl	80045c8 <RCCEx_PLL2_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003222:	e00c      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3324      	adds	r3, #36	; 0x24
 8003228:	2102      	movs	r1, #2
 800322a:	4618      	mov	r0, r3
 800322c:	f001 fa7e 	bl	800472c <RCCEx_PLL3_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003234:	e003      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	75fb      	strb	r3, [r7, #23]
      break;
 800323a:	e000      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800323c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323e:	7dfb      	ldrb	r3, [r7, #23]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d109      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003244:	4b93      	ldr	r3, [pc, #588]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003250:	4990      	ldr	r1, [pc, #576]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003252:	4313      	orrs	r3, r2
 8003254:	650b      	str	r3, [r1, #80]	; 0x50
 8003256:	e001      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d03d      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326c:	2b04      	cmp	r3, #4
 800326e:	d826      	bhi.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003270:	a201      	add	r2, pc, #4	; (adr r2, 8003278 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003276:	bf00      	nop
 8003278:	0800328d 	.word	0x0800328d
 800327c:	0800329b 	.word	0x0800329b
 8003280:	080032ad 	.word	0x080032ad
 8003284:	080032c5 	.word	0x080032c5
 8003288:	080032c5 	.word	0x080032c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800328c:	4b81      	ldr	r3, [pc, #516]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	4a80      	ldr	r2, [pc, #512]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003296:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003298:	e015      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3304      	adds	r3, #4
 800329e:	2100      	movs	r1, #0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 f991 	bl	80045c8 <RCCEx_PLL2_Config>
 80032a6:	4603      	mov	r3, r0
 80032a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032aa:	e00c      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3324      	adds	r3, #36	; 0x24
 80032b0:	2100      	movs	r1, #0
 80032b2:	4618      	mov	r0, r3
 80032b4:	f001 fa3a 	bl	800472c <RCCEx_PLL3_Config>
 80032b8:	4603      	mov	r3, r0
 80032ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032bc:	e003      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	75fb      	strb	r3, [r7, #23]
      break;
 80032c2:	e000      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80032c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032c6:	7dfb      	ldrb	r3, [r7, #23]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d109      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032cc:	4b71      	ldr	r3, [pc, #452]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d0:	f023 0207 	bic.w	r2, r3, #7
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d8:	496e      	ldr	r1, [pc, #440]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	650b      	str	r3, [r1, #80]	; 0x50
 80032de:	e001      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d042      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f8:	d02b      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80032fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032fe:	d825      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003300:	2bc0      	cmp	r3, #192	; 0xc0
 8003302:	d028      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003304:	2bc0      	cmp	r3, #192	; 0xc0
 8003306:	d821      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003308:	2b80      	cmp	r3, #128	; 0x80
 800330a:	d016      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800330c:	2b80      	cmp	r3, #128	; 0x80
 800330e:	d81d      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003314:	2b40      	cmp	r3, #64	; 0x40
 8003316:	d007      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003318:	e018      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800331a:	4b5e      	ldr	r3, [pc, #376]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	4a5d      	ldr	r2, [pc, #372]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003324:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003326:	e017      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f001 f94a 	bl	80045c8 <RCCEx_PLL2_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003338:	e00e      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3324      	adds	r3, #36	; 0x24
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f001 f9f3 	bl	800472c <RCCEx_PLL3_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800334a:	e005      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	75fb      	strb	r3, [r7, #23]
      break;
 8003350:	e002      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003352:	bf00      	nop
 8003354:	e000      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003358:	7dfb      	ldrb	r3, [r7, #23]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800335e:	4b4d      	ldr	r3, [pc, #308]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003362:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	494a      	ldr	r1, [pc, #296]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800336c:	4313      	orrs	r3, r2
 800336e:	650b      	str	r3, [r1, #80]	; 0x50
 8003370:	e001      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003372:	7dfb      	ldrb	r3, [r7, #23]
 8003374:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337e:	2b00      	cmp	r3, #0
 8003380:	d049      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003388:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800338c:	d030      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800338e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003392:	d82a      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003394:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003398:	d02c      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800339a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800339e:	d824      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a4:	d018      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80033a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033aa:	d81e      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80033b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033b4:	d007      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80033b6:	e018      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b8:	4b36      	ldr	r3, [pc, #216]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033bc:	4a35      	ldr	r2, [pc, #212]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033c4:	e017      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3304      	adds	r3, #4
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f001 f8fb 	bl	80045c8 <RCCEx_PLL2_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80033d6:	e00e      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3324      	adds	r3, #36	; 0x24
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f001 f9a4 	bl	800472c <RCCEx_PLL3_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033e8:	e005      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75fb      	strb	r3, [r7, #23]
      break;
 80033ee:	e002      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80033f0:	bf00      	nop
 80033f2:	e000      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80033f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f6:	7dfb      	ldrb	r3, [r7, #23]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80033fc:	4b25      	ldr	r3, [pc, #148]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80033fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003400:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800340a:	4922      	ldr	r1, [pc, #136]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800340c:	4313      	orrs	r3, r2
 800340e:	658b      	str	r3, [r1, #88]	; 0x58
 8003410:	e001      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003412:	7dfb      	ldrb	r3, [r7, #23]
 8003414:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800341e:	2b00      	cmp	r3, #0
 8003420:	d04b      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800342c:	d030      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800342e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003432:	d82a      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003434:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003438:	d02e      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800343a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800343e:	d824      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003444:	d018      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800344a:	d81e      	bhi.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003454:	d007      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003456:	e018      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	4a0d      	ldr	r2, [pc, #52]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800345e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003462:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003464:	e019      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3304      	adds	r3, #4
 800346a:	2100      	movs	r1, #0
 800346c:	4618      	mov	r0, r3
 800346e:	f001 f8ab 	bl	80045c8 <RCCEx_PLL2_Config>
 8003472:	4603      	mov	r3, r0
 8003474:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003476:	e010      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3324      	adds	r3, #36	; 0x24
 800347c:	2100      	movs	r1, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f001 f954 	bl	800472c <RCCEx_PLL3_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003488:	e007      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	75fb      	strb	r3, [r7, #23]
      break;
 800348e:	e004      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003490:	bf00      	nop
 8003492:	e002      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003494:	58024400 	.word	0x58024400
      break;
 8003498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800349a:	7dfb      	ldrb	r3, [r7, #23]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80034a0:	4b99      	ldr	r3, [pc, #612]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034ae:	4996      	ldr	r1, [pc, #600]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	658b      	str	r3, [r1, #88]	; 0x58
 80034b4:	e001      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d032      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ca:	2b30      	cmp	r3, #48	; 0x30
 80034cc:	d01c      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80034ce:	2b30      	cmp	r3, #48	; 0x30
 80034d0:	d817      	bhi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d00c      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d813      	bhi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d016      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d10f      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e2:	4b89      	ldr	r3, [pc, #548]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	4a88      	ldr	r2, [pc, #544]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80034ee:	e00e      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3304      	adds	r3, #4
 80034f4:	2102      	movs	r1, #2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f001 f866 	bl	80045c8 <RCCEx_PLL2_Config>
 80034fc:	4603      	mov	r3, r0
 80034fe:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003500:	e005      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	75fb      	strb	r3, [r7, #23]
      break;
 8003506:	e002      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003508:	bf00      	nop
 800350a:	e000      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800350c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d109      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003514:	4b7c      	ldr	r3, [pc, #496]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003518:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003520:	4979      	ldr	r1, [pc, #484]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003522:	4313      	orrs	r3, r2
 8003524:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003526:	e001      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003528:	7dfb      	ldrb	r3, [r7, #23]
 800352a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d047      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003540:	d030      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003542:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003546:	d82a      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003548:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800354c:	d02c      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800354e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003552:	d824      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003558:	d018      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800355a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355e:	d81e      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003568:	d007      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800356a:	e018      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800356c:	4b66      	ldr	r3, [pc, #408]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	4a65      	ldr	r2, [pc, #404]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003576:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003578:	e017      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3304      	adds	r3, #4
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f001 f821 	bl	80045c8 <RCCEx_PLL2_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800358a:	e00e      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3324      	adds	r3, #36	; 0x24
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f001 f8ca 	bl	800472c <RCCEx_PLL3_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800359c:	e005      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
      break;
 80035a2:	e002      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80035a4:	bf00      	nop
 80035a6:	e000      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80035a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035b0:	4b55      	ldr	r3, [pc, #340]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	4952      	ldr	r1, [pc, #328]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	650b      	str	r3, [r1, #80]	; 0x50
 80035c2:	e001      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c4:	7dfb      	ldrb	r3, [r7, #23]
 80035c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d049      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035dc:	d02e      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80035de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e2:	d828      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80035e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035e8:	d02a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80035ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035ee:	d822      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80035f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035f4:	d026      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80035f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035fa:	d81c      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80035fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003600:	d010      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003602:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003606:	d816      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01d      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800360c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003610:	d111      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	2101      	movs	r1, #1
 8003618:	4618      	mov	r0, r3
 800361a:	f000 ffd5 	bl	80045c8 <RCCEx_PLL2_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003622:	e012      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3324      	adds	r3, #36	; 0x24
 8003628:	2101      	movs	r1, #1
 800362a:	4618      	mov	r0, r3
 800362c:	f001 f87e 	bl	800472c <RCCEx_PLL3_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003634:	e009      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	75fb      	strb	r3, [r7, #23]
      break;
 800363a:	e006      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800363c:	bf00      	nop
 800363e:	e004      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003640:	bf00      	nop
 8003642:	e002      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003644:	bf00      	nop
 8003646:	e000      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800364a:	7dfb      	ldrb	r3, [r7, #23]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003650:	4b2d      	ldr	r3, [pc, #180]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003654:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365c:	492a      	ldr	r1, [pc, #168]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800365e:	4313      	orrs	r3, r2
 8003660:	650b      	str	r3, [r1, #80]	; 0x50
 8003662:	e001      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d04d      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800367a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800367e:	d02e      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003684:	d828      	bhi.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368a:	d02a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003690:	d822      	bhi.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003692:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003696:	d026      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003698:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800369c:	d81c      	bhi.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800369e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a2:	d010      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80036a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a8:	d816      	bhi.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01d      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80036ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036b2:	d111      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	2101      	movs	r1, #1
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 ff84 	bl	80045c8 <RCCEx_PLL2_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80036c4:	e012      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3324      	adds	r3, #36	; 0x24
 80036ca:	2101      	movs	r1, #1
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 f82d 	bl	800472c <RCCEx_PLL3_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80036d6:	e009      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	75fb      	strb	r3, [r7, #23]
      break;
 80036dc:	e006      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80036de:	bf00      	nop
 80036e0:	e004      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80036e2:	bf00      	nop
 80036e4:	e002      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80036e6:	bf00      	nop
 80036e8:	e000      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80036ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ec:	7dfb      	ldrb	r3, [r7, #23]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10c      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80036f2:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003700:	4901      	ldr	r1, [pc, #4]	; (8003708 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003702:	4313      	orrs	r3, r2
 8003704:	658b      	str	r3, [r1, #88]	; 0x58
 8003706:	e003      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003708:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370c:	7dfb      	ldrb	r3, [r7, #23]
 800370e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d02f      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003724:	d00e      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800372a:	d814      	bhi.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800372c:	2b00      	cmp	r3, #0
 800372e:	d015      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003734:	d10f      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003736:	4baf      	ldr	r3, [pc, #700]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	4aae      	ldr	r2, [pc, #696]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800373c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003740:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003742:	e00c      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3304      	adds	r3, #4
 8003748:	2101      	movs	r1, #1
 800374a:	4618      	mov	r0, r3
 800374c:	f000 ff3c 	bl	80045c8 <RCCEx_PLL2_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003754:	e003      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	75fb      	strb	r3, [r7, #23]
      break;
 800375a:	e000      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800375c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d109      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003764:	4ba3      	ldr	r3, [pc, #652]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003768:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003770:	49a0      	ldr	r1, [pc, #640]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003772:	4313      	orrs	r3, r2
 8003774:	650b      	str	r3, [r1, #80]	; 0x50
 8003776:	e001      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d032      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378c:	2b03      	cmp	r3, #3
 800378e:	d81b      	bhi.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037cf 	.word	0x080037cf
 800379c:	080037a9 	.word	0x080037a9
 80037a0:	080037b7 	.word	0x080037b7
 80037a4:	080037cf 	.word	0x080037cf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a8:	4b92      	ldr	r3, [pc, #584]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	4a91      	ldr	r2, [pc, #580]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80037b4:	e00c      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3304      	adds	r3, #4
 80037ba:	2102      	movs	r1, #2
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 ff03 	bl	80045c8 <RCCEx_PLL2_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80037c6:	e003      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	75fb      	strb	r3, [r7, #23]
      break;
 80037cc:	e000      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80037ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80037d6:	4b87      	ldr	r3, [pc, #540]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037da:	f023 0203 	bic.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	4984      	ldr	r1, [pc, #528]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80037e8:	e001      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8086 	beq.w	8003908 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037fc:	4b7e      	ldr	r3, [pc, #504]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a7d      	ldr	r2, [pc, #500]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003806:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003808:	f7fd fc38 	bl	800107c <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800380e:	e009      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003810:	f7fd fc34 	bl	800107c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	; 0x64
 800381c:	d902      	bls.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	75fb      	strb	r3, [r7, #23]
        break;
 8003822:	e005      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003824:	4b74      	ldr	r3, [pc, #464]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0ef      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d166      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003836:	4b6f      	ldr	r3, [pc, #444]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003838:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003840:	4053      	eors	r3, r2
 8003842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003846:	2b00      	cmp	r3, #0
 8003848:	d013      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800384a:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003852:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003854:	4b67      	ldr	r3, [pc, #412]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	4a66      	ldr	r2, [pc, #408]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800385a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003860:	4b64      	ldr	r3, [pc, #400]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	4a63      	ldr	r2, [pc, #396]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800386c:	4a61      	ldr	r2, [pc, #388]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387c:	d115      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387e:	f7fd fbfd 	bl	800107c <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003884:	e00b      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003886:	f7fd fbf9 	bl	800107c <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	f241 3288 	movw	r2, #5000	; 0x1388
 8003894:	4293      	cmp	r3, r2
 8003896:	d902      	bls.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	75fb      	strb	r3, [r7, #23]
            break;
 800389c:	e005      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800389e:	4b55      	ldr	r3, [pc, #340]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0ed      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d126      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038be:	d10d      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80038c0:	4b4c      	ldr	r3, [pc, #304]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038ce:	0919      	lsrs	r1, r3, #4
 80038d0:	4b4a      	ldr	r3, [pc, #296]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80038d2:	400b      	ands	r3, r1
 80038d4:	4947      	ldr	r1, [pc, #284]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	610b      	str	r3, [r1, #16]
 80038da:	e005      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80038dc:	4b45      	ldr	r3, [pc, #276]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	4a44      	ldr	r2, [pc, #272]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80038e6:	6113      	str	r3, [r2, #16]
 80038e8:	4b42      	ldr	r3, [pc, #264]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f6:	493f      	ldr	r1, [pc, #252]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	670b      	str	r3, [r1, #112]	; 0x70
 80038fc:	e004      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	75bb      	strb	r3, [r7, #22]
 8003902:	e001      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8085 	beq.w	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800391a:	2b28      	cmp	r3, #40	; 0x28
 800391c:	d866      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800391e:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003924:	08003a01 	.word	0x08003a01
 8003928:	080039ed 	.word	0x080039ed
 800392c:	080039ed 	.word	0x080039ed
 8003930:	080039ed 	.word	0x080039ed
 8003934:	080039ed 	.word	0x080039ed
 8003938:	080039ed 	.word	0x080039ed
 800393c:	080039ed 	.word	0x080039ed
 8003940:	080039ed 	.word	0x080039ed
 8003944:	080039c9 	.word	0x080039c9
 8003948:	080039ed 	.word	0x080039ed
 800394c:	080039ed 	.word	0x080039ed
 8003950:	080039ed 	.word	0x080039ed
 8003954:	080039ed 	.word	0x080039ed
 8003958:	080039ed 	.word	0x080039ed
 800395c:	080039ed 	.word	0x080039ed
 8003960:	080039ed 	.word	0x080039ed
 8003964:	080039db 	.word	0x080039db
 8003968:	080039ed 	.word	0x080039ed
 800396c:	080039ed 	.word	0x080039ed
 8003970:	080039ed 	.word	0x080039ed
 8003974:	080039ed 	.word	0x080039ed
 8003978:	080039ed 	.word	0x080039ed
 800397c:	080039ed 	.word	0x080039ed
 8003980:	080039ed 	.word	0x080039ed
 8003984:	08003a01 	.word	0x08003a01
 8003988:	080039ed 	.word	0x080039ed
 800398c:	080039ed 	.word	0x080039ed
 8003990:	080039ed 	.word	0x080039ed
 8003994:	080039ed 	.word	0x080039ed
 8003998:	080039ed 	.word	0x080039ed
 800399c:	080039ed 	.word	0x080039ed
 80039a0:	080039ed 	.word	0x080039ed
 80039a4:	08003a01 	.word	0x08003a01
 80039a8:	080039ed 	.word	0x080039ed
 80039ac:	080039ed 	.word	0x080039ed
 80039b0:	080039ed 	.word	0x080039ed
 80039b4:	080039ed 	.word	0x080039ed
 80039b8:	080039ed 	.word	0x080039ed
 80039bc:	080039ed 	.word	0x080039ed
 80039c0:	080039ed 	.word	0x080039ed
 80039c4:	08003a01 	.word	0x08003a01
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	2101      	movs	r1, #1
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fdfa 	bl	80045c8 <RCCEx_PLL2_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80039d8:	e013      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3324      	adds	r3, #36	; 0x24
 80039de:	2101      	movs	r1, #1
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fea3 	bl	800472c <RCCEx_PLL3_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80039ea:	e00a      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	75fb      	strb	r3, [r7, #23]
      break;
 80039f0:	e007      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80039f2:	bf00      	nop
 80039f4:	58024400 	.word	0x58024400
 80039f8:	58024800 	.word	0x58024800
 80039fc:	00ffffcf 	.word	0x00ffffcf
      break;
 8003a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a08:	4b96      	ldr	r3, [pc, #600]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a14:	4993      	ldr	r1, [pc, #588]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	654b      	str	r3, [r1, #84]	; 0x54
 8003a1a:	e001      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d038      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a30:	2b05      	cmp	r3, #5
 8003a32:	d821      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a7f 	.word	0x08003a7f
 8003a40:	08003a55 	.word	0x08003a55
 8003a44:	08003a67 	.word	0x08003a67
 8003a48:	08003a7f 	.word	0x08003a7f
 8003a4c:	08003a7f 	.word	0x08003a7f
 8003a50:	08003a7f 	.word	0x08003a7f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3304      	adds	r3, #4
 8003a58:	2101      	movs	r1, #1
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fdb4 	bl	80045c8 <RCCEx_PLL2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003a64:	e00c      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3324      	adds	r3, #36	; 0x24
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fe5d 	bl	800472c <RCCEx_PLL3_Config>
 8003a72:	4603      	mov	r3, r0
 8003a74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003a76:	e003      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a7c:	e000      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003a86:	4b77      	ldr	r3, [pc, #476]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8a:	f023 0207 	bic.w	r2, r3, #7
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a92:	4974      	ldr	r1, [pc, #464]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	654b      	str	r3, [r1, #84]	; 0x54
 8003a98:	e001      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
 8003a9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d03a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	2b05      	cmp	r3, #5
 8003ab2:	d821      	bhi.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003ab4:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003aff 	.word	0x08003aff
 8003ac0:	08003ad5 	.word	0x08003ad5
 8003ac4:	08003ae7 	.word	0x08003ae7
 8003ac8:	08003aff 	.word	0x08003aff
 8003acc:	08003aff 	.word	0x08003aff
 8003ad0:	08003aff 	.word	0x08003aff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	2101      	movs	r1, #1
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fd74 	bl	80045c8 <RCCEx_PLL2_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ae4:	e00c      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3324      	adds	r3, #36	; 0x24
 8003aea:	2101      	movs	r1, #1
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fe1d 	bl	800472c <RCCEx_PLL3_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003af6:	e003      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	75fb      	strb	r3, [r7, #23]
      break;
 8003afc:	e000      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b06:	4b57      	ldr	r3, [pc, #348]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	f023 0207 	bic.w	r2, r3, #7
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	4953      	ldr	r1, [pc, #332]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	658b      	str	r3, [r1, #88]	; 0x58
 8003b1a:	e001      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d04b      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b36:	d02e      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b3c:	d828      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b42:	d02a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b48:	d822      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b4e:	d026      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003b50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b54:	d81c      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5a:	d010      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b60:	d816      	bhi.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01d      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003b66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b6a:	d111      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fd28 	bl	80045c8 <RCCEx_PLL2_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b7c:	e012      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3324      	adds	r3, #36	; 0x24
 8003b82:	2102      	movs	r1, #2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fdd1 	bl	800472c <RCCEx_PLL3_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b8e:	e009      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	75fb      	strb	r3, [r7, #23]
      break;
 8003b94:	e006      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003b96:	bf00      	nop
 8003b98:	e004      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e002      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003b9e:	bf00      	nop
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003baa:	4b2e      	ldr	r3, [pc, #184]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb8:	492a      	ldr	r1, [pc, #168]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	654b      	str	r3, [r1, #84]	; 0x54
 8003bbe:	e001      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc0:	7dfb      	ldrb	r3, [r7, #23]
 8003bc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d04d      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003bda:	d02e      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003bdc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003be0:	d828      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be6:	d02a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bec:	d822      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003bee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bf2:	d026      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003bf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bf8:	d81c      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bfe:	d010      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c04:	d816      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d01d      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0e:	d111      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	2100      	movs	r1, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fcd6 	bl	80045c8 <RCCEx_PLL2_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c20:	e012      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3324      	adds	r3, #36	; 0x24
 8003c26:	2102      	movs	r1, #2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fd7f 	bl	800472c <RCCEx_PLL3_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003c32:	e009      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	75fb      	strb	r3, [r7, #23]
      break;
 8003c38:	e006      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e004      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e002      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c48:	7dfb      	ldrb	r3, [r7, #23]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c5c:	4901      	ldr	r1, [pc, #4]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	658b      	str	r3, [r1, #88]	; 0x58
 8003c62:	e003      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d04b      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c82:	d02e      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003c84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c88:	d828      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8e:	d02a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c94:	d822      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003c96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c9a:	d026      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003c9c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ca0:	d81c      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ca6:	d010      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cac:	d816      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d01d      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb6:	d111      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fc82 	bl	80045c8 <RCCEx_PLL2_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003cc8:	e012      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3324      	adds	r3, #36	; 0x24
 8003cce:	2102      	movs	r1, #2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fd2b 	bl	800472c <RCCEx_PLL3_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003cda:	e009      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce0:	e006      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003ce2:	bf00      	nop
 8003ce4:	e004      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e002      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003cf6:	4b9d      	ldr	r3, [pc, #628]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d04:	4999      	ldr	r1, [pc, #612]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	658b      	str	r3, [r1, #88]	; 0x58
 8003d0a:	e001      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d26:	d10a      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3324      	adds	r3, #36	; 0x24
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fcfc 	bl	800472c <RCCEx_PLL3_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003d3e:	4b8b      	ldr	r3, [pc, #556]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4c:	4987      	ldr	r1, [pc, #540]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d01a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d68:	d10a      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3324      	adds	r3, #36	; 0x24
 8003d6e:	2102      	movs	r1, #2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fcdb 	bl	800472c <RCCEx_PLL3_Config>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d80:	4b7a      	ldr	r3, [pc, #488]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8e:	4977      	ldr	r1, [pc, #476]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d034      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003da6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003daa:	d01d      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003db0:	d817      	bhi.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dba:	d009      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003dbc:	e011      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fbff 	bl	80045c8 <RCCEx_PLL2_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003dce:	e00c      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3324      	adds	r3, #36	; 0x24
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fca8 	bl	800472c <RCCEx_PLL3_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003de0:	e003      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	75fb      	strb	r3, [r7, #23]
      break;
 8003de6:	e000      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003df0:	4b5e      	ldr	r3, [pc, #376]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dfe:	495b      	ldr	r1, [pc, #364]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	658b      	str	r3, [r1, #88]	; 0x58
 8003e04:	e001      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
 8003e08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d033      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e20:	d01c      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003e22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e26:	d816      	bhi.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e2c:	d003      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003e2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e32:	d007      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003e34:	e00f      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e36:	4b4d      	ldr	r3, [pc, #308]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	4a4c      	ldr	r2, [pc, #304]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e42:	e00c      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3324      	adds	r3, #36	; 0x24
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fc6e 	bl	800472c <RCCEx_PLL3_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003e54:	e003      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5a:	e000      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e64:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e72:	493e      	ldr	r1, [pc, #248]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	654b      	str	r3, [r1, #84]	; 0x54
 8003e78:	e001      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d029      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e96:	d007      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003e98:	e00f      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e9a:	4b34      	ldr	r3, [pc, #208]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	4a33      	ldr	r2, [pc, #204]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ea6:	e00b      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	2102      	movs	r1, #2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fb8a 	bl	80045c8 <RCCEx_PLL2_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003eb8:	e002      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003ec6:	4b29      	ldr	r3, [pc, #164]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed2:	4926      	ldr	r1, [pc, #152]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ed8:	e001      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3324      	adds	r3, #36	; 0x24
 8003eee:	2102      	movs	r1, #2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fc1b 	bl	800472c <RCCEx_PLL3_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d033      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f14:	d017      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003f16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f1a:	d811      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f20:	d013      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f26:	d80b      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d010      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f30:	d106      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f32:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	4a0d      	ldr	r2, [pc, #52]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003f3e:	e007      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	75fb      	strb	r3, [r7, #23]
      break;
 8003f44:	e004      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003f46:	bf00      	nop
 8003f48:	e002      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e000      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10c      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f62:	4902      	ldr	r1, [pc, #8]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	654b      	str	r3, [r1, #84]	; 0x54
 8003f68:	e004      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003f6a:	bf00      	nop
 8003f6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f80:	4b31      	ldr	r3, [pc, #196]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	492e      	ldr	r1, [pc, #184]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f9e:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003fac:	4926      	ldr	r1, [pc, #152]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d008      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fbe:	4b22      	ldr	r3, [pc, #136]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fca:	491f      	ldr	r1, [pc, #124]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00d      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fe2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003fe6:	6113      	str	r3, [r2, #16]
 8003fe8:	4b17      	ldr	r3, [pc, #92]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ff2:	4915      	ldr	r1, [pc, #84]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	da08      	bge.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004000:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004004:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400c:	490e      	ldr	r1, [pc, #56]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800400e:	4313      	orrs	r3, r2
 8004010:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402c:	4906      	ldr	r1, [pc, #24]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800402e:	4313      	orrs	r3, r2
 8004030:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004032:	7dbb      	ldrb	r3, [r7, #22]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	e000      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	58024400 	.word	0x58024400

0800404c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004050:	f7ff f85a 	bl	8003108 <HAL_RCC_GetHCLKFreq>
 8004054:	4602      	mov	r2, r0
 8004056:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	091b      	lsrs	r3, r3, #4
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	4904      	ldr	r1, [pc, #16]	; (8004074 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004062:	5ccb      	ldrb	r3, [r1, r3]
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800406c:	4618      	mov	r0, r3
 800406e:	bd80      	pop	{r7, pc}
 8004070:	58024400 	.word	0x58024400
 8004074:	08005ff4 	.word	0x08005ff4

08004078 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004078:	b480      	push	{r7}
 800407a:	b089      	sub	sp, #36	; 0x24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004080:	4ba1      	ldr	r3, [pc, #644]	; (8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800408a:	4b9f      	ldr	r3, [pc, #636]	; (8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	0b1b      	lsrs	r3, r3, #12
 8004090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004094:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004096:	4b9c      	ldr	r3, [pc, #624]	; (8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80040a2:	4b99      	ldr	r3, [pc, #612]	; (8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a6:	08db      	lsrs	r3, r3, #3
 80040a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	ee07 3a90 	vmov	s15, r3
 80040b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 8111 	beq.w	80042e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	f000 8083 	beq.w	80041d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	f200 80a1 	bhi.w	8004218 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d056      	beq.n	8004190 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80040e2:	e099      	b.n	8004218 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040e4:	4b88      	ldr	r3, [pc, #544]	; (8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d02d      	beq.n	800414c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040f0:	4b85      	ldr	r3, [pc, #532]	; (8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	08db      	lsrs	r3, r3, #3
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	4a84      	ldr	r2, [pc, #528]	; (800430c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004100:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	ee07 3a90 	vmov	s15, r3
 8004108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800411a:	4b7b      	ldr	r3, [pc, #492]	; (8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800412a:	ed97 6a03 	vldr	s12, [r7, #12]
 800412e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800413a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800413e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004146:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800414a:	e087      	b.n	800425c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004156:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800415a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800415e:	4b6a      	ldr	r3, [pc, #424]	; (8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800416e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004172:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800417a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800417e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800418e:	e065      	b.n	800425c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004318 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800419e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a2:	4b59      	ldr	r3, [pc, #356]	; (8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041d2:	e043      	b.n	800425c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800431c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80041e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041e6:	4b48      	ldr	r3, [pc, #288]	; (8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800420a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800420e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004216:	e021      	b.n	800425c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004222:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004318 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422a:	4b37      	ldr	r3, [pc, #220]	; (8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423a:	ed97 6a03 	vldr	s12, [r7, #12]
 800423e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004310 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800424e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004256:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800425a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800425c:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	0a5b      	lsrs	r3, r3, #9
 8004262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004272:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004276:	edd7 6a07 	vldr	s13, [r7, #28]
 800427a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800427e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004282:	ee17 2a90 	vmov	r2, s15
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800428a:	4b1f      	ldr	r3, [pc, #124]	; (8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	0c1b      	lsrs	r3, r3, #16
 8004290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004294:	ee07 3a90 	vmov	s15, r3
 8004298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80042a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042b0:	ee17 2a90 	vmov	r2, s15
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80042b8:	4b13      	ldr	r3, [pc, #76]	; (8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	0e1b      	lsrs	r3, r3, #24
 80042be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80042d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042de:	ee17 2a90 	vmov	r2, s15
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80042e6:	e008      	b.n	80042fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	609a      	str	r2, [r3, #8]
}
 80042fa:	bf00      	nop
 80042fc:	3724      	adds	r7, #36	; 0x24
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	58024400 	.word	0x58024400
 800430c:	03d09000 	.word	0x03d09000
 8004310:	46000000 	.word	0x46000000
 8004314:	4c742400 	.word	0x4c742400
 8004318:	4a742400 	.word	0x4a742400
 800431c:	4af42400 	.word	0x4af42400

08004320 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004328:	4ba1      	ldr	r3, [pc, #644]	; (80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004332:	4b9f      	ldr	r3, [pc, #636]	; (80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	0d1b      	lsrs	r3, r3, #20
 8004338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800433c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800433e:	4b9c      	ldr	r3, [pc, #624]	; (80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	0a1b      	lsrs	r3, r3, #8
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800434a:	4b99      	ldr	r3, [pc, #612]	; (80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	08db      	lsrs	r3, r3, #3
 8004350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004362:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8111 	beq.w	8004590 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b02      	cmp	r3, #2
 8004372:	f000 8083 	beq.w	800447c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b02      	cmp	r3, #2
 800437a:	f200 80a1 	bhi.w	80044c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d056      	beq.n	8004438 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800438a:	e099      	b.n	80044c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800438c:	4b88      	ldr	r3, [pc, #544]	; (80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b00      	cmp	r3, #0
 8004396:	d02d      	beq.n	80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004398:	4b85      	ldr	r3, [pc, #532]	; (80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	08db      	lsrs	r3, r3, #3
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	4a84      	ldr	r2, [pc, #528]	; (80045b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80043a4:	fa22 f303 	lsr.w	r3, r2, r3
 80043a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	ee07 3a90 	vmov	s15, r3
 80043b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c2:	4b7b      	ldr	r3, [pc, #492]	; (80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80043f2:	e087      	b.n	8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	ee07 3a90 	vmov	s15, r3
 80043fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004406:	4b6a      	ldr	r3, [pc, #424]	; (80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004416:	ed97 6a03 	vldr	s12, [r7, #12]
 800441a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800441e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800442a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800442e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004432:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004436:	e065      	b.n	8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004442:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80045c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444a:	4b59      	ldr	r3, [pc, #356]	; (80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445a:	ed97 6a03 	vldr	s12, [r7, #12]
 800445e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800446a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800446e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004476:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800447a:	e043      	b.n	8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004486:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80045c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800448a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448e:	4b48      	ldr	r3, [pc, #288]	; (80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800449e:	ed97 6a03 	vldr	s12, [r7, #12]
 80044a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044be:	e021      	b.n	8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80045c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d2:	4b37      	ldr	r3, [pc, #220]	; (80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80045b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004502:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004504:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	0a5b      	lsrs	r3, r3, #9
 800450a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800451a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800451e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800452a:	ee17 2a90 	vmov	r2, s15
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004532:	4b1f      	ldr	r3, [pc, #124]	; (80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	0c1b      	lsrs	r3, r3, #16
 8004538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800453c:	ee07 3a90 	vmov	s15, r3
 8004540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004544:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004548:	ee37 7a87 	vadd.f32	s14, s15, s14
 800454c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004558:	ee17 2a90 	vmov	r2, s15
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004560:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	0e1b      	lsrs	r3, r3, #24
 8004566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800456a:	ee07 3a90 	vmov	s15, r3
 800456e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004576:	ee37 7a87 	vadd.f32	s14, s15, s14
 800457a:	edd7 6a07 	vldr	s13, [r7, #28]
 800457e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004586:	ee17 2a90 	vmov	r2, s15
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800458e:	e008      	b.n	80045a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	609a      	str	r2, [r3, #8]
}
 80045a2:	bf00      	nop
 80045a4:	3724      	adds	r7, #36	; 0x24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	58024400 	.word	0x58024400
 80045b4:	03d09000 	.word	0x03d09000
 80045b8:	46000000 	.word	0x46000000
 80045bc:	4c742400 	.word	0x4c742400
 80045c0:	4a742400 	.word	0x4a742400
 80045c4:	4af42400 	.word	0x4af42400

080045c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80045d6:	4b53      	ldr	r3, [pc, #332]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d101      	bne.n	80045e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e099      	b.n	800471a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80045e6:	4b4f      	ldr	r3, [pc, #316]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a4e      	ldr	r2, [pc, #312]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 80045ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f2:	f7fc fd43 	bl	800107c <HAL_GetTick>
 80045f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80045f8:	e008      	b.n	800460c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80045fa:	f7fc fd3f 	bl	800107c <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e086      	b.n	800471a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800460c:	4b45      	ldr	r3, [pc, #276]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004618:	4b42      	ldr	r3, [pc, #264]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	031b      	lsls	r3, r3, #12
 8004626:	493f      	ldr	r1, [pc, #252]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 8004628:	4313      	orrs	r3, r2
 800462a:	628b      	str	r3, [r1, #40]	; 0x28
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	3b01      	subs	r3, #1
 8004632:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	3b01      	subs	r3, #1
 800463c:	025b      	lsls	r3, r3, #9
 800463e:	b29b      	uxth	r3, r3
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	3b01      	subs	r3, #1
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	3b01      	subs	r3, #1
 8004656:	061b      	lsls	r3, r3, #24
 8004658:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800465c:	4931      	ldr	r1, [pc, #196]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 800465e:	4313      	orrs	r3, r2
 8004660:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004662:	4b30      	ldr	r3, [pc, #192]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	492d      	ldr	r1, [pc, #180]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004674:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	f023 0220 	bic.w	r2, r3, #32
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	4928      	ldr	r1, [pc, #160]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 8004682:	4313      	orrs	r3, r2
 8004684:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004686:	4b27      	ldr	r3, [pc, #156]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	4a26      	ldr	r2, [pc, #152]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 800468c:	f023 0310 	bic.w	r3, r3, #16
 8004690:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004692:	4b24      	ldr	r3, [pc, #144]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 8004694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004696:	4b24      	ldr	r3, [pc, #144]	; (8004728 <RCCEx_PLL2_Config+0x160>)
 8004698:	4013      	ands	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	69d2      	ldr	r2, [r2, #28]
 800469e:	00d2      	lsls	r2, r2, #3
 80046a0:	4920      	ldr	r1, [pc, #128]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046a6:	4b1f      	ldr	r3, [pc, #124]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	4a1e      	ldr	r2, [pc, #120]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 80046ac:	f043 0310 	orr.w	r3, r3, #16
 80046b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80046b8:	4b1a      	ldr	r3, [pc, #104]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	4a19      	ldr	r2, [pc, #100]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 80046be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046c4:	e00f      	b.n	80046e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d106      	bne.n	80046da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80046cc:	4b15      	ldr	r3, [pc, #84]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	4a14      	ldr	r2, [pc, #80]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 80046d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046d8:	e005      	b.n	80046e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80046da:	4b12      	ldr	r3, [pc, #72]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	4a11      	ldr	r2, [pc, #68]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 80046e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80046e6:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a0e      	ldr	r2, [pc, #56]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 80046ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f2:	f7fc fcc3 	bl	800107c <HAL_GetTick>
 80046f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80046f8:	e008      	b.n	800470c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80046fa:	f7fc fcbf 	bl	800107c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e006      	b.n	800471a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <RCCEx_PLL2_Config+0x15c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f0      	beq.n	80046fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	58024400 	.word	0x58024400
 8004728:	ffff0007 	.word	0xffff0007

0800472c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800473a:	4b53      	ldr	r3, [pc, #332]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	2b03      	cmp	r3, #3
 8004744:	d101      	bne.n	800474a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e099      	b.n	800487e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800474a:	4b4f      	ldr	r3, [pc, #316]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a4e      	ldr	r2, [pc, #312]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 8004750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004756:	f7fc fc91 	bl	800107c <HAL_GetTick>
 800475a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800475c:	e008      	b.n	8004770 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800475e:	f7fc fc8d 	bl	800107c <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e086      	b.n	800487e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004770:	4b45      	ldr	r3, [pc, #276]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f0      	bne.n	800475e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800477c:	4b42      	ldr	r3, [pc, #264]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	051b      	lsls	r3, r3, #20
 800478a:	493f      	ldr	r1, [pc, #252]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 800478c:	4313      	orrs	r3, r2
 800478e:	628b      	str	r3, [r1, #40]	; 0x28
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	3b01      	subs	r3, #1
 8004796:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	3b01      	subs	r3, #1
 80047a0:	025b      	lsls	r3, r3, #9
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	041b      	lsls	r3, r3, #16
 80047ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	061b      	lsls	r3, r3, #24
 80047bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047c0:	4931      	ldr	r1, [pc, #196]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80047c6:	4b30      	ldr	r3, [pc, #192]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	492d      	ldr	r1, [pc, #180]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80047d8:	4b2b      	ldr	r3, [pc, #172]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	4928      	ldr	r1, [pc, #160]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80047ea:	4b27      	ldr	r3, [pc, #156]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	4a26      	ldr	r2, [pc, #152]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 80047f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80047f6:	4b24      	ldr	r3, [pc, #144]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 80047f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047fa:	4b24      	ldr	r3, [pc, #144]	; (800488c <RCCEx_PLL3_Config+0x160>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	69d2      	ldr	r2, [r2, #28]
 8004802:	00d2      	lsls	r2, r2, #3
 8004804:	4920      	ldr	r1, [pc, #128]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 8004806:	4313      	orrs	r3, r2
 8004808:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800480a:	4b1f      	ldr	r3, [pc, #124]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	4a1e      	ldr	r2, [pc, #120]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 8004810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800481c:	4b1a      	ldr	r3, [pc, #104]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	4a19      	ldr	r2, [pc, #100]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 8004822:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004826:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004828:	e00f      	b.n	800484a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d106      	bne.n	800483e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004830:	4b15      	ldr	r3, [pc, #84]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	4a14      	ldr	r2, [pc, #80]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 8004836:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800483a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800483c:	e005      	b.n	800484a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800483e:	4b12      	ldr	r3, [pc, #72]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	4a11      	ldr	r2, [pc, #68]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 8004844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004848:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800484a:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a0e      	ldr	r2, [pc, #56]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 8004850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004856:	f7fc fc11 	bl	800107c <HAL_GetTick>
 800485a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800485c:	e008      	b.n	8004870 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800485e:	f7fc fc0d 	bl	800107c <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e006      	b.n	800487e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <RCCEx_PLL3_Config+0x15c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0f0      	beq.n	800485e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800487c:	7bfb      	ldrb	r3, [r7, #15]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	58024400 	.word	0x58024400
 800488c:	ffff0007 	.word	0xffff0007

08004890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e042      	b.n	8004928 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fc fa19 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2224      	movs	r2, #36	; 0x24
 80048be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0201 	bic.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f82c 	bl	8004930 <UART_SetConfig>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d101      	bne.n	80048e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e022      	b.n	8004928 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fd88 	bl	8005400 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800490e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fe0f 	bl	8005544 <UART_CheckIdleState>
 8004926:	4603      	mov	r3, r0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004934:	b092      	sub	sp, #72	; 0x48
 8004936:	af00      	add	r7, sp, #0
 8004938:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	431a      	orrs	r2, r3
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	431a      	orrs	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	4313      	orrs	r3, r2
 8004956:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4bbe      	ldr	r3, [pc, #760]	; (8004c58 <UART_SetConfig+0x328>)
 8004960:	4013      	ands	r3, r2
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004968:	430b      	orrs	r3, r1
 800496a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4ab3      	ldr	r2, [pc, #716]	; (8004c5c <UART_SetConfig+0x32c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d004      	beq.n	800499c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004998:	4313      	orrs	r3, r2
 800499a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	4baf      	ldr	r3, [pc, #700]	; (8004c60 <UART_SetConfig+0x330>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	6812      	ldr	r2, [r2, #0]
 80049aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b6:	f023 010f 	bic.w	r1, r3, #15
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4aa6      	ldr	r2, [pc, #664]	; (8004c64 <UART_SetConfig+0x334>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d177      	bne.n	8004ac0 <UART_SetConfig+0x190>
 80049d0:	4ba5      	ldr	r3, [pc, #660]	; (8004c68 <UART_SetConfig+0x338>)
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049d8:	2b28      	cmp	r3, #40	; 0x28
 80049da:	d86d      	bhi.n	8004ab8 <UART_SetConfig+0x188>
 80049dc:	a201      	add	r2, pc, #4	; (adr r2, 80049e4 <UART_SetConfig+0xb4>)
 80049de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e2:	bf00      	nop
 80049e4:	08004a89 	.word	0x08004a89
 80049e8:	08004ab9 	.word	0x08004ab9
 80049ec:	08004ab9 	.word	0x08004ab9
 80049f0:	08004ab9 	.word	0x08004ab9
 80049f4:	08004ab9 	.word	0x08004ab9
 80049f8:	08004ab9 	.word	0x08004ab9
 80049fc:	08004ab9 	.word	0x08004ab9
 8004a00:	08004ab9 	.word	0x08004ab9
 8004a04:	08004a91 	.word	0x08004a91
 8004a08:	08004ab9 	.word	0x08004ab9
 8004a0c:	08004ab9 	.word	0x08004ab9
 8004a10:	08004ab9 	.word	0x08004ab9
 8004a14:	08004ab9 	.word	0x08004ab9
 8004a18:	08004ab9 	.word	0x08004ab9
 8004a1c:	08004ab9 	.word	0x08004ab9
 8004a20:	08004ab9 	.word	0x08004ab9
 8004a24:	08004a99 	.word	0x08004a99
 8004a28:	08004ab9 	.word	0x08004ab9
 8004a2c:	08004ab9 	.word	0x08004ab9
 8004a30:	08004ab9 	.word	0x08004ab9
 8004a34:	08004ab9 	.word	0x08004ab9
 8004a38:	08004ab9 	.word	0x08004ab9
 8004a3c:	08004ab9 	.word	0x08004ab9
 8004a40:	08004ab9 	.word	0x08004ab9
 8004a44:	08004aa1 	.word	0x08004aa1
 8004a48:	08004ab9 	.word	0x08004ab9
 8004a4c:	08004ab9 	.word	0x08004ab9
 8004a50:	08004ab9 	.word	0x08004ab9
 8004a54:	08004ab9 	.word	0x08004ab9
 8004a58:	08004ab9 	.word	0x08004ab9
 8004a5c:	08004ab9 	.word	0x08004ab9
 8004a60:	08004ab9 	.word	0x08004ab9
 8004a64:	08004aa9 	.word	0x08004aa9
 8004a68:	08004ab9 	.word	0x08004ab9
 8004a6c:	08004ab9 	.word	0x08004ab9
 8004a70:	08004ab9 	.word	0x08004ab9
 8004a74:	08004ab9 	.word	0x08004ab9
 8004a78:	08004ab9 	.word	0x08004ab9
 8004a7c:	08004ab9 	.word	0x08004ab9
 8004a80:	08004ab9 	.word	0x08004ab9
 8004a84:	08004ab1 	.word	0x08004ab1
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a8e:	e222      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004a90:	2304      	movs	r3, #4
 8004a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a96:	e21e      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004a98:	2308      	movs	r3, #8
 8004a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9e:	e21a      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa6:	e216      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004aa8:	2320      	movs	r3, #32
 8004aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aae:	e212      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004ab0:	2340      	movs	r3, #64	; 0x40
 8004ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ab6:	e20e      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004abe:	e20a      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a69      	ldr	r2, [pc, #420]	; (8004c6c <UART_SetConfig+0x33c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d130      	bne.n	8004b2c <UART_SetConfig+0x1fc>
 8004aca:	4b67      	ldr	r3, [pc, #412]	; (8004c68 <UART_SetConfig+0x338>)
 8004acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	2b05      	cmp	r3, #5
 8004ad4:	d826      	bhi.n	8004b24 <UART_SetConfig+0x1f4>
 8004ad6:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <UART_SetConfig+0x1ac>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004af5 	.word	0x08004af5
 8004ae0:	08004afd 	.word	0x08004afd
 8004ae4:	08004b05 	.word	0x08004b05
 8004ae8:	08004b0d 	.word	0x08004b0d
 8004aec:	08004b15 	.word	0x08004b15
 8004af0:	08004b1d 	.word	0x08004b1d
 8004af4:	2300      	movs	r3, #0
 8004af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004afa:	e1ec      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004afc:	2304      	movs	r3, #4
 8004afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b02:	e1e8      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004b04:	2308      	movs	r3, #8
 8004b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b0a:	e1e4      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b12:	e1e0      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004b14:	2320      	movs	r3, #32
 8004b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b1a:	e1dc      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004b1c:	2340      	movs	r3, #64	; 0x40
 8004b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b22:	e1d8      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b2a:	e1d4      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a4f      	ldr	r2, [pc, #316]	; (8004c70 <UART_SetConfig+0x340>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d130      	bne.n	8004b98 <UART_SetConfig+0x268>
 8004b36:	4b4c      	ldr	r3, [pc, #304]	; (8004c68 <UART_SetConfig+0x338>)
 8004b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	2b05      	cmp	r3, #5
 8004b40:	d826      	bhi.n	8004b90 <UART_SetConfig+0x260>
 8004b42:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <UART_SetConfig+0x218>)
 8004b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b48:	08004b61 	.word	0x08004b61
 8004b4c:	08004b69 	.word	0x08004b69
 8004b50:	08004b71 	.word	0x08004b71
 8004b54:	08004b79 	.word	0x08004b79
 8004b58:	08004b81 	.word	0x08004b81
 8004b5c:	08004b89 	.word	0x08004b89
 8004b60:	2300      	movs	r3, #0
 8004b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b66:	e1b6      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004b68:	2304      	movs	r3, #4
 8004b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b6e:	e1b2      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004b70:	2308      	movs	r3, #8
 8004b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b76:	e1ae      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004b78:	2310      	movs	r3, #16
 8004b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b7e:	e1aa      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004b80:	2320      	movs	r3, #32
 8004b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b86:	e1a6      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004b88:	2340      	movs	r3, #64	; 0x40
 8004b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b8e:	e1a2      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b96:	e19e      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a35      	ldr	r2, [pc, #212]	; (8004c74 <UART_SetConfig+0x344>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d130      	bne.n	8004c04 <UART_SetConfig+0x2d4>
 8004ba2:	4b31      	ldr	r3, [pc, #196]	; (8004c68 <UART_SetConfig+0x338>)
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	2b05      	cmp	r3, #5
 8004bac:	d826      	bhi.n	8004bfc <UART_SetConfig+0x2cc>
 8004bae:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <UART_SetConfig+0x284>)
 8004bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb4:	08004bcd 	.word	0x08004bcd
 8004bb8:	08004bd5 	.word	0x08004bd5
 8004bbc:	08004bdd 	.word	0x08004bdd
 8004bc0:	08004be5 	.word	0x08004be5
 8004bc4:	08004bed 	.word	0x08004bed
 8004bc8:	08004bf5 	.word	0x08004bf5
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bd2:	e180      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004bd4:	2304      	movs	r3, #4
 8004bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bda:	e17c      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004bdc:	2308      	movs	r3, #8
 8004bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004be2:	e178      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004be4:	2310      	movs	r3, #16
 8004be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bea:	e174      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004bec:	2320      	movs	r3, #32
 8004bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bf2:	e170      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004bf4:	2340      	movs	r3, #64	; 0x40
 8004bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bfa:	e16c      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c02:	e168      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a1b      	ldr	r2, [pc, #108]	; (8004c78 <UART_SetConfig+0x348>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d142      	bne.n	8004c94 <UART_SetConfig+0x364>
 8004c0e:	4b16      	ldr	r3, [pc, #88]	; (8004c68 <UART_SetConfig+0x338>)
 8004c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	2b05      	cmp	r3, #5
 8004c18:	d838      	bhi.n	8004c8c <UART_SetConfig+0x35c>
 8004c1a:	a201      	add	r2, pc, #4	; (adr r2, 8004c20 <UART_SetConfig+0x2f0>)
 8004c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c20:	08004c39 	.word	0x08004c39
 8004c24:	08004c41 	.word	0x08004c41
 8004c28:	08004c49 	.word	0x08004c49
 8004c2c:	08004c51 	.word	0x08004c51
 8004c30:	08004c7d 	.word	0x08004c7d
 8004c34:	08004c85 	.word	0x08004c85
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c3e:	e14a      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004c40:	2304      	movs	r3, #4
 8004c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c46:	e146      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004c48:	2308      	movs	r3, #8
 8004c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c4e:	e142      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004c50:	2310      	movs	r3, #16
 8004c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c56:	e13e      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004c58:	cfff69f3 	.word	0xcfff69f3
 8004c5c:	58000c00 	.word	0x58000c00
 8004c60:	11fff4ff 	.word	0x11fff4ff
 8004c64:	40011000 	.word	0x40011000
 8004c68:	58024400 	.word	0x58024400
 8004c6c:	40004400 	.word	0x40004400
 8004c70:	40004800 	.word	0x40004800
 8004c74:	40004c00 	.word	0x40004c00
 8004c78:	40005000 	.word	0x40005000
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c82:	e128      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004c84:	2340      	movs	r3, #64	; 0x40
 8004c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8a:	e124      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c92:	e120      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4acb      	ldr	r2, [pc, #812]	; (8004fc8 <UART_SetConfig+0x698>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d176      	bne.n	8004d8c <UART_SetConfig+0x45c>
 8004c9e:	4bcb      	ldr	r3, [pc, #812]	; (8004fcc <UART_SetConfig+0x69c>)
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ca6:	2b28      	cmp	r3, #40	; 0x28
 8004ca8:	d86c      	bhi.n	8004d84 <UART_SetConfig+0x454>
 8004caa:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <UART_SetConfig+0x380>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004d55 	.word	0x08004d55
 8004cb4:	08004d85 	.word	0x08004d85
 8004cb8:	08004d85 	.word	0x08004d85
 8004cbc:	08004d85 	.word	0x08004d85
 8004cc0:	08004d85 	.word	0x08004d85
 8004cc4:	08004d85 	.word	0x08004d85
 8004cc8:	08004d85 	.word	0x08004d85
 8004ccc:	08004d85 	.word	0x08004d85
 8004cd0:	08004d5d 	.word	0x08004d5d
 8004cd4:	08004d85 	.word	0x08004d85
 8004cd8:	08004d85 	.word	0x08004d85
 8004cdc:	08004d85 	.word	0x08004d85
 8004ce0:	08004d85 	.word	0x08004d85
 8004ce4:	08004d85 	.word	0x08004d85
 8004ce8:	08004d85 	.word	0x08004d85
 8004cec:	08004d85 	.word	0x08004d85
 8004cf0:	08004d65 	.word	0x08004d65
 8004cf4:	08004d85 	.word	0x08004d85
 8004cf8:	08004d85 	.word	0x08004d85
 8004cfc:	08004d85 	.word	0x08004d85
 8004d00:	08004d85 	.word	0x08004d85
 8004d04:	08004d85 	.word	0x08004d85
 8004d08:	08004d85 	.word	0x08004d85
 8004d0c:	08004d85 	.word	0x08004d85
 8004d10:	08004d6d 	.word	0x08004d6d
 8004d14:	08004d85 	.word	0x08004d85
 8004d18:	08004d85 	.word	0x08004d85
 8004d1c:	08004d85 	.word	0x08004d85
 8004d20:	08004d85 	.word	0x08004d85
 8004d24:	08004d85 	.word	0x08004d85
 8004d28:	08004d85 	.word	0x08004d85
 8004d2c:	08004d85 	.word	0x08004d85
 8004d30:	08004d75 	.word	0x08004d75
 8004d34:	08004d85 	.word	0x08004d85
 8004d38:	08004d85 	.word	0x08004d85
 8004d3c:	08004d85 	.word	0x08004d85
 8004d40:	08004d85 	.word	0x08004d85
 8004d44:	08004d85 	.word	0x08004d85
 8004d48:	08004d85 	.word	0x08004d85
 8004d4c:	08004d85 	.word	0x08004d85
 8004d50:	08004d7d 	.word	0x08004d7d
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5a:	e0bc      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d62:	e0b8      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004d64:	2308      	movs	r3, #8
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6a:	e0b4      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d72:	e0b0      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004d74:	2320      	movs	r3, #32
 8004d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d7a:	e0ac      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004d7c:	2340      	movs	r3, #64	; 0x40
 8004d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d82:	e0a8      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d8a:	e0a4      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a8f      	ldr	r2, [pc, #572]	; (8004fd0 <UART_SetConfig+0x6a0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d130      	bne.n	8004df8 <UART_SetConfig+0x4c8>
 8004d96:	4b8d      	ldr	r3, [pc, #564]	; (8004fcc <UART_SetConfig+0x69c>)
 8004d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	2b05      	cmp	r3, #5
 8004da0:	d826      	bhi.n	8004df0 <UART_SetConfig+0x4c0>
 8004da2:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <UART_SetConfig+0x478>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004dc1 	.word	0x08004dc1
 8004dac:	08004dc9 	.word	0x08004dc9
 8004db0:	08004dd1 	.word	0x08004dd1
 8004db4:	08004dd9 	.word	0x08004dd9
 8004db8:	08004de1 	.word	0x08004de1
 8004dbc:	08004de9 	.word	0x08004de9
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc6:	e086      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004dc8:	2304      	movs	r3, #4
 8004dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dce:	e082      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd6:	e07e      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dde:	e07a      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004de0:	2320      	movs	r3, #32
 8004de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004de6:	e076      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004de8:	2340      	movs	r3, #64	; 0x40
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dee:	e072      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004df0:	2380      	movs	r3, #128	; 0x80
 8004df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004df6:	e06e      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a75      	ldr	r2, [pc, #468]	; (8004fd4 <UART_SetConfig+0x6a4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d130      	bne.n	8004e64 <UART_SetConfig+0x534>
 8004e02:	4b72      	ldr	r3, [pc, #456]	; (8004fcc <UART_SetConfig+0x69c>)
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	2b05      	cmp	r3, #5
 8004e0c:	d826      	bhi.n	8004e5c <UART_SetConfig+0x52c>
 8004e0e:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <UART_SetConfig+0x4e4>)
 8004e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e14:	08004e2d 	.word	0x08004e2d
 8004e18:	08004e35 	.word	0x08004e35
 8004e1c:	08004e3d 	.word	0x08004e3d
 8004e20:	08004e45 	.word	0x08004e45
 8004e24:	08004e4d 	.word	0x08004e4d
 8004e28:	08004e55 	.word	0x08004e55
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e32:	e050      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004e34:	2304      	movs	r3, #4
 8004e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e3a:	e04c      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004e3c:	2308      	movs	r3, #8
 8004e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e42:	e048      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004e44:	2310      	movs	r3, #16
 8004e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e4a:	e044      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e52:	e040      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004e54:	2340      	movs	r3, #64	; 0x40
 8004e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e5a:	e03c      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e62:	e038      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a5b      	ldr	r2, [pc, #364]	; (8004fd8 <UART_SetConfig+0x6a8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d130      	bne.n	8004ed0 <UART_SetConfig+0x5a0>
 8004e6e:	4b57      	ldr	r3, [pc, #348]	; (8004fcc <UART_SetConfig+0x69c>)
 8004e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	2b05      	cmp	r3, #5
 8004e78:	d826      	bhi.n	8004ec8 <UART_SetConfig+0x598>
 8004e7a:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <UART_SetConfig+0x550>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004e99 	.word	0x08004e99
 8004e84:	08004ea1 	.word	0x08004ea1
 8004e88:	08004ea9 	.word	0x08004ea9
 8004e8c:	08004eb1 	.word	0x08004eb1
 8004e90:	08004eb9 	.word	0x08004eb9
 8004e94:	08004ec1 	.word	0x08004ec1
 8004e98:	2302      	movs	r3, #2
 8004e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e9e:	e01a      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ea6:	e016      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004ea8:	2308      	movs	r3, #8
 8004eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eae:	e012      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eb6:	e00e      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004eb8:	2320      	movs	r3, #32
 8004eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ebe:	e00a      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004ec0:	2340      	movs	r3, #64	; 0x40
 8004ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec6:	e006      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004ec8:	2380      	movs	r3, #128	; 0x80
 8004eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ece:	e002      	b.n	8004ed6 <UART_SetConfig+0x5a6>
 8004ed0:	2380      	movs	r3, #128	; 0x80
 8004ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a3f      	ldr	r2, [pc, #252]	; (8004fd8 <UART_SetConfig+0x6a8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	f040 80f8 	bne.w	80050d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ee2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	dc46      	bgt.n	8004f78 <UART_SetConfig+0x648>
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	f2c0 8082 	blt.w	8004ff4 <UART_SetConfig+0x6c4>
 8004ef0:	3b02      	subs	r3, #2
 8004ef2:	2b1e      	cmp	r3, #30
 8004ef4:	d87e      	bhi.n	8004ff4 <UART_SetConfig+0x6c4>
 8004ef6:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <UART_SetConfig+0x5cc>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f7f 	.word	0x08004f7f
 8004f00:	08004ff5 	.word	0x08004ff5
 8004f04:	08004f87 	.word	0x08004f87
 8004f08:	08004ff5 	.word	0x08004ff5
 8004f0c:	08004ff5 	.word	0x08004ff5
 8004f10:	08004ff5 	.word	0x08004ff5
 8004f14:	08004f97 	.word	0x08004f97
 8004f18:	08004ff5 	.word	0x08004ff5
 8004f1c:	08004ff5 	.word	0x08004ff5
 8004f20:	08004ff5 	.word	0x08004ff5
 8004f24:	08004ff5 	.word	0x08004ff5
 8004f28:	08004ff5 	.word	0x08004ff5
 8004f2c:	08004ff5 	.word	0x08004ff5
 8004f30:	08004ff5 	.word	0x08004ff5
 8004f34:	08004fa7 	.word	0x08004fa7
 8004f38:	08004ff5 	.word	0x08004ff5
 8004f3c:	08004ff5 	.word	0x08004ff5
 8004f40:	08004ff5 	.word	0x08004ff5
 8004f44:	08004ff5 	.word	0x08004ff5
 8004f48:	08004ff5 	.word	0x08004ff5
 8004f4c:	08004ff5 	.word	0x08004ff5
 8004f50:	08004ff5 	.word	0x08004ff5
 8004f54:	08004ff5 	.word	0x08004ff5
 8004f58:	08004ff5 	.word	0x08004ff5
 8004f5c:	08004ff5 	.word	0x08004ff5
 8004f60:	08004ff5 	.word	0x08004ff5
 8004f64:	08004ff5 	.word	0x08004ff5
 8004f68:	08004ff5 	.word	0x08004ff5
 8004f6c:	08004ff5 	.word	0x08004ff5
 8004f70:	08004ff5 	.word	0x08004ff5
 8004f74:	08004fe7 	.word	0x08004fe7
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d037      	beq.n	8004fec <UART_SetConfig+0x6bc>
 8004f7c:	e03a      	b.n	8004ff4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004f7e:	f7ff f865 	bl	800404c <HAL_RCCEx_GetD3PCLK1Freq>
 8004f82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004f84:	e03c      	b.n	8005000 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff f874 	bl	8004078 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f94:	e034      	b.n	8005000 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f96:	f107 0318 	add.w	r3, r7, #24
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff f9c0 	bl	8004320 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fa4:	e02c      	b.n	8005000 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fa6:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <UART_SetConfig+0x69c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d016      	beq.n	8004fe0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004fb2:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <UART_SetConfig+0x69c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	08db      	lsrs	r3, r3, #3
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	4a07      	ldr	r2, [pc, #28]	; (8004fdc <UART_SetConfig+0x6ac>)
 8004fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004fc4:	e01c      	b.n	8005000 <UART_SetConfig+0x6d0>
 8004fc6:	bf00      	nop
 8004fc8:	40011400 	.word	0x40011400
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	40007800 	.word	0x40007800
 8004fd4:	40007c00 	.word	0x40007c00
 8004fd8:	58000c00 	.word	0x58000c00
 8004fdc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004fe0:	4b9d      	ldr	r3, [pc, #628]	; (8005258 <UART_SetConfig+0x928>)
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fe4:	e00c      	b.n	8005000 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004fe6:	4b9d      	ldr	r3, [pc, #628]	; (800525c <UART_SetConfig+0x92c>)
 8004fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fea:	e009      	b.n	8005000 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ff2:	e005      	b.n	8005000 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004ffe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 81de 	beq.w	80053c4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	4a94      	ldr	r2, [pc, #592]	; (8005260 <UART_SetConfig+0x930>)
 800500e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005012:	461a      	mov	r2, r3
 8005014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005016:	fbb3 f3f2 	udiv	r3, r3, r2
 800501a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	4413      	add	r3, r2
 8005026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005028:	429a      	cmp	r2, r3
 800502a:	d305      	bcc.n	8005038 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005034:	429a      	cmp	r2, r3
 8005036:	d903      	bls.n	8005040 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800503e:	e1c1      	b.n	80053c4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005042:	2200      	movs	r2, #0
 8005044:	60bb      	str	r3, [r7, #8]
 8005046:	60fa      	str	r2, [r7, #12]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	4a84      	ldr	r2, [pc, #528]	; (8005260 <UART_SetConfig+0x930>)
 800504e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005052:	b29b      	uxth	r3, r3
 8005054:	2200      	movs	r2, #0
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800505e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005062:	f7fb f939 	bl	80002d8 <__aeabi_uldivmod>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4610      	mov	r0, r2
 800506c:	4619      	mov	r1, r3
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	020b      	lsls	r3, r1, #8
 8005078:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800507c:	0202      	lsls	r2, r0, #8
 800507e:	6979      	ldr	r1, [r7, #20]
 8005080:	6849      	ldr	r1, [r1, #4]
 8005082:	0849      	lsrs	r1, r1, #1
 8005084:	2000      	movs	r0, #0
 8005086:	460c      	mov	r4, r1
 8005088:	4605      	mov	r5, r0
 800508a:	eb12 0804 	adds.w	r8, r2, r4
 800508e:	eb43 0905 	adc.w	r9, r3, r5
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	469a      	mov	sl, r3
 800509a:	4693      	mov	fp, r2
 800509c:	4652      	mov	r2, sl
 800509e:	465b      	mov	r3, fp
 80050a0:	4640      	mov	r0, r8
 80050a2:	4649      	mov	r1, r9
 80050a4:	f7fb f918 	bl	80002d8 <__aeabi_uldivmod>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4613      	mov	r3, r2
 80050ae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b6:	d308      	bcc.n	80050ca <UART_SetConfig+0x79a>
 80050b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050be:	d204      	bcs.n	80050ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050c6:	60da      	str	r2, [r3, #12]
 80050c8:	e17c      	b.n	80053c4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80050d0:	e178      	b.n	80053c4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050da:	f040 80c5 	bne.w	8005268 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80050de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	dc48      	bgt.n	8005178 <UART_SetConfig+0x848>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	db7b      	blt.n	80051e2 <UART_SetConfig+0x8b2>
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d879      	bhi.n	80051e2 <UART_SetConfig+0x8b2>
 80050ee:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <UART_SetConfig+0x7c4>)
 80050f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f4:	0800517f 	.word	0x0800517f
 80050f8:	08005187 	.word	0x08005187
 80050fc:	080051e3 	.word	0x080051e3
 8005100:	080051e3 	.word	0x080051e3
 8005104:	0800518f 	.word	0x0800518f
 8005108:	080051e3 	.word	0x080051e3
 800510c:	080051e3 	.word	0x080051e3
 8005110:	080051e3 	.word	0x080051e3
 8005114:	0800519f 	.word	0x0800519f
 8005118:	080051e3 	.word	0x080051e3
 800511c:	080051e3 	.word	0x080051e3
 8005120:	080051e3 	.word	0x080051e3
 8005124:	080051e3 	.word	0x080051e3
 8005128:	080051e3 	.word	0x080051e3
 800512c:	080051e3 	.word	0x080051e3
 8005130:	080051e3 	.word	0x080051e3
 8005134:	080051af 	.word	0x080051af
 8005138:	080051e3 	.word	0x080051e3
 800513c:	080051e3 	.word	0x080051e3
 8005140:	080051e3 	.word	0x080051e3
 8005144:	080051e3 	.word	0x080051e3
 8005148:	080051e3 	.word	0x080051e3
 800514c:	080051e3 	.word	0x080051e3
 8005150:	080051e3 	.word	0x080051e3
 8005154:	080051e3 	.word	0x080051e3
 8005158:	080051e3 	.word	0x080051e3
 800515c:	080051e3 	.word	0x080051e3
 8005160:	080051e3 	.word	0x080051e3
 8005164:	080051e3 	.word	0x080051e3
 8005168:	080051e3 	.word	0x080051e3
 800516c:	080051e3 	.word	0x080051e3
 8005170:	080051e3 	.word	0x080051e3
 8005174:	080051d5 	.word	0x080051d5
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	d02e      	beq.n	80051da <UART_SetConfig+0x8aa>
 800517c:	e031      	b.n	80051e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800517e:	f7fd fff3 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8005182:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005184:	e033      	b.n	80051ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005186:	f7fe f805 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 800518a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800518c:	e02f      	b.n	80051ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800518e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005192:	4618      	mov	r0, r3
 8005194:	f7fe ff70 	bl	8004078 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800519c:	e027      	b.n	80051ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800519e:	f107 0318 	add.w	r3, r7, #24
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff f8bc 	bl	8004320 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051ac:	e01f      	b.n	80051ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051ae:	4b2d      	ldr	r3, [pc, #180]	; (8005264 <UART_SetConfig+0x934>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d009      	beq.n	80051ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051ba:	4b2a      	ldr	r3, [pc, #168]	; (8005264 <UART_SetConfig+0x934>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	08db      	lsrs	r3, r3, #3
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	4a24      	ldr	r2, [pc, #144]	; (8005258 <UART_SetConfig+0x928>)
 80051c6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80051cc:	e00f      	b.n	80051ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80051ce:	4b22      	ldr	r3, [pc, #136]	; (8005258 <UART_SetConfig+0x928>)
 80051d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051d2:	e00c      	b.n	80051ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80051d4:	4b21      	ldr	r3, [pc, #132]	; (800525c <UART_SetConfig+0x92c>)
 80051d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051d8:	e009      	b.n	80051ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051e0:	e005      	b.n	80051ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80051ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80e7 	beq.w	80053c4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	4a19      	ldr	r2, [pc, #100]	; (8005260 <UART_SetConfig+0x930>)
 80051fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005200:	461a      	mov	r2, r3
 8005202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005204:	fbb3 f3f2 	udiv	r3, r3, r2
 8005208:	005a      	lsls	r2, r3, #1
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	085b      	lsrs	r3, r3, #1
 8005210:	441a      	add	r2, r3
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	fbb2 f3f3 	udiv	r3, r2, r3
 800521a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	2b0f      	cmp	r3, #15
 8005220:	d916      	bls.n	8005250 <UART_SetConfig+0x920>
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005228:	d212      	bcs.n	8005250 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	b29b      	uxth	r3, r3
 800522e:	f023 030f 	bic.w	r3, r3, #15
 8005232:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	b29b      	uxth	r3, r3
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	b29a      	uxth	r2, r3
 8005240:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005242:	4313      	orrs	r3, r2
 8005244:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800524c:	60da      	str	r2, [r3, #12]
 800524e:	e0b9      	b.n	80053c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005256:	e0b5      	b.n	80053c4 <UART_SetConfig+0xa94>
 8005258:	03d09000 	.word	0x03d09000
 800525c:	003d0900 	.word	0x003d0900
 8005260:	08006004 	.word	0x08006004
 8005264:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005268:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800526c:	2b20      	cmp	r3, #32
 800526e:	dc49      	bgt.n	8005304 <UART_SetConfig+0x9d4>
 8005270:	2b00      	cmp	r3, #0
 8005272:	db7c      	blt.n	800536e <UART_SetConfig+0xa3e>
 8005274:	2b20      	cmp	r3, #32
 8005276:	d87a      	bhi.n	800536e <UART_SetConfig+0xa3e>
 8005278:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <UART_SetConfig+0x950>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	0800530b 	.word	0x0800530b
 8005284:	08005313 	.word	0x08005313
 8005288:	0800536f 	.word	0x0800536f
 800528c:	0800536f 	.word	0x0800536f
 8005290:	0800531b 	.word	0x0800531b
 8005294:	0800536f 	.word	0x0800536f
 8005298:	0800536f 	.word	0x0800536f
 800529c:	0800536f 	.word	0x0800536f
 80052a0:	0800532b 	.word	0x0800532b
 80052a4:	0800536f 	.word	0x0800536f
 80052a8:	0800536f 	.word	0x0800536f
 80052ac:	0800536f 	.word	0x0800536f
 80052b0:	0800536f 	.word	0x0800536f
 80052b4:	0800536f 	.word	0x0800536f
 80052b8:	0800536f 	.word	0x0800536f
 80052bc:	0800536f 	.word	0x0800536f
 80052c0:	0800533b 	.word	0x0800533b
 80052c4:	0800536f 	.word	0x0800536f
 80052c8:	0800536f 	.word	0x0800536f
 80052cc:	0800536f 	.word	0x0800536f
 80052d0:	0800536f 	.word	0x0800536f
 80052d4:	0800536f 	.word	0x0800536f
 80052d8:	0800536f 	.word	0x0800536f
 80052dc:	0800536f 	.word	0x0800536f
 80052e0:	0800536f 	.word	0x0800536f
 80052e4:	0800536f 	.word	0x0800536f
 80052e8:	0800536f 	.word	0x0800536f
 80052ec:	0800536f 	.word	0x0800536f
 80052f0:	0800536f 	.word	0x0800536f
 80052f4:	0800536f 	.word	0x0800536f
 80052f8:	0800536f 	.word	0x0800536f
 80052fc:	0800536f 	.word	0x0800536f
 8005300:	08005361 	.word	0x08005361
 8005304:	2b40      	cmp	r3, #64	; 0x40
 8005306:	d02e      	beq.n	8005366 <UART_SetConfig+0xa36>
 8005308:	e031      	b.n	800536e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800530a:	f7fd ff2d 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 800530e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005310:	e033      	b.n	800537a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005312:	f7fd ff3f 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 8005316:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005318:	e02f      	b.n	800537a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800531a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800531e:	4618      	mov	r0, r3
 8005320:	f7fe feaa 	bl	8004078 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005328:	e027      	b.n	800537a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800532a:	f107 0318 	add.w	r3, r7, #24
 800532e:	4618      	mov	r0, r3
 8005330:	f7fe fff6 	bl	8004320 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005338:	e01f      	b.n	800537a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800533a:	4b2d      	ldr	r3, [pc, #180]	; (80053f0 <UART_SetConfig+0xac0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005346:	4b2a      	ldr	r3, [pc, #168]	; (80053f0 <UART_SetConfig+0xac0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	08db      	lsrs	r3, r3, #3
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	4a28      	ldr	r2, [pc, #160]	; (80053f4 <UART_SetConfig+0xac4>)
 8005352:	fa22 f303 	lsr.w	r3, r2, r3
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005358:	e00f      	b.n	800537a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800535a:	4b26      	ldr	r3, [pc, #152]	; (80053f4 <UART_SetConfig+0xac4>)
 800535c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800535e:	e00c      	b.n	800537a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005360:	4b25      	ldr	r3, [pc, #148]	; (80053f8 <UART_SetConfig+0xac8>)
 8005362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005364:	e009      	b.n	800537a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800536a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800536c:	e005      	b.n	800537a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005378:	bf00      	nop
    }

    if (pclk != 0U)
 800537a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d021      	beq.n	80053c4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	4a1d      	ldr	r2, [pc, #116]	; (80053fc <UART_SetConfig+0xacc>)
 8005386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800538a:	461a      	mov	r2, r3
 800538c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	085b      	lsrs	r3, r3, #1
 8005398:	441a      	add	r2, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a6:	2b0f      	cmp	r3, #15
 80053a8:	d909      	bls.n	80053be <UART_SetConfig+0xa8e>
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b0:	d205      	bcs.n	80053be <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60da      	str	r2, [r3, #12]
 80053bc:	e002      	b.n	80053c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2200      	movs	r2, #0
 80053d8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2200      	movs	r2, #0
 80053de:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80053e0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3748      	adds	r7, #72	; 0x48
 80053e8:	46bd      	mov	sp, r7
 80053ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400
 80053f4:	03d09000 	.word	0x03d09000
 80053f8:	003d0900 	.word	0x003d0900
 80053fc:	08006004 	.word	0x08006004

08005400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01a      	beq.n	8005516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054fe:	d10a      	bne.n	8005516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af02      	add	r7, sp, #8
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005554:	f7fb fd92 	bl	800107c <HAL_GetTick>
 8005558:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b08      	cmp	r3, #8
 8005566:	d10e      	bne.n	8005586 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f82f 	bl	80055da <UART_WaitOnFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e025      	b.n	80055d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b04      	cmp	r3, #4
 8005592:	d10e      	bne.n	80055b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f819 	bl	80055da <UART_WaitOnFlagUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e00f      	b.n	80055d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b09c      	sub	sp, #112	; 0x70
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	4613      	mov	r3, r2
 80055e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ea:	e0a9      	b.n	8005740 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f2:	f000 80a5 	beq.w	8005740 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f6:	f7fb fd41 	bl	800107c <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005602:	429a      	cmp	r2, r3
 8005604:	d302      	bcc.n	800560c <UART_WaitOnFlagUntilTimeout+0x32>
 8005606:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005608:	2b00      	cmp	r3, #0
 800560a:	d140      	bne.n	800568e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005614:	e853 3f00 	ldrex	r3, [r3]
 8005618:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800561a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005620:	667b      	str	r3, [r7, #100]	; 0x64
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800562a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800562c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005630:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005632:	e841 2300 	strex	r3, r2, [r1]
 8005636:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1e6      	bne.n	800560c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3308      	adds	r3, #8
 8005644:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	f023 0301 	bic.w	r3, r3, #1
 8005654:	663b      	str	r3, [r7, #96]	; 0x60
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	3308      	adds	r3, #8
 800565c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800565e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005660:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800566c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e5      	bne.n	800563e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e069      	b.n	8005762 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d051      	beq.n	8005740 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056aa:	d149      	bne.n	8005740 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34
 80056d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e6      	bne.n	80056b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3308      	adds	r3, #8
 80056ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	613b      	str	r3, [r7, #16]
   return(result);
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f023 0301 	bic.w	r3, r3, #1
 80056fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3308      	adds	r3, #8
 8005706:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005708:	623a      	str	r2, [r7, #32]
 800570a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	69f9      	ldr	r1, [r7, #28]
 800570e:	6a3a      	ldr	r2, [r7, #32]
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	61bb      	str	r3, [r7, #24]
   return(result);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e5      	bne.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e010      	b.n	8005762 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	69da      	ldr	r2, [r3, #28]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4013      	ands	r3, r2
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	429a      	cmp	r2, r3
 800574e:	bf0c      	ite	eq
 8005750:	2301      	moveq	r3, #1
 8005752:	2300      	movne	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	429a      	cmp	r2, r3
 800575c:	f43f af46 	beq.w	80055ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3770      	adds	r7, #112	; 0x70
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_UARTEx_DisableFifoMode+0x16>
 800577c:	2302      	movs	r3, #2
 800577e:	e027      	b.n	80057d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2224      	movs	r2, #36	; 0x24
 800578c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0201 	bic.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80057ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e02d      	b.n	8005850 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2224      	movs	r2, #36	; 0x24
 8005800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0201 	bic.w	r2, r2, #1
 800581a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f84f 	bl	80058d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800586c:	2302      	movs	r3, #2
 800586e:	e02d      	b.n	80058cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2224      	movs	r2, #36	; 0x24
 800587c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0201 	bic.w	r2, r2, #1
 8005896:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f811 	bl	80058d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d108      	bne.n	80058f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058f4:	e031      	b.n	800595a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058f6:	2310      	movs	r3, #16
 80058f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80058fa:	2310      	movs	r3, #16
 80058fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	0e5b      	lsrs	r3, r3, #25
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	0f5b      	lsrs	r3, r3, #29
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800591e:	7bbb      	ldrb	r3, [r7, #14]
 8005920:	7b3a      	ldrb	r2, [r7, #12]
 8005922:	4911      	ldr	r1, [pc, #68]	; (8005968 <UARTEx_SetNbDataToProcess+0x94>)
 8005924:	5c8a      	ldrb	r2, [r1, r2]
 8005926:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800592a:	7b3a      	ldrb	r2, [r7, #12]
 800592c:	490f      	ldr	r1, [pc, #60]	; (800596c <UARTEx_SetNbDataToProcess+0x98>)
 800592e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005930:	fb93 f3f2 	sdiv	r3, r3, r2
 8005934:	b29a      	uxth	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	7b7a      	ldrb	r2, [r7, #13]
 8005940:	4909      	ldr	r1, [pc, #36]	; (8005968 <UARTEx_SetNbDataToProcess+0x94>)
 8005942:	5c8a      	ldrb	r2, [r1, r2]
 8005944:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005948:	7b7a      	ldrb	r2, [r7, #13]
 800594a:	4908      	ldr	r1, [pc, #32]	; (800596c <UARTEx_SetNbDataToProcess+0x98>)
 800594c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800594e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005952:	b29a      	uxth	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800595a:	bf00      	nop
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	0800601c 	.word	0x0800601c
 800596c:	08006024 	.word	0x08006024

08005970 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005970:	b084      	sub	sp, #16
 8005972:	b580      	push	{r7, lr}
 8005974:	b084      	sub	sp, #16
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	f107 001c 	add.w	r0, r7, #28
 800597e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	2b01      	cmp	r3, #1
 8005986:	d120      	bne.n	80059ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	4b2a      	ldr	r3, [pc, #168]	; (8005a44 <USB_CoreInit+0xd4>)
 800599a:	4013      	ands	r3, r2
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d105      	bne.n	80059be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 faac 	bl	8005f1c <USB_CoreReset>
 80059c4:	4603      	mov	r3, r0
 80059c6:	73fb      	strb	r3, [r7, #15]
 80059c8:	e01a      	b.n	8005a00 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 faa0 	bl	8005f1c <USB_CoreReset>
 80059dc:	4603      	mov	r3, r0
 80059de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	639a      	str	r2, [r3, #56]	; 0x38
 80059f2:	e005      	b.n	8005a00 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d116      	bne.n	8005a34 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a14:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <USB_CoreInit+0xd8>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f043 0206 	orr.w	r2, r3, #6
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f043 0220 	orr.w	r2, r3, #32
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a40:	b004      	add	sp, #16
 8005a42:	4770      	bx	lr
 8005a44:	ffbdffbf 	.word	0xffbdffbf
 8005a48:	03ee0000 	.word	0x03ee0000

08005a4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f023 0201 	bic.w	r2, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b084      	sub	sp, #16
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d115      	bne.n	8005abc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	f7fb faf9 	bl	8001094 <HAL_Delay>
      ms++;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fa29 	bl	8005f00 <USB_GetMode>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d01e      	beq.n	8005af2 <USB_SetCurrentMode+0x84>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b31      	cmp	r3, #49	; 0x31
 8005ab8:	d9f0      	bls.n	8005a9c <USB_SetCurrentMode+0x2e>
 8005aba:	e01a      	b.n	8005af2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d115      	bne.n	8005aee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ace:	2001      	movs	r0, #1
 8005ad0:	f7fb fae0 	bl	8001094 <HAL_Delay>
      ms++;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa10 	bl	8005f00 <USB_GetMode>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <USB_SetCurrentMode+0x84>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b31      	cmp	r3, #49	; 0x31
 8005aea:	d9f0      	bls.n	8005ace <USB_SetCurrentMode+0x60>
 8005aec:	e001      	b.n	8005af2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e005      	b.n	8005afe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b32      	cmp	r3, #50	; 0x32
 8005af6:	d101      	bne.n	8005afc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e000      	b.n	8005afe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b08:	b084      	sub	sp, #16
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b086      	sub	sp, #24
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b22:	2300      	movs	r3, #0
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	e009      	b.n	8005b3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	3340      	adds	r3, #64	; 0x40
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	2200      	movs	r2, #0
 8005b34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b0e      	cmp	r3, #14
 8005b40:	d9f2      	bls.n	8005b28 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d11c      	bne.n	8005b82 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b56:	f043 0302 	orr.w	r3, r3, #2
 8005b5a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	e005      	b.n	8005b8e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b94:	461a      	mov	r2, r3
 8005b96:	2300      	movs	r3, #0
 8005b98:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba8:	461a      	mov	r2, r3
 8005baa:	680b      	ldr	r3, [r1, #0]
 8005bac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d10c      	bne.n	8005bce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d104      	bne.n	8005bc4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bba:	2100      	movs	r1, #0
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f965 	bl	8005e8c <USB_SetDevSpeed>
 8005bc2:	e008      	b.n	8005bd6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f960 	bl	8005e8c <USB_SetDevSpeed>
 8005bcc:	e003      	b.n	8005bd6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bce:	2103      	movs	r1, #3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f95b 	bl	8005e8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bd6:	2110      	movs	r1, #16
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f8f3 	bl	8005dc4 <USB_FlushTxFifo>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f91f 	bl	8005e2c <USB_FlushRxFifo>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfe:	461a      	mov	r2, r3
 8005c00:	2300      	movs	r3, #0
 8005c02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c16:	461a      	mov	r2, r3
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	e043      	b.n	8005caa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c38:	d118      	bne.n	8005c6c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	e013      	b.n	8005c7e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	461a      	mov	r2, r3
 8005c64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	e008      	b.n	8005c7e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c78:	461a      	mov	r2, r3
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ca2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d3b7      	bcc.n	8005c22 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	e043      	b.n	8005d40 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cce:	d118      	bne.n	8005d02 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	e013      	b.n	8005d14 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	e008      	b.n	8005d14 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2300      	movs	r3, #0
 8005d12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d20:	461a      	mov	r2, r3
 8005d22:	2300      	movs	r3, #0
 8005d24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	461a      	mov	r2, r3
 8005d34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d3b7      	bcc.n	8005cb8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d105      	bne.n	8005d7c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	f043 0210 	orr.w	r2, r3, #16
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699a      	ldr	r2, [r3, #24]
 8005d80:	4b0e      	ldr	r3, [pc, #56]	; (8005dbc <USB_DevInit+0x2b4>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d005      	beq.n	8005d9a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f043 0208 	orr.w	r2, r3, #8
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d105      	bne.n	8005dac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699a      	ldr	r2, [r3, #24]
 8005da4:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <USB_DevInit+0x2b8>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005db8:	b004      	add	sp, #16
 8005dba:	4770      	bx	lr
 8005dbc:	803c3800 	.word	0x803c3800
 8005dc0:	40000004 	.word	0x40000004

08005dc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4a13      	ldr	r2, [pc, #76]	; (8005e28 <USB_FlushTxFifo+0x64>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d901      	bls.n	8005de4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e01b      	b.n	8005e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	daf2      	bge.n	8005dd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	019b      	lsls	r3, r3, #6
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4a08      	ldr	r2, [pc, #32]	; (8005e28 <USB_FlushTxFifo+0x64>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d901      	bls.n	8005e0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e006      	b.n	8005e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d0f0      	beq.n	8005dfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	00030d40 	.word	0x00030d40

08005e2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4a11      	ldr	r2, [pc, #68]	; (8005e88 <USB_FlushRxFifo+0x5c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e018      	b.n	8005e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	daf2      	bge.n	8005e38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2210      	movs	r2, #16
 8005e5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4a08      	ldr	r2, [pc, #32]	; (8005e88 <USB_FlushRxFifo+0x5c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d901      	bls.n	8005e6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e006      	b.n	8005e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	2b10      	cmp	r3, #16
 8005e78:	d0f0      	beq.n	8005e5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	00030d40 	.word	0x00030d40

08005e8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	68f9      	ldr	r1, [r7, #12]
 8005ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eac:	4313      	orrs	r3, r2
 8005eae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ed8:	f023 0303 	bic.w	r3, r3, #3
 8005edc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eec:	f043 0302 	orr.w	r3, r3, #2
 8005ef0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a13      	ldr	r2, [pc, #76]	; (8005f80 <USB_CoreReset+0x64>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d901      	bls.n	8005f3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e01b      	b.n	8005f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	daf2      	bge.n	8005f28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f043 0201 	orr.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3301      	adds	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <USB_CoreReset+0x64>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d901      	bls.n	8005f64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e006      	b.n	8005f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d0f0      	beq.n	8005f52 <USB_CoreReset+0x36>

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	00030d40 	.word	0x00030d40

08005f84 <__libc_init_array>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	4d0d      	ldr	r5, [pc, #52]	; (8005fbc <__libc_init_array+0x38>)
 8005f88:	4c0d      	ldr	r4, [pc, #52]	; (8005fc0 <__libc_init_array+0x3c>)
 8005f8a:	1b64      	subs	r4, r4, r5
 8005f8c:	10a4      	asrs	r4, r4, #2
 8005f8e:	2600      	movs	r6, #0
 8005f90:	42a6      	cmp	r6, r4
 8005f92:	d109      	bne.n	8005fa8 <__libc_init_array+0x24>
 8005f94:	4d0b      	ldr	r5, [pc, #44]	; (8005fc4 <__libc_init_array+0x40>)
 8005f96:	4c0c      	ldr	r4, [pc, #48]	; (8005fc8 <__libc_init_array+0x44>)
 8005f98:	f000 f820 	bl	8005fdc <_init>
 8005f9c:	1b64      	subs	r4, r4, r5
 8005f9e:	10a4      	asrs	r4, r4, #2
 8005fa0:	2600      	movs	r6, #0
 8005fa2:	42a6      	cmp	r6, r4
 8005fa4:	d105      	bne.n	8005fb2 <__libc_init_array+0x2e>
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fac:	4798      	blx	r3
 8005fae:	3601      	adds	r6, #1
 8005fb0:	e7ee      	b.n	8005f90 <__libc_init_array+0xc>
 8005fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb6:	4798      	blx	r3
 8005fb8:	3601      	adds	r6, #1
 8005fba:	e7f2      	b.n	8005fa2 <__libc_init_array+0x1e>
 8005fbc:	08006034 	.word	0x08006034
 8005fc0:	08006034 	.word	0x08006034
 8005fc4:	08006034 	.word	0x08006034
 8005fc8:	08006038 	.word	0x08006038

08005fcc <memset>:
 8005fcc:	4402      	add	r2, r0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d100      	bne.n	8005fd6 <memset+0xa>
 8005fd4:	4770      	bx	lr
 8005fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fda:	e7f9      	b.n	8005fd0 <memset+0x4>

08005fdc <_init>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	bf00      	nop
 8005fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe2:	bc08      	pop	{r3}
 8005fe4:	469e      	mov	lr, r3
 8005fe6:	4770      	bx	lr

08005fe8 <_fini>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	bf00      	nop
 8005fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fee:	bc08      	pop	{r3}
 8005ff0:	469e      	mov	lr, r3
 8005ff2:	4770      	bx	lr
