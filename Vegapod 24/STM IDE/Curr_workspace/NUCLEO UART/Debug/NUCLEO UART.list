
NUCLEO UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006144  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006428  08006428  00016428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006430  08006430  00016430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006434  08006434  00016434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  24000000  08006438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000140  2400001c  08006454  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400015c  08006454  0002015c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001084c  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001f1d  00000000  00000000  00030896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ad8  00000000  00000000  000327b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a30  00000000  00000000  00033290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ec38  00000000  00000000  00033cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001000c  00000000  00000000  000628f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013295c  00000000  00000000  00072904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a5260  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c48  00000000  00000000  001a52b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	2400001c 	.word	0x2400001c
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080063d8 	.word	0x080063d8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000020 	.word	0x24000020
 80002e8:	080063d8 	.word	0x080063d8

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fc2a 	bl	8000e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f822 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f936 	bl	800086c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000600:	f000 f8e0 	bl	80007c4 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000604:	f000 f92a 	bl	800085c <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8000608:	f000 f890 	bl	800072c <MX_UART4_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_UART_Transmit(&huart4,a,sizeof(a),10) != HAL_OK) {
 800060c:	230a      	movs	r3, #10
 800060e:	220a      	movs	r2, #10
 8000610:	4908      	ldr	r1, [pc, #32]	; (8000634 <main+0x44>)
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <main+0x48>)
 8000614:	f004 f876 	bl	8004704 <HAL_UART_Transmit>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d005      	beq.n	800062a <main+0x3a>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <main+0x4c>)
 8000626:	f001 fceb 	bl	8002000 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(250);
 800062a:	20fa      	movs	r0, #250	; 0xfa
 800062c:	f000 fca0 	bl	8000f70 <HAL_Delay>
	  if (HAL_UART_Transmit(&huart4,a,sizeof(a),10) != HAL_OK) {
 8000630:	e7ec      	b.n	800060c <main+0x1c>
 8000632:	bf00      	nop
 8000634:	24000000 	.word	0x24000000
 8000638:	24000038 	.word	0x24000038
 800063c:	58020400 	.word	0x58020400

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09c      	sub	sp, #112	; 0x70
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064a:	224c      	movs	r2, #76	; 0x4c
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f005 feba 	bl	80063c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2220      	movs	r2, #32
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f005 feb4 	bl	80063c8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <SystemClock_Config+0xe4>)
 8000662:	f04f 32ff 	mov.w	r2, #4294967295
 8000666:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800066a:	2004      	movs	r0, #4
 800066c:	f001 fce2 	bl	8002034 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000670:	2300      	movs	r3, #0
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <SystemClock_Config+0xe8>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <SystemClock_Config+0xe8>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <SystemClock_Config+0xe8>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800068c:	bf00      	nop
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <SystemClock_Config+0xe8>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800069a:	d1f8      	bne.n	800068e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800069c:	2321      	movs	r3, #33	; 0x21
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006b6:	2318      	movs	r3, #24
 80006b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006be:	2304      	movs	r3, #4
 80006c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006c6:	230c      	movs	r3, #12
 80006c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fd06 	bl	80020e8 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006e2:	f000 f9dd 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	233f      	movs	r3, #63	; 0x3f
 80006e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2303      	movs	r3, #3
 80006ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f002 f8f0 	bl	80028f0 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000716:	f000 f9c3 	bl	8000aa0 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3770      	adds	r7, #112	; 0x70
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58024400 	.word	0x58024400
 8000728:	58024800 	.word	0x58024800

0800072c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_UART4_Init+0x90>)
 8000732:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <MX_UART4_Init+0x94>)
 8000734:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_UART4_Init+0x90>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_UART4_Init+0x90>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_UART4_Init+0x90>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_UART4_Init+0x90>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_UART4_Init+0x90>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_UART4_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_UART4_Init+0x90>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_UART4_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_UART4_Init+0x90>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_UART4_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000774:	4811      	ldr	r0, [pc, #68]	; (80007bc <MX_UART4_Init+0x90>)
 8000776:	f003 ff75 	bl	8004664 <HAL_UART_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000780:	f000 f98e 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000784:	2100      	movs	r1, #0
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <MX_UART4_Init+0x90>)
 8000788:	f005 fd30 	bl	80061ec <HAL_UARTEx_SetTxFifoThreshold>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000792:	f000 f985 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000796:	2100      	movs	r1, #0
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <MX_UART4_Init+0x90>)
 800079a:	f005 fd65 	bl	8006268 <HAL_UARTEx_SetRxFifoThreshold>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80007a4:	f000 f97c 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_UART4_Init+0x90>)
 80007aa:	f005 fce6 	bl	800617a <HAL_UARTEx_DisableFifoMode>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80007b4:	f000 f974 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	24000038 	.word	0x24000038
 80007c0:	40004c00 	.word	0x40004c00

080007c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_USART3_UART_Init+0x90>)
 80007ca:	4a23      	ldr	r2, [pc, #140]	; (8000858 <MX_USART3_UART_Init+0x94>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_USART3_UART_Init+0x90>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_USART3_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_USART3_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_USART3_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_USART3_UART_Init+0x90>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_USART3_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_USART3_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_USART3_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_USART3_UART_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_USART3_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800080c:	4811      	ldr	r0, [pc, #68]	; (8000854 <MX_USART3_UART_Init+0x90>)
 800080e:	f003 ff29 	bl	8004664 <HAL_UART_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000818:	f000 f942 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_USART3_UART_Init+0x90>)
 8000820:	f005 fce4 	bl	80061ec <HAL_UARTEx_SetTxFifoThreshold>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800082a:	f000 f939 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082e:	2100      	movs	r1, #0
 8000830:	4808      	ldr	r0, [pc, #32]	; (8000854 <MX_USART3_UART_Init+0x90>)
 8000832:	f005 fd19 	bl	8006268 <HAL_UARTEx_SetRxFifoThreshold>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800083c:	f000 f930 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_USART3_UART_Init+0x90>)
 8000842:	f005 fc9a 	bl	800617a <HAL_UARTEx_DisableFifoMode>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800084c:	f000 f928 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	240000c8 	.word	0x240000c8
 8000858:	40004800 	.word	0x40004800

0800085c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08e      	sub	sp, #56	; 0x38
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b80      	ldr	r3, [pc, #512]	; (8000a84 <MX_GPIO_Init+0x218>)
 8000884:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000888:	4a7e      	ldr	r2, [pc, #504]	; (8000a84 <MX_GPIO_Init+0x218>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000892:	4b7c      	ldr	r3, [pc, #496]	; (8000a84 <MX_GPIO_Init+0x218>)
 8000894:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	623b      	str	r3, [r7, #32]
 800089e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a0:	4b78      	ldr	r3, [pc, #480]	; (8000a84 <MX_GPIO_Init+0x218>)
 80008a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a6:	4a77      	ldr	r2, [pc, #476]	; (8000a84 <MX_GPIO_Init+0x218>)
 80008a8:	f043 0320 	orr.w	r3, r3, #32
 80008ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008b0:	4b74      	ldr	r3, [pc, #464]	; (8000a84 <MX_GPIO_Init+0x218>)
 80008b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b6:	f003 0320 	and.w	r3, r3, #32
 80008ba:	61fb      	str	r3, [r7, #28]
 80008bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	4b71      	ldr	r3, [pc, #452]	; (8000a84 <MX_GPIO_Init+0x218>)
 80008c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c4:	4a6f      	ldr	r2, [pc, #444]	; (8000a84 <MX_GPIO_Init+0x218>)
 80008c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ce:	4b6d      	ldr	r3, [pc, #436]	; (8000a84 <MX_GPIO_Init+0x218>)
 80008d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d8:	61bb      	str	r3, [r7, #24]
 80008da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b69      	ldr	r3, [pc, #420]	; (8000a84 <MX_GPIO_Init+0x218>)
 80008de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008e2:	4a68      	ldr	r2, [pc, #416]	; (8000a84 <MX_GPIO_Init+0x218>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ec:	4b65      	ldr	r3, [pc, #404]	; (8000a84 <MX_GPIO_Init+0x218>)
 80008ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b62      	ldr	r3, [pc, #392]	; (8000a84 <MX_GPIO_Init+0x218>)
 80008fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000900:	4a60      	ldr	r2, [pc, #384]	; (8000a84 <MX_GPIO_Init+0x218>)
 8000902:	f043 0302 	orr.w	r3, r3, #2
 8000906:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800090a:	4b5e      	ldr	r3, [pc, #376]	; (8000a84 <MX_GPIO_Init+0x218>)
 800090c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000910:	f003 0302 	and.w	r3, r3, #2
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000918:	4b5a      	ldr	r3, [pc, #360]	; (8000a84 <MX_GPIO_Init+0x218>)
 800091a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800091e:	4a59      	ldr	r2, [pc, #356]	; (8000a84 <MX_GPIO_Init+0x218>)
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000928:	4b56      	ldr	r3, [pc, #344]	; (8000a84 <MX_GPIO_Init+0x218>)
 800092a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000936:	4b53      	ldr	r3, [pc, #332]	; (8000a84 <MX_GPIO_Init+0x218>)
 8000938:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800093c:	4a51      	ldr	r2, [pc, #324]	; (8000a84 <MX_GPIO_Init+0x218>)
 800093e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000942:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000946:	4b4f      	ldr	r3, [pc, #316]	; (8000a84 <MX_GPIO_Init+0x218>)
 8000948:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800094c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000954:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <MX_GPIO_Init+0x218>)
 8000956:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800095a:	4a4a      	ldr	r2, [pc, #296]	; (8000a84 <MX_GPIO_Init+0x218>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000964:	4b47      	ldr	r3, [pc, #284]	; (8000a84 <MX_GPIO_Init+0x218>)
 8000966:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800096a:	f003 0310 	and.w	r3, r3, #16
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000978:	4843      	ldr	r0, [pc, #268]	; (8000a88 <MX_GPIO_Init+0x21c>)
 800097a:	f001 fb41 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f244 0101 	movw	r1, #16385	; 0x4001
 8000984:	4841      	ldr	r0, [pc, #260]	; (8000a8c <MX_GPIO_Init+0x220>)
 8000986:	f001 fb3b 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2102      	movs	r1, #2
 800098e:	4840      	ldr	r0, [pc, #256]	; (8000a90 <MX_GPIO_Init+0x224>)
 8000990:	f001 fb36 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	483a      	ldr	r0, [pc, #232]	; (8000a94 <MX_GPIO_Init+0x228>)
 80009aa:	f001 f979 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80009ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4830      	ldr	r0, [pc, #192]	; (8000a88 <MX_GPIO_Init+0x21c>)
 80009c8:	f001 f96a 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009cc:	f244 0301 	movw	r3, #16385	; 0x4001
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	4829      	ldr	r0, [pc, #164]	; (8000a8c <MX_GPIO_Init+0x220>)
 80009e6:	f001 f95b 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009ea:	2380      	movs	r3, #128	; 0x80
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	4619      	mov	r1, r3
 80009fe:	4826      	ldr	r0, [pc, #152]	; (8000a98 <MX_GPIO_Init+0x22c>)
 8000a00:	f001 f94e 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	4619      	mov	r1, r3
 8000a18:	4820      	ldr	r0, [pc, #128]	; (8000a9c <MX_GPIO_Init+0x230>)
 8000a1a:	f001 f941 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a30:	230a      	movs	r3, #10
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4818      	ldr	r0, [pc, #96]	; (8000a9c <MX_GPIO_Init+0x230>)
 8000a3c:	f001 f930 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000a40:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	4810      	ldr	r0, [pc, #64]	; (8000a9c <MX_GPIO_Init+0x230>)
 8000a5a:	f001 f921 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4806      	ldr	r0, [pc, #24]	; (8000a90 <MX_GPIO_Init+0x224>)
 8000a76:	f001 f913 	bl	8001ca0 <HAL_GPIO_Init>

}
 8000a7a:	bf00      	nop
 8000a7c:	3738      	adds	r7, #56	; 0x38
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	58024400 	.word	0x58024400
 8000a88:	58021400 	.word	0x58021400
 8000a8c:	58020400 	.word	0x58020400
 8000a90:	58021000 	.word	0x58021000
 8000a94:	58020800 	.word	0x58020800
 8000a98:	58021800 	.word	0x58021800
 8000a9c:	58020000 	.word	0x58020000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_MspInit+0x30>)
 8000ab4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ab8:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x30>)
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x30>)
 8000ac4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	58024400 	.word	0x58024400

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b0ba      	sub	sp, #232	; 0xe8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	22b8      	movs	r2, #184	; 0xb8
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f005 fc61 	bl	80063c8 <memset>
  if(huart->Instance==UART4)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a5f      	ldr	r2, [pc, #380]	; (8000c88 <HAL_UART_MspInit+0x1a8>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d16f      	bne.n	8000bf0 <HAL_UART_MspInit+0x110>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fa72 	bl	8003008 <HAL_RCCEx_PeriphCLKConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b2a:	f7ff ffb9 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b2e:	4b57      	ldr	r3, [pc, #348]	; (8000c8c <HAL_UART_MspInit+0x1ac>)
 8000b30:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b34:	4a55      	ldr	r2, [pc, #340]	; (8000c8c <HAL_UART_MspInit+0x1ac>)
 8000b36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b3a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000b3e:	4b53      	ldr	r3, [pc, #332]	; (8000c8c <HAL_UART_MspInit+0x1ac>)
 8000b40:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000b44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b4f      	ldr	r3, [pc, #316]	; (8000c8c <HAL_UART_MspInit+0x1ac>)
 8000b4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b52:	4a4e      	ldr	r2, [pc, #312]	; (8000c8c <HAL_UART_MspInit+0x1ac>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b5c:	4b4b      	ldr	r3, [pc, #300]	; (8000c8c <HAL_UART_MspInit+0x1ac>)
 8000b5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b48      	ldr	r3, [pc, #288]	; (8000c8c <HAL_UART_MspInit+0x1ac>)
 8000b6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b70:	4a46      	ldr	r2, [pc, #280]	; (8000c8c <HAL_UART_MspInit+0x1ac>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b7a:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <HAL_UART_MspInit+0x1ac>)
 8000b7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000baa:	4619      	mov	r1, r3
 8000bac:	4838      	ldr	r0, [pc, #224]	; (8000c90 <HAL_UART_MspInit+0x1b0>)
 8000bae:	f001 f877 	bl	8001ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	482e      	ldr	r0, [pc, #184]	; (8000c94 <HAL_UART_MspInit+0x1b4>)
 8000bda:	f001 f861 	bl	8001ca0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2034      	movs	r0, #52	; 0x34
 8000be4:	f000 fac3 	bl	800116e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000be8:	2034      	movs	r0, #52	; 0x34
 8000bea:	f000 fada 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bee:	e047      	b.n	8000c80 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART3)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a28      	ldr	r2, [pc, #160]	; (8000c98 <HAL_UART_MspInit+0x1b8>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d142      	bne.n	8000c80 <HAL_UART_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 f9fd 	bl	8003008 <HAL_RCCEx_PeriphCLKConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8000c14:	f7ff ff44 	bl	8000aa0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <HAL_UART_MspInit+0x1ac>)
 8000c1a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c1e:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <HAL_UART_MspInit+0x1ac>)
 8000c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c24:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_UART_MspInit+0x1ac>)
 8000c2a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_UART_MspInit+0x1ac>)
 8000c38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c3c:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <HAL_UART_MspInit+0x1ac>)
 8000c3e:	f043 0308 	orr.w	r3, r3, #8
 8000c42:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_UART_MspInit+0x1ac>)
 8000c48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c6e:	2307      	movs	r3, #7
 8000c70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4808      	ldr	r0, [pc, #32]	; (8000c9c <HAL_UART_MspInit+0x1bc>)
 8000c7c:	f001 f810 	bl	8001ca0 <HAL_GPIO_Init>
}
 8000c80:	bf00      	nop
 8000c82:	37e8      	adds	r7, #232	; 0xe8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40004c00 	.word	0x40004c00
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58020000 	.word	0x58020000
 8000c94:	58020800 	.word	0x58020800
 8000c98:	40004800 	.word	0x40004800
 8000c9c:	58020c00 	.word	0x58020c00

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f920 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <UART4_IRQHandler+0x10>)
 8000cfa:	f003 fd99 	bl	8004830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	24000038 	.word	0x24000038

08000d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <SystemInit+0xd0>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a31      	ldr	r2, [pc, #196]	; (8000dd8 <SystemInit+0xd0>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <SystemInit+0xd4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 030f 	and.w	r3, r3, #15
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d807      	bhi.n	8000d38 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d28:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <SystemInit+0xd4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f023 030f 	bic.w	r3, r3, #15
 8000d30:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <SystemInit+0xd4>)
 8000d32:	f043 0303 	orr.w	r3, r3, #3
 8000d36:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d38:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <SystemInit+0xd8>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a28      	ldr	r2, [pc, #160]	; (8000de0 <SystemInit+0xd8>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d44:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <SystemInit+0xd8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d4a:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <SystemInit+0xd8>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	4924      	ldr	r1, [pc, #144]	; (8000de0 <SystemInit+0xd8>)
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <SystemInit+0xdc>)
 8000d52:	4013      	ands	r3, r2
 8000d54:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <SystemInit+0xd4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 030c 	and.w	r3, r3, #12
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d007      	beq.n	8000d72 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <SystemInit+0xd4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f023 030f 	bic.w	r3, r3, #15
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <SystemInit+0xd4>)
 8000d6c:	f043 0303 	orr.w	r3, r3, #3
 8000d70:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <SystemInit+0xd8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <SystemInit+0xd8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <SystemInit+0xd8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <SystemInit+0xd8>)
 8000d86:	4a18      	ldr	r2, [pc, #96]	; (8000de8 <SystemInit+0xe0>)
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <SystemInit+0xd8>)
 8000d8c:	4a17      	ldr	r2, [pc, #92]	; (8000dec <SystemInit+0xe4>)
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <SystemInit+0xd8>)
 8000d92:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <SystemInit+0xe8>)
 8000d94:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <SystemInit+0xd8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <SystemInit+0xd8>)
 8000d9e:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <SystemInit+0xe8>)
 8000da0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <SystemInit+0xd8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <SystemInit+0xd8>)
 8000daa:	4a11      	ldr	r2, [pc, #68]	; (8000df0 <SystemInit+0xe8>)
 8000dac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <SystemInit+0xd8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <SystemInit+0xd8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a09      	ldr	r2, [pc, #36]	; (8000de0 <SystemInit+0xd8>)
 8000dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <SystemInit+0xd8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <SystemInit+0xec>)
 8000dc8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000dcc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00
 8000ddc:	52002000 	.word	0x52002000
 8000de0:	58024400 	.word	0x58024400
 8000de4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000de8:	02020200 	.word	0x02020200
 8000dec:	01ff0000 	.word	0x01ff0000
 8000df0:	01010280 	.word	0x01010280
 8000df4:	52004000 	.word	0x52004000

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dfc:	f7ff ff84 	bl	8000d08 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e02:	490d      	ldr	r1, [pc, #52]	; (8000e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e18:	4c0a      	ldr	r4, [pc, #40]	; (8000e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f005 faab 	bl	8006380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fbe1 	bl	80005f0 <main>
  bx  lr
 8000e2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000e34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e38:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 8000e3c:	08006438 	.word	0x08006438
  ldr r2, =_sbss
 8000e40:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 8000e44:	2400015c 	.word	0x2400015c

08000e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC_IRQHandler>
	...

08000e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e52:	2003      	movs	r0, #3
 8000e54:	f000 f980 	bl	8001158 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e58:	f001 ff00 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_Init+0x68>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	0a1b      	lsrs	r3, r3, #8
 8000e64:	f003 030f 	and.w	r3, r3, #15
 8000e68:	4913      	ldr	r1, [pc, #76]	; (8000eb8 <HAL_Init+0x6c>)
 8000e6a:	5ccb      	ldrb	r3, [r1, r3]
 8000e6c:	f003 031f 	and.w	r3, r3, #31
 8000e70:	fa22 f303 	lsr.w	r3, r2, r3
 8000e74:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_Init+0x68>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <HAL_Init+0x6c>)
 8000e80:	5cd3      	ldrb	r3, [r2, r3]
 8000e82:	f003 031f 	and.w	r3, r3, #31
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8c:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <HAL_Init+0x70>)
 8000e8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_Init+0x74>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 f814 	bl	8000ec4 <HAL_InitTick>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e002      	b.n	8000eac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea6:	f7ff fe01 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	080063f0 	.word	0x080063f0
 8000ebc:	24000010 	.word	0x24000010
 8000ec0:	2400000c 	.word	0x2400000c

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_InitTick+0x60>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d101      	bne.n	8000ed8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e021      	b.n	8000f1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <HAL_InitTick+0x64>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_InitTick+0x60>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f965 	bl	80011be <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 f92f 	bl	800116e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_InitTick+0x68>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	24000018 	.word	0x24000018
 8000f28:	2400000c 	.word	0x2400000c
 8000f2c:	24000014 	.word	0x24000014

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	24000018 	.word	0x24000018
 8000f54:	24000158 	.word	0x24000158

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	24000158 	.word	0x24000158

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff ffee 	bl	8000f58 <HAL_GetTick>
 8000f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d005      	beq.n	8000f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_Delay+0x44>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f96:	bf00      	nop
 8000f98:	f7ff ffde 	bl	8000f58 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8f7      	bhi.n	8000f98 <HAL_Delay+0x28>
  {
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	24000018 	.word	0x24000018

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x40>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00
 8000ffc:	05fa0000 	.word	0x05fa0000

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db0b      	blt.n	8001046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	f003 021f 	and.w	r2, r3, #31
 8001034:	4907      	ldr	r1, [pc, #28]	; (8001054 <__NVIC_EnableIRQ+0x38>)
 8001036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f202 	lsl.w	r2, r0, r2
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001124:	d301      	bcc.n	800112a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001126:	2301      	movs	r3, #1
 8001128:	e00f      	b.n	800114a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <SysTick_Config+0x40>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001132:	210f      	movs	r1, #15
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f7ff ff8e 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <SysTick_Config+0x40>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SysTick_Config+0x40>)
 8001144:	2207      	movs	r2, #7
 8001146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	e000e010 	.word	0xe000e010

08001158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff29 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff40 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff90 	bl	80010ac <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5f 	bl	8001058 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff33 	bl	800101c <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa4 	bl	8001114 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff feba 	bl	8000f58 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e2dc      	b.n	80017aa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d008      	beq.n	800120e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e2cd      	b.n	80017aa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a76      	ldr	r2, [pc, #472]	; (80013ec <HAL_DMA_Abort+0x214>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d04a      	beq.n	80012ae <HAL_DMA_Abort+0xd6>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a74      	ldr	r2, [pc, #464]	; (80013f0 <HAL_DMA_Abort+0x218>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d045      	beq.n	80012ae <HAL_DMA_Abort+0xd6>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a73      	ldr	r2, [pc, #460]	; (80013f4 <HAL_DMA_Abort+0x21c>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d040      	beq.n	80012ae <HAL_DMA_Abort+0xd6>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a71      	ldr	r2, [pc, #452]	; (80013f8 <HAL_DMA_Abort+0x220>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d03b      	beq.n	80012ae <HAL_DMA_Abort+0xd6>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a70      	ldr	r2, [pc, #448]	; (80013fc <HAL_DMA_Abort+0x224>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d036      	beq.n	80012ae <HAL_DMA_Abort+0xd6>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a6e      	ldr	r2, [pc, #440]	; (8001400 <HAL_DMA_Abort+0x228>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d031      	beq.n	80012ae <HAL_DMA_Abort+0xd6>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a6d      	ldr	r2, [pc, #436]	; (8001404 <HAL_DMA_Abort+0x22c>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d02c      	beq.n	80012ae <HAL_DMA_Abort+0xd6>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a6b      	ldr	r2, [pc, #428]	; (8001408 <HAL_DMA_Abort+0x230>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d027      	beq.n	80012ae <HAL_DMA_Abort+0xd6>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a6a      	ldr	r2, [pc, #424]	; (800140c <HAL_DMA_Abort+0x234>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d022      	beq.n	80012ae <HAL_DMA_Abort+0xd6>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a68      	ldr	r2, [pc, #416]	; (8001410 <HAL_DMA_Abort+0x238>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d01d      	beq.n	80012ae <HAL_DMA_Abort+0xd6>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a67      	ldr	r2, [pc, #412]	; (8001414 <HAL_DMA_Abort+0x23c>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d018      	beq.n	80012ae <HAL_DMA_Abort+0xd6>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a65      	ldr	r2, [pc, #404]	; (8001418 <HAL_DMA_Abort+0x240>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_DMA_Abort+0xd6>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a64      	ldr	r2, [pc, #400]	; (800141c <HAL_DMA_Abort+0x244>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d00e      	beq.n	80012ae <HAL_DMA_Abort+0xd6>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a62      	ldr	r2, [pc, #392]	; (8001420 <HAL_DMA_Abort+0x248>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d009      	beq.n	80012ae <HAL_DMA_Abort+0xd6>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a61      	ldr	r2, [pc, #388]	; (8001424 <HAL_DMA_Abort+0x24c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d004      	beq.n	80012ae <HAL_DMA_Abort+0xd6>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a5f      	ldr	r2, [pc, #380]	; (8001428 <HAL_DMA_Abort+0x250>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d101      	bne.n	80012b2 <HAL_DMA_Abort+0xda>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <HAL_DMA_Abort+0xdc>
 80012b2:	2300      	movs	r3, #0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d013      	beq.n	80012e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 021e 	bic.w	r2, r2, #30
 80012c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	695a      	ldr	r2, [r3, #20]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	e00a      	b.n	80012f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 020e 	bic.w	r2, r2, #14
 80012ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a3c      	ldr	r2, [pc, #240]	; (80013ec <HAL_DMA_Abort+0x214>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d072      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a3a      	ldr	r2, [pc, #232]	; (80013f0 <HAL_DMA_Abort+0x218>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d06d      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a39      	ldr	r2, [pc, #228]	; (80013f4 <HAL_DMA_Abort+0x21c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d068      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a37      	ldr	r2, [pc, #220]	; (80013f8 <HAL_DMA_Abort+0x220>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d063      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a36      	ldr	r2, [pc, #216]	; (80013fc <HAL_DMA_Abort+0x224>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d05e      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a34      	ldr	r2, [pc, #208]	; (8001400 <HAL_DMA_Abort+0x228>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d059      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a33      	ldr	r2, [pc, #204]	; (8001404 <HAL_DMA_Abort+0x22c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d054      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a31      	ldr	r2, [pc, #196]	; (8001408 <HAL_DMA_Abort+0x230>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d04f      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a30      	ldr	r2, [pc, #192]	; (800140c <HAL_DMA_Abort+0x234>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d04a      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a2e      	ldr	r2, [pc, #184]	; (8001410 <HAL_DMA_Abort+0x238>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d045      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a2d      	ldr	r2, [pc, #180]	; (8001414 <HAL_DMA_Abort+0x23c>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d040      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a2b      	ldr	r2, [pc, #172]	; (8001418 <HAL_DMA_Abort+0x240>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d03b      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a2a      	ldr	r2, [pc, #168]	; (800141c <HAL_DMA_Abort+0x244>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d036      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a28      	ldr	r2, [pc, #160]	; (8001420 <HAL_DMA_Abort+0x248>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d031      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a27      	ldr	r2, [pc, #156]	; (8001424 <HAL_DMA_Abort+0x24c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d02c      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a25      	ldr	r2, [pc, #148]	; (8001428 <HAL_DMA_Abort+0x250>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d027      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a24      	ldr	r2, [pc, #144]	; (800142c <HAL_DMA_Abort+0x254>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d022      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a22      	ldr	r2, [pc, #136]	; (8001430 <HAL_DMA_Abort+0x258>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d01d      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a21      	ldr	r2, [pc, #132]	; (8001434 <HAL_DMA_Abort+0x25c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d018      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <HAL_DMA_Abort+0x260>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d013      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a1e      	ldr	r2, [pc, #120]	; (800143c <HAL_DMA_Abort+0x264>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d00e      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <HAL_DMA_Abort+0x268>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d009      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <HAL_DMA_Abort+0x26c>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d004      	beq.n	80013e6 <HAL_DMA_Abort+0x20e>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a19      	ldr	r2, [pc, #100]	; (8001448 <HAL_DMA_Abort+0x270>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d132      	bne.n	800144c <HAL_DMA_Abort+0x274>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e031      	b.n	800144e <HAL_DMA_Abort+0x276>
 80013ea:	bf00      	nop
 80013ec:	40020010 	.word	0x40020010
 80013f0:	40020028 	.word	0x40020028
 80013f4:	40020040 	.word	0x40020040
 80013f8:	40020058 	.word	0x40020058
 80013fc:	40020070 	.word	0x40020070
 8001400:	40020088 	.word	0x40020088
 8001404:	400200a0 	.word	0x400200a0
 8001408:	400200b8 	.word	0x400200b8
 800140c:	40020410 	.word	0x40020410
 8001410:	40020428 	.word	0x40020428
 8001414:	40020440 	.word	0x40020440
 8001418:	40020458 	.word	0x40020458
 800141c:	40020470 	.word	0x40020470
 8001420:	40020488 	.word	0x40020488
 8001424:	400204a0 	.word	0x400204a0
 8001428:	400204b8 	.word	0x400204b8
 800142c:	58025408 	.word	0x58025408
 8001430:	5802541c 	.word	0x5802541c
 8001434:	58025430 	.word	0x58025430
 8001438:	58025444 	.word	0x58025444
 800143c:	58025458 	.word	0x58025458
 8001440:	5802546c 	.word	0x5802546c
 8001444:	58025480 	.word	0x58025480
 8001448:	58025494 	.word	0x58025494
 800144c:	2300      	movs	r3, #0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001460:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a6d      	ldr	r2, [pc, #436]	; (800161c <HAL_DMA_Abort+0x444>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d04a      	beq.n	8001502 <HAL_DMA_Abort+0x32a>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a6b      	ldr	r2, [pc, #428]	; (8001620 <HAL_DMA_Abort+0x448>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d045      	beq.n	8001502 <HAL_DMA_Abort+0x32a>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6a      	ldr	r2, [pc, #424]	; (8001624 <HAL_DMA_Abort+0x44c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d040      	beq.n	8001502 <HAL_DMA_Abort+0x32a>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a68      	ldr	r2, [pc, #416]	; (8001628 <HAL_DMA_Abort+0x450>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d03b      	beq.n	8001502 <HAL_DMA_Abort+0x32a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a67      	ldr	r2, [pc, #412]	; (800162c <HAL_DMA_Abort+0x454>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d036      	beq.n	8001502 <HAL_DMA_Abort+0x32a>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a65      	ldr	r2, [pc, #404]	; (8001630 <HAL_DMA_Abort+0x458>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d031      	beq.n	8001502 <HAL_DMA_Abort+0x32a>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a64      	ldr	r2, [pc, #400]	; (8001634 <HAL_DMA_Abort+0x45c>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d02c      	beq.n	8001502 <HAL_DMA_Abort+0x32a>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a62      	ldr	r2, [pc, #392]	; (8001638 <HAL_DMA_Abort+0x460>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d027      	beq.n	8001502 <HAL_DMA_Abort+0x32a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a61      	ldr	r2, [pc, #388]	; (800163c <HAL_DMA_Abort+0x464>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d022      	beq.n	8001502 <HAL_DMA_Abort+0x32a>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a5f      	ldr	r2, [pc, #380]	; (8001640 <HAL_DMA_Abort+0x468>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d01d      	beq.n	8001502 <HAL_DMA_Abort+0x32a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a5e      	ldr	r2, [pc, #376]	; (8001644 <HAL_DMA_Abort+0x46c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d018      	beq.n	8001502 <HAL_DMA_Abort+0x32a>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a5c      	ldr	r2, [pc, #368]	; (8001648 <HAL_DMA_Abort+0x470>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d013      	beq.n	8001502 <HAL_DMA_Abort+0x32a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a5b      	ldr	r2, [pc, #364]	; (800164c <HAL_DMA_Abort+0x474>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d00e      	beq.n	8001502 <HAL_DMA_Abort+0x32a>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a59      	ldr	r2, [pc, #356]	; (8001650 <HAL_DMA_Abort+0x478>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d009      	beq.n	8001502 <HAL_DMA_Abort+0x32a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a58      	ldr	r2, [pc, #352]	; (8001654 <HAL_DMA_Abort+0x47c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d004      	beq.n	8001502 <HAL_DMA_Abort+0x32a>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a56      	ldr	r2, [pc, #344]	; (8001658 <HAL_DMA_Abort+0x480>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d108      	bne.n	8001514 <HAL_DMA_Abort+0x33c>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	e007      	b.n	8001524 <HAL_DMA_Abort+0x34c>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0201 	bic.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001524:	e013      	b.n	800154e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001526:	f7ff fd17 	bl	8000f58 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b05      	cmp	r3, #5
 8001532:	d90c      	bls.n	800154e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2220      	movs	r2, #32
 8001538:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2203      	movs	r2, #3
 800153e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e12d      	b.n	80017aa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1e5      	bne.n	8001526 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a2f      	ldr	r2, [pc, #188]	; (800161c <HAL_DMA_Abort+0x444>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d04a      	beq.n	80015fa <HAL_DMA_Abort+0x422>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a2d      	ldr	r2, [pc, #180]	; (8001620 <HAL_DMA_Abort+0x448>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d045      	beq.n	80015fa <HAL_DMA_Abort+0x422>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a2c      	ldr	r2, [pc, #176]	; (8001624 <HAL_DMA_Abort+0x44c>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d040      	beq.n	80015fa <HAL_DMA_Abort+0x422>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a2a      	ldr	r2, [pc, #168]	; (8001628 <HAL_DMA_Abort+0x450>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d03b      	beq.n	80015fa <HAL_DMA_Abort+0x422>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a29      	ldr	r2, [pc, #164]	; (800162c <HAL_DMA_Abort+0x454>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d036      	beq.n	80015fa <HAL_DMA_Abort+0x422>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a27      	ldr	r2, [pc, #156]	; (8001630 <HAL_DMA_Abort+0x458>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d031      	beq.n	80015fa <HAL_DMA_Abort+0x422>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a26      	ldr	r2, [pc, #152]	; (8001634 <HAL_DMA_Abort+0x45c>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d02c      	beq.n	80015fa <HAL_DMA_Abort+0x422>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a24      	ldr	r2, [pc, #144]	; (8001638 <HAL_DMA_Abort+0x460>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d027      	beq.n	80015fa <HAL_DMA_Abort+0x422>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a23      	ldr	r2, [pc, #140]	; (800163c <HAL_DMA_Abort+0x464>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d022      	beq.n	80015fa <HAL_DMA_Abort+0x422>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a21      	ldr	r2, [pc, #132]	; (8001640 <HAL_DMA_Abort+0x468>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d01d      	beq.n	80015fa <HAL_DMA_Abort+0x422>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a20      	ldr	r2, [pc, #128]	; (8001644 <HAL_DMA_Abort+0x46c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d018      	beq.n	80015fa <HAL_DMA_Abort+0x422>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <HAL_DMA_Abort+0x470>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d013      	beq.n	80015fa <HAL_DMA_Abort+0x422>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1d      	ldr	r2, [pc, #116]	; (800164c <HAL_DMA_Abort+0x474>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d00e      	beq.n	80015fa <HAL_DMA_Abort+0x422>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <HAL_DMA_Abort+0x478>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d009      	beq.n	80015fa <HAL_DMA_Abort+0x422>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <HAL_DMA_Abort+0x47c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d004      	beq.n	80015fa <HAL_DMA_Abort+0x422>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a18      	ldr	r2, [pc, #96]	; (8001658 <HAL_DMA_Abort+0x480>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d101      	bne.n	80015fe <HAL_DMA_Abort+0x426>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_DMA_Abort+0x428>
 80015fe:	2300      	movs	r3, #0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d02b      	beq.n	800165c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	223f      	movs	r2, #63	; 0x3f
 8001614:	409a      	lsls	r2, r3
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	e02a      	b.n	8001672 <HAL_DMA_Abort+0x49a>
 800161c:	40020010 	.word	0x40020010
 8001620:	40020028 	.word	0x40020028
 8001624:	40020040 	.word	0x40020040
 8001628:	40020058 	.word	0x40020058
 800162c:	40020070 	.word	0x40020070
 8001630:	40020088 	.word	0x40020088
 8001634:	400200a0 	.word	0x400200a0
 8001638:	400200b8 	.word	0x400200b8
 800163c:	40020410 	.word	0x40020410
 8001640:	40020428 	.word	0x40020428
 8001644:	40020440 	.word	0x40020440
 8001648:	40020458 	.word	0x40020458
 800164c:	40020470 	.word	0x40020470
 8001650:	40020488 	.word	0x40020488
 8001654:	400204a0 	.word	0x400204a0
 8001658:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	2201      	movs	r2, #1
 800166c:	409a      	lsls	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a4f      	ldr	r2, [pc, #316]	; (80017b4 <HAL_DMA_Abort+0x5dc>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d072      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a4d      	ldr	r2, [pc, #308]	; (80017b8 <HAL_DMA_Abort+0x5e0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d06d      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a4c      	ldr	r2, [pc, #304]	; (80017bc <HAL_DMA_Abort+0x5e4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d068      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a4a      	ldr	r2, [pc, #296]	; (80017c0 <HAL_DMA_Abort+0x5e8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d063      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a49      	ldr	r2, [pc, #292]	; (80017c4 <HAL_DMA_Abort+0x5ec>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d05e      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a47      	ldr	r2, [pc, #284]	; (80017c8 <HAL_DMA_Abort+0x5f0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d059      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a46      	ldr	r2, [pc, #280]	; (80017cc <HAL_DMA_Abort+0x5f4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d054      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a44      	ldr	r2, [pc, #272]	; (80017d0 <HAL_DMA_Abort+0x5f8>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d04f      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a43      	ldr	r2, [pc, #268]	; (80017d4 <HAL_DMA_Abort+0x5fc>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d04a      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a41      	ldr	r2, [pc, #260]	; (80017d8 <HAL_DMA_Abort+0x600>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d045      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a40      	ldr	r2, [pc, #256]	; (80017dc <HAL_DMA_Abort+0x604>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d040      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a3e      	ldr	r2, [pc, #248]	; (80017e0 <HAL_DMA_Abort+0x608>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d03b      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a3d      	ldr	r2, [pc, #244]	; (80017e4 <HAL_DMA_Abort+0x60c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d036      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a3b      	ldr	r2, [pc, #236]	; (80017e8 <HAL_DMA_Abort+0x610>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d031      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a3a      	ldr	r2, [pc, #232]	; (80017ec <HAL_DMA_Abort+0x614>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d02c      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a38      	ldr	r2, [pc, #224]	; (80017f0 <HAL_DMA_Abort+0x618>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d027      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a37      	ldr	r2, [pc, #220]	; (80017f4 <HAL_DMA_Abort+0x61c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d022      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a35      	ldr	r2, [pc, #212]	; (80017f8 <HAL_DMA_Abort+0x620>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d01d      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a34      	ldr	r2, [pc, #208]	; (80017fc <HAL_DMA_Abort+0x624>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d018      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a32      	ldr	r2, [pc, #200]	; (8001800 <HAL_DMA_Abort+0x628>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a31      	ldr	r2, [pc, #196]	; (8001804 <HAL_DMA_Abort+0x62c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d00e      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a2f      	ldr	r2, [pc, #188]	; (8001808 <HAL_DMA_Abort+0x630>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d009      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a2e      	ldr	r2, [pc, #184]	; (800180c <HAL_DMA_Abort+0x634>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d004      	beq.n	8001762 <HAL_DMA_Abort+0x58a>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a2c      	ldr	r2, [pc, #176]	; (8001810 <HAL_DMA_Abort+0x638>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d101      	bne.n	8001766 <HAL_DMA_Abort+0x58e>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_DMA_Abort+0x590>
 8001766:	2300      	movs	r3, #0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d015      	beq.n	8001798 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001774:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00c      	beq.n	8001798 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800178c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001796:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40020010 	.word	0x40020010
 80017b8:	40020028 	.word	0x40020028
 80017bc:	40020040 	.word	0x40020040
 80017c0:	40020058 	.word	0x40020058
 80017c4:	40020070 	.word	0x40020070
 80017c8:	40020088 	.word	0x40020088
 80017cc:	400200a0 	.word	0x400200a0
 80017d0:	400200b8 	.word	0x400200b8
 80017d4:	40020410 	.word	0x40020410
 80017d8:	40020428 	.word	0x40020428
 80017dc:	40020440 	.word	0x40020440
 80017e0:	40020458 	.word	0x40020458
 80017e4:	40020470 	.word	0x40020470
 80017e8:	40020488 	.word	0x40020488
 80017ec:	400204a0 	.word	0x400204a0
 80017f0:	400204b8 	.word	0x400204b8
 80017f4:	58025408 	.word	0x58025408
 80017f8:	5802541c 	.word	0x5802541c
 80017fc:	58025430 	.word	0x58025430
 8001800:	58025444 	.word	0x58025444
 8001804:	58025458 	.word	0x58025458
 8001808:	5802546c 	.word	0x5802546c
 800180c:	58025480 	.word	0x58025480
 8001810:	58025494 	.word	0x58025494

08001814 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e237      	b.n	8001c96 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d004      	beq.n	800183c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e22c      	b.n	8001c96 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a5c      	ldr	r2, [pc, #368]	; (80019b4 <HAL_DMA_Abort_IT+0x1a0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d04a      	beq.n	80018dc <HAL_DMA_Abort_IT+0xc8>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a5b      	ldr	r2, [pc, #364]	; (80019b8 <HAL_DMA_Abort_IT+0x1a4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d045      	beq.n	80018dc <HAL_DMA_Abort_IT+0xc8>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a59      	ldr	r2, [pc, #356]	; (80019bc <HAL_DMA_Abort_IT+0x1a8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d040      	beq.n	80018dc <HAL_DMA_Abort_IT+0xc8>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a58      	ldr	r2, [pc, #352]	; (80019c0 <HAL_DMA_Abort_IT+0x1ac>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d03b      	beq.n	80018dc <HAL_DMA_Abort_IT+0xc8>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a56      	ldr	r2, [pc, #344]	; (80019c4 <HAL_DMA_Abort_IT+0x1b0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d036      	beq.n	80018dc <HAL_DMA_Abort_IT+0xc8>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a55      	ldr	r2, [pc, #340]	; (80019c8 <HAL_DMA_Abort_IT+0x1b4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d031      	beq.n	80018dc <HAL_DMA_Abort_IT+0xc8>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a53      	ldr	r2, [pc, #332]	; (80019cc <HAL_DMA_Abort_IT+0x1b8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d02c      	beq.n	80018dc <HAL_DMA_Abort_IT+0xc8>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a52      	ldr	r2, [pc, #328]	; (80019d0 <HAL_DMA_Abort_IT+0x1bc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d027      	beq.n	80018dc <HAL_DMA_Abort_IT+0xc8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a50      	ldr	r2, [pc, #320]	; (80019d4 <HAL_DMA_Abort_IT+0x1c0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d022      	beq.n	80018dc <HAL_DMA_Abort_IT+0xc8>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a4f      	ldr	r2, [pc, #316]	; (80019d8 <HAL_DMA_Abort_IT+0x1c4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d01d      	beq.n	80018dc <HAL_DMA_Abort_IT+0xc8>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a4d      	ldr	r2, [pc, #308]	; (80019dc <HAL_DMA_Abort_IT+0x1c8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d018      	beq.n	80018dc <HAL_DMA_Abort_IT+0xc8>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a4c      	ldr	r2, [pc, #304]	; (80019e0 <HAL_DMA_Abort_IT+0x1cc>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d013      	beq.n	80018dc <HAL_DMA_Abort_IT+0xc8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a4a      	ldr	r2, [pc, #296]	; (80019e4 <HAL_DMA_Abort_IT+0x1d0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00e      	beq.n	80018dc <HAL_DMA_Abort_IT+0xc8>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a49      	ldr	r2, [pc, #292]	; (80019e8 <HAL_DMA_Abort_IT+0x1d4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d009      	beq.n	80018dc <HAL_DMA_Abort_IT+0xc8>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a47      	ldr	r2, [pc, #284]	; (80019ec <HAL_DMA_Abort_IT+0x1d8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d004      	beq.n	80018dc <HAL_DMA_Abort_IT+0xc8>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a46      	ldr	r2, [pc, #280]	; (80019f0 <HAL_DMA_Abort_IT+0x1dc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d101      	bne.n	80018e0 <HAL_DMA_Abort_IT+0xcc>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <HAL_DMA_Abort_IT+0xce>
 80018e0:	2300      	movs	r3, #0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8086 	beq.w	80019f4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2204      	movs	r2, #4
 80018ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a2f      	ldr	r2, [pc, #188]	; (80019b4 <HAL_DMA_Abort_IT+0x1a0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d04a      	beq.n	8001990 <HAL_DMA_Abort_IT+0x17c>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a2e      	ldr	r2, [pc, #184]	; (80019b8 <HAL_DMA_Abort_IT+0x1a4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d045      	beq.n	8001990 <HAL_DMA_Abort_IT+0x17c>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a2c      	ldr	r2, [pc, #176]	; (80019bc <HAL_DMA_Abort_IT+0x1a8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d040      	beq.n	8001990 <HAL_DMA_Abort_IT+0x17c>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a2b      	ldr	r2, [pc, #172]	; (80019c0 <HAL_DMA_Abort_IT+0x1ac>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d03b      	beq.n	8001990 <HAL_DMA_Abort_IT+0x17c>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a29      	ldr	r2, [pc, #164]	; (80019c4 <HAL_DMA_Abort_IT+0x1b0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d036      	beq.n	8001990 <HAL_DMA_Abort_IT+0x17c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a28      	ldr	r2, [pc, #160]	; (80019c8 <HAL_DMA_Abort_IT+0x1b4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d031      	beq.n	8001990 <HAL_DMA_Abort_IT+0x17c>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a26      	ldr	r2, [pc, #152]	; (80019cc <HAL_DMA_Abort_IT+0x1b8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d02c      	beq.n	8001990 <HAL_DMA_Abort_IT+0x17c>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <HAL_DMA_Abort_IT+0x1bc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d027      	beq.n	8001990 <HAL_DMA_Abort_IT+0x17c>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <HAL_DMA_Abort_IT+0x1c0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d022      	beq.n	8001990 <HAL_DMA_Abort_IT+0x17c>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a22      	ldr	r2, [pc, #136]	; (80019d8 <HAL_DMA_Abort_IT+0x1c4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d01d      	beq.n	8001990 <HAL_DMA_Abort_IT+0x17c>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a20      	ldr	r2, [pc, #128]	; (80019dc <HAL_DMA_Abort_IT+0x1c8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d018      	beq.n	8001990 <HAL_DMA_Abort_IT+0x17c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a1f      	ldr	r2, [pc, #124]	; (80019e0 <HAL_DMA_Abort_IT+0x1cc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d013      	beq.n	8001990 <HAL_DMA_Abort_IT+0x17c>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <HAL_DMA_Abort_IT+0x1d0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d00e      	beq.n	8001990 <HAL_DMA_Abort_IT+0x17c>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <HAL_DMA_Abort_IT+0x1d4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d009      	beq.n	8001990 <HAL_DMA_Abort_IT+0x17c>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a1a      	ldr	r2, [pc, #104]	; (80019ec <HAL_DMA_Abort_IT+0x1d8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d004      	beq.n	8001990 <HAL_DMA_Abort_IT+0x17c>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a19      	ldr	r2, [pc, #100]	; (80019f0 <HAL_DMA_Abort_IT+0x1dc>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d108      	bne.n	80019a2 <HAL_DMA_Abort_IT+0x18e>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e178      	b.n	8001c94 <HAL_DMA_Abort_IT+0x480>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0201 	bic.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e16f      	b.n	8001c94 <HAL_DMA_Abort_IT+0x480>
 80019b4:	40020010 	.word	0x40020010
 80019b8:	40020028 	.word	0x40020028
 80019bc:	40020040 	.word	0x40020040
 80019c0:	40020058 	.word	0x40020058
 80019c4:	40020070 	.word	0x40020070
 80019c8:	40020088 	.word	0x40020088
 80019cc:	400200a0 	.word	0x400200a0
 80019d0:	400200b8 	.word	0x400200b8
 80019d4:	40020410 	.word	0x40020410
 80019d8:	40020428 	.word	0x40020428
 80019dc:	40020440 	.word	0x40020440
 80019e0:	40020458 	.word	0x40020458
 80019e4:	40020470 	.word	0x40020470
 80019e8:	40020488 	.word	0x40020488
 80019ec:	400204a0 	.word	0x400204a0
 80019f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 020e 	bic.w	r2, r2, #14
 8001a02:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a6c      	ldr	r2, [pc, #432]	; (8001bbc <HAL_DMA_Abort_IT+0x3a8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d04a      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x290>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a6b      	ldr	r2, [pc, #428]	; (8001bc0 <HAL_DMA_Abort_IT+0x3ac>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d045      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x290>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a69      	ldr	r2, [pc, #420]	; (8001bc4 <HAL_DMA_Abort_IT+0x3b0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d040      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x290>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a68      	ldr	r2, [pc, #416]	; (8001bc8 <HAL_DMA_Abort_IT+0x3b4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d03b      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x290>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a66      	ldr	r2, [pc, #408]	; (8001bcc <HAL_DMA_Abort_IT+0x3b8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d036      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x290>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a65      	ldr	r2, [pc, #404]	; (8001bd0 <HAL_DMA_Abort_IT+0x3bc>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d031      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x290>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a63      	ldr	r2, [pc, #396]	; (8001bd4 <HAL_DMA_Abort_IT+0x3c0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d02c      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x290>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a62      	ldr	r2, [pc, #392]	; (8001bd8 <HAL_DMA_Abort_IT+0x3c4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d027      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x290>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a60      	ldr	r2, [pc, #384]	; (8001bdc <HAL_DMA_Abort_IT+0x3c8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d022      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x290>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a5f      	ldr	r2, [pc, #380]	; (8001be0 <HAL_DMA_Abort_IT+0x3cc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d01d      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x290>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a5d      	ldr	r2, [pc, #372]	; (8001be4 <HAL_DMA_Abort_IT+0x3d0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d018      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x290>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a5c      	ldr	r2, [pc, #368]	; (8001be8 <HAL_DMA_Abort_IT+0x3d4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d013      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x290>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a5a      	ldr	r2, [pc, #360]	; (8001bec <HAL_DMA_Abort_IT+0x3d8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00e      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x290>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a59      	ldr	r2, [pc, #356]	; (8001bf0 <HAL_DMA_Abort_IT+0x3dc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d009      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x290>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a57      	ldr	r2, [pc, #348]	; (8001bf4 <HAL_DMA_Abort_IT+0x3e0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d004      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0x290>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a56      	ldr	r2, [pc, #344]	; (8001bf8 <HAL_DMA_Abort_IT+0x3e4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d108      	bne.n	8001ab6 <HAL_DMA_Abort_IT+0x2a2>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e007      	b.n	8001ac6 <HAL_DMA_Abort_IT+0x2b2>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0201 	bic.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a3c      	ldr	r2, [pc, #240]	; (8001bbc <HAL_DMA_Abort_IT+0x3a8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d072      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a3a      	ldr	r2, [pc, #232]	; (8001bc0 <HAL_DMA_Abort_IT+0x3ac>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d06d      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a39      	ldr	r2, [pc, #228]	; (8001bc4 <HAL_DMA_Abort_IT+0x3b0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d068      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a37      	ldr	r2, [pc, #220]	; (8001bc8 <HAL_DMA_Abort_IT+0x3b4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d063      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a36      	ldr	r2, [pc, #216]	; (8001bcc <HAL_DMA_Abort_IT+0x3b8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d05e      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a34      	ldr	r2, [pc, #208]	; (8001bd0 <HAL_DMA_Abort_IT+0x3bc>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d059      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a33      	ldr	r2, [pc, #204]	; (8001bd4 <HAL_DMA_Abort_IT+0x3c0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d054      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a31      	ldr	r2, [pc, #196]	; (8001bd8 <HAL_DMA_Abort_IT+0x3c4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d04f      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a30      	ldr	r2, [pc, #192]	; (8001bdc <HAL_DMA_Abort_IT+0x3c8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d04a      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a2e      	ldr	r2, [pc, #184]	; (8001be0 <HAL_DMA_Abort_IT+0x3cc>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d045      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a2d      	ldr	r2, [pc, #180]	; (8001be4 <HAL_DMA_Abort_IT+0x3d0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d040      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2b      	ldr	r2, [pc, #172]	; (8001be8 <HAL_DMA_Abort_IT+0x3d4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d03b      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a2a      	ldr	r2, [pc, #168]	; (8001bec <HAL_DMA_Abort_IT+0x3d8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d036      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a28      	ldr	r2, [pc, #160]	; (8001bf0 <HAL_DMA_Abort_IT+0x3dc>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d031      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a27      	ldr	r2, [pc, #156]	; (8001bf4 <HAL_DMA_Abort_IT+0x3e0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d02c      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a25      	ldr	r2, [pc, #148]	; (8001bf8 <HAL_DMA_Abort_IT+0x3e4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d027      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a24      	ldr	r2, [pc, #144]	; (8001bfc <HAL_DMA_Abort_IT+0x3e8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d022      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a22      	ldr	r2, [pc, #136]	; (8001c00 <HAL_DMA_Abort_IT+0x3ec>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01d      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a21      	ldr	r2, [pc, #132]	; (8001c04 <HAL_DMA_Abort_IT+0x3f0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d018      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <HAL_DMA_Abort_IT+0x3f4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d013      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <HAL_DMA_Abort_IT+0x3f8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d00e      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <HAL_DMA_Abort_IT+0x3fc>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d009      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <HAL_DMA_Abort_IT+0x400>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d004      	beq.n	8001bb6 <HAL_DMA_Abort_IT+0x3a2>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_DMA_Abort_IT+0x404>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d132      	bne.n	8001c1c <HAL_DMA_Abort_IT+0x408>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e031      	b.n	8001c1e <HAL_DMA_Abort_IT+0x40a>
 8001bba:	bf00      	nop
 8001bbc:	40020010 	.word	0x40020010
 8001bc0:	40020028 	.word	0x40020028
 8001bc4:	40020040 	.word	0x40020040
 8001bc8:	40020058 	.word	0x40020058
 8001bcc:	40020070 	.word	0x40020070
 8001bd0:	40020088 	.word	0x40020088
 8001bd4:	400200a0 	.word	0x400200a0
 8001bd8:	400200b8 	.word	0x400200b8
 8001bdc:	40020410 	.word	0x40020410
 8001be0:	40020428 	.word	0x40020428
 8001be4:	40020440 	.word	0x40020440
 8001be8:	40020458 	.word	0x40020458
 8001bec:	40020470 	.word	0x40020470
 8001bf0:	40020488 	.word	0x40020488
 8001bf4:	400204a0 	.word	0x400204a0
 8001bf8:	400204b8 	.word	0x400204b8
 8001bfc:	58025408 	.word	0x58025408
 8001c00:	5802541c 	.word	0x5802541c
 8001c04:	58025430 	.word	0x58025430
 8001c08:	58025444 	.word	0x58025444
 8001c0c:	58025458 	.word	0x58025458
 8001c10:	5802546c 	.word	0x5802546c
 8001c14:	58025480 	.word	0x58025480
 8001c18:	58025494 	.word	0x58025494
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d028      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c30:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	2201      	movs	r2, #1
 8001c42:	409a      	lsls	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c50:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00c      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c68:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c72:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001cae:	4b89      	ldr	r3, [pc, #548]	; (8001ed4 <HAL_GPIO_Init+0x234>)
 8001cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cb2:	e194      	b.n	8001fde <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2101      	movs	r1, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8186 	beq.w	8001fd8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d005      	beq.n	8001ce4 <HAL_GPIO_Init+0x44>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d130      	bne.n	8001d46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	f003 0201 	and.w	r2, r3, #1
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d017      	beq.n	8001d82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d123      	bne.n	8001dd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3208      	adds	r2, #8
 8001d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	69b9      	ldr	r1, [r7, #24]
 8001dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0203 	and.w	r2, r3, #3
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80e0 	beq.w	8001fd8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e18:	4b2f      	ldr	r3, [pc, #188]	; (8001ed8 <HAL_GPIO_Init+0x238>)
 8001e1a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001e1e:	4a2e      	ldr	r2, [pc, #184]	; (8001ed8 <HAL_GPIO_Init+0x238>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001e28:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_GPIO_Init+0x238>)
 8001e2a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e36:	4a29      	ldr	r2, [pc, #164]	; (8001edc <HAL_GPIO_Init+0x23c>)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a20      	ldr	r2, [pc, #128]	; (8001ee0 <HAL_GPIO_Init+0x240>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d052      	beq.n	8001f08 <HAL_GPIO_Init+0x268>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <HAL_GPIO_Init+0x244>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d031      	beq.n	8001ece <HAL_GPIO_Init+0x22e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ee8 <HAL_GPIO_Init+0x248>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d02b      	beq.n	8001eca <HAL_GPIO_Init+0x22a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <HAL_GPIO_Init+0x24c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d025      	beq.n	8001ec6 <HAL_GPIO_Init+0x226>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <HAL_GPIO_Init+0x250>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01f      	beq.n	8001ec2 <HAL_GPIO_Init+0x222>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a1b      	ldr	r2, [pc, #108]	; (8001ef4 <HAL_GPIO_Init+0x254>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d019      	beq.n	8001ebe <HAL_GPIO_Init+0x21e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <HAL_GPIO_Init+0x258>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_GPIO_Init+0x21a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a19      	ldr	r2, [pc, #100]	; (8001efc <HAL_GPIO_Init+0x25c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00d      	beq.n	8001eb6 <HAL_GPIO_Init+0x216>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_GPIO_Init+0x260>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d007      	beq.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_GPIO_Init+0x264>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d101      	bne.n	8001eae <HAL_GPIO_Init+0x20e>
 8001eaa:	2309      	movs	r3, #9
 8001eac:	e02d      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001eae:	230a      	movs	r3, #10
 8001eb0:	e02b      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	e029      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	e027      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001eba:	2306      	movs	r3, #6
 8001ebc:	e025      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001ebe:	2305      	movs	r3, #5
 8001ec0:	e023      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	e021      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e01f      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e01d      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e01b      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001ed2:	bf00      	nop
 8001ed4:	58000080 	.word	0x58000080
 8001ed8:	58024400 	.word	0x58024400
 8001edc:	58000400 	.word	0x58000400
 8001ee0:	58020000 	.word	0x58020000
 8001ee4:	58020400 	.word	0x58020400
 8001ee8:	58020800 	.word	0x58020800
 8001eec:	58020c00 	.word	0x58020c00
 8001ef0:	58021000 	.word	0x58021000
 8001ef4:	58021400 	.word	0x58021400
 8001ef8:	58021800 	.word	0x58021800
 8001efc:	58021c00 	.word	0x58021c00
 8001f00:	58022000 	.word	0x58022000
 8001f04:	58022400 	.word	0x58022400
 8001f08:	2300      	movs	r3, #0
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	f002 0203 	and.w	r2, r2, #3
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	4093      	lsls	r3, r2
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f1a:	4938      	ldr	r1, [pc, #224]	; (8001ffc <HAL_GPIO_Init+0x35c>)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f47f ae63 	bne.w	8001cb4 <HAL_GPIO_Init+0x14>
  }
}
 8001fee:	bf00      	nop
 8001ff0:	bf00      	nop
 8001ff2:	3724      	adds	r7, #36	; 0x24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	58000400 	.word	0x58000400

08002000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
 800200c:	4613      	mov	r3, r2
 800200e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002010:	787b      	ldrb	r3, [r7, #1]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800201c:	e003      	b.n	8002026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800201e:	887b      	ldrh	r3, [r7, #2]
 8002020:	041a      	lsls	r2, r3, #16
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	619a      	str	r2, [r3, #24]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800203c:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	2b06      	cmp	r3, #6
 8002046:	d00a      	beq.n	800205e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e040      	b.n	80020dc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e03e      	b.n	80020dc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800205e:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002066:	491f      	ldr	r1, [pc, #124]	; (80020e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4313      	orrs	r3, r2
 800206c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800206e:	f7fe ff73 	bl	8000f58 <HAL_GetTick>
 8002072:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002074:	e009      	b.n	800208a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002076:	f7fe ff6f 	bl	8000f58 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002084:	d901      	bls.n	800208a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e028      	b.n	80020dc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002096:	d1ee      	bne.n	8002076 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b1e      	cmp	r3, #30
 800209c:	d008      	beq.n	80020b0 <HAL_PWREx_ConfigSupply+0x7c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b2e      	cmp	r3, #46	; 0x2e
 80020a2:	d005      	beq.n	80020b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b1d      	cmp	r3, #29
 80020a8:	d002      	beq.n	80020b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b2d      	cmp	r3, #45	; 0x2d
 80020ae:	d114      	bne.n	80020da <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80020b0:	f7fe ff52 	bl	8000f58 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80020b6:	e009      	b.n	80020cc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020b8:	f7fe ff4e 	bl	8000f58 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020c6:	d901      	bls.n	80020cc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e007      	b.n	80020dc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_PWREx_ConfigSupply+0xb0>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d8:	d1ee      	bne.n	80020b8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	58024800 	.word	0x58024800

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08c      	sub	sp, #48	; 0x30
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e3f4      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 80b3 	beq.w	800226e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002108:	4b95      	ldr	r3, [pc, #596]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002112:	4b93      	ldr	r3, [pc, #588]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211a:	2b10      	cmp	r3, #16
 800211c:	d007      	beq.n	800212e <HAL_RCC_OscConfig+0x46>
 800211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002120:	2b18      	cmp	r3, #24
 8002122:	d112      	bne.n	800214a <HAL_RCC_OscConfig+0x62>
 8002124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d10d      	bne.n	800214a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212e:	4b8c      	ldr	r3, [pc, #560]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8098 	beq.w	800226c <HAL_RCC_OscConfig+0x184>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	f040 8093 	bne.w	800226c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e3cc      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x7a>
 8002154:	4b82      	ldr	r3, [pc, #520]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a81      	ldr	r2, [pc, #516]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 800215a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e058      	b.n	8002214 <HAL_RCC_OscConfig+0x12c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d112      	bne.n	8002190 <HAL_RCC_OscConfig+0xa8>
 800216a:	4b7d      	ldr	r3, [pc, #500]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7c      	ldr	r2, [pc, #496]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 8002170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b7a      	ldr	r3, [pc, #488]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a79      	ldr	r2, [pc, #484]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 800217c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b77      	ldr	r3, [pc, #476]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a76      	ldr	r2, [pc, #472]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 8002188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	e041      	b.n	8002214 <HAL_RCC_OscConfig+0x12c>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002198:	d112      	bne.n	80021c0 <HAL_RCC_OscConfig+0xd8>
 800219a:	4b71      	ldr	r3, [pc, #452]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a70      	ldr	r2, [pc, #448]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80021a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	4b6e      	ldr	r3, [pc, #440]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a6d      	ldr	r2, [pc, #436]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80021ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b6b      	ldr	r3, [pc, #428]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a6a      	ldr	r2, [pc, #424]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80021b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e029      	b.n	8002214 <HAL_RCC_OscConfig+0x12c>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80021c8:	d112      	bne.n	80021f0 <HAL_RCC_OscConfig+0x108>
 80021ca:	4b65      	ldr	r3, [pc, #404]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a64      	ldr	r2, [pc, #400]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80021d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b62      	ldr	r3, [pc, #392]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a61      	ldr	r2, [pc, #388]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80021dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b5f      	ldr	r3, [pc, #380]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a5e      	ldr	r2, [pc, #376]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e011      	b.n	8002214 <HAL_RCC_OscConfig+0x12c>
 80021f0:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a5a      	ldr	r2, [pc, #360]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80021f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b58      	ldr	r3, [pc, #352]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a57      	ldr	r2, [pc, #348]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 8002202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b55      	ldr	r3, [pc, #340]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a54      	ldr	r2, [pc, #336]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 800220e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7fe fe9c 	bl	8000f58 <HAL_GetTick>
 8002220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7fe fe98 	bl	8000f58 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e356      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002236:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x13c>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe fe88 	bl	8000f58 <HAL_GetTick>
 8002248:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800224c:	f7fe fe84 	bl	8000f58 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e342      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800225e:	4b40      	ldr	r3, [pc, #256]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x164>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 808d 	beq.w	8002396 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227c:	4b38      	ldr	r3, [pc, #224]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002284:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002286:	4b36      	ldr	r3, [pc, #216]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 8002288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1ba>
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	2b18      	cmp	r3, #24
 8002296:	d137      	bne.n	8002308 <HAL_RCC_OscConfig+0x220>
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d132      	bne.n	8002308 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022a2:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_RCC_OscConfig+0x1d2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e314      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 0219 	bic.w	r2, r3, #25
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	4926      	ldr	r1, [pc, #152]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022cc:	f7fe fe44 	bl	8000f58 <HAL_GetTick>
 80022d0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022d4:	f7fe fe40 	bl	8000f58 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e2fe      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022e6:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	061b      	lsls	r3, r3, #24
 8002300:	4917      	ldr	r1, [pc, #92]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002306:	e046      	b.n	8002396 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d029      	beq.n	8002364 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 0219 	bic.w	r2, r3, #25
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4910      	ldr	r1, [pc, #64]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7fe fe19 	bl	8000f58 <HAL_GetTick>
 8002326:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232a:	f7fe fe15 	bl	8000f58 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e2d3      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	061b      	lsls	r3, r3, #24
 8002356:	4902      	ldr	r1, [pc, #8]	; (8002360 <HAL_RCC_OscConfig+0x278>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
 800235c:	e01b      	b.n	8002396 <HAL_RCC_OscConfig+0x2ae>
 800235e:	bf00      	nop
 8002360:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002364:	4b97      	ldr	r3, [pc, #604]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a96      	ldr	r2, [pc, #600]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 800236a:	f023 0301 	bic.w	r3, r3, #1
 800236e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe fdf2 	bl	8000f58 <HAL_GetTick>
 8002374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002378:	f7fe fdee 	bl	8000f58 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e2ac      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800238a:	4b8e      	ldr	r3, [pc, #568]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d06a      	beq.n	8002478 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a2:	4b88      	ldr	r3, [pc, #544]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023ac:	4b85      	ldr	r3, [pc, #532]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d007      	beq.n	80023c8 <HAL_RCC_OscConfig+0x2e0>
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b18      	cmp	r3, #24
 80023bc:	d11b      	bne.n	80023f6 <HAL_RCC_OscConfig+0x30e>
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d116      	bne.n	80023f6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023c8:	4b7e      	ldr	r3, [pc, #504]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_OscConfig+0x2f8>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	2b80      	cmp	r3, #128	; 0x80
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e281      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023e0:	4b78      	ldr	r3, [pc, #480]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	061b      	lsls	r3, r3, #24
 80023ee:	4975      	ldr	r1, [pc, #468]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023f4:	e040      	b.n	8002478 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d023      	beq.n	8002446 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80023fe:	4b71      	ldr	r3, [pc, #452]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a70      	ldr	r2, [pc, #448]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 8002404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240a:	f7fe fda5 	bl	8000f58 <HAL_GetTick>
 800240e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002412:	f7fe fda1 	bl	8000f58 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e25f      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002424:	4b67      	ldr	r3, [pc, #412]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002430:	4b64      	ldr	r3, [pc, #400]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	061b      	lsls	r3, r3, #24
 800243e:	4961      	ldr	r1, [pc, #388]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 8002440:	4313      	orrs	r3, r2
 8002442:	60cb      	str	r3, [r1, #12]
 8002444:	e018      	b.n	8002478 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002446:	4b5f      	ldr	r3, [pc, #380]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a5e      	ldr	r2, [pc, #376]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 800244c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002452:	f7fe fd81 	bl	8000f58 <HAL_GetTick>
 8002456:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800245a:	f7fe fd7d 	bl	8000f58 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e23b      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800246c:	4b55      	ldr	r3, [pc, #340]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d036      	beq.n	80024f2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d019      	beq.n	80024c0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248c:	4b4d      	ldr	r3, [pc, #308]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 800248e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002490:	4a4c      	ldr	r2, [pc, #304]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002498:	f7fe fd5e 	bl	8000f58 <HAL_GetTick>
 800249c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024a0:	f7fe fd5a 	bl	8000f58 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e218      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024b2:	4b44      	ldr	r3, [pc, #272]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 80024b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x3b8>
 80024be:	e018      	b.n	80024f2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c0:	4b40      	ldr	r3, [pc, #256]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 80024c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c4:	4a3f      	ldr	r2, [pc, #252]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7fe fd44 	bl	8000f58 <HAL_GetTick>
 80024d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d4:	f7fe fd40 	bl	8000f58 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e1fe      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024e6:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 80024e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d036      	beq.n	800256c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d019      	beq.n	800253a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002506:	4b2f      	ldr	r3, [pc, #188]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2e      	ldr	r2, [pc, #184]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 800250c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002510:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002512:	f7fe fd21 	bl	8000f58 <HAL_GetTick>
 8002516:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800251a:	f7fe fd1d 	bl	8000f58 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e1db      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x432>
 8002538:	e018      	b.n	800256c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800253a:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a21      	ldr	r2, [pc, #132]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 8002540:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002544:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002546:	f7fe fd07 	bl	8000f58 <HAL_GetTick>
 800254a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800254e:	f7fe fd03 	bl	8000f58 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e1c1      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f0      	bne.n	800254e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80af 	beq.w	80026d8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <HAL_RCC_OscConfig+0x4e0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_RCC_OscConfig+0x4e0>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002584:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002586:	f7fe fce7 	bl	8000f58 <HAL_GetTick>
 800258a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800258e:	f7fe fce3 	bl	8000f58 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b64      	cmp	r3, #100	; 0x64
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e1a1      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RCC_OscConfig+0x4e0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d10b      	bne.n	80025cc <HAL_RCC_OscConfig+0x4e4>
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	4a02      	ldr	r2, [pc, #8]	; (80025c4 <HAL_RCC_OscConfig+0x4dc>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6713      	str	r3, [r2, #112]	; 0x70
 80025c0:	e05b      	b.n	800267a <HAL_RCC_OscConfig+0x592>
 80025c2:	bf00      	nop
 80025c4:	58024400 	.word	0x58024400
 80025c8:	58024800 	.word	0x58024800
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d112      	bne.n	80025fa <HAL_RCC_OscConfig+0x512>
 80025d4:	4b9d      	ldr	r3, [pc, #628]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	4a9c      	ldr	r2, [pc, #624]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	6713      	str	r3, [r2, #112]	; 0x70
 80025e0:	4b9a      	ldr	r3, [pc, #616]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a99      	ldr	r2, [pc, #612]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80025e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
 80025ec:	4b97      	ldr	r3, [pc, #604]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a96      	ldr	r2, [pc, #600]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80025f2:	f023 0304 	bic.w	r3, r3, #4
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	e03f      	b.n	800267a <HAL_RCC_OscConfig+0x592>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d112      	bne.n	8002628 <HAL_RCC_OscConfig+0x540>
 8002602:	4b92      	ldr	r3, [pc, #584]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a91      	ldr	r2, [pc, #580]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
 800260e:	4b8f      	ldr	r3, [pc, #572]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	4a8e      	ldr	r2, [pc, #568]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002618:	6713      	str	r3, [r2, #112]	; 0x70
 800261a:	4b8c      	ldr	r3, [pc, #560]	; (800284c <HAL_RCC_OscConfig+0x764>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a8b      	ldr	r2, [pc, #556]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e028      	b.n	800267a <HAL_RCC_OscConfig+0x592>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b85      	cmp	r3, #133	; 0x85
 800262e:	d112      	bne.n	8002656 <HAL_RCC_OscConfig+0x56e>
 8002630:	4b86      	ldr	r3, [pc, #536]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a85      	ldr	r2, [pc, #532]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b83      	ldr	r3, [pc, #524]	; (800284c <HAL_RCC_OscConfig+0x764>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a82      	ldr	r2, [pc, #520]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	4b80      	ldr	r3, [pc, #512]	; (800284c <HAL_RCC_OscConfig+0x764>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	4a7f      	ldr	r2, [pc, #508]	; (800284c <HAL_RCC_OscConfig+0x764>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6713      	str	r3, [r2, #112]	; 0x70
 8002654:	e011      	b.n	800267a <HAL_RCC_OscConfig+0x592>
 8002656:	4b7d      	ldr	r3, [pc, #500]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a7c      	ldr	r2, [pc, #496]	; (800284c <HAL_RCC_OscConfig+0x764>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
 8002662:	4b7a      	ldr	r3, [pc, #488]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	4a79      	ldr	r2, [pc, #484]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002668:	f023 0304 	bic.w	r3, r3, #4
 800266c:	6713      	str	r3, [r2, #112]	; 0x70
 800266e:	4b77      	ldr	r3, [pc, #476]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	4a76      	ldr	r2, [pc, #472]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002678:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d015      	beq.n	80026ae <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7fe fc69 	bl	8000f58 <HAL_GetTick>
 8002686:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800268a:	f7fe fc65 	bl	8000f58 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	; 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e121      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026a0:	4b6a      	ldr	r3, [pc, #424]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0ee      	beq.n	800268a <HAL_RCC_OscConfig+0x5a2>
 80026ac:	e014      	b.n	80026d8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7fe fc53 	bl	8000f58 <HAL_GetTick>
 80026b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7fe fc4f 	bl	8000f58 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e10b      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026cc:	4b5f      	ldr	r3, [pc, #380]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ee      	bne.n	80026b6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 8100 	beq.w	80028e2 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80026e2:	4b5a      	ldr	r3, [pc, #360]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ea:	2b18      	cmp	r3, #24
 80026ec:	f000 80bb 	beq.w	8002866 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	f040 8095 	bne.w	8002824 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fa:	4b54      	ldr	r3, [pc, #336]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a53      	ldr	r2, [pc, #332]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002700:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7fe fc27 	bl	8000f58 <HAL_GetTick>
 800270a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270e:	f7fe fc23 	bl	8000f58 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0e1      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002720:	4b4a      	ldr	r3, [pc, #296]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800272c:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_OscConfig+0x764>)
 800272e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002730:	4b47      	ldr	r3, [pc, #284]	; (8002850 <HAL_RCC_OscConfig+0x768>)
 8002732:	4013      	ands	r3, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	430a      	orrs	r2, r1
 8002740:	4942      	ldr	r1, [pc, #264]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002742:	4313      	orrs	r3, r2
 8002744:	628b      	str	r3, [r1, #40]	; 0x28
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	3b01      	subs	r3, #1
 800274c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002754:	3b01      	subs	r3, #1
 8002756:	025b      	lsls	r3, r3, #9
 8002758:	b29b      	uxth	r3, r3
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	3b01      	subs	r3, #1
 8002762:	041b      	lsls	r3, r3, #16
 8002764:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	3b01      	subs	r3, #1
 8002770:	061b      	lsls	r3, r3, #24
 8002772:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002776:	4935      	ldr	r1, [pc, #212]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002778:	4313      	orrs	r3, r2
 800277a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800277c:	4b33      	ldr	r3, [pc, #204]	; (800284c <HAL_RCC_OscConfig+0x764>)
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	4a32      	ldr	r2, [pc, #200]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002788:	4b30      	ldr	r3, [pc, #192]	; (800284c <HAL_RCC_OscConfig+0x764>)
 800278a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800278c:	4b31      	ldr	r3, [pc, #196]	; (8002854 <HAL_RCC_OscConfig+0x76c>)
 800278e:	4013      	ands	r3, r2
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002794:	00d2      	lsls	r2, r2, #3
 8002796:	492d      	ldr	r1, [pc, #180]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002798:	4313      	orrs	r3, r2
 800279a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800279c:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_RCC_OscConfig+0x764>)
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	f023 020c 	bic.w	r2, r3, #12
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	4928      	ldr	r1, [pc, #160]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80027ae:	4b27      	ldr	r3, [pc, #156]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	f023 0202 	bic.w	r2, r3, #2
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	4924      	ldr	r1, [pc, #144]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80027c0:	4b22      	ldr	r3, [pc, #136]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	4a21      	ldr	r2, [pc, #132]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80027c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027cc:	4b1f      	ldr	r3, [pc, #124]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	4a1e      	ldr	r2, [pc, #120]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80027d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80027d8:	4b1c      	ldr	r3, [pc, #112]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	4a1b      	ldr	r2, [pc, #108]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80027de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	4a18      	ldr	r2, [pc, #96]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f0:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a15      	ldr	r2, [pc, #84]	; (800284c <HAL_RCC_OscConfig+0x764>)
 80027f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fe fbac 	bl	8000f58 <HAL_GetTick>
 8002800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002804:	f7fe fba8 	bl	8000f58 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e066      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x71c>
 8002822:	e05e      	b.n	80028e2 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_OscConfig+0x764>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a08      	ldr	r2, [pc, #32]	; (800284c <HAL_RCC_OscConfig+0x764>)
 800282a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800282e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fb92 	bl	8000f58 <HAL_GetTick>
 8002834:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002836:	e00f      	b.n	8002858 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002838:	f7fe fb8e 	bl	8000f58 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d908      	bls.n	8002858 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e04c      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
 800284a:	bf00      	nop
 800284c:	58024400 	.word	0x58024400
 8002850:	fffffc0c 	.word	0xfffffc0c
 8002854:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_OscConfig+0x804>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e9      	bne.n	8002838 <HAL_RCC_OscConfig+0x750>
 8002864:	e03d      	b.n	80028e2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002866:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_RCC_OscConfig+0x804>)
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800286c:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <HAL_RCC_OscConfig+0x804>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	2b01      	cmp	r3, #1
 8002878:	d031      	beq.n	80028de <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d12a      	bne.n	80028de <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002894:	429a      	cmp	r2, r3
 8002896:	d122      	bne.n	80028de <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d11a      	bne.n	80028de <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	0a5b      	lsrs	r3, r3, #9
 80028ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d111      	bne.n	80028de <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d108      	bne.n	80028de <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	0e1b      	lsrs	r3, r3, #24
 80028d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d001      	beq.n	80028e2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3730      	adds	r7, #48	; 0x30
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	58024400 	.word	0x58024400

080028f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e19c      	b.n	8002c3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002904:	4b8a      	ldr	r3, [pc, #552]	; (8002b30 <HAL_RCC_ClockConfig+0x240>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d910      	bls.n	8002934 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b87      	ldr	r3, [pc, #540]	; (8002b30 <HAL_RCC_ClockConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 020f 	bic.w	r2, r3, #15
 800291a:	4985      	ldr	r1, [pc, #532]	; (8002b30 <HAL_RCC_ClockConfig+0x240>)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b83      	ldr	r3, [pc, #524]	; (8002b30 <HAL_RCC_ClockConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e184      	b.n	8002c3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d010      	beq.n	8002962 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	4b7b      	ldr	r3, [pc, #492]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800294c:	429a      	cmp	r2, r3
 800294e:	d908      	bls.n	8002962 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002950:	4b78      	ldr	r3, [pc, #480]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	4975      	ldr	r1, [pc, #468]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 800295e:	4313      	orrs	r3, r2
 8002960:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d010      	beq.n	8002990 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	4b70      	ldr	r3, [pc, #448]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800297a:	429a      	cmp	r2, r3
 800297c:	d908      	bls.n	8002990 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800297e:	4b6d      	ldr	r3, [pc, #436]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	496a      	ldr	r1, [pc, #424]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 800298c:	4313      	orrs	r3, r2
 800298e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b00      	cmp	r3, #0
 800299a:	d010      	beq.n	80029be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699a      	ldr	r2, [r3, #24]
 80029a0:	4b64      	ldr	r3, [pc, #400]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d908      	bls.n	80029be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029ac:	4b61      	ldr	r3, [pc, #388]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	495e      	ldr	r1, [pc, #376]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d010      	beq.n	80029ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d908      	bls.n	80029ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80029da:	4b56      	ldr	r3, [pc, #344]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	4953      	ldr	r1, [pc, #332]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d010      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	4b4d      	ldr	r3, [pc, #308]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d908      	bls.n	8002a1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a08:	4b4a      	ldr	r3, [pc, #296]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f023 020f 	bic.w	r2, r3, #15
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4947      	ldr	r1, [pc, #284]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d055      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a26:	4b43      	ldr	r3, [pc, #268]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4940      	ldr	r1, [pc, #256]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a40:	4b3c      	ldr	r3, [pc, #240]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d121      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0f6      	b.n	8002c3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a58:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d115      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0ea      	b.n	8002c3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d107      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a70:	4b30      	ldr	r3, [pc, #192]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d109      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0de      	b.n	8002c3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a80:	4b2c      	ldr	r3, [pc, #176]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0d6      	b.n	8002c3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a90:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f023 0207 	bic.w	r2, r3, #7
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4925      	ldr	r1, [pc, #148]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa2:	f7fe fa59 	bl	8000f58 <HAL_GetTick>
 8002aa6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa8:	e00a      	b.n	8002ac0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aaa:	f7fe fa55 	bl	8000f58 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e0be      	b.n	8002c3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d1eb      	bne.n	8002aaa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d208      	bcs.n	8002b00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f023 020f 	bic.w	r2, r3, #15
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	490e      	ldr	r1, [pc, #56]	; (8002b34 <HAL_RCC_ClockConfig+0x244>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_ClockConfig+0x240>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d214      	bcs.n	8002b38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_RCC_ClockConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 020f 	bic.w	r2, r3, #15
 8002b16:	4906      	ldr	r1, [pc, #24]	; (8002b30 <HAL_RCC_ClockConfig+0x240>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <HAL_RCC_ClockConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e086      	b.n	8002c3e <HAL_RCC_ClockConfig+0x34e>
 8002b30:	52002000 	.word	0x52002000
 8002b34:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <HAL_RCC_ClockConfig+0x358>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d208      	bcs.n	8002b66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b54:	4b3c      	ldr	r3, [pc, #240]	; (8002c48 <HAL_RCC_ClockConfig+0x358>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	4939      	ldr	r1, [pc, #228]	; (8002c48 <HAL_RCC_ClockConfig+0x358>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d010      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	4b34      	ldr	r3, [pc, #208]	; (8002c48 <HAL_RCC_ClockConfig+0x358>)
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d208      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b82:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_RCC_ClockConfig+0x358>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	492e      	ldr	r1, [pc, #184]	; (8002c48 <HAL_RCC_ClockConfig+0x358>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d010      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699a      	ldr	r2, [r3, #24]
 8002ba4:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <HAL_RCC_ClockConfig+0x358>)
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d208      	bcs.n	8002bc2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bb0:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <HAL_RCC_ClockConfig+0x358>)
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	4922      	ldr	r1, [pc, #136]	; (8002c48 <HAL_RCC_ClockConfig+0x358>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d010      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_RCC_ClockConfig+0x358>)
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d208      	bcs.n	8002bf0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <HAL_RCC_ClockConfig+0x358>)
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4917      	ldr	r1, [pc, #92]	; (8002c48 <HAL_RCC_ClockConfig+0x358>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002bf0:	f000 f834 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <HAL_RCC_ClockConfig+0x358>)
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	0a1b      	lsrs	r3, r3, #8
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	4912      	ldr	r1, [pc, #72]	; (8002c4c <HAL_RCC_ClockConfig+0x35c>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <HAL_RCC_ClockConfig+0x358>)
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <HAL_RCC_ClockConfig+0x35c>)
 8002c18:	5cd3      	ldrb	r3, [r2, r3]
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
 8002c24:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <HAL_RCC_ClockConfig+0x360>)
 8002c26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c28:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <HAL_RCC_ClockConfig+0x364>)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <HAL_RCC_ClockConfig+0x368>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe f946 	bl	8000ec4 <HAL_InitTick>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	080063f0 	.word	0x080063f0
 8002c50:	24000010 	.word	0x24000010
 8002c54:	2400000c 	.word	0x2400000c
 8002c58:	24000014 	.word	0x24000014

08002c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b089      	sub	sp, #36	; 0x24
 8002c60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c62:	4bb3      	ldr	r3, [pc, #716]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c6a:	2b18      	cmp	r3, #24
 8002c6c:	f200 8155 	bhi.w	8002f1a <HAL_RCC_GetSysClockFreq+0x2be>
 8002c70:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c76:	bf00      	nop
 8002c78:	08002cdd 	.word	0x08002cdd
 8002c7c:	08002f1b 	.word	0x08002f1b
 8002c80:	08002f1b 	.word	0x08002f1b
 8002c84:	08002f1b 	.word	0x08002f1b
 8002c88:	08002f1b 	.word	0x08002f1b
 8002c8c:	08002f1b 	.word	0x08002f1b
 8002c90:	08002f1b 	.word	0x08002f1b
 8002c94:	08002f1b 	.word	0x08002f1b
 8002c98:	08002d03 	.word	0x08002d03
 8002c9c:	08002f1b 	.word	0x08002f1b
 8002ca0:	08002f1b 	.word	0x08002f1b
 8002ca4:	08002f1b 	.word	0x08002f1b
 8002ca8:	08002f1b 	.word	0x08002f1b
 8002cac:	08002f1b 	.word	0x08002f1b
 8002cb0:	08002f1b 	.word	0x08002f1b
 8002cb4:	08002f1b 	.word	0x08002f1b
 8002cb8:	08002d09 	.word	0x08002d09
 8002cbc:	08002f1b 	.word	0x08002f1b
 8002cc0:	08002f1b 	.word	0x08002f1b
 8002cc4:	08002f1b 	.word	0x08002f1b
 8002cc8:	08002f1b 	.word	0x08002f1b
 8002ccc:	08002f1b 	.word	0x08002f1b
 8002cd0:	08002f1b 	.word	0x08002f1b
 8002cd4:	08002f1b 	.word	0x08002f1b
 8002cd8:	08002d0f 	.word	0x08002d0f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cdc:	4b94      	ldr	r3, [pc, #592]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d009      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ce8:	4b91      	ldr	r3, [pc, #580]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	08db      	lsrs	r3, r3, #3
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	4a90      	ldr	r2, [pc, #576]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002cfa:	e111      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002cfc:	4b8d      	ldr	r3, [pc, #564]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cfe:	61bb      	str	r3, [r7, #24]
    break;
 8002d00:	e10e      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002d02:	4b8d      	ldr	r3, [pc, #564]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d04:	61bb      	str	r3, [r7, #24]
    break;
 8002d06:	e10b      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002d08:	4b8c      	ldr	r3, [pc, #560]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d0a:	61bb      	str	r3, [r7, #24]
    break;
 8002d0c:	e108      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d0e:	4b88      	ldr	r3, [pc, #544]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002d18:	4b85      	ldr	r3, [pc, #532]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d22:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d24:	4b82      	ldr	r3, [pc, #520]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002d2e:	4b80      	ldr	r3, [pc, #512]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d32:	08db      	lsrs	r3, r3, #3
 8002d34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d46:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80e1 	beq.w	8002f14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	f000 8083 	beq.w	8002e60 <HAL_RCC_GetSysClockFreq+0x204>
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	f200 80a1 	bhi.w	8002ea4 <HAL_RCC_GetSysClockFreq+0x248>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x114>
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d056      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d6e:	e099      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d70:	4b6f      	ldr	r3, [pc, #444]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d02d      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d7c:	4b6c      	ldr	r3, [pc, #432]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	08db      	lsrs	r3, r3, #3
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	4a6b      	ldr	r2, [pc, #428]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	ee07 3a90 	vmov	s15, r3
 8002d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002da6:	4b62      	ldr	r3, [pc, #392]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dae:	ee07 3a90 	vmov	s15, r3
 8002db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002f40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002dd6:	e087      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002f44 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dea:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df2:	ee07 3a90 	vmov	s15, r3
 8002df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dfe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002f40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e1a:	e065      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	ee07 3a90 	vmov	s15, r3
 8002e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e26:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002f48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e2e:	4b40      	ldr	r3, [pc, #256]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e36:	ee07 3a90 	vmov	s15, r3
 8002e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e42:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002f40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e5e:	e043      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	ee07 3a90 	vmov	s15, r3
 8002e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002f4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e72:	4b2f      	ldr	r3, [pc, #188]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7a:	ee07 3a90 	vmov	s15, r3
 8002e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e82:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e86:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002f40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ea2:	e021      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002f48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002f40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ee6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002ee8:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	0a5b      	lsrs	r3, r3, #9
 8002eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	ee07 3a90 	vmov	s15, r3
 8002efc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f00:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f0c:	ee17 3a90 	vmov	r3, s15
 8002f10:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002f12:	e005      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61bb      	str	r3, [r7, #24]
    break;
 8002f18:	e002      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f1c:	61bb      	str	r3, [r7, #24]
    break;
 8002f1e:	bf00      	nop
  }

  return sysclockfreq;
 8002f20:	69bb      	ldr	r3, [r7, #24]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3724      	adds	r7, #36	; 0x24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	58024400 	.word	0x58024400
 8002f34:	03d09000 	.word	0x03d09000
 8002f38:	003d0900 	.word	0x003d0900
 8002f3c:	007a1200 	.word	0x007a1200
 8002f40:	46000000 	.word	0x46000000
 8002f44:	4c742400 	.word	0x4c742400
 8002f48:	4a742400 	.word	0x4a742400
 8002f4c:	4af42400 	.word	0x4af42400

08002f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002f56:	f7ff fe81 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	0a1b      	lsrs	r3, r3, #8
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	490f      	ldr	r1, [pc, #60]	; (8002fa4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f68:	5ccb      	ldrb	r3, [r1, r3]
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f72:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f7e:	5cd3      	ldrb	r3, [r2, r3]
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8a:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f8e:	4a07      	ldr	r2, [pc, #28]	; (8002fac <HAL_RCC_GetHCLKFreq+0x5c>)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f96:	681b      	ldr	r3, [r3, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	58024400 	.word	0x58024400
 8002fa4:	080063f0 	.word	0x080063f0
 8002fa8:	24000010 	.word	0x24000010
 8002fac:	2400000c 	.word	0x2400000c

08002fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002fb4:	f7ff ffcc 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4904      	ldr	r1, [pc, #16]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	58024400 	.word	0x58024400
 8002fd8:	080063f0 	.word	0x080063f0

08002fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002fe0:	f7ff ffb6 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4904      	ldr	r1, [pc, #16]	; (8003004 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	58024400 	.word	0x58024400
 8003004:	080063f0 	.word	0x080063f0

08003008 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003010:	2300      	movs	r3, #0
 8003012:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003014:	2300      	movs	r3, #0
 8003016:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d03f      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003028:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800302c:	d02a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800302e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003032:	d824      	bhi.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003034:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003038:	d018      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800303a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800303e:	d81e      	bhi.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003044:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003048:	d007      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800304a:	e018      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800304c:	4b9f      	ldr	r3, [pc, #636]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	4a9e      	ldr	r2, [pc, #632]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003056:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003058:	e015      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3304      	adds	r3, #4
 800305e:	2102      	movs	r1, #2
 8003060:	4618      	mov	r0, r3
 8003062:	f001 f99b 	bl	800439c <RCCEx_PLL2_Config>
 8003066:	4603      	mov	r3, r0
 8003068:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800306a:	e00c      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3324      	adds	r3, #36	; 0x24
 8003070:	2102      	movs	r1, #2
 8003072:	4618      	mov	r0, r3
 8003074:	f001 fa44 	bl	8004500 <RCCEx_PLL3_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800307c:	e003      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	75fb      	strb	r3, [r7, #23]
      break;
 8003082:	e000      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003084:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003086:	7dfb      	ldrb	r3, [r7, #23]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d109      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800308c:	4b8f      	ldr	r3, [pc, #572]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800308e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003090:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003098:	498c      	ldr	r1, [pc, #560]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800309a:	4313      	orrs	r3, r2
 800309c:	650b      	str	r3, [r1, #80]	; 0x50
 800309e:	e001      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d03d      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d826      	bhi.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80030b8:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	080030d5 	.word	0x080030d5
 80030c4:	080030e3 	.word	0x080030e3
 80030c8:	080030f5 	.word	0x080030f5
 80030cc:	0800310d 	.word	0x0800310d
 80030d0:	0800310d 	.word	0x0800310d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030d4:	4b7d      	ldr	r3, [pc, #500]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	4a7c      	ldr	r2, [pc, #496]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80030da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030e0:	e015      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	2100      	movs	r1, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f001 f957 	bl	800439c <RCCEx_PLL2_Config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030f2:	e00c      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3324      	adds	r3, #36	; 0x24
 80030f8:	2100      	movs	r1, #0
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 fa00 	bl	8004500 <RCCEx_PLL3_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003104:	e003      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	75fb      	strb	r3, [r7, #23]
      break;
 800310a:	e000      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800310c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800310e:	7dfb      	ldrb	r3, [r7, #23]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d109      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003114:	4b6d      	ldr	r3, [pc, #436]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003118:	f023 0207 	bic.w	r2, r3, #7
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003120:	496a      	ldr	r1, [pc, #424]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003122:	4313      	orrs	r3, r2
 8003124:	650b      	str	r3, [r1, #80]	; 0x50
 8003126:	e001      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003134:	2b00      	cmp	r3, #0
 8003136:	d04a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003140:	d031      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003142:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003146:	d82b      	bhi.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800314c:	d02d      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800314e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003152:	d825      	bhi.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003154:	2bc0      	cmp	r3, #192	; 0xc0
 8003156:	d02a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003158:	2bc0      	cmp	r3, #192	; 0xc0
 800315a:	d821      	bhi.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800315c:	2b80      	cmp	r3, #128	; 0x80
 800315e:	d016      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003160:	2b80      	cmp	r3, #128	; 0x80
 8003162:	d81d      	bhi.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003168:	2b40      	cmp	r3, #64	; 0x40
 800316a:	d007      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x174>
 800316c:	e018      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800316e:	4b57      	ldr	r3, [pc, #348]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	4a56      	ldr	r2, [pc, #344]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003178:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800317a:	e019      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3304      	adds	r3, #4
 8003180:	2100      	movs	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f001 f90a 	bl	800439c <RCCEx_PLL2_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800318c:	e010      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3324      	adds	r3, #36	; 0x24
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f001 f9b3 	bl	8004500 <RCCEx_PLL3_Config>
 800319a:	4603      	mov	r3, r0
 800319c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800319e:	e007      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	75fb      	strb	r3, [r7, #23]
      break;
 80031a4:	e004      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80031a6:	bf00      	nop
 80031a8:	e002      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80031aa:	bf00      	nop
 80031ac:	e000      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80031ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80031b6:	4b45      	ldr	r3, [pc, #276]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c2:	4942      	ldr	r1, [pc, #264]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	650b      	str	r3, [r1, #80]	; 0x50
 80031c8:	e001      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
 80031cc:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d04f      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80031e2:	d036      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80031e4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80031e8:	d830      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80031ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ee:	d032      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80031f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f4:	d82a      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80031f6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031fa:	d02e      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x252>
 80031fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003200:	d824      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003206:	d018      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320c:	d81e      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003216:	d007      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003218:	e018      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800321a:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	4a2b      	ldr	r2, [pc, #172]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003224:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003226:	e019      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3304      	adds	r3, #4
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f001 f8b4 	bl	800439c <RCCEx_PLL2_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003238:	e010      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3324      	adds	r3, #36	; 0x24
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f001 f95d 	bl	8004500 <RCCEx_PLL3_Config>
 8003246:	4603      	mov	r3, r0
 8003248:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800324a:	e007      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	75fb      	strb	r3, [r7, #23]
      break;
 8003250:	e004      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003252:	bf00      	nop
 8003254:	e002      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003256:	bf00      	nop
 8003258:	e000      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800325a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003266:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	4917      	ldr	r1, [pc, #92]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003270:	4313      	orrs	r3, r2
 8003272:	650b      	str	r3, [r1, #80]	; 0x50
 8003274:	e001      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d034      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328a:	2b30      	cmp	r3, #48	; 0x30
 800328c:	d01c      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800328e:	2b30      	cmp	r3, #48	; 0x30
 8003290:	d817      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003292:	2b20      	cmp	r3, #32
 8003294:	d00c      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003296:	2b20      	cmp	r3, #32
 8003298:	d813      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d018      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800329e:	2b10      	cmp	r3, #16
 80032a0:	d10f      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	4a09      	ldr	r2, [pc, #36]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80032ae:	e010      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	2102      	movs	r1, #2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 f870 	bl	800439c <RCCEx_PLL2_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80032c0:	e007      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	75fb      	strb	r3, [r7, #23]
      break;
 80032c6:	e004      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 80032c8:	bf00      	nop
 80032ca:	e002      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80032cc:	58024400 	.word	0x58024400
      break;
 80032d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d109      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80032d8:	4b9b      	ldr	r3, [pc, #620]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80032da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e4:	4998      	ldr	r1, [pc, #608]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80032ea:	e001      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
 80032ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d047      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003304:	d030      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800330a:	d82a      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800330c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003310:	d02c      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003312:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003316:	d824      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331c:	d018      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800331e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003322:	d81e      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332c:	d007      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800332e:	e018      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003330:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	4a84      	ldr	r2, [pc, #528]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800333c:	e017      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3304      	adds	r3, #4
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f001 f829 	bl	800439c <RCCEx_PLL2_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800334e:	e00e      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3324      	adds	r3, #36	; 0x24
 8003354:	2100      	movs	r1, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f001 f8d2 	bl	8004500 <RCCEx_PLL3_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003360:	e005      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	75fb      	strb	r3, [r7, #23]
      break;
 8003366:	e002      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003368:	bf00      	nop
 800336a:	e000      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800336c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003374:	4b74      	ldr	r3, [pc, #464]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003378:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003380:	4971      	ldr	r1, [pc, #452]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003382:	4313      	orrs	r3, r2
 8003384:	650b      	str	r3, [r1, #80]	; 0x50
 8003386:	e001      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003388:	7dfb      	ldrb	r3, [r7, #23]
 800338a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d049      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800339c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a0:	d02e      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80033a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a6:	d828      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80033a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033ac:	d02a      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80033ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033b2:	d822      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80033b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033b8:	d026      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80033ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033be:	d81c      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80033c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033c4:	d010      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80033c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033ca:	d816      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01d      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x404>
 80033d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d4:	d111      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3304      	adds	r3, #4
 80033da:	2101      	movs	r1, #1
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 ffdd 	bl	800439c <RCCEx_PLL2_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80033e6:	e012      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3324      	adds	r3, #36	; 0x24
 80033ec:	2101      	movs	r1, #1
 80033ee:	4618      	mov	r0, r3
 80033f0:	f001 f886 	bl	8004500 <RCCEx_PLL3_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80033f8:	e009      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	75fb      	strb	r3, [r7, #23]
      break;
 80033fe:	e006      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003400:	bf00      	nop
 8003402:	e004      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003404:	bf00      	nop
 8003406:	e002      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003408:	bf00      	nop
 800340a:	e000      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800340c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003414:	4b4c      	ldr	r3, [pc, #304]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003418:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003420:	4949      	ldr	r1, [pc, #292]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003422:	4313      	orrs	r3, r2
 8003424:	650b      	str	r3, [r1, #80]	; 0x50
 8003426:	e001      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d053      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800343e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003442:	d034      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003444:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003448:	d82e      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800344a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800344e:	d030      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003454:	d828      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345a:	d02c      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800345c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003460:	d822      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003462:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003466:	d028      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003468:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800346c:	d81c      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800346e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003472:	d010      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003478:	d816      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800347a:	2b00      	cmp	r3, #0
 800347c:	d01f      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800347e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003482:	d111      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3304      	adds	r3, #4
 8003488:	2101      	movs	r1, #1
 800348a:	4618      	mov	r0, r3
 800348c:	f000 ff86 	bl	800439c <RCCEx_PLL2_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003494:	e014      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3324      	adds	r3, #36	; 0x24
 800349a:	2101      	movs	r1, #1
 800349c:	4618      	mov	r0, r3
 800349e:	f001 f82f 	bl	8004500 <RCCEx_PLL3_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80034a6:	e00b      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	75fb      	strb	r3, [r7, #23]
      break;
 80034ac:	e008      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80034ae:	bf00      	nop
 80034b0:	e006      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80034b2:	bf00      	nop
 80034b4:	e004      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80034b6:	bf00      	nop
 80034b8:	e002      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80034ba:	bf00      	nop
 80034bc:	e000      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80034be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034c0:	7dfb      	ldrb	r3, [r7, #23]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80034c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034d4:	491c      	ldr	r1, [pc, #112]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	658b      	str	r3, [r1, #88]	; 0x58
 80034da:	e001      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d031      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034f4:	d00e      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80034f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034fa:	d814      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d015      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003500:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003504:	d10f      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003506:	4b10      	ldr	r3, [pc, #64]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	4a0f      	ldr	r2, [pc, #60]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800350c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003510:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003512:	e00c      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3304      	adds	r3, #4
 8003518:	2101      	movs	r1, #1
 800351a:	4618      	mov	r0, r3
 800351c:	f000 ff3e 	bl	800439c <RCCEx_PLL2_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003524:	e003      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
      break;
 800352a:	e000      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 800352c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003538:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003540:	4901      	ldr	r1, [pc, #4]	; (8003548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003542:	4313      	orrs	r3, r2
 8003544:	650b      	str	r3, [r1, #80]	; 0x50
 8003546:	e003      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8003548:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d032      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	2b03      	cmp	r3, #3
 8003562:	d81b      	bhi.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003564:	a201      	add	r2, pc, #4	; (adr r2, 800356c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356a:	bf00      	nop
 800356c:	080035a3 	.word	0x080035a3
 8003570:	0800357d 	.word	0x0800357d
 8003574:	0800358b 	.word	0x0800358b
 8003578:	080035a3 	.word	0x080035a3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800357c:	4bb2      	ldr	r3, [pc, #712]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	4ab1      	ldr	r2, [pc, #708]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003586:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003588:	e00c      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3304      	adds	r3, #4
 800358e:	2102      	movs	r1, #2
 8003590:	4618      	mov	r0, r3
 8003592:	f000 ff03 	bl	800439c <RCCEx_PLL2_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800359a:	e003      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	75fb      	strb	r3, [r7, #23]
      break;
 80035a0:	e000      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80035a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80035aa:	4ba7      	ldr	r3, [pc, #668]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80035ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ae:	f023 0203 	bic.w	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	49a4      	ldr	r1, [pc, #656]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80035bc:	e001      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8086 	beq.w	80036dc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035d0:	4b9e      	ldr	r3, [pc, #632]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a9d      	ldr	r2, [pc, #628]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035dc:	f7fd fcbc 	bl	8000f58 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035e2:	e009      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e4:	f7fd fcb8 	bl	8000f58 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	; 0x64
 80035f0:	d902      	bls.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	75fb      	strb	r3, [r7, #23]
        break;
 80035f6:	e005      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035f8:	4b94      	ldr	r3, [pc, #592]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ef      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d166      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800360a:	4b8f      	ldr	r3, [pc, #572]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800360c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003614:	4053      	eors	r3, r2
 8003616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361a:	2b00      	cmp	r3, #0
 800361c:	d013      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800361e:	4b8a      	ldr	r3, [pc, #552]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003626:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003628:	4b87      	ldr	r3, [pc, #540]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800362a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362c:	4a86      	ldr	r2, [pc, #536]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800362e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003632:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003634:	4b84      	ldr	r3, [pc, #528]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	4a83      	ldr	r2, [pc, #524]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800363a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003640:	4a81      	ldr	r2, [pc, #516]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800364c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003650:	d115      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003652:	f7fd fc81 	bl	8000f58 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003658:	e00b      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7fd fc7d 	bl	8000f58 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	; 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d902      	bls.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	75fb      	strb	r3, [r7, #23]
            break;
 8003670:	e005      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003672:	4b75      	ldr	r3, [pc, #468]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0ed      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d126      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800368a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003692:	d10d      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8003694:	4b6c      	ldr	r3, [pc, #432]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036a2:	0919      	lsrs	r1, r3, #4
 80036a4:	4b6a      	ldr	r3, [pc, #424]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036a6:	400b      	ands	r3, r1
 80036a8:	4967      	ldr	r1, [pc, #412]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	610b      	str	r3, [r1, #16]
 80036ae:	e005      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80036b0:	4b65      	ldr	r3, [pc, #404]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	4a64      	ldr	r2, [pc, #400]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80036b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036ba:	6113      	str	r3, [r2, #16]
 80036bc:	4b62      	ldr	r3, [pc, #392]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80036be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ca:	495f      	ldr	r1, [pc, #380]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	670b      	str	r3, [r1, #112]	; 0x70
 80036d0:	e004      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	75bb      	strb	r3, [r7, #22]
 80036d6:	e001      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
 80036da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d07f      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ee:	2b28      	cmp	r3, #40	; 0x28
 80036f0:	d866      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80036f2:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	080037c7 	.word	0x080037c7
 80036fc:	080037c1 	.word	0x080037c1
 8003700:	080037c1 	.word	0x080037c1
 8003704:	080037c1 	.word	0x080037c1
 8003708:	080037c1 	.word	0x080037c1
 800370c:	080037c1 	.word	0x080037c1
 8003710:	080037c1 	.word	0x080037c1
 8003714:	080037c1 	.word	0x080037c1
 8003718:	0800379d 	.word	0x0800379d
 800371c:	080037c1 	.word	0x080037c1
 8003720:	080037c1 	.word	0x080037c1
 8003724:	080037c1 	.word	0x080037c1
 8003728:	080037c1 	.word	0x080037c1
 800372c:	080037c1 	.word	0x080037c1
 8003730:	080037c1 	.word	0x080037c1
 8003734:	080037c1 	.word	0x080037c1
 8003738:	080037af 	.word	0x080037af
 800373c:	080037c1 	.word	0x080037c1
 8003740:	080037c1 	.word	0x080037c1
 8003744:	080037c1 	.word	0x080037c1
 8003748:	080037c1 	.word	0x080037c1
 800374c:	080037c1 	.word	0x080037c1
 8003750:	080037c1 	.word	0x080037c1
 8003754:	080037c1 	.word	0x080037c1
 8003758:	080037c7 	.word	0x080037c7
 800375c:	080037c1 	.word	0x080037c1
 8003760:	080037c1 	.word	0x080037c1
 8003764:	080037c1 	.word	0x080037c1
 8003768:	080037c1 	.word	0x080037c1
 800376c:	080037c1 	.word	0x080037c1
 8003770:	080037c1 	.word	0x080037c1
 8003774:	080037c1 	.word	0x080037c1
 8003778:	080037c7 	.word	0x080037c7
 800377c:	080037c1 	.word	0x080037c1
 8003780:	080037c1 	.word	0x080037c1
 8003784:	080037c1 	.word	0x080037c1
 8003788:	080037c1 	.word	0x080037c1
 800378c:	080037c1 	.word	0x080037c1
 8003790:	080037c1 	.word	0x080037c1
 8003794:	080037c1 	.word	0x080037c1
 8003798:	080037c7 	.word	0x080037c7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3304      	adds	r3, #4
 80037a0:	2101      	movs	r1, #1
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fdfa 	bl	800439c <RCCEx_PLL2_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80037ac:	e00c      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3324      	adds	r3, #36	; 0x24
 80037b2:	2101      	movs	r1, #1
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fea3 	bl	8004500 <RCCEx_PLL3_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80037be:	e003      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	75fb      	strb	r3, [r7, #23]
      break;
 80037c4:	e000      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80037c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80037ce:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80037d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037dc:	491a      	ldr	r1, [pc, #104]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	654b      	str	r3, [r1, #84]	; 0x54
 80037e2:	e001      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
 80037e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d03f      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	d821      	bhi.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80037fc:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003855 	.word	0x08003855
 8003808:	0800381d 	.word	0x0800381d
 800380c:	0800382f 	.word	0x0800382f
 8003810:	08003855 	.word	0x08003855
 8003814:	08003855 	.word	0x08003855
 8003818:	08003855 	.word	0x08003855
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3304      	adds	r3, #4
 8003820:	2101      	movs	r1, #1
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fdba 	bl	800439c <RCCEx_PLL2_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800382c:	e013      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3324      	adds	r3, #36	; 0x24
 8003832:	2101      	movs	r1, #1
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fe63 	bl	8004500 <RCCEx_PLL3_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800383e:	e00a      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	75fb      	strb	r3, [r7, #23]
      break;
 8003844:	e007      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8003846:	bf00      	nop
 8003848:	58024400 	.word	0x58024400
 800384c:	58024800 	.word	0x58024800
 8003850:	00ffffcf 	.word	0x00ffffcf
      break;
 8003854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800385c:	4b9f      	ldr	r3, [pc, #636]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	f023 0207 	bic.w	r2, r3, #7
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003868:	499c      	ldr	r1, [pc, #624]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	654b      	str	r3, [r1, #84]	; 0x54
 800386e:	e001      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d039      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003886:	2b05      	cmp	r3, #5
 8003888:	d820      	bhi.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800388a:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	080038d3 	.word	0x080038d3
 8003894:	080038a9 	.word	0x080038a9
 8003898:	080038bb 	.word	0x080038bb
 800389c:	080038d3 	.word	0x080038d3
 80038a0:	080038d3 	.word	0x080038d3
 80038a4:	080038d3 	.word	0x080038d3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3304      	adds	r3, #4
 80038ac:	2101      	movs	r1, #1
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fd74 	bl	800439c <RCCEx_PLL2_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80038b8:	e00c      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3324      	adds	r3, #36	; 0x24
 80038be:	2101      	movs	r1, #1
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fe1d 	bl	8004500 <RCCEx_PLL3_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80038ca:	e003      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	75fb      	strb	r3, [r7, #23]
      break;
 80038d0:	e000      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80038d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10a      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038da:	4b80      	ldr	r3, [pc, #512]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	f023 0207 	bic.w	r2, r3, #7
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038e8:	497c      	ldr	r1, [pc, #496]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	658b      	str	r3, [r1, #88]	; 0x58
 80038ee:	e001      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d04b      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003906:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800390a:	d02e      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x962>
 800390c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003910:	d828      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003916:	d02a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391c:	d822      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800391e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003922:	d026      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003924:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003928:	d81c      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800392a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800392e:	d010      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003934:	d816      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01d      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800393a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800393e:	d111      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3304      	adds	r3, #4
 8003944:	2100      	movs	r1, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fd28 	bl	800439c <RCCEx_PLL2_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003950:	e012      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3324      	adds	r3, #36	; 0x24
 8003956:	2102      	movs	r1, #2
 8003958:	4618      	mov	r0, r3
 800395a:	f000 fdd1 	bl	8004500 <RCCEx_PLL3_Config>
 800395e:	4603      	mov	r3, r0
 8003960:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003962:	e009      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	75fb      	strb	r3, [r7, #23]
      break;
 8003968:	e006      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800396a:	bf00      	nop
 800396c:	e004      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800396e:	bf00      	nop
 8003970:	e002      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003972:	bf00      	nop
 8003974:	e000      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003978:	7dfb      	ldrb	r3, [r7, #23]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800397e:	4b57      	ldr	r3, [pc, #348]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398c:	4953      	ldr	r1, [pc, #332]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800398e:	4313      	orrs	r3, r2
 8003990:	654b      	str	r3, [r1, #84]	; 0x54
 8003992:	e001      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003994:	7dfb      	ldrb	r3, [r7, #23]
 8003996:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d04b      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80039ae:	d02e      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80039b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80039b4:	d828      	bhi.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80039b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ba:	d02a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c0:	d822      	bhi.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80039c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039c6:	d026      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80039c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039cc:	d81c      	bhi.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80039ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d2:	d010      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80039d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d8:	d816      	bhi.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01d      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80039de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e2:	d111      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3304      	adds	r3, #4
 80039e8:	2100      	movs	r1, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fcd6 	bl	800439c <RCCEx_PLL2_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80039f4:	e012      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3324      	adds	r3, #36	; 0x24
 80039fa:	2102      	movs	r1, #2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fd7f 	bl	8004500 <RCCEx_PLL3_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003a06:	e009      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a0c:	e006      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003a0e:	bf00      	nop
 8003a10:	e004      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003a12:	bf00      	nop
 8003a14:	e002      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003a16:	bf00      	nop
 8003a18:	e000      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003a1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10a      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a22:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a30:	492a      	ldr	r1, [pc, #168]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	658b      	str	r3, [r1, #88]	; 0x58
 8003a36:	e001      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
 8003a3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d04d      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a4e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a52:	d02e      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8003a54:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a58:	d828      	bhi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5e:	d02a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a64:	d822      	bhi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003a66:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a6a:	d026      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003a6c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a70:	d81c      	bhi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a76:	d010      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8003a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a7c:	d816      	bhi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01d      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a86:	d111      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 fc84 	bl	800439c <RCCEx_PLL2_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003a98:	e012      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3324      	adds	r3, #36	; 0x24
 8003a9e:	2102      	movs	r1, #2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fd2d 	bl	8004500 <RCCEx_PLL3_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003aaa:	e009      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab0:	e006      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003ab2:	bf00      	nop
 8003ab4:	e004      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e002      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ad4:	4901      	ldr	r1, [pc, #4]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	658b      	str	r3, [r1, #88]	; 0x58
 8003ada:	e003      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003adc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae0:	7dfb      	ldrb	r3, [r7, #23]
 8003ae2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afa:	d10a      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3324      	adds	r3, #36	; 0x24
 8003b00:	2102      	movs	r1, #2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fcfc 	bl	8004500 <RCCEx_PLL3_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b12:	4b8c      	ldr	r3, [pc, #560]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	4988      	ldr	r1, [pc, #544]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d01a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3c:	d10a      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3324      	adds	r3, #36	; 0x24
 8003b42:	2102      	movs	r1, #2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fcdb 	bl	8004500 <RCCEx_PLL3_Config>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b54:	4b7b      	ldr	r3, [pc, #492]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b62:	4978      	ldr	r1, [pc, #480]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d034      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b7e:	d01d      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003b80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b84:	d817      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b8e:	d009      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003b90:	e011      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2100      	movs	r1, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fbff 	bl	800439c <RCCEx_PLL2_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ba2:	e00c      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3324      	adds	r3, #36	; 0x24
 8003ba8:	2102      	movs	r1, #2
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fca8 	bl	8004500 <RCCEx_PLL3_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003bb4:	e003      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bba:	e000      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bc4:	4b5f      	ldr	r3, [pc, #380]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bd2:	495c      	ldr	r1, [pc, #368]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	658b      	str	r3, [r1, #88]	; 0x58
 8003bd8:	e001      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
 8003bdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d033      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bf4:	d01c      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003bf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bfa:	d816      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c00:	d003      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c06:	d007      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003c08:	e00f      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c0a:	4b4e      	ldr	r3, [pc, #312]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	4a4d      	ldr	r2, [pc, #308]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003c16:	e00c      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3324      	adds	r3, #36	; 0x24
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fc6e 	bl	8004500 <RCCEx_PLL3_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003c28:	e003      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c2e:	e000      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003c30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10a      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c38:	4b42      	ldr	r3, [pc, #264]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c46:	493f      	ldr	r1, [pc, #252]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	654b      	str	r3, [r1, #84]	; 0x54
 8003c4c:	e001      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d029      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8003c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6a:	d007      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003c6c:	e00f      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6e:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	4a34      	ldr	r2, [pc, #208]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003c7a:	e00b      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	2102      	movs	r1, #2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fb8a 	bl	800439c <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003c8c:	e002      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	75fb      	strb	r3, [r7, #23]
      break;
 8003c92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c9a:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca6:	4927      	ldr	r1, [pc, #156]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cac:	e001      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3324      	adds	r3, #36	; 0x24
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fc1b 	bl	8004500 <RCCEx_PLL3_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d035      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cea:	d017      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cf0:	d811      	bhi.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf6:	d013      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8003cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cfc:	d80b      	bhi.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d010      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8003d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d06:	d106      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d08:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	4a0d      	ldr	r2, [pc, #52]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003d14:	e007      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	75fb      	strb	r3, [r7, #23]
      break;
 8003d1a:	e004      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003d1c:	bf00      	nop
 8003d1e:	e002      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003d20:	bf00      	nop
 8003d22:	e000      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10d      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d3a:	4902      	ldr	r1, [pc, #8]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	654b      	str	r3, [r1, #84]	; 0x54
 8003d40:	e004      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003d42:	bf00      	nop
 8003d44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
 8003d4a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d58:	4b30      	ldr	r3, [pc, #192]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d64:	492d      	ldr	r1, [pc, #180]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d76:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d82:	4926      	ldr	r1, [pc, #152]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003d94:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d98:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	491e      	ldr	r1, [pc, #120]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00d      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003db2:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	4a19      	ldr	r2, [pc, #100]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003db8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dbc:	6113      	str	r3, [r2, #16]
 8003dbe:	4b17      	ldr	r3, [pc, #92]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003dc8:	4914      	ldr	r1, [pc, #80]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	da08      	bge.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de2:	490e      	ldr	r1, [pc, #56]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d009      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003df4:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	4906      	ldr	r1, [pc, #24]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003e08:	7dbb      	ldrb	r3, [r7, #22]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	58024400 	.word	0x58024400

08003e20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003e24:	f7ff f894 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	4904      	ldr	r1, [pc, #16]	; (8003e48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003e36:	5ccb      	ldrb	r3, [r1, r3]
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	58024400 	.word	0x58024400
 8003e48:	080063f0 	.word	0x080063f0

08003e4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b089      	sub	sp, #36	; 0x24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e54:	4ba1      	ldr	r3, [pc, #644]	; (80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003e5e:	4b9f      	ldr	r3, [pc, #636]	; (80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	0b1b      	lsrs	r3, r3, #12
 8003e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003e6a:	4b9c      	ldr	r3, [pc, #624]	; (80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003e76:	4b99      	ldr	r3, [pc, #612]	; (80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7a:	08db      	lsrs	r3, r3, #3
 8003e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	ee07 3a90 	vmov	s15, r3
 8003e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8111 	beq.w	80040bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	f000 8083 	beq.w	8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	f200 80a1 	bhi.w	8003fec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d056      	beq.n	8003f64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003eb6:	e099      	b.n	8003fec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003eb8:	4b88      	ldr	r3, [pc, #544]	; (80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d02d      	beq.n	8003f20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ec4:	4b85      	ldr	r3, [pc, #532]	; (80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	08db      	lsrs	r3, r3, #3
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	4a84      	ldr	r2, [pc, #528]	; (80040e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	ee07 3a90 	vmov	s15, r3
 8003edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eee:	4b7b      	ldr	r3, [pc, #492]	; (80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f02:	eddf 5a78 	vldr	s11, [pc, #480]	; 80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003f1e:	e087      	b.n	8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80040e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f32:	4b6a      	ldr	r3, [pc, #424]	; (80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f46:	eddf 5a67 	vldr	s11, [pc, #412]	; 80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f62:	e065      	b.n	8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f76:	4b59      	ldr	r3, [pc, #356]	; (80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7e:	ee07 3a90 	vmov	s15, r3
 8003f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fa6:	e043      	b.n	8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fba:	4b48      	ldr	r3, [pc, #288]	; (80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fea:	e021      	b.n	8004030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ffe:	4b37      	ldr	r3, [pc, #220]	; (80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800400e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004012:	eddf 5a34 	vldr	s11, [pc, #208]	; 80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800401a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800401e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800402e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004030:	4b2a      	ldr	r3, [pc, #168]	; (80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	0a5b      	lsrs	r3, r3, #9
 8004036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800404a:	edd7 6a07 	vldr	s13, [r7, #28]
 800404e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004056:	ee17 2a90 	vmov	r2, s15
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800405e:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	0c1b      	lsrs	r3, r3, #16
 8004064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004068:	ee07 3a90 	vmov	s15, r3
 800406c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004070:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004074:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004078:	edd7 6a07 	vldr	s13, [r7, #28]
 800407c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004084:	ee17 2a90 	vmov	r2, s15
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800408c:	4b13      	ldr	r3, [pc, #76]	; (80040dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	0e1b      	lsrs	r3, r3, #24
 8004092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80040aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b2:	ee17 2a90 	vmov	r2, s15
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80040ba:	e008      	b.n	80040ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	609a      	str	r2, [r3, #8]
}
 80040ce:	bf00      	nop
 80040d0:	3724      	adds	r7, #36	; 0x24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	58024400 	.word	0x58024400
 80040e0:	03d09000 	.word	0x03d09000
 80040e4:	46000000 	.word	0x46000000
 80040e8:	4c742400 	.word	0x4c742400
 80040ec:	4a742400 	.word	0x4a742400
 80040f0:	4af42400 	.word	0x4af42400

080040f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b089      	sub	sp, #36	; 0x24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040fc:	4ba1      	ldr	r3, [pc, #644]	; (8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004106:	4b9f      	ldr	r3, [pc, #636]	; (8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	0d1b      	lsrs	r3, r3, #20
 800410c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004110:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004112:	4b9c      	ldr	r3, [pc, #624]	; (8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800411e:	4b99      	ldr	r3, [pc, #612]	; (8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	08db      	lsrs	r3, r3, #3
 8004124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004136:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8111 	beq.w	8004364 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b02      	cmp	r3, #2
 8004146:	f000 8083 	beq.w	8004250 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b02      	cmp	r3, #2
 800414e:	f200 80a1 	bhi.w	8004294 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d056      	beq.n	800420c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800415e:	e099      	b.n	8004294 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004160:	4b88      	ldr	r3, [pc, #544]	; (8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d02d      	beq.n	80041c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800416c:	4b85      	ldr	r3, [pc, #532]	; (8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	08db      	lsrs	r3, r3, #3
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	4a84      	ldr	r2, [pc, #528]	; (8004388 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
 800417c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	ee07 3a90 	vmov	s15, r3
 8004184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004196:	4b7b      	ldr	r3, [pc, #492]	; (8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800438c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80041c6:	e087      	b.n	80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004390 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80041d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041da:	4b6a      	ldr	r3, [pc, #424]	; (8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e2:	ee07 3a90 	vmov	s15, r3
 80041e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800438c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004206:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800420a:	e065      	b.n	80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	ee07 3a90 	vmov	s15, r3
 8004212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004216:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004394 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800421a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800421e:	4b59      	ldr	r3, [pc, #356]	; (8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004226:	ee07 3a90 	vmov	s15, r3
 800422a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800422e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004232:	eddf 5a56 	vldr	s11, [pc, #344]	; 800438c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800423a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800423e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800424a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800424e:	e043      	b.n	80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004398 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800425e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004262:	4b48      	ldr	r3, [pc, #288]	; (8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004272:	ed97 6a03 	vldr	s12, [r7, #12]
 8004276:	eddf 5a45 	vldr	s11, [pc, #276]	; 800438c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800427a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800427e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800428a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004292:	e021      	b.n	80042d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004394 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042a6:	4b37      	ldr	r3, [pc, #220]	; (8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800438c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80042d8:	4b2a      	ldr	r3, [pc, #168]	; (8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	0a5b      	lsrs	r3, r3, #9
 80042de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80042f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042fe:	ee17 2a90 	vmov	r2, s15
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004306:	4b1f      	ldr	r3, [pc, #124]	; (8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	0c1b      	lsrs	r3, r3, #16
 800430c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004310:	ee07 3a90 	vmov	s15, r3
 8004314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800431c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004320:	edd7 6a07 	vldr	s13, [r7, #28]
 8004324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800432c:	ee17 2a90 	vmov	r2, s15
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004334:	4b13      	ldr	r3, [pc, #76]	; (8004384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	0e1b      	lsrs	r3, r3, #24
 800433a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800434a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800434e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800435a:	ee17 2a90 	vmov	r2, s15
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004362:	e008      	b.n	8004376 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
}
 8004376:	bf00      	nop
 8004378:	3724      	adds	r7, #36	; 0x24
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	58024400 	.word	0x58024400
 8004388:	03d09000 	.word	0x03d09000
 800438c:	46000000 	.word	0x46000000
 8004390:	4c742400 	.word	0x4c742400
 8004394:	4a742400 	.word	0x4a742400
 8004398:	4af42400 	.word	0x4af42400

0800439c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043aa:	4b53      	ldr	r3, [pc, #332]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2b03      	cmp	r3, #3
 80043b4:	d101      	bne.n	80043ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e099      	b.n	80044ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80043ba:	4b4f      	ldr	r3, [pc, #316]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a4e      	ldr	r2, [pc, #312]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 80043c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c6:	f7fc fdc7 	bl	8000f58 <HAL_GetTick>
 80043ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043cc:	e008      	b.n	80043e0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80043ce:	f7fc fdc3 	bl	8000f58 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e086      	b.n	80044ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043e0:	4b45      	ldr	r3, [pc, #276]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f0      	bne.n	80043ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80043ec:	4b42      	ldr	r3, [pc, #264]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	031b      	lsls	r3, r3, #12
 80043fa:	493f      	ldr	r1, [pc, #252]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	628b      	str	r3, [r1, #40]	; 0x28
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	3b01      	subs	r3, #1
 8004406:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	3b01      	subs	r3, #1
 8004410:	025b      	lsls	r3, r3, #9
 8004412:	b29b      	uxth	r3, r3
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	3b01      	subs	r3, #1
 800441c:	041b      	lsls	r3, r3, #16
 800441e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	3b01      	subs	r3, #1
 800442a:	061b      	lsls	r3, r3, #24
 800442c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004430:	4931      	ldr	r1, [pc, #196]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 8004432:	4313      	orrs	r3, r2
 8004434:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004436:	4b30      	ldr	r3, [pc, #192]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	492d      	ldr	r1, [pc, #180]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 8004444:	4313      	orrs	r3, r2
 8004446:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004448:	4b2b      	ldr	r3, [pc, #172]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	f023 0220 	bic.w	r2, r3, #32
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	4928      	ldr	r1, [pc, #160]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 8004456:	4313      	orrs	r3, r2
 8004458:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800445a:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	4a26      	ldr	r2, [pc, #152]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 8004460:	f023 0310 	bic.w	r3, r3, #16
 8004464:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004466:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 8004468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800446a:	4b24      	ldr	r3, [pc, #144]	; (80044fc <RCCEx_PLL2_Config+0x160>)
 800446c:	4013      	ands	r3, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	69d2      	ldr	r2, [r2, #28]
 8004472:	00d2      	lsls	r2, r2, #3
 8004474:	4920      	ldr	r1, [pc, #128]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800447a:	4b1f      	ldr	r3, [pc, #124]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	4a1e      	ldr	r2, [pc, #120]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 8004480:	f043 0310 	orr.w	r3, r3, #16
 8004484:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d106      	bne.n	800449a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800448c:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	4a19      	ldr	r2, [pc, #100]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 8004492:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004496:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004498:	e00f      	b.n	80044ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d106      	bne.n	80044ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80044a0:	4b15      	ldr	r3, [pc, #84]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	4a14      	ldr	r2, [pc, #80]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 80044a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044ac:	e005      	b.n	80044ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044ae:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	4a11      	ldr	r2, [pc, #68]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 80044b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80044ba:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a0e      	ldr	r2, [pc, #56]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 80044c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c6:	f7fc fd47 	bl	8000f58 <HAL_GetTick>
 80044ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044cc:	e008      	b.n	80044e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80044ce:	f7fc fd43 	bl	8000f58 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e006      	b.n	80044ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <RCCEx_PLL2_Config+0x15c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	58024400 	.word	0x58024400
 80044fc:	ffff0007 	.word	0xffff0007

08004500 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800450e:	4b53      	ldr	r3, [pc, #332]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	2b03      	cmp	r3, #3
 8004518:	d101      	bne.n	800451e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e099      	b.n	8004652 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800451e:	4b4f      	ldr	r3, [pc, #316]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a4e      	ldr	r2, [pc, #312]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 8004524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452a:	f7fc fd15 	bl	8000f58 <HAL_GetTick>
 800452e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004530:	e008      	b.n	8004544 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004532:	f7fc fd11 	bl	8000f58 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e086      	b.n	8004652 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004544:	4b45      	ldr	r3, [pc, #276]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f0      	bne.n	8004532 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004550:	4b42      	ldr	r3, [pc, #264]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	051b      	lsls	r3, r3, #20
 800455e:	493f      	ldr	r1, [pc, #252]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 8004560:	4313      	orrs	r3, r2
 8004562:	628b      	str	r3, [r1, #40]	; 0x28
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	3b01      	subs	r3, #1
 800456a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	3b01      	subs	r3, #1
 8004574:	025b      	lsls	r3, r3, #9
 8004576:	b29b      	uxth	r3, r3
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	3b01      	subs	r3, #1
 8004580:	041b      	lsls	r3, r3, #16
 8004582:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	3b01      	subs	r3, #1
 800458e:	061b      	lsls	r3, r3, #24
 8004590:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004594:	4931      	ldr	r1, [pc, #196]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 8004596:	4313      	orrs	r3, r2
 8004598:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800459a:	4b30      	ldr	r3, [pc, #192]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 800459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	492d      	ldr	r1, [pc, #180]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80045ac:	4b2b      	ldr	r3, [pc, #172]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	4928      	ldr	r1, [pc, #160]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80045be:	4b27      	ldr	r3, [pc, #156]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	4a26      	ldr	r2, [pc, #152]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 80045c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80045ca:	4b24      	ldr	r3, [pc, #144]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 80045cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <RCCEx_PLL3_Config+0x160>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	69d2      	ldr	r2, [r2, #28]
 80045d6:	00d2      	lsls	r2, r2, #3
 80045d8:	4920      	ldr	r1, [pc, #128]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80045de:	4b1f      	ldr	r3, [pc, #124]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	4a1e      	ldr	r2, [pc, #120]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 80045e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d106      	bne.n	80045fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045f0:	4b1a      	ldr	r3, [pc, #104]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	4a19      	ldr	r2, [pc, #100]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 80045f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045fc:	e00f      	b.n	800461e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d106      	bne.n	8004612 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004604:	4b15      	ldr	r3, [pc, #84]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	4a14      	ldr	r2, [pc, #80]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 800460a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800460e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004610:	e005      	b.n	800461e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	4a11      	ldr	r2, [pc, #68]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 8004618:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800461c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800461e:	4b0f      	ldr	r3, [pc, #60]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a0e      	ldr	r2, [pc, #56]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 8004624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800462a:	f7fc fc95 	bl	8000f58 <HAL_GetTick>
 800462e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004630:	e008      	b.n	8004644 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004632:	f7fc fc91 	bl	8000f58 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e006      	b.n	8004652 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <RCCEx_PLL3_Config+0x15c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004650:	7bfb      	ldrb	r3, [r7, #15]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	58024400 	.word	0x58024400
 8004660:	ffff0007 	.word	0xffff0007

08004664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e042      	b.n	80046fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467c:	2b00      	cmp	r3, #0
 800467e:	d106      	bne.n	800468e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7fc fa29 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2224      	movs	r2, #36	; 0x24
 8004692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0201 	bic.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fc80 	bl	8004fac <UART_SetConfig>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e022      	b.n	80046fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f001 fae0 	bl	8005c84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f001 fb67 	bl	8005dc8 <UART_CheckIdleState>
 80046fa:	4603      	mov	r3, r0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08a      	sub	sp, #40	; 0x28
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	4613      	mov	r3, r2
 8004712:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800471a:	2b20      	cmp	r3, #32
 800471c:	f040 8083 	bne.w	8004826 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_UART_Transmit+0x28>
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e07b      	b.n	8004828 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_UART_Transmit+0x3a>
 800473a:	2302      	movs	r3, #2
 800473c:	e074      	b.n	8004828 <HAL_UART_Transmit+0x124>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2221      	movs	r2, #33	; 0x21
 8004752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004756:	f7fc fbff 	bl	8000f58 <HAL_GetTick>
 800475a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	88fa      	ldrh	r2, [r7, #6]
 8004760:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	88fa      	ldrh	r2, [r7, #6]
 8004768:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004774:	d108      	bne.n	8004788 <HAL_UART_Transmit+0x84>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	e003      	b.n	8004790 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800478c:	2300      	movs	r3, #0
 800478e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004798:	e02c      	b.n	80047f4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2200      	movs	r2, #0
 80047a2:	2180      	movs	r1, #128	; 0x80
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f001 fb5a 	bl	8005e5e <UART_WaitOnFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e039      	b.n	8004828 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10b      	bne.n	80047d2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	3302      	adds	r3, #2
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	e007      	b.n	80047e2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	781a      	ldrb	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	3301      	adds	r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1cc      	bne.n	800479a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2200      	movs	r2, #0
 8004808:	2140      	movs	r1, #64	; 0x40
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f001 fb27 	bl	8005e5e <UART_WaitOnFlagUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e006      	b.n	8004828 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	e000      	b.n	8004828 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004826:	2302      	movs	r3, #2
  }
}
 8004828:	4618      	mov	r0, r3
 800482a:	3720      	adds	r7, #32
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b0ba      	sub	sp, #232	; 0xe8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004856:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800485a:	f640 030f 	movw	r3, #2063	; 0x80f
 800485e:	4013      	ands	r3, r2
 8004860:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004864:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004868:	2b00      	cmp	r3, #0
 800486a:	d11b      	bne.n	80048a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800486c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	2b00      	cmp	r3, #0
 8004876:	d015      	beq.n	80048a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d105      	bne.n	8004890 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 835a 	beq.w	8004f4e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	4798      	blx	r3
      }
      return;
 80048a2:	e354      	b.n	8004f4e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 811f 	beq.w	8004aec <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80048ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80048b2:	4b8b      	ldr	r3, [pc, #556]	; (8004ae0 <HAL_UART_IRQHandler+0x2b0>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80048ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80048be:	4b89      	ldr	r3, [pc, #548]	; (8004ae4 <HAL_UART_IRQHandler+0x2b4>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 8112 	beq.w	8004aec <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d011      	beq.n	80048f8 <HAL_UART_IRQHandler+0xc8>
 80048d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00b      	beq.n	80048f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2201      	movs	r2, #1
 80048e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ee:	f043 0201 	orr.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d011      	beq.n	8004928 <HAL_UART_IRQHandler+0xf8>
 8004904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00b      	beq.n	8004928 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2202      	movs	r2, #2
 8004916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800491e:	f043 0204 	orr.w	r2, r3, #4
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d011      	beq.n	8004958 <HAL_UART_IRQHandler+0x128>
 8004934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00b      	beq.n	8004958 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2204      	movs	r2, #4
 8004946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800494e:	f043 0202 	orr.w	r2, r3, #2
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b00      	cmp	r3, #0
 8004962:	d017      	beq.n	8004994 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d105      	bne.n	800497c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004970:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004974:	4b5a      	ldr	r3, [pc, #360]	; (8004ae0 <HAL_UART_IRQHandler+0x2b0>)
 8004976:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00b      	beq.n	8004994 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2208      	movs	r2, #8
 8004982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800498a:	f043 0208 	orr.w	r2, r3, #8
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800499c:	2b00      	cmp	r3, #0
 800499e:	d012      	beq.n	80049c6 <HAL_UART_IRQHandler+0x196>
 80049a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00c      	beq.n	80049c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 82c0 	beq.w	8004f52 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d013      	beq.n	8004a06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d105      	bne.n	80049f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b40      	cmp	r3, #64	; 0x40
 8004a1c:	d005      	beq.n	8004a2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d04f      	beq.n	8004aca <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f001 fae0 	bl	8005ff0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	d141      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3308      	adds	r3, #8
 8004a44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3308      	adds	r3, #8
 8004a66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a7a:	e841 2300 	strex	r3, r2, [r1]
 8004a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1d9      	bne.n	8004a3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d013      	beq.n	8004aba <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a96:	4a14      	ldr	r2, [pc, #80]	; (8004ae8 <HAL_UART_IRQHandler+0x2b8>)
 8004a98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fc feb8 	bl	8001814 <HAL_DMA_Abort_IT>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d017      	beq.n	8004ada <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab8:	e00f      	b.n	8004ada <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa60 	bl	8004f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac0:	e00b      	b.n	8004ada <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fa5c 	bl	8004f80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac8:	e007      	b.n	8004ada <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fa58 	bl	8004f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004ad8:	e23b      	b.n	8004f52 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ada:	bf00      	nop
    return;
 8004adc:	e239      	b.n	8004f52 <HAL_UART_IRQHandler+0x722>
 8004ade:	bf00      	nop
 8004ae0:	10000001 	.word	0x10000001
 8004ae4:	04000120 	.word	0x04000120
 8004ae8:	080060bd 	.word	0x080060bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	f040 81ce 	bne.w	8004e92 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 81c7 	beq.w	8004e92 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 81c0 	beq.w	8004e92 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2210      	movs	r2, #16
 8004b18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b24:	2b40      	cmp	r3, #64	; 0x40
 8004b26:	f040 813b 	bne.w	8004da0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a8b      	ldr	r2, [pc, #556]	; (8004d60 <HAL_UART_IRQHandler+0x530>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d059      	beq.n	8004bea <HAL_UART_IRQHandler+0x3ba>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a89      	ldr	r2, [pc, #548]	; (8004d64 <HAL_UART_IRQHandler+0x534>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d053      	beq.n	8004bea <HAL_UART_IRQHandler+0x3ba>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a87      	ldr	r2, [pc, #540]	; (8004d68 <HAL_UART_IRQHandler+0x538>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d04d      	beq.n	8004bea <HAL_UART_IRQHandler+0x3ba>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a85      	ldr	r2, [pc, #532]	; (8004d6c <HAL_UART_IRQHandler+0x53c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d047      	beq.n	8004bea <HAL_UART_IRQHandler+0x3ba>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a83      	ldr	r2, [pc, #524]	; (8004d70 <HAL_UART_IRQHandler+0x540>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d041      	beq.n	8004bea <HAL_UART_IRQHandler+0x3ba>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a81      	ldr	r2, [pc, #516]	; (8004d74 <HAL_UART_IRQHandler+0x544>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d03b      	beq.n	8004bea <HAL_UART_IRQHandler+0x3ba>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a7f      	ldr	r2, [pc, #508]	; (8004d78 <HAL_UART_IRQHandler+0x548>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d035      	beq.n	8004bea <HAL_UART_IRQHandler+0x3ba>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a7d      	ldr	r2, [pc, #500]	; (8004d7c <HAL_UART_IRQHandler+0x54c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d02f      	beq.n	8004bea <HAL_UART_IRQHandler+0x3ba>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a7b      	ldr	r2, [pc, #492]	; (8004d80 <HAL_UART_IRQHandler+0x550>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d029      	beq.n	8004bea <HAL_UART_IRQHandler+0x3ba>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a79      	ldr	r2, [pc, #484]	; (8004d84 <HAL_UART_IRQHandler+0x554>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d023      	beq.n	8004bea <HAL_UART_IRQHandler+0x3ba>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a77      	ldr	r2, [pc, #476]	; (8004d88 <HAL_UART_IRQHandler+0x558>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01d      	beq.n	8004bea <HAL_UART_IRQHandler+0x3ba>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a75      	ldr	r2, [pc, #468]	; (8004d8c <HAL_UART_IRQHandler+0x55c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d017      	beq.n	8004bea <HAL_UART_IRQHandler+0x3ba>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a73      	ldr	r2, [pc, #460]	; (8004d90 <HAL_UART_IRQHandler+0x560>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d011      	beq.n	8004bea <HAL_UART_IRQHandler+0x3ba>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a71      	ldr	r2, [pc, #452]	; (8004d94 <HAL_UART_IRQHandler+0x564>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00b      	beq.n	8004bea <HAL_UART_IRQHandler+0x3ba>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a6f      	ldr	r2, [pc, #444]	; (8004d98 <HAL_UART_IRQHandler+0x568>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d005      	beq.n	8004bea <HAL_UART_IRQHandler+0x3ba>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a6d      	ldr	r2, [pc, #436]	; (8004d9c <HAL_UART_IRQHandler+0x56c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d105      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x3c6>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	e004      	b.n	8004c00 <HAL_UART_IRQHandler+0x3d0>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 81a4 	beq.w	8004f56 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	f080 819c 	bcs.w	8004f56 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c32:	f000 8086 	beq.w	8004d42 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c64:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1da      	bne.n	8004c36 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3308      	adds	r3, #8
 8004c86:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c92:	f023 0301 	bic.w	r3, r3, #1
 8004c96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ca4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ca8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e1      	bne.n	8004c80 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3308      	adds	r3, #8
 8004cdc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ce0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ce2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ce6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e3      	bne.n	8004cbc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d12:	f023 0310 	bic.w	r3, r3, #16
 8004d16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d24:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d26:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e4      	bne.n	8004d02 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fc fa4b 	bl	80011d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f91c 	bl	8004f94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d5c:	e0fb      	b.n	8004f56 <HAL_UART_IRQHandler+0x726>
 8004d5e:	bf00      	nop
 8004d60:	40020010 	.word	0x40020010
 8004d64:	40020028 	.word	0x40020028
 8004d68:	40020040 	.word	0x40020040
 8004d6c:	40020058 	.word	0x40020058
 8004d70:	40020070 	.word	0x40020070
 8004d74:	40020088 	.word	0x40020088
 8004d78:	400200a0 	.word	0x400200a0
 8004d7c:	400200b8 	.word	0x400200b8
 8004d80:	40020410 	.word	0x40020410
 8004d84:	40020428 	.word	0x40020428
 8004d88:	40020440 	.word	0x40020440
 8004d8c:	40020458 	.word	0x40020458
 8004d90:	40020470 	.word	0x40020470
 8004d94:	40020488 	.word	0x40020488
 8004d98:	400204a0 	.word	0x400204a0
 8004d9c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 80cc 	beq.w	8004f5a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8004dc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 80c7 	beq.w	8004f5a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004de0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004dee:	647b      	str	r3, [r7, #68]	; 0x44
 8004df0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004df6:	e841 2300 	strex	r3, r2, [r1]
 8004dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1e4      	bne.n	8004dcc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3308      	adds	r3, #8
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	e853 3f00 	ldrex	r3, [r3]
 8004e10:	623b      	str	r3, [r7, #32]
   return(result);
 8004e12:	6a3a      	ldr	r2, [r7, #32]
 8004e14:	4b54      	ldr	r3, [pc, #336]	; (8004f68 <HAL_UART_IRQHandler+0x738>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3308      	adds	r3, #8
 8004e22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e26:	633a      	str	r2, [r7, #48]	; 0x30
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e3      	bne.n	8004e02 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0310 	bic.w	r3, r3, #16
 8004e62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e70:	61fb      	str	r3, [r7, #28]
 8004e72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	69b9      	ldr	r1, [r7, #24]
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e4      	bne.n	8004e4e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f882 	bl	8004f94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e90:	e063      	b.n	8004f5a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00e      	beq.n	8004ebc <HAL_UART_IRQHandler+0x68c>
 8004e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004eb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f001 f942 	bl	800613e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004eba:	e051      	b.n	8004f60 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d014      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d105      	bne.n	8004ee0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d03a      	beq.n	8004f5e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
    }
    return;
 8004ef0:	e035      	b.n	8004f5e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <HAL_UART_IRQHandler+0x6e2>
 8004efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f001 f8ec 	bl	80060e8 <UART_EndTransmit_IT>
    return;
 8004f10:	e026      	b.n	8004f60 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <HAL_UART_IRQHandler+0x702>
 8004f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f001 f91b 	bl	8006166 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f30:	e016      	b.n	8004f60 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d010      	beq.n	8004f60 <HAL_UART_IRQHandler+0x730>
 8004f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	da0c      	bge.n	8004f60 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f001 f903 	bl	8006152 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f4c:	e008      	b.n	8004f60 <HAL_UART_IRQHandler+0x730>
      return;
 8004f4e:	bf00      	nop
 8004f50:	e006      	b.n	8004f60 <HAL_UART_IRQHandler+0x730>
    return;
 8004f52:	bf00      	nop
 8004f54:	e004      	b.n	8004f60 <HAL_UART_IRQHandler+0x730>
      return;
 8004f56:	bf00      	nop
 8004f58:	e002      	b.n	8004f60 <HAL_UART_IRQHandler+0x730>
      return;
 8004f5a:	bf00      	nop
 8004f5c:	e000      	b.n	8004f60 <HAL_UART_IRQHandler+0x730>
    return;
 8004f5e:	bf00      	nop
  }
}
 8004f60:	37e8      	adds	r7, #232	; 0xe8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	effffffe 	.word	0xeffffffe

08004f6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb0:	b092      	sub	sp, #72	; 0x48
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4bbe      	ldr	r3, [pc, #760]	; (80052d4 <UART_SetConfig+0x328>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	6812      	ldr	r2, [r2, #0]
 8004fe2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fe4:	430b      	orrs	r3, r1
 8004fe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4ab3      	ldr	r2, [pc, #716]	; (80052d8 <UART_SetConfig+0x32c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d004      	beq.n	8005018 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005014:	4313      	orrs	r3, r2
 8005016:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	4baf      	ldr	r3, [pc, #700]	; (80052dc <UART_SetConfig+0x330>)
 8005020:	4013      	ands	r3, r2
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005028:	430b      	orrs	r3, r1
 800502a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	f023 010f 	bic.w	r1, r3, #15
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4aa6      	ldr	r2, [pc, #664]	; (80052e0 <UART_SetConfig+0x334>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d177      	bne.n	800513c <UART_SetConfig+0x190>
 800504c:	4ba5      	ldr	r3, [pc, #660]	; (80052e4 <UART_SetConfig+0x338>)
 800504e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005050:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005054:	2b28      	cmp	r3, #40	; 0x28
 8005056:	d86d      	bhi.n	8005134 <UART_SetConfig+0x188>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <UART_SetConfig+0xb4>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	08005105 	.word	0x08005105
 8005064:	08005135 	.word	0x08005135
 8005068:	08005135 	.word	0x08005135
 800506c:	08005135 	.word	0x08005135
 8005070:	08005135 	.word	0x08005135
 8005074:	08005135 	.word	0x08005135
 8005078:	08005135 	.word	0x08005135
 800507c:	08005135 	.word	0x08005135
 8005080:	0800510d 	.word	0x0800510d
 8005084:	08005135 	.word	0x08005135
 8005088:	08005135 	.word	0x08005135
 800508c:	08005135 	.word	0x08005135
 8005090:	08005135 	.word	0x08005135
 8005094:	08005135 	.word	0x08005135
 8005098:	08005135 	.word	0x08005135
 800509c:	08005135 	.word	0x08005135
 80050a0:	08005115 	.word	0x08005115
 80050a4:	08005135 	.word	0x08005135
 80050a8:	08005135 	.word	0x08005135
 80050ac:	08005135 	.word	0x08005135
 80050b0:	08005135 	.word	0x08005135
 80050b4:	08005135 	.word	0x08005135
 80050b8:	08005135 	.word	0x08005135
 80050bc:	08005135 	.word	0x08005135
 80050c0:	0800511d 	.word	0x0800511d
 80050c4:	08005135 	.word	0x08005135
 80050c8:	08005135 	.word	0x08005135
 80050cc:	08005135 	.word	0x08005135
 80050d0:	08005135 	.word	0x08005135
 80050d4:	08005135 	.word	0x08005135
 80050d8:	08005135 	.word	0x08005135
 80050dc:	08005135 	.word	0x08005135
 80050e0:	08005125 	.word	0x08005125
 80050e4:	08005135 	.word	0x08005135
 80050e8:	08005135 	.word	0x08005135
 80050ec:	08005135 	.word	0x08005135
 80050f0:	08005135 	.word	0x08005135
 80050f4:	08005135 	.word	0x08005135
 80050f8:	08005135 	.word	0x08005135
 80050fc:	08005135 	.word	0x08005135
 8005100:	0800512d 	.word	0x0800512d
 8005104:	2301      	movs	r3, #1
 8005106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510a:	e326      	b.n	800575a <UART_SetConfig+0x7ae>
 800510c:	2304      	movs	r3, #4
 800510e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005112:	e322      	b.n	800575a <UART_SetConfig+0x7ae>
 8005114:	2308      	movs	r3, #8
 8005116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511a:	e31e      	b.n	800575a <UART_SetConfig+0x7ae>
 800511c:	2310      	movs	r3, #16
 800511e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005122:	e31a      	b.n	800575a <UART_SetConfig+0x7ae>
 8005124:	2320      	movs	r3, #32
 8005126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512a:	e316      	b.n	800575a <UART_SetConfig+0x7ae>
 800512c:	2340      	movs	r3, #64	; 0x40
 800512e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005132:	e312      	b.n	800575a <UART_SetConfig+0x7ae>
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800513a:	e30e      	b.n	800575a <UART_SetConfig+0x7ae>
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a69      	ldr	r2, [pc, #420]	; (80052e8 <UART_SetConfig+0x33c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d130      	bne.n	80051a8 <UART_SetConfig+0x1fc>
 8005146:	4b67      	ldr	r3, [pc, #412]	; (80052e4 <UART_SetConfig+0x338>)
 8005148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	2b05      	cmp	r3, #5
 8005150:	d826      	bhi.n	80051a0 <UART_SetConfig+0x1f4>
 8005152:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <UART_SetConfig+0x1ac>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	08005171 	.word	0x08005171
 800515c:	08005179 	.word	0x08005179
 8005160:	08005181 	.word	0x08005181
 8005164:	08005189 	.word	0x08005189
 8005168:	08005191 	.word	0x08005191
 800516c:	08005199 	.word	0x08005199
 8005170:	2300      	movs	r3, #0
 8005172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005176:	e2f0      	b.n	800575a <UART_SetConfig+0x7ae>
 8005178:	2304      	movs	r3, #4
 800517a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517e:	e2ec      	b.n	800575a <UART_SetConfig+0x7ae>
 8005180:	2308      	movs	r3, #8
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005186:	e2e8      	b.n	800575a <UART_SetConfig+0x7ae>
 8005188:	2310      	movs	r3, #16
 800518a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518e:	e2e4      	b.n	800575a <UART_SetConfig+0x7ae>
 8005190:	2320      	movs	r3, #32
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005196:	e2e0      	b.n	800575a <UART_SetConfig+0x7ae>
 8005198:	2340      	movs	r3, #64	; 0x40
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519e:	e2dc      	b.n	800575a <UART_SetConfig+0x7ae>
 80051a0:	2380      	movs	r3, #128	; 0x80
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a6:	e2d8      	b.n	800575a <UART_SetConfig+0x7ae>
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a4f      	ldr	r2, [pc, #316]	; (80052ec <UART_SetConfig+0x340>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d130      	bne.n	8005214 <UART_SetConfig+0x268>
 80051b2:	4b4c      	ldr	r3, [pc, #304]	; (80052e4 <UART_SetConfig+0x338>)
 80051b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	2b05      	cmp	r3, #5
 80051bc:	d826      	bhi.n	800520c <UART_SetConfig+0x260>
 80051be:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <UART_SetConfig+0x218>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	080051dd 	.word	0x080051dd
 80051c8:	080051e5 	.word	0x080051e5
 80051cc:	080051ed 	.word	0x080051ed
 80051d0:	080051f5 	.word	0x080051f5
 80051d4:	080051fd 	.word	0x080051fd
 80051d8:	08005205 	.word	0x08005205
 80051dc:	2300      	movs	r3, #0
 80051de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e2:	e2ba      	b.n	800575a <UART_SetConfig+0x7ae>
 80051e4:	2304      	movs	r3, #4
 80051e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ea:	e2b6      	b.n	800575a <UART_SetConfig+0x7ae>
 80051ec:	2308      	movs	r3, #8
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f2:	e2b2      	b.n	800575a <UART_SetConfig+0x7ae>
 80051f4:	2310      	movs	r3, #16
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fa:	e2ae      	b.n	800575a <UART_SetConfig+0x7ae>
 80051fc:	2320      	movs	r3, #32
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005202:	e2aa      	b.n	800575a <UART_SetConfig+0x7ae>
 8005204:	2340      	movs	r3, #64	; 0x40
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800520a:	e2a6      	b.n	800575a <UART_SetConfig+0x7ae>
 800520c:	2380      	movs	r3, #128	; 0x80
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005212:	e2a2      	b.n	800575a <UART_SetConfig+0x7ae>
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a35      	ldr	r2, [pc, #212]	; (80052f0 <UART_SetConfig+0x344>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d130      	bne.n	8005280 <UART_SetConfig+0x2d4>
 800521e:	4b31      	ldr	r3, [pc, #196]	; (80052e4 <UART_SetConfig+0x338>)
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	2b05      	cmp	r3, #5
 8005228:	d826      	bhi.n	8005278 <UART_SetConfig+0x2cc>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <UART_SetConfig+0x284>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005249 	.word	0x08005249
 8005234:	08005251 	.word	0x08005251
 8005238:	08005259 	.word	0x08005259
 800523c:	08005261 	.word	0x08005261
 8005240:	08005269 	.word	0x08005269
 8005244:	08005271 	.word	0x08005271
 8005248:	2300      	movs	r3, #0
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524e:	e284      	b.n	800575a <UART_SetConfig+0x7ae>
 8005250:	2304      	movs	r3, #4
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005256:	e280      	b.n	800575a <UART_SetConfig+0x7ae>
 8005258:	2308      	movs	r3, #8
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525e:	e27c      	b.n	800575a <UART_SetConfig+0x7ae>
 8005260:	2310      	movs	r3, #16
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005266:	e278      	b.n	800575a <UART_SetConfig+0x7ae>
 8005268:	2320      	movs	r3, #32
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526e:	e274      	b.n	800575a <UART_SetConfig+0x7ae>
 8005270:	2340      	movs	r3, #64	; 0x40
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005276:	e270      	b.n	800575a <UART_SetConfig+0x7ae>
 8005278:	2380      	movs	r3, #128	; 0x80
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527e:	e26c      	b.n	800575a <UART_SetConfig+0x7ae>
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1b      	ldr	r2, [pc, #108]	; (80052f4 <UART_SetConfig+0x348>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d142      	bne.n	8005310 <UART_SetConfig+0x364>
 800528a:	4b16      	ldr	r3, [pc, #88]	; (80052e4 <UART_SetConfig+0x338>)
 800528c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	2b05      	cmp	r3, #5
 8005294:	d838      	bhi.n	8005308 <UART_SetConfig+0x35c>
 8005296:	a201      	add	r2, pc, #4	; (adr r2, 800529c <UART_SetConfig+0x2f0>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052b5 	.word	0x080052b5
 80052a0:	080052bd 	.word	0x080052bd
 80052a4:	080052c5 	.word	0x080052c5
 80052a8:	080052cd 	.word	0x080052cd
 80052ac:	080052f9 	.word	0x080052f9
 80052b0:	08005301 	.word	0x08005301
 80052b4:	2300      	movs	r3, #0
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ba:	e24e      	b.n	800575a <UART_SetConfig+0x7ae>
 80052bc:	2304      	movs	r3, #4
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c2:	e24a      	b.n	800575a <UART_SetConfig+0x7ae>
 80052c4:	2308      	movs	r3, #8
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ca:	e246      	b.n	800575a <UART_SetConfig+0x7ae>
 80052cc:	2310      	movs	r3, #16
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d2:	e242      	b.n	800575a <UART_SetConfig+0x7ae>
 80052d4:	cfff69f3 	.word	0xcfff69f3
 80052d8:	58000c00 	.word	0x58000c00
 80052dc:	11fff4ff 	.word	0x11fff4ff
 80052e0:	40011000 	.word	0x40011000
 80052e4:	58024400 	.word	0x58024400
 80052e8:	40004400 	.word	0x40004400
 80052ec:	40004800 	.word	0x40004800
 80052f0:	40004c00 	.word	0x40004c00
 80052f4:	40005000 	.word	0x40005000
 80052f8:	2320      	movs	r3, #32
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fe:	e22c      	b.n	800575a <UART_SetConfig+0x7ae>
 8005300:	2340      	movs	r3, #64	; 0x40
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005306:	e228      	b.n	800575a <UART_SetConfig+0x7ae>
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530e:	e224      	b.n	800575a <UART_SetConfig+0x7ae>
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4ab1      	ldr	r2, [pc, #708]	; (80055dc <UART_SetConfig+0x630>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d176      	bne.n	8005408 <UART_SetConfig+0x45c>
 800531a:	4bb1      	ldr	r3, [pc, #708]	; (80055e0 <UART_SetConfig+0x634>)
 800531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005322:	2b28      	cmp	r3, #40	; 0x28
 8005324:	d86c      	bhi.n	8005400 <UART_SetConfig+0x454>
 8005326:	a201      	add	r2, pc, #4	; (adr r2, 800532c <UART_SetConfig+0x380>)
 8005328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532c:	080053d1 	.word	0x080053d1
 8005330:	08005401 	.word	0x08005401
 8005334:	08005401 	.word	0x08005401
 8005338:	08005401 	.word	0x08005401
 800533c:	08005401 	.word	0x08005401
 8005340:	08005401 	.word	0x08005401
 8005344:	08005401 	.word	0x08005401
 8005348:	08005401 	.word	0x08005401
 800534c:	080053d9 	.word	0x080053d9
 8005350:	08005401 	.word	0x08005401
 8005354:	08005401 	.word	0x08005401
 8005358:	08005401 	.word	0x08005401
 800535c:	08005401 	.word	0x08005401
 8005360:	08005401 	.word	0x08005401
 8005364:	08005401 	.word	0x08005401
 8005368:	08005401 	.word	0x08005401
 800536c:	080053e1 	.word	0x080053e1
 8005370:	08005401 	.word	0x08005401
 8005374:	08005401 	.word	0x08005401
 8005378:	08005401 	.word	0x08005401
 800537c:	08005401 	.word	0x08005401
 8005380:	08005401 	.word	0x08005401
 8005384:	08005401 	.word	0x08005401
 8005388:	08005401 	.word	0x08005401
 800538c:	080053e9 	.word	0x080053e9
 8005390:	08005401 	.word	0x08005401
 8005394:	08005401 	.word	0x08005401
 8005398:	08005401 	.word	0x08005401
 800539c:	08005401 	.word	0x08005401
 80053a0:	08005401 	.word	0x08005401
 80053a4:	08005401 	.word	0x08005401
 80053a8:	08005401 	.word	0x08005401
 80053ac:	080053f1 	.word	0x080053f1
 80053b0:	08005401 	.word	0x08005401
 80053b4:	08005401 	.word	0x08005401
 80053b8:	08005401 	.word	0x08005401
 80053bc:	08005401 	.word	0x08005401
 80053c0:	08005401 	.word	0x08005401
 80053c4:	08005401 	.word	0x08005401
 80053c8:	08005401 	.word	0x08005401
 80053cc:	080053f9 	.word	0x080053f9
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053d6:	e1c0      	b.n	800575a <UART_SetConfig+0x7ae>
 80053d8:	2304      	movs	r3, #4
 80053da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053de:	e1bc      	b.n	800575a <UART_SetConfig+0x7ae>
 80053e0:	2308      	movs	r3, #8
 80053e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e6:	e1b8      	b.n	800575a <UART_SetConfig+0x7ae>
 80053e8:	2310      	movs	r3, #16
 80053ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ee:	e1b4      	b.n	800575a <UART_SetConfig+0x7ae>
 80053f0:	2320      	movs	r3, #32
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f6:	e1b0      	b.n	800575a <UART_SetConfig+0x7ae>
 80053f8:	2340      	movs	r3, #64	; 0x40
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fe:	e1ac      	b.n	800575a <UART_SetConfig+0x7ae>
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005406:	e1a8      	b.n	800575a <UART_SetConfig+0x7ae>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a75      	ldr	r2, [pc, #468]	; (80055e4 <UART_SetConfig+0x638>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d130      	bne.n	8005474 <UART_SetConfig+0x4c8>
 8005412:	4b73      	ldr	r3, [pc, #460]	; (80055e0 <UART_SetConfig+0x634>)
 8005414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	2b05      	cmp	r3, #5
 800541c:	d826      	bhi.n	800546c <UART_SetConfig+0x4c0>
 800541e:	a201      	add	r2, pc, #4	; (adr r2, 8005424 <UART_SetConfig+0x478>)
 8005420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005424:	0800543d 	.word	0x0800543d
 8005428:	08005445 	.word	0x08005445
 800542c:	0800544d 	.word	0x0800544d
 8005430:	08005455 	.word	0x08005455
 8005434:	0800545d 	.word	0x0800545d
 8005438:	08005465 	.word	0x08005465
 800543c:	2300      	movs	r3, #0
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005442:	e18a      	b.n	800575a <UART_SetConfig+0x7ae>
 8005444:	2304      	movs	r3, #4
 8005446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544a:	e186      	b.n	800575a <UART_SetConfig+0x7ae>
 800544c:	2308      	movs	r3, #8
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005452:	e182      	b.n	800575a <UART_SetConfig+0x7ae>
 8005454:	2310      	movs	r3, #16
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545a:	e17e      	b.n	800575a <UART_SetConfig+0x7ae>
 800545c:	2320      	movs	r3, #32
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005462:	e17a      	b.n	800575a <UART_SetConfig+0x7ae>
 8005464:	2340      	movs	r3, #64	; 0x40
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546a:	e176      	b.n	800575a <UART_SetConfig+0x7ae>
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005472:	e172      	b.n	800575a <UART_SetConfig+0x7ae>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a5b      	ldr	r2, [pc, #364]	; (80055e8 <UART_SetConfig+0x63c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d130      	bne.n	80054e0 <UART_SetConfig+0x534>
 800547e:	4b58      	ldr	r3, [pc, #352]	; (80055e0 <UART_SetConfig+0x634>)
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	2b05      	cmp	r3, #5
 8005488:	d826      	bhi.n	80054d8 <UART_SetConfig+0x52c>
 800548a:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <UART_SetConfig+0x4e4>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	080054a9 	.word	0x080054a9
 8005494:	080054b1 	.word	0x080054b1
 8005498:	080054b9 	.word	0x080054b9
 800549c:	080054c1 	.word	0x080054c1
 80054a0:	080054c9 	.word	0x080054c9
 80054a4:	080054d1 	.word	0x080054d1
 80054a8:	2300      	movs	r3, #0
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ae:	e154      	b.n	800575a <UART_SetConfig+0x7ae>
 80054b0:	2304      	movs	r3, #4
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b6:	e150      	b.n	800575a <UART_SetConfig+0x7ae>
 80054b8:	2308      	movs	r3, #8
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054be:	e14c      	b.n	800575a <UART_SetConfig+0x7ae>
 80054c0:	2310      	movs	r3, #16
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c6:	e148      	b.n	800575a <UART_SetConfig+0x7ae>
 80054c8:	2320      	movs	r3, #32
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ce:	e144      	b.n	800575a <UART_SetConfig+0x7ae>
 80054d0:	2340      	movs	r3, #64	; 0x40
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d6:	e140      	b.n	800575a <UART_SetConfig+0x7ae>
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054de:	e13c      	b.n	800575a <UART_SetConfig+0x7ae>
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a41      	ldr	r2, [pc, #260]	; (80055ec <UART_SetConfig+0x640>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	f040 8082 	bne.w	80055f0 <UART_SetConfig+0x644>
 80054ec:	4b3c      	ldr	r3, [pc, #240]	; (80055e0 <UART_SetConfig+0x634>)
 80054ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054f4:	2b28      	cmp	r3, #40	; 0x28
 80054f6:	d86d      	bhi.n	80055d4 <UART_SetConfig+0x628>
 80054f8:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <UART_SetConfig+0x554>)
 80054fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fe:	bf00      	nop
 8005500:	080055a5 	.word	0x080055a5
 8005504:	080055d5 	.word	0x080055d5
 8005508:	080055d5 	.word	0x080055d5
 800550c:	080055d5 	.word	0x080055d5
 8005510:	080055d5 	.word	0x080055d5
 8005514:	080055d5 	.word	0x080055d5
 8005518:	080055d5 	.word	0x080055d5
 800551c:	080055d5 	.word	0x080055d5
 8005520:	080055ad 	.word	0x080055ad
 8005524:	080055d5 	.word	0x080055d5
 8005528:	080055d5 	.word	0x080055d5
 800552c:	080055d5 	.word	0x080055d5
 8005530:	080055d5 	.word	0x080055d5
 8005534:	080055d5 	.word	0x080055d5
 8005538:	080055d5 	.word	0x080055d5
 800553c:	080055d5 	.word	0x080055d5
 8005540:	080055b5 	.word	0x080055b5
 8005544:	080055d5 	.word	0x080055d5
 8005548:	080055d5 	.word	0x080055d5
 800554c:	080055d5 	.word	0x080055d5
 8005550:	080055d5 	.word	0x080055d5
 8005554:	080055d5 	.word	0x080055d5
 8005558:	080055d5 	.word	0x080055d5
 800555c:	080055d5 	.word	0x080055d5
 8005560:	080055bd 	.word	0x080055bd
 8005564:	080055d5 	.word	0x080055d5
 8005568:	080055d5 	.word	0x080055d5
 800556c:	080055d5 	.word	0x080055d5
 8005570:	080055d5 	.word	0x080055d5
 8005574:	080055d5 	.word	0x080055d5
 8005578:	080055d5 	.word	0x080055d5
 800557c:	080055d5 	.word	0x080055d5
 8005580:	080055c5 	.word	0x080055c5
 8005584:	080055d5 	.word	0x080055d5
 8005588:	080055d5 	.word	0x080055d5
 800558c:	080055d5 	.word	0x080055d5
 8005590:	080055d5 	.word	0x080055d5
 8005594:	080055d5 	.word	0x080055d5
 8005598:	080055d5 	.word	0x080055d5
 800559c:	080055d5 	.word	0x080055d5
 80055a0:	080055cd 	.word	0x080055cd
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055aa:	e0d6      	b.n	800575a <UART_SetConfig+0x7ae>
 80055ac:	2304      	movs	r3, #4
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b2:	e0d2      	b.n	800575a <UART_SetConfig+0x7ae>
 80055b4:	2308      	movs	r3, #8
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ba:	e0ce      	b.n	800575a <UART_SetConfig+0x7ae>
 80055bc:	2310      	movs	r3, #16
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c2:	e0ca      	b.n	800575a <UART_SetConfig+0x7ae>
 80055c4:	2320      	movs	r3, #32
 80055c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ca:	e0c6      	b.n	800575a <UART_SetConfig+0x7ae>
 80055cc:	2340      	movs	r3, #64	; 0x40
 80055ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055d2:	e0c2      	b.n	800575a <UART_SetConfig+0x7ae>
 80055d4:	2380      	movs	r3, #128	; 0x80
 80055d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055da:	e0be      	b.n	800575a <UART_SetConfig+0x7ae>
 80055dc:	40011400 	.word	0x40011400
 80055e0:	58024400 	.word	0x58024400
 80055e4:	40007800 	.word	0x40007800
 80055e8:	40007c00 	.word	0x40007c00
 80055ec:	40011800 	.word	0x40011800
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4aad      	ldr	r2, [pc, #692]	; (80058ac <UART_SetConfig+0x900>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d176      	bne.n	80056e8 <UART_SetConfig+0x73c>
 80055fa:	4bad      	ldr	r3, [pc, #692]	; (80058b0 <UART_SetConfig+0x904>)
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005602:	2b28      	cmp	r3, #40	; 0x28
 8005604:	d86c      	bhi.n	80056e0 <UART_SetConfig+0x734>
 8005606:	a201      	add	r2, pc, #4	; (adr r2, 800560c <UART_SetConfig+0x660>)
 8005608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560c:	080056b1 	.word	0x080056b1
 8005610:	080056e1 	.word	0x080056e1
 8005614:	080056e1 	.word	0x080056e1
 8005618:	080056e1 	.word	0x080056e1
 800561c:	080056e1 	.word	0x080056e1
 8005620:	080056e1 	.word	0x080056e1
 8005624:	080056e1 	.word	0x080056e1
 8005628:	080056e1 	.word	0x080056e1
 800562c:	080056b9 	.word	0x080056b9
 8005630:	080056e1 	.word	0x080056e1
 8005634:	080056e1 	.word	0x080056e1
 8005638:	080056e1 	.word	0x080056e1
 800563c:	080056e1 	.word	0x080056e1
 8005640:	080056e1 	.word	0x080056e1
 8005644:	080056e1 	.word	0x080056e1
 8005648:	080056e1 	.word	0x080056e1
 800564c:	080056c1 	.word	0x080056c1
 8005650:	080056e1 	.word	0x080056e1
 8005654:	080056e1 	.word	0x080056e1
 8005658:	080056e1 	.word	0x080056e1
 800565c:	080056e1 	.word	0x080056e1
 8005660:	080056e1 	.word	0x080056e1
 8005664:	080056e1 	.word	0x080056e1
 8005668:	080056e1 	.word	0x080056e1
 800566c:	080056c9 	.word	0x080056c9
 8005670:	080056e1 	.word	0x080056e1
 8005674:	080056e1 	.word	0x080056e1
 8005678:	080056e1 	.word	0x080056e1
 800567c:	080056e1 	.word	0x080056e1
 8005680:	080056e1 	.word	0x080056e1
 8005684:	080056e1 	.word	0x080056e1
 8005688:	080056e1 	.word	0x080056e1
 800568c:	080056d1 	.word	0x080056d1
 8005690:	080056e1 	.word	0x080056e1
 8005694:	080056e1 	.word	0x080056e1
 8005698:	080056e1 	.word	0x080056e1
 800569c:	080056e1 	.word	0x080056e1
 80056a0:	080056e1 	.word	0x080056e1
 80056a4:	080056e1 	.word	0x080056e1
 80056a8:	080056e1 	.word	0x080056e1
 80056ac:	080056d9 	.word	0x080056d9
 80056b0:	2301      	movs	r3, #1
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056b6:	e050      	b.n	800575a <UART_SetConfig+0x7ae>
 80056b8:	2304      	movs	r3, #4
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056be:	e04c      	b.n	800575a <UART_SetConfig+0x7ae>
 80056c0:	2308      	movs	r3, #8
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c6:	e048      	b.n	800575a <UART_SetConfig+0x7ae>
 80056c8:	2310      	movs	r3, #16
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ce:	e044      	b.n	800575a <UART_SetConfig+0x7ae>
 80056d0:	2320      	movs	r3, #32
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d6:	e040      	b.n	800575a <UART_SetConfig+0x7ae>
 80056d8:	2340      	movs	r3, #64	; 0x40
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056de:	e03c      	b.n	800575a <UART_SetConfig+0x7ae>
 80056e0:	2380      	movs	r3, #128	; 0x80
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e6:	e038      	b.n	800575a <UART_SetConfig+0x7ae>
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a71      	ldr	r2, [pc, #452]	; (80058b4 <UART_SetConfig+0x908>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d130      	bne.n	8005754 <UART_SetConfig+0x7a8>
 80056f2:	4b6f      	ldr	r3, [pc, #444]	; (80058b0 <UART_SetConfig+0x904>)
 80056f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	d826      	bhi.n	800574c <UART_SetConfig+0x7a0>
 80056fe:	a201      	add	r2, pc, #4	; (adr r2, 8005704 <UART_SetConfig+0x758>)
 8005700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005704:	0800571d 	.word	0x0800571d
 8005708:	08005725 	.word	0x08005725
 800570c:	0800572d 	.word	0x0800572d
 8005710:	08005735 	.word	0x08005735
 8005714:	0800573d 	.word	0x0800573d
 8005718:	08005745 	.word	0x08005745
 800571c:	2302      	movs	r3, #2
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005722:	e01a      	b.n	800575a <UART_SetConfig+0x7ae>
 8005724:	2304      	movs	r3, #4
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572a:	e016      	b.n	800575a <UART_SetConfig+0x7ae>
 800572c:	2308      	movs	r3, #8
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005732:	e012      	b.n	800575a <UART_SetConfig+0x7ae>
 8005734:	2310      	movs	r3, #16
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573a:	e00e      	b.n	800575a <UART_SetConfig+0x7ae>
 800573c:	2320      	movs	r3, #32
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005742:	e00a      	b.n	800575a <UART_SetConfig+0x7ae>
 8005744:	2340      	movs	r3, #64	; 0x40
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574a:	e006      	b.n	800575a <UART_SetConfig+0x7ae>
 800574c:	2380      	movs	r3, #128	; 0x80
 800574e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005752:	e002      	b.n	800575a <UART_SetConfig+0x7ae>
 8005754:	2380      	movs	r3, #128	; 0x80
 8005756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a55      	ldr	r2, [pc, #340]	; (80058b4 <UART_SetConfig+0x908>)
 8005760:	4293      	cmp	r3, r2
 8005762:	f040 80f8 	bne.w	8005956 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005766:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800576a:	2b20      	cmp	r3, #32
 800576c:	dc46      	bgt.n	80057fc <UART_SetConfig+0x850>
 800576e:	2b02      	cmp	r3, #2
 8005770:	db75      	blt.n	800585e <UART_SetConfig+0x8b2>
 8005772:	3b02      	subs	r3, #2
 8005774:	2b1e      	cmp	r3, #30
 8005776:	d872      	bhi.n	800585e <UART_SetConfig+0x8b2>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <UART_SetConfig+0x7d4>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	08005803 	.word	0x08005803
 8005784:	0800585f 	.word	0x0800585f
 8005788:	0800580b 	.word	0x0800580b
 800578c:	0800585f 	.word	0x0800585f
 8005790:	0800585f 	.word	0x0800585f
 8005794:	0800585f 	.word	0x0800585f
 8005798:	0800581b 	.word	0x0800581b
 800579c:	0800585f 	.word	0x0800585f
 80057a0:	0800585f 	.word	0x0800585f
 80057a4:	0800585f 	.word	0x0800585f
 80057a8:	0800585f 	.word	0x0800585f
 80057ac:	0800585f 	.word	0x0800585f
 80057b0:	0800585f 	.word	0x0800585f
 80057b4:	0800585f 	.word	0x0800585f
 80057b8:	0800582b 	.word	0x0800582b
 80057bc:	0800585f 	.word	0x0800585f
 80057c0:	0800585f 	.word	0x0800585f
 80057c4:	0800585f 	.word	0x0800585f
 80057c8:	0800585f 	.word	0x0800585f
 80057cc:	0800585f 	.word	0x0800585f
 80057d0:	0800585f 	.word	0x0800585f
 80057d4:	0800585f 	.word	0x0800585f
 80057d8:	0800585f 	.word	0x0800585f
 80057dc:	0800585f 	.word	0x0800585f
 80057e0:	0800585f 	.word	0x0800585f
 80057e4:	0800585f 	.word	0x0800585f
 80057e8:	0800585f 	.word	0x0800585f
 80057ec:	0800585f 	.word	0x0800585f
 80057f0:	0800585f 	.word	0x0800585f
 80057f4:	0800585f 	.word	0x0800585f
 80057f8:	08005851 	.word	0x08005851
 80057fc:	2b40      	cmp	r3, #64	; 0x40
 80057fe:	d02a      	beq.n	8005856 <UART_SetConfig+0x8aa>
 8005800:	e02d      	b.n	800585e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005802:	f7fe fb0d 	bl	8003e20 <HAL_RCCEx_GetD3PCLK1Freq>
 8005806:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005808:	e02f      	b.n	800586a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800580a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe fb1c 	bl	8003e4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005818:	e027      	b.n	800586a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800581a:	f107 0318 	add.w	r3, r7, #24
 800581e:	4618      	mov	r0, r3
 8005820:	f7fe fc68 	bl	80040f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005828:	e01f      	b.n	800586a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800582a:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <UART_SetConfig+0x904>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0320 	and.w	r3, r3, #32
 8005832:	2b00      	cmp	r3, #0
 8005834:	d009      	beq.n	800584a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005836:	4b1e      	ldr	r3, [pc, #120]	; (80058b0 <UART_SetConfig+0x904>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	08db      	lsrs	r3, r3, #3
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	4a1d      	ldr	r2, [pc, #116]	; (80058b8 <UART_SetConfig+0x90c>)
 8005842:	fa22 f303 	lsr.w	r3, r2, r3
 8005846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005848:	e00f      	b.n	800586a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800584a:	4b1b      	ldr	r3, [pc, #108]	; (80058b8 <UART_SetConfig+0x90c>)
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800584e:	e00c      	b.n	800586a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005850:	4b1a      	ldr	r3, [pc, #104]	; (80058bc <UART_SetConfig+0x910>)
 8005852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005854:	e009      	b.n	800586a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800585a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800585c:	e005      	b.n	800586a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005868:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800586a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 81ee 	beq.w	8005c4e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	4a12      	ldr	r2, [pc, #72]	; (80058c0 <UART_SetConfig+0x914>)
 8005878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800587c:	461a      	mov	r2, r3
 800587e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005880:	fbb3 f3f2 	udiv	r3, r3, r2
 8005884:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	4413      	add	r3, r2
 8005890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005892:	429a      	cmp	r2, r3
 8005894:	d305      	bcc.n	80058a2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800589c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800589e:	429a      	cmp	r2, r3
 80058a0:	d910      	bls.n	80058c4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80058a8:	e1d1      	b.n	8005c4e <UART_SetConfig+0xca2>
 80058aa:	bf00      	nop
 80058ac:	40011c00 	.word	0x40011c00
 80058b0:	58024400 	.word	0x58024400
 80058b4:	58000c00 	.word	0x58000c00
 80058b8:	03d09000 	.word	0x03d09000
 80058bc:	003d0900 	.word	0x003d0900
 80058c0:	08006400 	.word	0x08006400
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058c6:	2200      	movs	r2, #0
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	60fa      	str	r2, [r7, #12]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	4ac0      	ldr	r2, [pc, #768]	; (8005bd4 <UART_SetConfig+0xc28>)
 80058d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2200      	movs	r2, #0
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	607a      	str	r2, [r7, #4]
 80058de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058e6:	f7fa fd01 	bl	80002ec <__aeabi_uldivmod>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4610      	mov	r0, r2
 80058f0:	4619      	mov	r1, r3
 80058f2:	f04f 0200 	mov.w	r2, #0
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	020b      	lsls	r3, r1, #8
 80058fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005900:	0202      	lsls	r2, r0, #8
 8005902:	6979      	ldr	r1, [r7, #20]
 8005904:	6849      	ldr	r1, [r1, #4]
 8005906:	0849      	lsrs	r1, r1, #1
 8005908:	2000      	movs	r0, #0
 800590a:	460c      	mov	r4, r1
 800590c:	4605      	mov	r5, r0
 800590e:	eb12 0804 	adds.w	r8, r2, r4
 8005912:	eb43 0905 	adc.w	r9, r3, r5
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	469a      	mov	sl, r3
 800591e:	4693      	mov	fp, r2
 8005920:	4652      	mov	r2, sl
 8005922:	465b      	mov	r3, fp
 8005924:	4640      	mov	r0, r8
 8005926:	4649      	mov	r1, r9
 8005928:	f7fa fce0 	bl	80002ec <__aeabi_uldivmod>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4613      	mov	r3, r2
 8005932:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800593a:	d308      	bcc.n	800594e <UART_SetConfig+0x9a2>
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005942:	d204      	bcs.n	800594e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800594a:	60da      	str	r2, [r3, #12]
 800594c:	e17f      	b.n	8005c4e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005954:	e17b      	b.n	8005c4e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800595e:	f040 80bd 	bne.w	8005adc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005962:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005966:	2b20      	cmp	r3, #32
 8005968:	dc48      	bgt.n	80059fc <UART_SetConfig+0xa50>
 800596a:	2b00      	cmp	r3, #0
 800596c:	db7b      	blt.n	8005a66 <UART_SetConfig+0xaba>
 800596e:	2b20      	cmp	r3, #32
 8005970:	d879      	bhi.n	8005a66 <UART_SetConfig+0xaba>
 8005972:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <UART_SetConfig+0x9cc>)
 8005974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005978:	08005a03 	.word	0x08005a03
 800597c:	08005a0b 	.word	0x08005a0b
 8005980:	08005a67 	.word	0x08005a67
 8005984:	08005a67 	.word	0x08005a67
 8005988:	08005a13 	.word	0x08005a13
 800598c:	08005a67 	.word	0x08005a67
 8005990:	08005a67 	.word	0x08005a67
 8005994:	08005a67 	.word	0x08005a67
 8005998:	08005a23 	.word	0x08005a23
 800599c:	08005a67 	.word	0x08005a67
 80059a0:	08005a67 	.word	0x08005a67
 80059a4:	08005a67 	.word	0x08005a67
 80059a8:	08005a67 	.word	0x08005a67
 80059ac:	08005a67 	.word	0x08005a67
 80059b0:	08005a67 	.word	0x08005a67
 80059b4:	08005a67 	.word	0x08005a67
 80059b8:	08005a33 	.word	0x08005a33
 80059bc:	08005a67 	.word	0x08005a67
 80059c0:	08005a67 	.word	0x08005a67
 80059c4:	08005a67 	.word	0x08005a67
 80059c8:	08005a67 	.word	0x08005a67
 80059cc:	08005a67 	.word	0x08005a67
 80059d0:	08005a67 	.word	0x08005a67
 80059d4:	08005a67 	.word	0x08005a67
 80059d8:	08005a67 	.word	0x08005a67
 80059dc:	08005a67 	.word	0x08005a67
 80059e0:	08005a67 	.word	0x08005a67
 80059e4:	08005a67 	.word	0x08005a67
 80059e8:	08005a67 	.word	0x08005a67
 80059ec:	08005a67 	.word	0x08005a67
 80059f0:	08005a67 	.word	0x08005a67
 80059f4:	08005a67 	.word	0x08005a67
 80059f8:	08005a59 	.word	0x08005a59
 80059fc:	2b40      	cmp	r3, #64	; 0x40
 80059fe:	d02e      	beq.n	8005a5e <UART_SetConfig+0xab2>
 8005a00:	e031      	b.n	8005a66 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a02:	f7fd fad5 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8005a06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a08:	e033      	b.n	8005a72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a0a:	f7fd fae7 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 8005a0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a10:	e02f      	b.n	8005a72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fe fa18 	bl	8003e4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a20:	e027      	b.n	8005a72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a22:	f107 0318 	add.w	r3, r7, #24
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe fb64 	bl	80040f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a30:	e01f      	b.n	8005a72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a32:	4b69      	ldr	r3, [pc, #420]	; (8005bd8 <UART_SetConfig+0xc2c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d009      	beq.n	8005a52 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a3e:	4b66      	ldr	r3, [pc, #408]	; (8005bd8 <UART_SetConfig+0xc2c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	08db      	lsrs	r3, r3, #3
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	4a64      	ldr	r2, [pc, #400]	; (8005bdc <UART_SetConfig+0xc30>)
 8005a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a50:	e00f      	b.n	8005a72 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005a52:	4b62      	ldr	r3, [pc, #392]	; (8005bdc <UART_SetConfig+0xc30>)
 8005a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a56:	e00c      	b.n	8005a72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a58:	4b61      	ldr	r3, [pc, #388]	; (8005be0 <UART_SetConfig+0xc34>)
 8005a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a5c:	e009      	b.n	8005a72 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a64:	e005      	b.n	8005a72 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80ea 	beq.w	8005c4e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	4a55      	ldr	r2, [pc, #340]	; (8005bd4 <UART_SetConfig+0xc28>)
 8005a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a84:	461a      	mov	r2, r3
 8005a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a8c:	005a      	lsls	r2, r3, #1
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	085b      	lsrs	r3, r3, #1
 8005a94:	441a      	add	r2, r3
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	2b0f      	cmp	r3, #15
 8005aa4:	d916      	bls.n	8005ad4 <UART_SetConfig+0xb28>
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aac:	d212      	bcs.n	8005ad4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f023 030f 	bic.w	r3, r3, #15
 8005ab6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	085b      	lsrs	r3, r3, #1
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005ad0:	60da      	str	r2, [r3, #12]
 8005ad2:	e0bc      	b.n	8005c4e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ada:	e0b8      	b.n	8005c4e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005adc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	dc4b      	bgt.n	8005b7c <UART_SetConfig+0xbd0>
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f2c0 8087 	blt.w	8005bf8 <UART_SetConfig+0xc4c>
 8005aea:	2b20      	cmp	r3, #32
 8005aec:	f200 8084 	bhi.w	8005bf8 <UART_SetConfig+0xc4c>
 8005af0:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <UART_SetConfig+0xb4c>)
 8005af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af6:	bf00      	nop
 8005af8:	08005b83 	.word	0x08005b83
 8005afc:	08005b8b 	.word	0x08005b8b
 8005b00:	08005bf9 	.word	0x08005bf9
 8005b04:	08005bf9 	.word	0x08005bf9
 8005b08:	08005b93 	.word	0x08005b93
 8005b0c:	08005bf9 	.word	0x08005bf9
 8005b10:	08005bf9 	.word	0x08005bf9
 8005b14:	08005bf9 	.word	0x08005bf9
 8005b18:	08005ba3 	.word	0x08005ba3
 8005b1c:	08005bf9 	.word	0x08005bf9
 8005b20:	08005bf9 	.word	0x08005bf9
 8005b24:	08005bf9 	.word	0x08005bf9
 8005b28:	08005bf9 	.word	0x08005bf9
 8005b2c:	08005bf9 	.word	0x08005bf9
 8005b30:	08005bf9 	.word	0x08005bf9
 8005b34:	08005bf9 	.word	0x08005bf9
 8005b38:	08005bb3 	.word	0x08005bb3
 8005b3c:	08005bf9 	.word	0x08005bf9
 8005b40:	08005bf9 	.word	0x08005bf9
 8005b44:	08005bf9 	.word	0x08005bf9
 8005b48:	08005bf9 	.word	0x08005bf9
 8005b4c:	08005bf9 	.word	0x08005bf9
 8005b50:	08005bf9 	.word	0x08005bf9
 8005b54:	08005bf9 	.word	0x08005bf9
 8005b58:	08005bf9 	.word	0x08005bf9
 8005b5c:	08005bf9 	.word	0x08005bf9
 8005b60:	08005bf9 	.word	0x08005bf9
 8005b64:	08005bf9 	.word	0x08005bf9
 8005b68:	08005bf9 	.word	0x08005bf9
 8005b6c:	08005bf9 	.word	0x08005bf9
 8005b70:	08005bf9 	.word	0x08005bf9
 8005b74:	08005bf9 	.word	0x08005bf9
 8005b78:	08005beb 	.word	0x08005beb
 8005b7c:	2b40      	cmp	r3, #64	; 0x40
 8005b7e:	d037      	beq.n	8005bf0 <UART_SetConfig+0xc44>
 8005b80:	e03a      	b.n	8005bf8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b82:	f7fd fa15 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8005b86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b88:	e03c      	b.n	8005c04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b8a:	f7fd fa27 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 8005b8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b90:	e038      	b.n	8005c04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe f958 	bl	8003e4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ba0:	e030      	b.n	8005c04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ba2:	f107 0318 	add.w	r3, r7, #24
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe faa4 	bl	80040f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bb0:	e028      	b.n	8005c04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bb2:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <UART_SetConfig+0xc2c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d012      	beq.n	8005be4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bbe:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <UART_SetConfig+0xc2c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	08db      	lsrs	r3, r3, #3
 8005bc4:	f003 0303 	and.w	r3, r3, #3
 8005bc8:	4a04      	ldr	r2, [pc, #16]	; (8005bdc <UART_SetConfig+0xc30>)
 8005bca:	fa22 f303 	lsr.w	r3, r2, r3
 8005bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bd0:	e018      	b.n	8005c04 <UART_SetConfig+0xc58>
 8005bd2:	bf00      	nop
 8005bd4:	08006400 	.word	0x08006400
 8005bd8:	58024400 	.word	0x58024400
 8005bdc:	03d09000 	.word	0x03d09000
 8005be0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005be4:	4b24      	ldr	r3, [pc, #144]	; (8005c78 <UART_SetConfig+0xccc>)
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005be8:	e00c      	b.n	8005c04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bea:	4b24      	ldr	r3, [pc, #144]	; (8005c7c <UART_SetConfig+0xcd0>)
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bee:	e009      	b.n	8005c04 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bf6:	e005      	b.n	8005c04 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005c02:	bf00      	nop
    }

    if (pclk != 0U)
 8005c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d021      	beq.n	8005c4e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	4a1c      	ldr	r2, [pc, #112]	; (8005c80 <UART_SetConfig+0xcd4>)
 8005c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c14:	461a      	mov	r2, r3
 8005c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c18:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	441a      	add	r2, r3
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	2b0f      	cmp	r3, #15
 8005c32:	d909      	bls.n	8005c48 <UART_SetConfig+0xc9c>
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3a:	d205      	bcs.n	8005c48 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	60da      	str	r2, [r3, #12]
 8005c46:	e002      	b.n	8005c4e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	2200      	movs	r2, #0
 8005c62:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2200      	movs	r2, #0
 8005c68:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c6a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3748      	adds	r7, #72	; 0x48
 8005c72:	46bd      	mov	sp, r7
 8005c74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c78:	03d09000 	.word	0x03d09000
 8005c7c:	003d0900 	.word	0x003d0900
 8005c80:	08006400 	.word	0x08006400

08005c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00a      	beq.n	8005cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00a      	beq.n	8005d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d01a      	beq.n	8005d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d82:	d10a      	bne.n	8005d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	605a      	str	r2, [r3, #4]
  }
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dd8:	f7fb f8be 	bl	8000f58 <HAL_GetTick>
 8005ddc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0308 	and.w	r3, r3, #8
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d10e      	bne.n	8005e0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f82f 	bl	8005e5e <UART_WaitOnFlagUntilTimeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e025      	b.n	8005e56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d10e      	bne.n	8005e36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f819 	bl	8005e5e <UART_WaitOnFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e00f      	b.n	8005e56 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b09c      	sub	sp, #112	; 0x70
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	60f8      	str	r0, [r7, #12]
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	603b      	str	r3, [r7, #0]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e6e:	e0a9      	b.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e76:	f000 80a5 	beq.w	8005fc4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e7a:	f7fb f86d 	bl	8000f58 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d302      	bcc.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x32>
 8005e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d140      	bne.n	8005f12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ea4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eb0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005eb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e6      	bne.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3308      	adds	r3, #8
 8005ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	f023 0301 	bic.w	r3, r3, #1
 8005ed8:	663b      	str	r3, [r7, #96]	; 0x60
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3308      	adds	r3, #8
 8005ee0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ee2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ee4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e5      	bne.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e069      	b.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d051      	beq.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2e:	d149      	bne.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	e853 3f00 	ldrex	r3, [r3]
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	461a      	mov	r2, r3
 8005f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f58:	637b      	str	r3, [r7, #52]	; 0x34
 8005f5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e6      	bne.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3308      	adds	r3, #8
 8005f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	e853 3f00 	ldrex	r3, [r3]
 8005f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f023 0301 	bic.w	r3, r3, #1
 8005f82:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3308      	adds	r3, #8
 8005f8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f8c:	623a      	str	r2, [r7, #32]
 8005f8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f90:	69f9      	ldr	r1, [r7, #28]
 8005f92:	6a3a      	ldr	r2, [r7, #32]
 8005f94:	e841 2300 	strex	r3, r2, [r1]
 8005f98:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1e5      	bne.n	8005f6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e010      	b.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69da      	ldr	r2, [r3, #28]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	bf0c      	ite	eq
 8005fd4:	2301      	moveq	r3, #1
 8005fd6:	2300      	movne	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	461a      	mov	r2, r3
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	f43f af46 	beq.w	8005e70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3770      	adds	r7, #112	; 0x70
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b095      	sub	sp, #84	; 0x54
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006000:	e853 3f00 	ldrex	r3, [r3]
 8006004:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800600c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006016:	643b      	str	r3, [r7, #64]	; 0x40
 8006018:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800601c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1e6      	bne.n	8005ff8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3308      	adds	r3, #8
 8006030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	61fb      	str	r3, [r7, #28]
   return(result);
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	4b1e      	ldr	r3, [pc, #120]	; (80060b8 <UART_EndRxTransfer+0xc8>)
 800603e:	4013      	ands	r3, r2
 8006040:	64bb      	str	r3, [r7, #72]	; 0x48
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3308      	adds	r3, #8
 8006048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800604a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800604c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e5      	bne.n	800602a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006062:	2b01      	cmp	r3, #1
 8006064:	d118      	bne.n	8006098 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	60bb      	str	r3, [r7, #8]
   return(result);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f023 0310 	bic.w	r3, r3, #16
 800607a:	647b      	str	r3, [r7, #68]	; 0x44
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
 8006082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006084:	61bb      	str	r3, [r7, #24]
 8006086:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6979      	ldr	r1, [r7, #20]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	613b      	str	r3, [r7, #16]
   return(result);
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e6      	bne.n	8006066 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	671a      	str	r2, [r3, #112]	; 0x70
}
 80060ac:	bf00      	nop
 80060ae:	3754      	adds	r7, #84	; 0x54
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	effffffe 	.word	0xeffffffe

080060bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7fe ff50 	bl	8004f80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b088      	sub	sp, #32
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006104:	61fb      	str	r3, [r7, #28]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6979      	ldr	r1, [r7, #20]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	613b      	str	r3, [r7, #16]
   return(result);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e6      	bne.n	80060f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7fe ff1b 	bl	8004f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006136:	bf00      	nop
 8006138:	3720      	adds	r7, #32
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800616e:	bf00      	nop
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_UARTEx_DisableFifoMode+0x16>
 800618c:	2302      	movs	r3, #2
 800618e:	e027      	b.n	80061e0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2224      	movs	r2, #36	; 0x24
 800619c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0201 	bic.w	r2, r2, #1
 80061b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006200:	2302      	movs	r3, #2
 8006202:	e02d      	b.n	8006260 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2224      	movs	r2, #36	; 0x24
 8006210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0201 	bic.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f84f 	bl	80062e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800627c:	2302      	movs	r3, #2
 800627e:	e02d      	b.n	80062dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2224      	movs	r2, #36	; 0x24
 800628c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0201 	bic.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f811 	bl	80062e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d108      	bne.n	8006306 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006304:	e031      	b.n	800636a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006306:	2310      	movs	r3, #16
 8006308:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800630a:	2310      	movs	r3, #16
 800630c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	0e5b      	lsrs	r3, r3, #25
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	0f5b      	lsrs	r3, r3, #29
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800632e:	7bbb      	ldrb	r3, [r7, #14]
 8006330:	7b3a      	ldrb	r2, [r7, #12]
 8006332:	4911      	ldr	r1, [pc, #68]	; (8006378 <UARTEx_SetNbDataToProcess+0x94>)
 8006334:	5c8a      	ldrb	r2, [r1, r2]
 8006336:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800633a:	7b3a      	ldrb	r2, [r7, #12]
 800633c:	490f      	ldr	r1, [pc, #60]	; (800637c <UARTEx_SetNbDataToProcess+0x98>)
 800633e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006340:	fb93 f3f2 	sdiv	r3, r3, r2
 8006344:	b29a      	uxth	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	7b7a      	ldrb	r2, [r7, #13]
 8006350:	4909      	ldr	r1, [pc, #36]	; (8006378 <UARTEx_SetNbDataToProcess+0x94>)
 8006352:	5c8a      	ldrb	r2, [r1, r2]
 8006354:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006358:	7b7a      	ldrb	r2, [r7, #13]
 800635a:	4908      	ldr	r1, [pc, #32]	; (800637c <UARTEx_SetNbDataToProcess+0x98>)
 800635c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800635e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006362:	b29a      	uxth	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800636a:	bf00      	nop
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	08006418 	.word	0x08006418
 800637c:	08006420 	.word	0x08006420

08006380 <__libc_init_array>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	4d0d      	ldr	r5, [pc, #52]	; (80063b8 <__libc_init_array+0x38>)
 8006384:	4c0d      	ldr	r4, [pc, #52]	; (80063bc <__libc_init_array+0x3c>)
 8006386:	1b64      	subs	r4, r4, r5
 8006388:	10a4      	asrs	r4, r4, #2
 800638a:	2600      	movs	r6, #0
 800638c:	42a6      	cmp	r6, r4
 800638e:	d109      	bne.n	80063a4 <__libc_init_array+0x24>
 8006390:	4d0b      	ldr	r5, [pc, #44]	; (80063c0 <__libc_init_array+0x40>)
 8006392:	4c0c      	ldr	r4, [pc, #48]	; (80063c4 <__libc_init_array+0x44>)
 8006394:	f000 f820 	bl	80063d8 <_init>
 8006398:	1b64      	subs	r4, r4, r5
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	2600      	movs	r6, #0
 800639e:	42a6      	cmp	r6, r4
 80063a0:	d105      	bne.n	80063ae <__libc_init_array+0x2e>
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a8:	4798      	blx	r3
 80063aa:	3601      	adds	r6, #1
 80063ac:	e7ee      	b.n	800638c <__libc_init_array+0xc>
 80063ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b2:	4798      	blx	r3
 80063b4:	3601      	adds	r6, #1
 80063b6:	e7f2      	b.n	800639e <__libc_init_array+0x1e>
 80063b8:	08006430 	.word	0x08006430
 80063bc:	08006430 	.word	0x08006430
 80063c0:	08006430 	.word	0x08006430
 80063c4:	08006434 	.word	0x08006434

080063c8 <memset>:
 80063c8:	4402      	add	r2, r0
 80063ca:	4603      	mov	r3, r0
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d100      	bne.n	80063d2 <memset+0xa>
 80063d0:	4770      	bx	lr
 80063d2:	f803 1b01 	strb.w	r1, [r3], #1
 80063d6:	e7f9      	b.n	80063cc <memset+0x4>

080063d8 <_init>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	bf00      	nop
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr

080063e4 <_fini>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr
