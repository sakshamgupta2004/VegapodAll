
LU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007984  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08007a98  08007a98  00017a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f04  08007f04  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007f04  08007f04  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f04  08007f04  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f04  08007f04  00017f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f08  08007f08  00017f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200001e4  080080f0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080080f0  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e49b  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002139  00000000  00000000  0002e6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  000307e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  000315c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019097  00000000  00000000  000322d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f62f  00000000  00000000  0004b367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090c3a  00000000  00000000  0005a996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb5d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c8c  00000000  00000000  000eb620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a7c 	.word	0x08007a7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007a7c 	.word	0x08007a7c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__gesf2>:
 8000d08:	f04f 3cff 	mov.w	ip, #4294967295
 8000d0c:	e006      	b.n	8000d1c <__cmpsf2+0x4>
 8000d0e:	bf00      	nop

08000d10 <__lesf2>:
 8000d10:	f04f 0c01 	mov.w	ip, #1
 8000d14:	e002      	b.n	8000d1c <__cmpsf2+0x4>
 8000d16:	bf00      	nop

08000d18 <__cmpsf2>:
 8000d18:	f04f 0c01 	mov.w	ip, #1
 8000d1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d2c:	bf18      	it	ne
 8000d2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d32:	d011      	beq.n	8000d58 <__cmpsf2+0x40>
 8000d34:	b001      	add	sp, #4
 8000d36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d3a:	bf18      	it	ne
 8000d3c:	ea90 0f01 	teqne	r0, r1
 8000d40:	bf58      	it	pl
 8000d42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d46:	bf88      	it	hi
 8000d48:	17c8      	asrhi	r0, r1, #31
 8000d4a:	bf38      	it	cc
 8000d4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d50:	bf18      	it	ne
 8000d52:	f040 0001 	orrne.w	r0, r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	d102      	bne.n	8000d64 <__cmpsf2+0x4c>
 8000d5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d62:	d105      	bne.n	8000d70 <__cmpsf2+0x58>
 8000d64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d68:	d1e4      	bne.n	8000d34 <__cmpsf2+0x1c>
 8000d6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d6e:	d0e1      	beq.n	8000d34 <__cmpsf2+0x1c>
 8000d70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <__aeabi_cfrcmple>:
 8000d78:	4684      	mov	ip, r0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	4661      	mov	r1, ip
 8000d7e:	e7ff      	b.n	8000d80 <__aeabi_cfcmpeq>

08000d80 <__aeabi_cfcmpeq>:
 8000d80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d82:	f7ff ffc9 	bl	8000d18 <__cmpsf2>
 8000d86:	2800      	cmp	r0, #0
 8000d88:	bf48      	it	mi
 8000d8a:	f110 0f00 	cmnmi.w	r0, #0
 8000d8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d90 <__aeabi_fcmpeq>:
 8000d90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d94:	f7ff fff4 	bl	8000d80 <__aeabi_cfcmpeq>
 8000d98:	bf0c      	ite	eq
 8000d9a:	2001      	moveq	r0, #1
 8000d9c:	2000      	movne	r0, #0
 8000d9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da2:	bf00      	nop

08000da4 <__aeabi_fcmplt>:
 8000da4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da8:	f7ff ffea 	bl	8000d80 <__aeabi_cfcmpeq>
 8000dac:	bf34      	ite	cc
 8000dae:	2001      	movcc	r0, #1
 8000db0:	2000      	movcs	r0, #0
 8000db2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000db6:	bf00      	nop

08000db8 <__aeabi_fcmple>:
 8000db8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dbc:	f7ff ffe0 	bl	8000d80 <__aeabi_cfcmpeq>
 8000dc0:	bf94      	ite	ls
 8000dc2:	2001      	movls	r0, #1
 8000dc4:	2000      	movhi	r0, #0
 8000dc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dca:	bf00      	nop

08000dcc <__aeabi_fcmpge>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff ffd2 	bl	8000d78 <__aeabi_cfrcmple>
 8000dd4:	bf94      	ite	ls
 8000dd6:	2001      	movls	r0, #1
 8000dd8:	2000      	movhi	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmpgt>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffc8 	bl	8000d78 <__aeabi_cfrcmple>
 8000de8:	bf34      	ite	cc
 8000dea:	2001      	movcc	r0, #1
 8000dec:	2000      	movcs	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_d2lz>:
 8000df4:	b538      	push	{r3, r4, r5, lr}
 8000df6:	4605      	mov	r5, r0
 8000df8:	460c      	mov	r4, r1
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	4628      	mov	r0, r5
 8000e00:	4621      	mov	r1, r4
 8000e02:	f7ff fddb 	bl	80009bc <__aeabi_dcmplt>
 8000e06:	b928      	cbnz	r0, 8000e14 <__aeabi_d2lz+0x20>
 8000e08:	4628      	mov	r0, r5
 8000e0a:	4621      	mov	r1, r4
 8000e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e10:	f000 b80a 	b.w	8000e28 <__aeabi_d2ulz>
 8000e14:	4628      	mov	r0, r5
 8000e16:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000e1a:	f000 f805 	bl	8000e28 <__aeabi_d2ulz>
 8000e1e:	4240      	negs	r0, r0
 8000e20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e24:	bd38      	pop	{r3, r4, r5, pc}
 8000e26:	bf00      	nop

08000e28 <__aeabi_d2ulz>:
 8000e28:	b5d0      	push	{r4, r6, r7, lr}
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <__aeabi_d2ulz+0x34>)
 8000e2e:	4606      	mov	r6, r0
 8000e30:	460f      	mov	r7, r1
 8000e32:	f7ff fb51 	bl	80004d8 <__aeabi_dmul>
 8000e36:	f7ff fde9 	bl	8000a0c <__aeabi_d2uiz>
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	f7ff fad2 	bl	80003e4 <__aeabi_ui2d>
 8000e40:	2200      	movs	r2, #0
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <__aeabi_d2ulz+0x38>)
 8000e44:	f7ff fb48 	bl	80004d8 <__aeabi_dmul>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	4639      	mov	r1, r7
 8000e50:	f7ff f98a 	bl	8000168 <__aeabi_dsub>
 8000e54:	f7ff fdda 	bl	8000a0c <__aeabi_d2uiz>
 8000e58:	4621      	mov	r1, r4
 8000e5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e5c:	3df00000 	.word	0x3df00000
 8000e60:	41f00000 	.word	0x41f00000

08000e64 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e70:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d013      	beq.n	8000ea4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e80:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e84:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00b      	beq.n	8000ea4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e8c:	e000      	b.n	8000e90 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e8e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f9      	beq.n	8000e8e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e9a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ea4:	687b      	ldr	r3, [r7, #4]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
	int i=0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	e009      	b.n	8000eda <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1c5a      	adds	r2, r3, #1
 8000eca:	60ba      	str	r2, [r7, #8]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ffc8 	bl	8000e64 <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	dbf1      	blt.n	8000ec6 <_write+0x16>
	return len;
 8000ee2:	687b      	ldr	r3, [r7, #4]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef0:	f000 fc7a 	bl	80017e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef4:	f000 f8c2 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef8:	f000 fa24 	bl	8001344 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000efc:	f000 f91a 	bl	8001134 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f00:	f000 f956 	bl	80011b0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f04:	f000 f9f4 	bl	80012f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start(&hadc1);
 8000f08:	484f      	ldr	r0, [pc, #316]	; (8001048 <main+0x15c>)
 8000f0a:	f000 fda7 	bl	8001a5c <HAL_ADC_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	484e      	ldr	r0, [pc, #312]	; (800104c <main+0x160>)
 8000f12:	f002 ff49 	bl	8003da8 <HAL_TIMEx_PWMN_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f16:	2100      	movs	r1, #0
 8000f18:	484c      	ldr	r0, [pc, #304]	; (800104c <main+0x160>)
 8000f1a:	f002 fa75 	bl	8003408 <HAL_TIM_PWM_Start>

    /* USER CODE BEGIN 3 */
//	  sprintf(txBuffer,"%d\n",number);
	  //HAL_Delay(50);
	  //HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer,  strlen(txBuffer),500);
	  if(HAL_UART_Receive(&huart1,con_sig,10,10) != HAL_OK) {
 8000f1e:	230a      	movs	r3, #10
 8000f20:	220a      	movs	r2, #10
 8000f22:	494b      	ldr	r1, [pc, #300]	; (8001050 <main+0x164>)
 8000f24:	484b      	ldr	r0, [pc, #300]	; (8001054 <main+0x168>)
 8000f26:	f003 f900 	bl	800412a <HAL_UART_Receive>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <main+0x4e>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f34:	4848      	ldr	r0, [pc, #288]	; (8001058 <main+0x16c>)
 8000f36:	f001 fc29 	bl	800278c <HAL_GPIO_TogglePin>
		  //HAL_Delay(1000);
	  }
	  //HAL_Delay(100);
	  //targetCurrentma = 10000;
	  targetCurrentma = (atof(con_sig))*1000;
 8000f3a:	4845      	ldr	r0, [pc, #276]	; (8001050 <main+0x164>)
 8000f3c:	f003 fed8 	bl	8004cf0 <atof>
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	4b45      	ldr	r3, [pc, #276]	; (800105c <main+0x170>)
 8000f46:	f7ff fac7 	bl	80004d8 <__aeabi_dmul>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff fd7b 	bl	8000a4c <__aeabi_d2f>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a41      	ldr	r2, [pc, #260]	; (8001060 <main+0x174>)
 8000f5a:	6013      	str	r3, [r2, #0]
	  if (targetCurrentma > 10000) {
 8000f5c:	4b40      	ldr	r3, [pc, #256]	; (8001060 <main+0x174>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4940      	ldr	r1, [pc, #256]	; (8001064 <main+0x178>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff3c 	bl	8000de0 <__aeabi_fcmpgt>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <main+0x8a>
		  targetCurrentma = 10000;
 8000f6e:	4b3c      	ldr	r3, [pc, #240]	; (8001060 <main+0x174>)
 8000f70:	4a3c      	ldr	r2, [pc, #240]	; (8001064 <main+0x178>)
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	e00d      	b.n	8000f92 <main+0xa6>
	  }
	  else if (targetCurrentma < 0) {
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <main+0x174>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f04f 0100 	mov.w	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff10 	bl	8000da4 <__aeabi_fcmplt>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <main+0xa6>
		  targetCurrentma = 0;
 8000f8a:	4b35      	ldr	r3, [pc, #212]	; (8001060 <main+0x174>)
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
	  }
	  HAL_ADC_PollForConversion(&hadc1, 0);
 8000f92:	2100      	movs	r1, #0
 8000f94:	482c      	ldr	r0, [pc, #176]	; (8001048 <main+0x15c>)
 8000f96:	f000 fe0f 	bl	8001bb8 <HAL_ADC_PollForConversion>
	  value1 = HAL_ADC_GetValue(&hadc1);
 8000f9a:	482b      	ldr	r0, [pc, #172]	; (8001048 <main+0x15c>)
 8000f9c:	f000 ff12 	bl	8001dc4 <HAL_ADC_GetValue>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	4b30      	ldr	r3, [pc, #192]	; (8001068 <main+0x17c>)
 8000fa6:	801a      	strh	r2, [r3, #0]
	  	  currentma = (value1 * 10000)/1240;
 8000fa8:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <main+0x17c>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fb2:	fb02 f303 	mul.w	r3, r2, r3
 8000fb6:	4a2d      	ldr	r2, [pc, #180]	; (800106c <main+0x180>)
 8000fb8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fbc:	11d2      	asrs	r2, r2, #7
 8000fbe:	17db      	asrs	r3, r3, #31
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	4a2b      	ldr	r2, [pc, #172]	; (8001070 <main+0x184>)
 8000fc4:	6013      	str	r3, [r2, #0]
	  	  if (currentma > targetCurrentma) currPWM--;
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <main+0x184>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fe48 	bl	8000c60 <__aeabi_i2f>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <main+0x174>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4610      	mov	r0, r2
 8000fda:	f7ff ff01 	bl	8000de0 <__aeabi_fcmpgt>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d005      	beq.n	8000ff0 <main+0x104>
 8000fe4:	4b23      	ldr	r3, [pc, #140]	; (8001074 <main+0x188>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	4a22      	ldr	r2, [pc, #136]	; (8001074 <main+0x188>)
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e013      	b.n	8001018 <main+0x12c>
	  	  else if (currentma < targetCurrentma)currPWM++;
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <main+0x184>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fe33 	bl	8000c60 <__aeabi_i2f>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <main+0x174>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	4610      	mov	r0, r2
 8001004:	f7ff fece 	bl	8000da4 <__aeabi_fcmplt>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d004      	beq.n	8001018 <main+0x12c>
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <main+0x188>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	3301      	adds	r3, #1
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <main+0x188>)
 8001016:	6013      	str	r3, [r2, #0]
	  	  if (currPWM > 1250) currPWM = 1250;
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <main+0x188>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001020:	4293      	cmp	r3, r2
 8001022:	dd04      	ble.n	800102e <main+0x142>
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <main+0x188>)
 8001026:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e006      	b.n	800103c <main+0x150>
	  	  else if (currPWM < 0) currPWM = 0;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <main+0x188>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	da02      	bge.n	800103c <main+0x150>
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <main+0x188>)
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	  	  TIM1->CCR1=currPWM;
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <main+0x188>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <main+0x18c>)
 8001042:	635a      	str	r2, [r3, #52]	; 0x34
	  if(HAL_UART_Receive(&huart1,con_sig,10,10) != HAL_OK) {
 8001044:	e76b      	b.n	8000f1e <main+0x32>
 8001046:	bf00      	nop
 8001048:	20000200 	.word	0x20000200
 800104c:	20000230 	.word	0x20000230
 8001050:	200002c4 	.word	0x200002c4
 8001054:	20000278 	.word	0x20000278
 8001058:	40011000 	.word	0x40011000
 800105c:	408f4000 	.word	0x408f4000
 8001060:	20000000 	.word	0x20000000
 8001064:	461c4000 	.word	0x461c4000
 8001068:	200002c0 	.word	0x200002c0
 800106c:	1a6d01a7 	.word	0x1a6d01a7
 8001070:	200002d0 	.word	0x200002d0
 8001074:	200002d4 	.word	0x200002d4
 8001078:	40012c00 	.word	0x40012c00

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001086:	2228      	movs	r2, #40	; 0x28
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f003 fe5e 	bl	8004d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ac:	2301      	movs	r3, #1
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ba:	2301      	movs	r3, #1
 80010bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 fb74 	bl	80027c0 <HAL_RCC_OscConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010de:	f000 f953 	bl	8001388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e2:	230f      	movs	r3, #15
 80010e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2102      	movs	r1, #2
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fde0 	bl	8002cc4 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800110a:	f000 f93d 	bl	8001388 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800110e:	2302      	movs	r3, #2
 8001110:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001116:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	4618      	mov	r0, r3
 800111c:	f001 ff60 	bl	8002fe0 <HAL_RCCEx_PeriphCLKConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001126:	f000 f92f 	bl	8001388 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	; 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001144:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_ADC1_Init+0x74>)
 8001146:	4a19      	ldr	r2, [pc, #100]	; (80011ac <MX_ADC1_Init+0x78>)
 8001148:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_ADC1_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_ADC1_Init+0x74>)
 8001152:	2201      	movs	r2, #1
 8001154:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_ADC1_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_ADC1_Init+0x74>)
 800115e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001162:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MX_ADC1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_ADC1_Init+0x74>)
 800116c:	2201      	movs	r2, #1
 800116e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <MX_ADC1_Init+0x74>)
 8001172:	f000 fb9b 	bl	80018ac <HAL_ADC_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800117c:	f000 f904 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001184:	2301      	movs	r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_ADC1_Init+0x74>)
 8001192:	f000 fe23 	bl	8001ddc <HAL_ADC_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800119c:	f000 f8f4 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000200 	.word	0x20000200
 80011ac:	40012400 	.word	0x40012400

080011b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b096      	sub	sp, #88	; 0x58
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]
 80011de:	615a      	str	r2, [r3, #20]
 80011e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2220      	movs	r2, #32
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 fdaf 	bl	8004d4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ee:	4b3e      	ldr	r3, [pc, #248]	; (80012e8 <MX_TIM1_Init+0x138>)
 80011f0:	4a3e      	ldr	r2, [pc, #248]	; (80012ec <MX_TIM1_Init+0x13c>)
 80011f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011f4:	4b3c      	ldr	r3, [pc, #240]	; (80012e8 <MX_TIM1_Init+0x138>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <MX_TIM1_Init+0x138>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1439;
 8001200:	4b39      	ldr	r3, [pc, #228]	; (80012e8 <MX_TIM1_Init+0x138>)
 8001202:	f240 529f 	movw	r2, #1439	; 0x59f
 8001206:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b37      	ldr	r3, [pc, #220]	; (80012e8 <MX_TIM1_Init+0x138>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800120e:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <MX_TIM1_Init+0x138>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <MX_TIM1_Init+0x138>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800121a:	4833      	ldr	r0, [pc, #204]	; (80012e8 <MX_TIM1_Init+0x138>)
 800121c:	f002 f84c 	bl	80032b8 <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001226:	f000 f8af 	bl	8001388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001230:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001234:	4619      	mov	r1, r3
 8001236:	482c      	ldr	r0, [pc, #176]	; (80012e8 <MX_TIM1_Init+0x138>)
 8001238:	f002 fa4a 	bl	80036d0 <HAL_TIM_ConfigClockSource>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001242:	f000 f8a1 	bl	8001388 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001246:	4828      	ldr	r0, [pc, #160]	; (80012e8 <MX_TIM1_Init+0x138>)
 8001248:	f002 f885 	bl	8003356 <HAL_TIM_PWM_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001252:	f000 f899 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001262:	4619      	mov	r1, r3
 8001264:	4820      	ldr	r0, [pc, #128]	; (80012e8 <MX_TIM1_Init+0x138>)
 8001266:	f002 fe3d 	bl	8003ee4 <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001270:	f000 f88a 	bl	8001388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001274:	2360      	movs	r3, #96	; 0x60
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001280:	2300      	movs	r3, #0
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001294:	2200      	movs	r2, #0
 8001296:	4619      	mov	r1, r3
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <MX_TIM1_Init+0x138>)
 800129a:	f002 f957 	bl	800354c <HAL_TIM_PWM_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012a4:	f000 f870 	bl	8001388 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 120;
 80012b4:	2378      	movs	r3, #120	; 0x78
 80012b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <MX_TIM1_Init+0x138>)
 80012cc:	f002 fe68 	bl	8003fa0 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80012d6:	f000 f857 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012da:	4803      	ldr	r0, [pc, #12]	; (80012e8 <MX_TIM1_Init+0x138>)
 80012dc:	f000 f8d6 	bl	800148c <HAL_TIM_MspPostInit>

}
 80012e0:	bf00      	nop
 80012e2:	3758      	adds	r7, #88	; 0x58
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000230 	.word	0x20000230
 80012ec:	40012c00 	.word	0x40012c00

080012f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_USART1_UART_Init+0x4c>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_USART1_UART_Init+0x50>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_USART1_UART_Init+0x4c>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_USART1_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001316:	2204      	movs	r2, #4
 8001318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_USART1_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001328:	f002 feaf 	bl	800408a <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001332:	f000 f829 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000278 	.word	0x20000278
 8001340:	40013800 	.word	0x40013800

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_GPIO_Init+0x40>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <MX_GPIO_Init+0x40>)
 8001350:	f043 0320 	orr.w	r3, r3, #32
 8001354:	6193      	str	r3, [r2, #24]
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_GPIO_Init+0x40>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_GPIO_Init+0x40>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	4a07      	ldr	r2, [pc, #28]	; (8001384 <MX_GPIO_Init+0x40>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6193      	str	r3, [r2, #24]
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <MX_GPIO_Init+0x40>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]

}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40021000 	.word	0x40021000

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001390:	e7fe      	b.n	8001390 <Error_Handler+0x8>
	...

08001394 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_MspInit+0x40>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <HAL_MspInit+0x40>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6193      	str	r3, [r2, #24]
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_MspInit+0x40>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_MspInit+0x40>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <HAL_MspInit+0x40>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_MspInit+0x40>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40021000 	.word	0x40021000

080013d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a14      	ldr	r2, [pc, #80]	; (8001444 <HAL_ADC_MspInit+0x6c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d121      	bne.n	800143c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_ADC_MspInit+0x70>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a12      	ldr	r2, [pc, #72]	; (8001448 <HAL_ADC_MspInit+0x70>)
 80013fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_ADC_MspInit+0x70>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_ADC_MspInit+0x70>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <HAL_ADC_MspInit+0x70>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_ADC_MspInit+0x70>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001428:	2301      	movs	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142c:	2303      	movs	r3, #3
 800142e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4619      	mov	r1, r3
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <HAL_ADC_MspInit+0x74>)
 8001438:	f001 f824 	bl	8002484 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40012400 	.word	0x40012400
 8001448:	40021000 	.word	0x40021000
 800144c:	40010800 	.word	0x40010800

08001450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a09      	ldr	r2, [pc, #36]	; (8001484 <HAL_TIM_Base_MspInit+0x34>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d10b      	bne.n	800147a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_TIM_Base_MspInit+0x38>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_TIM_Base_MspInit+0x38>)
 8001468:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800146c:	6193      	str	r3, [r2, #24]
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_TIM_Base_MspInit+0x38>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	40012c00 	.word	0x40012c00
 8001488:	40021000 	.word	0x40021000

0800148c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a19      	ldr	r2, [pc, #100]	; (800150c <HAL_TIM_MspPostInit+0x80>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d12a      	bne.n	8001502 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_TIM_MspPostInit+0x84>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a17      	ldr	r2, [pc, #92]	; (8001510 <HAL_TIM_MspPostInit+0x84>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_TIM_MspPostInit+0x84>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014c4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	480e      	ldr	r0, [pc, #56]	; (8001514 <HAL_TIM_MspPostInit+0x88>)
 80014da:	f000 ffd3 	bl	8002484 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_TIM_MspPostInit+0x8c>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	4a06      	ldr	r2, [pc, #24]	; (8001518 <HAL_TIM_MspPostInit+0x8c>)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40012c00 	.word	0x40012c00
 8001510:	40021000 	.word	0x40021000
 8001514:	40010800 	.word	0x40010800
 8001518:	40010000 	.word	0x40010000

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <HAL_UART_MspInit+0x9c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d139      	bne.n	80015b0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <HAL_UART_MspInit+0xa0>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <HAL_UART_MspInit+0xa0>)
 8001542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_UART_MspInit+0xa0>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_UART_MspInit+0xa0>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a18      	ldr	r2, [pc, #96]	; (80015bc <HAL_UART_MspInit+0xa0>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_UART_MspInit+0xa0>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800156c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001570:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	4619      	mov	r1, r3
 8001580:	480f      	ldr	r0, [pc, #60]	; (80015c0 <HAL_UART_MspInit+0xa4>)
 8001582:	f000 ff7f 	bl	8002484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	4619      	mov	r1, r3
 800159a:	4809      	ldr	r0, [pc, #36]	; (80015c0 <HAL_UART_MspInit+0xa4>)
 800159c:	f000 ff72 	bl	8002484 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	2025      	movs	r0, #37	; 0x25
 80015a6:	f000 fe84 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015aa:	2025      	movs	r0, #37	; 0x25
 80015ac:	f000 fe9d 	bl	80022ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015b0:	bf00      	nop
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40013800 	.word	0x40013800
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010800 	.word	0x40010800

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler+0x4>

080015ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <MemManage_Handler+0x4>

080015d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
	...

08001608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
ticks++;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <SysTick_Handler+0x28>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	3301      	adds	r3, #1
 8001612:	4a07      	ldr	r2, [pc, #28]	; (8001630 <SysTick_Handler+0x28>)
 8001614:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001616:	f000 f92d 	bl	8001874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
if (ticks >= 1000) {
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SysTick_Handler+0x28>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001622:	db02      	blt.n	800162a <SysTick_Handler+0x22>
	ticks = 0;
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <SysTick_Handler+0x28>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
//		  targetCurrentma = 11000;
//	  else
//		  targetCurrentma = 1000;
}
  /* USER CODE END SysTick_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200002d8 	.word	0x200002d8

08001634 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <USART1_IRQHandler+0x10>)
 800163a:	f002 fe09 	bl	8004250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000278 	.word	0x20000278

08001648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
	return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <_kill>:

int _kill(int pid, int sig)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001660:	f003 fb4a 	bl	8004cf8 <__errno>
 8001664:	4603      	mov	r3, r0
 8001666:	2216      	movs	r2, #22
 8001668:	601a      	str	r2, [r3, #0]
	return -1;
 800166a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_exit>:

void _exit (int status)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800167e:	f04f 31ff 	mov.w	r1, #4294967295
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ffe7 	bl	8001656 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001688:	e7fe      	b.n	8001688 <_exit+0x12>

0800168a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e00a      	b.n	80016b2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800169c:	f3af 8000 	nop.w
 80016a0:	4601      	mov	r1, r0
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	60ba      	str	r2, [r7, #8]
 80016a8:	b2ca      	uxtb	r2, r1
 80016aa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dbf0      	blt.n	800169c <_read+0x12>
	}

return len;
 80016ba:	687b      	ldr	r3, [r7, #4]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_close>:
	}
	return len;
}

int _close(int file)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	return -1;
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ea:	605a      	str	r2, [r3, #4]
	return 0;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <_isatty>:

int _isatty(int file)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	return 1;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
	return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <_sbrk+0x5c>)
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <_sbrk+0x60>)
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <_sbrk+0x64>)
 8001742:	4a12      	ldr	r2, [pc, #72]	; (800178c <_sbrk+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d207      	bcs.n	8001764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001754:	f003 fad0 	bl	8004cf8 <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e009      	b.n	8001778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20005000 	.word	0x20005000
 8001784:	00000400 	.word	0x00000400
 8001788:	200002dc 	.word	0x200002dc
 800178c:	200002f8 	.word	0x200002f8

08001790 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800179c:	f7ff fff8 	bl	8001790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a0:	480b      	ldr	r0, [pc, #44]	; (80017d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017a2:	490c      	ldr	r1, [pc, #48]	; (80017d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017a4:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a09      	ldr	r2, [pc, #36]	; (80017dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017b8:	4c09      	ldr	r4, [pc, #36]	; (80017e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017c6:	f003 fa9d 	bl	8004d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ca:	f7ff fb8f 	bl	8000eec <main>
  bx lr
 80017ce:	4770      	bx	lr
  ldr r0, =_sdata
 80017d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80017d8:	08007f0c 	.word	0x08007f0c
  ldr r2, =_sbss
 80017dc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80017e0:	200002f4 	.word	0x200002f4

080017e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e4:	e7fe      	b.n	80017e4 <ADC1_2_IRQHandler>
	...

080017e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_Init+0x28>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a07      	ldr	r2, [pc, #28]	; (8001810 <HAL_Init+0x28>)
 80017f2:	f043 0310 	orr.w	r3, r3, #16
 80017f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f8:	2003      	movs	r0, #3
 80017fa:	f000 fd4f 	bl	800229c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fe:	200f      	movs	r0, #15
 8001800:	f000 f808 	bl	8001814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001804:	f7ff fdc6 	bl	8001394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40022000 	.word	0x40022000

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x54>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x58>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
 8001826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182a:	fbb3 f3f1 	udiv	r3, r3, r1
 800182e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fd67 	bl	8002306 <HAL_SYSTICK_Config>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e00e      	b.n	8001860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b0f      	cmp	r3, #15
 8001846:	d80a      	bhi.n	800185e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f000 fd2f 	bl	80022b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001854:	4a06      	ldr	r2, [pc, #24]	; (8001870 <HAL_InitTick+0x5c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000004 	.word	0x20000004
 800186c:	2000000c 	.word	0x2000000c
 8001870:	20000008 	.word	0x20000008

08001874 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_IncTick+0x1c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_IncTick+0x20>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a03      	ldr	r2, [pc, #12]	; (8001894 <HAL_IncTick+0x20>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	2000000c 	.word	0x2000000c
 8001894:	200002e0 	.word	0x200002e0

08001898 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b02      	ldr	r3, [pc, #8]	; (80018a8 <HAL_GetTick+0x10>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	200002e0 	.word	0x200002e0

080018ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0be      	b.n	8001a4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fd74 	bl	80013d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fbc5 	bl	8002080 <ADC_ConversionStop_Disable>
 80018f6:	4603      	mov	r3, r0
 80018f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 8099 	bne.w	8001a3a <HAL_ADC_Init+0x18e>
 8001908:	7dfb      	ldrb	r3, [r7, #23]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 8095 	bne.w	8001a3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001918:	f023 0302 	bic.w	r3, r3, #2
 800191c:	f043 0202 	orr.w	r2, r3, #2
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800192c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7b1b      	ldrb	r3, [r3, #12]
 8001932:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001934:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	4313      	orrs	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001944:	d003      	beq.n	800194e <HAL_ADC_Init+0xa2>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d102      	bne.n	8001954 <HAL_ADC_Init+0xa8>
 800194e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001952:	e000      	b.n	8001956 <HAL_ADC_Init+0xaa>
 8001954:	2300      	movs	r3, #0
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7d1b      	ldrb	r3, [r3, #20]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d119      	bne.n	8001998 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7b1b      	ldrb	r3, [r3, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	3b01      	subs	r3, #1
 8001972:	035a      	lsls	r2, r3, #13
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	e00b      	b.n	8001998 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	f043 0220 	orr.w	r2, r3, #32
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	f043 0201 	orr.w	r2, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <HAL_ADC_Init+0x1a8>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	68b9      	ldr	r1, [r7, #8]
 80019bc:	430b      	orrs	r3, r1
 80019be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c8:	d003      	beq.n	80019d2 <HAL_ADC_Init+0x126>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d104      	bne.n	80019dc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	051b      	lsls	r3, r3, #20
 80019da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_ADC_Init+0x1ac>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d10b      	bne.n	8001a18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	f023 0303 	bic.w	r3, r3, #3
 8001a0e:	f043 0201 	orr.w	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a16:	e018      	b.n	8001a4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	f023 0312 	bic.w	r3, r3, #18
 8001a20:	f043 0210 	orr.w	r2, r3, #16
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a38:	e007      	b.n	8001a4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	f043 0210 	orr.w	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	ffe1f7fd 	.word	0xffe1f7fd
 8001a58:	ff1f0efe 	.word	0xff1f0efe

08001a5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_ADC_Start+0x1a>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e098      	b.n	8001ba8 <HAL_ADC_Start+0x14c>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 faa4 	bl	8001fcc <ADC_Enable>
 8001a84:	4603      	mov	r3, r0
 8001a86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f040 8087 	bne.w	8001b9e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a41      	ldr	r2, [pc, #260]	; (8001bb0 <HAL_ADC_Start+0x154>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d105      	bne.n	8001aba <HAL_ADC_Start+0x5e>
 8001aae:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <HAL_ADC_Start+0x158>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d115      	bne.n	8001ae6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d026      	beq.n	8001b22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001adc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ae4:	e01d      	b.n	8001b22 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2f      	ldr	r2, [pc, #188]	; (8001bb4 <HAL_ADC_Start+0x158>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d004      	beq.n	8001b06 <HAL_ADC_Start+0xaa>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <HAL_ADC_Start+0x154>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d10d      	bne.n	8001b22 <HAL_ADC_Start+0xc6>
 8001b06:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_ADC_Start+0x158>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d006      	beq.n	8001b3c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b32:	f023 0206 	bic.w	r2, r3, #6
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b3a:	e002      	b.n	8001b42 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f06f 0202 	mvn.w	r2, #2
 8001b52:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b62:	d113      	bne.n	8001b8c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b68:	4a11      	ldr	r2, [pc, #68]	; (8001bb0 <HAL_ADC_Start+0x154>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d105      	bne.n	8001b7a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_ADC_Start+0x158>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d108      	bne.n	8001b8c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	e00c      	b.n	8001ba6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	e003      	b.n	8001ba6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40012800 	.word	0x40012800
 8001bb4:	40012400 	.word	0x40012400

08001bb8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bce:	f7ff fe63 	bl	8001898 <HAL_GetTick>
 8001bd2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	f043 0220 	orr.w	r2, r3, #32
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0d3      	b.n	8001da2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d131      	bne.n	8001c6c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d12a      	bne.n	8001c6c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c16:	e021      	b.n	8001c5c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1e:	d01d      	beq.n	8001c5c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_ADC_PollForConversion+0x7e>
 8001c26:	f7ff fe37 	bl	8001898 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d212      	bcs.n	8001c5c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10b      	bne.n	8001c5c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	f043 0204 	orr.w	r2, r3, #4
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e0a2      	b.n	8001da2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0d6      	beq.n	8001c18 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c6a:	e070      	b.n	8001d4e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c6c:	4b4f      	ldr	r3, [pc, #316]	; (8001dac <HAL_ADC_PollForConversion+0x1f4>)
 8001c6e:	681c      	ldr	r4, [r3, #0]
 8001c70:	2002      	movs	r0, #2
 8001c72:	f001 fa6b 	bl	800314c <HAL_RCCEx_GetPeriphCLKFreq>
 8001c76:	4603      	mov	r3, r0
 8001c78:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6919      	ldr	r1, [r3, #16]
 8001c82:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <HAL_ADC_PollForConversion+0x1f8>)
 8001c84:	400b      	ands	r3, r1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d118      	bne.n	8001cbc <HAL_ADC_PollForConversion+0x104>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68d9      	ldr	r1, [r3, #12]
 8001c90:	4b48      	ldr	r3, [pc, #288]	; (8001db4 <HAL_ADC_PollForConversion+0x1fc>)
 8001c92:	400b      	ands	r3, r1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d111      	bne.n	8001cbc <HAL_ADC_PollForConversion+0x104>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6919      	ldr	r1, [r3, #16]
 8001c9e:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <HAL_ADC_PollForConversion+0x200>)
 8001ca0:	400b      	ands	r3, r1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d108      	bne.n	8001cb8 <HAL_ADC_PollForConversion+0x100>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68d9      	ldr	r1, [r3, #12]
 8001cac:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <HAL_ADC_PollForConversion+0x204>)
 8001cae:	400b      	ands	r3, r1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_ADC_PollForConversion+0x100>
 8001cb4:	2314      	movs	r3, #20
 8001cb6:	e020      	b.n	8001cfa <HAL_ADC_PollForConversion+0x142>
 8001cb8:	2329      	movs	r3, #41	; 0x29
 8001cba:	e01e      	b.n	8001cfa <HAL_ADC_PollForConversion+0x142>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6919      	ldr	r1, [r3, #16]
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <HAL_ADC_PollForConversion+0x200>)
 8001cc4:	400b      	ands	r3, r1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <HAL_ADC_PollForConversion+0x120>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68d9      	ldr	r1, [r3, #12]
 8001cd0:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <HAL_ADC_PollForConversion+0x204>)
 8001cd2:	400b      	ands	r3, r1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00d      	beq.n	8001cf4 <HAL_ADC_PollForConversion+0x13c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6919      	ldr	r1, [r3, #16]
 8001cde:	4b38      	ldr	r3, [pc, #224]	; (8001dc0 <HAL_ADC_PollForConversion+0x208>)
 8001ce0:	400b      	ands	r3, r1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d108      	bne.n	8001cf8 <HAL_ADC_PollForConversion+0x140>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68d9      	ldr	r1, [r3, #12]
 8001cec:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <HAL_ADC_PollForConversion+0x208>)
 8001cee:	400b      	ands	r3, r1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_PollForConversion+0x140>
 8001cf4:	2354      	movs	r3, #84	; 0x54
 8001cf6:	e000      	b.n	8001cfa <HAL_ADC_PollForConversion+0x142>
 8001cf8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d00:	e021      	b.n	8001d46 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d08:	d01a      	beq.n	8001d40 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_ADC_PollForConversion+0x168>
 8001d10:	f7ff fdc2 	bl	8001898 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d20f      	bcs.n	8001d40 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d90b      	bls.n	8001d40 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	f043 0204 	orr.w	r2, r3, #4
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e030      	b.n	8001da2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3301      	adds	r3, #1
 8001d44:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d8d9      	bhi.n	8001d02 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f06f 0212 	mvn.w	r2, #18
 8001d56:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d72:	d115      	bne.n	8001da0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d111      	bne.n	8001da0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	371c      	adds	r7, #28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000004 	.word	0x20000004
 8001db0:	24924924 	.word	0x24924924
 8001db4:	00924924 	.word	0x00924924
 8001db8:	12492492 	.word	0x12492492
 8001dbc:	00492492 	.word	0x00492492
 8001dc0:	00249249 	.word	0x00249249

08001dc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x20>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e0dc      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x1da>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b06      	cmp	r3, #6
 8001e0a:	d81c      	bhi.n	8001e46 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3b05      	subs	r3, #5
 8001e1e:	221f      	movs	r2, #31
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	4019      	ands	r1, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	3b05      	subs	r3, #5
 8001e38:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34
 8001e44:	e03c      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d81c      	bhi.n	8001e88 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b23      	subs	r3, #35	; 0x23
 8001e60:	221f      	movs	r2, #31
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	4019      	ands	r1, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	3b23      	subs	r3, #35	; 0x23
 8001e7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	631a      	str	r2, [r3, #48]	; 0x30
 8001e86:	e01b      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	3b41      	subs	r3, #65	; 0x41
 8001e9a:	221f      	movs	r2, #31
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	4019      	ands	r1, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3b41      	subs	r3, #65	; 0x41
 8001eb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b09      	cmp	r3, #9
 8001ec6:	d91c      	bls.n	8001f02 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68d9      	ldr	r1, [r3, #12]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3b1e      	subs	r3, #30
 8001eda:	2207      	movs	r2, #7
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	4019      	ands	r1, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6898      	ldr	r0, [r3, #8]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3b1e      	subs	r3, #30
 8001ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	e019      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6919      	ldr	r1, [r3, #16]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	2207      	movs	r2, #7
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	4019      	ands	r1, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6898      	ldr	r0, [r3, #8]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b10      	cmp	r3, #16
 8001f3c:	d003      	beq.n	8001f46 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f42:	2b11      	cmp	r3, #17
 8001f44:	d132      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d125      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d126      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f6c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d11a      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a13      	ldr	r2, [pc, #76]	; (8001fc8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	0c9a      	lsrs	r2, r3, #18
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f8c:	e002      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f9      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x1b2>
 8001f9a:	e007      	b.n	8001fac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	f043 0220 	orr.w	r2, r3, #32
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	40012400 	.word	0x40012400
 8001fc4:	20000004 	.word	0x20000004
 8001fc8:	431bde83 	.word	0x431bde83

08001fcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d040      	beq.n	800206c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <ADC_Enable+0xac>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	; (800207c <ADC_Enable+0xb0>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	0c9b      	lsrs	r3, r3, #18
 8002006:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002008:	e002      	b.n	8002010 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	3b01      	subs	r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f9      	bne.n	800200a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002016:	f7ff fc3f 	bl	8001898 <HAL_GetTick>
 800201a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800201c:	e01f      	b.n	800205e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800201e:	f7ff fc3b 	bl	8001898 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d918      	bls.n	800205e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d011      	beq.n	800205e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203e:	f043 0210 	orr.w	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	f043 0201 	orr.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e007      	b.n	800206e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d1d8      	bne.n	800201e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000004 	.word	0x20000004
 800207c:	431bde83 	.word	0x431bde83

08002080 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d12e      	bne.n	80020f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020aa:	f7ff fbf5 	bl	8001898 <HAL_GetTick>
 80020ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020b0:	e01b      	b.n	80020ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020b2:	f7ff fbf1 	bl	8001898 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d914      	bls.n	80020ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d10d      	bne.n	80020ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	f043 0210 	orr.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	f043 0201 	orr.w	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e007      	b.n	80020fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d0dc      	beq.n	80020b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <__NVIC_SetPriorityGrouping>:
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <__NVIC_SetPriorityGrouping+0x44>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002120:	4013      	ands	r3, r2
 8002122:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800212c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002136:	4a04      	ldr	r2, [pc, #16]	; (8002148 <__NVIC_SetPriorityGrouping+0x44>)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	60d3      	str	r3, [r2, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <__NVIC_GetPriorityGrouping>:
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <__NVIC_GetPriorityGrouping+0x18>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	0a1b      	lsrs	r3, r3, #8
 8002156:	f003 0307 	and.w	r3, r3, #7
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <__NVIC_EnableIRQ>:
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	2b00      	cmp	r3, #0
 8002178:	db0b      	blt.n	8002192 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	f003 021f 	and.w	r2, r3, #31
 8002180:	4906      	ldr	r1, [pc, #24]	; (800219c <__NVIC_EnableIRQ+0x34>)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	2001      	movs	r0, #1
 800218a:	fa00 f202 	lsl.w	r2, r0, r2
 800218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100

080021a0 <__NVIC_SetPriority>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	db0a      	blt.n	80021ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	490c      	ldr	r1, [pc, #48]	; (80021ec <__NVIC_SetPriority+0x4c>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	440b      	add	r3, r1
 80021c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021c8:	e00a      	b.n	80021e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4908      	ldr	r1, [pc, #32]	; (80021f0 <__NVIC_SetPriority+0x50>)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	3b04      	subs	r3, #4
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	440b      	add	r3, r1
 80021de:	761a      	strb	r2, [r3, #24]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000e100 	.word	0xe000e100
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <NVIC_EncodePriority>:
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f1c3 0307 	rsb	r3, r3, #7
 800220e:	2b04      	cmp	r3, #4
 8002210:	bf28      	it	cs
 8002212:	2304      	movcs	r3, #4
 8002214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3304      	adds	r3, #4
 800221a:	2b06      	cmp	r3, #6
 800221c:	d902      	bls.n	8002224 <NVIC_EncodePriority+0x30>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3b03      	subs	r3, #3
 8002222:	e000      	b.n	8002226 <NVIC_EncodePriority+0x32>
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	f04f 32ff 	mov.w	r2, #4294967295
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800223c:	f04f 31ff 	mov.w	r1, #4294967295
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	43d9      	mvns	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	4313      	orrs	r3, r2
}
 800224e:	4618      	mov	r0, r3
 8002250:	3724      	adds	r7, #36	; 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <SysTick_Config>:
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002268:	d301      	bcc.n	800226e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800226a:	2301      	movs	r3, #1
 800226c:	e00f      	b.n	800228e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <SysTick_Config+0x40>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002276:	210f      	movs	r1, #15
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f7ff ff90 	bl	80021a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <SysTick_Config+0x40>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002286:	4b04      	ldr	r3, [pc, #16]	; (8002298 <SysTick_Config+0x40>)
 8002288:	2207      	movs	r2, #7
 800228a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	e000e010 	.word	0xe000e010

0800229c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ff2d 	bl	8002104 <__NVIC_SetPriorityGrouping>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c4:	f7ff ff42 	bl	800214c <__NVIC_GetPriorityGrouping>
 80022c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	6978      	ldr	r0, [r7, #20]
 80022d0:	f7ff ff90 	bl	80021f4 <NVIC_EncodePriority>
 80022d4:	4602      	mov	r2, r0
 80022d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff5f 	bl	80021a0 <__NVIC_SetPriority>
}
 80022e2:	bf00      	nop
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff35 	bl	8002168 <__NVIC_EnableIRQ>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ffa2 	bl	8002258 <SysTick_Config>
 8002314:	4603      	mov	r3, r0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d008      	beq.n	8002348 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2204      	movs	r2, #4
 800233a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e020      	b.n	800238a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 020e 	bic.w	r2, r2, #14
 8002356:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f202 	lsl.w	r2, r1, r2
 8002376:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002388:	7bfb      	ldrb	r3, [r7, #15]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d005      	beq.n	80023b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2204      	movs	r2, #4
 80023b0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	e051      	b.n	800245c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 020e 	bic.w	r2, r2, #14
 80023c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a22      	ldr	r2, [pc, #136]	; (8002468 <HAL_DMA_Abort_IT+0xd4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d029      	beq.n	8002436 <HAL_DMA_Abort_IT+0xa2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a21      	ldr	r2, [pc, #132]	; (800246c <HAL_DMA_Abort_IT+0xd8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d022      	beq.n	8002432 <HAL_DMA_Abort_IT+0x9e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a1f      	ldr	r2, [pc, #124]	; (8002470 <HAL_DMA_Abort_IT+0xdc>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01a      	beq.n	800242c <HAL_DMA_Abort_IT+0x98>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1e      	ldr	r2, [pc, #120]	; (8002474 <HAL_DMA_Abort_IT+0xe0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d012      	beq.n	8002426 <HAL_DMA_Abort_IT+0x92>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <HAL_DMA_Abort_IT+0xe4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00a      	beq.n	8002420 <HAL_DMA_Abort_IT+0x8c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1b      	ldr	r2, [pc, #108]	; (800247c <HAL_DMA_Abort_IT+0xe8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d102      	bne.n	800241a <HAL_DMA_Abort_IT+0x86>
 8002414:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002418:	e00e      	b.n	8002438 <HAL_DMA_Abort_IT+0xa4>
 800241a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800241e:	e00b      	b.n	8002438 <HAL_DMA_Abort_IT+0xa4>
 8002420:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002424:	e008      	b.n	8002438 <HAL_DMA_Abort_IT+0xa4>
 8002426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800242a:	e005      	b.n	8002438 <HAL_DMA_Abort_IT+0xa4>
 800242c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002430:	e002      	b.n	8002438 <HAL_DMA_Abort_IT+0xa4>
 8002432:	2310      	movs	r3, #16
 8002434:	e000      	b.n	8002438 <HAL_DMA_Abort_IT+0xa4>
 8002436:	2301      	movs	r3, #1
 8002438:	4a11      	ldr	r2, [pc, #68]	; (8002480 <HAL_DMA_Abort_IT+0xec>)
 800243a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
    } 
  }
  return status;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40020008 	.word	0x40020008
 800246c:	4002001c 	.word	0x4002001c
 8002470:	40020030 	.word	0x40020030
 8002474:	40020044 	.word	0x40020044
 8002478:	40020058 	.word	0x40020058
 800247c:	4002006c 	.word	0x4002006c
 8002480:	40020000 	.word	0x40020000

08002484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002484:	b480      	push	{r7}
 8002486:	b08b      	sub	sp, #44	; 0x2c
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002496:	e169      	b.n	800276c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002498:	2201      	movs	r2, #1
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	f040 8158 	bne.w	8002766 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a9a      	ldr	r2, [pc, #616]	; (8002724 <HAL_GPIO_Init+0x2a0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d05e      	beq.n	800257e <HAL_GPIO_Init+0xfa>
 80024c0:	4a98      	ldr	r2, [pc, #608]	; (8002724 <HAL_GPIO_Init+0x2a0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d875      	bhi.n	80025b2 <HAL_GPIO_Init+0x12e>
 80024c6:	4a98      	ldr	r2, [pc, #608]	; (8002728 <HAL_GPIO_Init+0x2a4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d058      	beq.n	800257e <HAL_GPIO_Init+0xfa>
 80024cc:	4a96      	ldr	r2, [pc, #600]	; (8002728 <HAL_GPIO_Init+0x2a4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d86f      	bhi.n	80025b2 <HAL_GPIO_Init+0x12e>
 80024d2:	4a96      	ldr	r2, [pc, #600]	; (800272c <HAL_GPIO_Init+0x2a8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d052      	beq.n	800257e <HAL_GPIO_Init+0xfa>
 80024d8:	4a94      	ldr	r2, [pc, #592]	; (800272c <HAL_GPIO_Init+0x2a8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d869      	bhi.n	80025b2 <HAL_GPIO_Init+0x12e>
 80024de:	4a94      	ldr	r2, [pc, #592]	; (8002730 <HAL_GPIO_Init+0x2ac>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d04c      	beq.n	800257e <HAL_GPIO_Init+0xfa>
 80024e4:	4a92      	ldr	r2, [pc, #584]	; (8002730 <HAL_GPIO_Init+0x2ac>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d863      	bhi.n	80025b2 <HAL_GPIO_Init+0x12e>
 80024ea:	4a92      	ldr	r2, [pc, #584]	; (8002734 <HAL_GPIO_Init+0x2b0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d046      	beq.n	800257e <HAL_GPIO_Init+0xfa>
 80024f0:	4a90      	ldr	r2, [pc, #576]	; (8002734 <HAL_GPIO_Init+0x2b0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d85d      	bhi.n	80025b2 <HAL_GPIO_Init+0x12e>
 80024f6:	2b12      	cmp	r3, #18
 80024f8:	d82a      	bhi.n	8002550 <HAL_GPIO_Init+0xcc>
 80024fa:	2b12      	cmp	r3, #18
 80024fc:	d859      	bhi.n	80025b2 <HAL_GPIO_Init+0x12e>
 80024fe:	a201      	add	r2, pc, #4	; (adr r2, 8002504 <HAL_GPIO_Init+0x80>)
 8002500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002504:	0800257f 	.word	0x0800257f
 8002508:	08002559 	.word	0x08002559
 800250c:	0800256b 	.word	0x0800256b
 8002510:	080025ad 	.word	0x080025ad
 8002514:	080025b3 	.word	0x080025b3
 8002518:	080025b3 	.word	0x080025b3
 800251c:	080025b3 	.word	0x080025b3
 8002520:	080025b3 	.word	0x080025b3
 8002524:	080025b3 	.word	0x080025b3
 8002528:	080025b3 	.word	0x080025b3
 800252c:	080025b3 	.word	0x080025b3
 8002530:	080025b3 	.word	0x080025b3
 8002534:	080025b3 	.word	0x080025b3
 8002538:	080025b3 	.word	0x080025b3
 800253c:	080025b3 	.word	0x080025b3
 8002540:	080025b3 	.word	0x080025b3
 8002544:	080025b3 	.word	0x080025b3
 8002548:	08002561 	.word	0x08002561
 800254c:	08002575 	.word	0x08002575
 8002550:	4a79      	ldr	r2, [pc, #484]	; (8002738 <HAL_GPIO_Init+0x2b4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002556:	e02c      	b.n	80025b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	623b      	str	r3, [r7, #32]
          break;
 800255e:	e029      	b.n	80025b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	3304      	adds	r3, #4
 8002566:	623b      	str	r3, [r7, #32]
          break;
 8002568:	e024      	b.n	80025b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	3308      	adds	r3, #8
 8002570:	623b      	str	r3, [r7, #32]
          break;
 8002572:	e01f      	b.n	80025b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	330c      	adds	r3, #12
 800257a:	623b      	str	r3, [r7, #32]
          break;
 800257c:	e01a      	b.n	80025b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002586:	2304      	movs	r3, #4
 8002588:	623b      	str	r3, [r7, #32]
          break;
 800258a:	e013      	b.n	80025b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d105      	bne.n	80025a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002594:	2308      	movs	r3, #8
 8002596:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	611a      	str	r2, [r3, #16]
          break;
 800259e:	e009      	b.n	80025b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025a0:	2308      	movs	r3, #8
 80025a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	615a      	str	r2, [r3, #20]
          break;
 80025aa:	e003      	b.n	80025b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025ac:	2300      	movs	r3, #0
 80025ae:	623b      	str	r3, [r7, #32]
          break;
 80025b0:	e000      	b.n	80025b4 <HAL_GPIO_Init+0x130>
          break;
 80025b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2bff      	cmp	r3, #255	; 0xff
 80025b8:	d801      	bhi.n	80025be <HAL_GPIO_Init+0x13a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	e001      	b.n	80025c2 <HAL_GPIO_Init+0x13e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3304      	adds	r3, #4
 80025c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2bff      	cmp	r3, #255	; 0xff
 80025c8:	d802      	bhi.n	80025d0 <HAL_GPIO_Init+0x14c>
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	e002      	b.n	80025d6 <HAL_GPIO_Init+0x152>
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	3b08      	subs	r3, #8
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	210f      	movs	r1, #15
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	fa01 f303 	lsl.w	r3, r1, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	401a      	ands	r2, r3
 80025e8:	6a39      	ldr	r1, [r7, #32]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	fa01 f303 	lsl.w	r3, r1, r3
 80025f0:	431a      	orrs	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80b1 	beq.w	8002766 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002604:	4b4d      	ldr	r3, [pc, #308]	; (800273c <HAL_GPIO_Init+0x2b8>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4a4c      	ldr	r2, [pc, #304]	; (800273c <HAL_GPIO_Init+0x2b8>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6193      	str	r3, [r2, #24]
 8002610:	4b4a      	ldr	r3, [pc, #296]	; (800273c <HAL_GPIO_Init+0x2b8>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800261c:	4a48      	ldr	r2, [pc, #288]	; (8002740 <HAL_GPIO_Init+0x2bc>)
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002628:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4013      	ands	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a40      	ldr	r2, [pc, #256]	; (8002744 <HAL_GPIO_Init+0x2c0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d013      	beq.n	8002670 <HAL_GPIO_Init+0x1ec>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a3f      	ldr	r2, [pc, #252]	; (8002748 <HAL_GPIO_Init+0x2c4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00d      	beq.n	800266c <HAL_GPIO_Init+0x1e8>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a3e      	ldr	r2, [pc, #248]	; (800274c <HAL_GPIO_Init+0x2c8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d007      	beq.n	8002668 <HAL_GPIO_Init+0x1e4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a3d      	ldr	r2, [pc, #244]	; (8002750 <HAL_GPIO_Init+0x2cc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_GPIO_Init+0x1e0>
 8002660:	2303      	movs	r3, #3
 8002662:	e006      	b.n	8002672 <HAL_GPIO_Init+0x1ee>
 8002664:	2304      	movs	r3, #4
 8002666:	e004      	b.n	8002672 <HAL_GPIO_Init+0x1ee>
 8002668:	2302      	movs	r3, #2
 800266a:	e002      	b.n	8002672 <HAL_GPIO_Init+0x1ee>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <HAL_GPIO_Init+0x1ee>
 8002670:	2300      	movs	r3, #0
 8002672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002674:	f002 0203 	and.w	r2, r2, #3
 8002678:	0092      	lsls	r2, r2, #2
 800267a:	4093      	lsls	r3, r2
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002682:	492f      	ldr	r1, [pc, #188]	; (8002740 <HAL_GPIO_Init+0x2bc>)
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	089b      	lsrs	r3, r3, #2
 8002688:	3302      	adds	r3, #2
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800269c:	4b2d      	ldr	r3, [pc, #180]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	492c      	ldr	r1, [pc, #176]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	608b      	str	r3, [r1, #8]
 80026a8:	e006      	b.n	80026b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026aa:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	4928      	ldr	r1, [pc, #160]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d006      	beq.n	80026d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026c4:	4b23      	ldr	r3, [pc, #140]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	4922      	ldr	r1, [pc, #136]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60cb      	str	r3, [r1, #12]
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	43db      	mvns	r3, r3
 80026da:	491e      	ldr	r1, [pc, #120]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 80026dc:	4013      	ands	r3, r2
 80026de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d006      	beq.n	80026fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	4918      	ldr	r1, [pc, #96]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
 80026f8:	e006      	b.n	8002708 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	43db      	mvns	r3, r3
 8002702:	4914      	ldr	r1, [pc, #80]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 8002704:	4013      	ands	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d021      	beq.n	8002758 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002714:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	490e      	ldr	r1, [pc, #56]	; (8002754 <HAL_GPIO_Init+0x2d0>)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]
 8002720:	e021      	b.n	8002766 <HAL_GPIO_Init+0x2e2>
 8002722:	bf00      	nop
 8002724:	10320000 	.word	0x10320000
 8002728:	10310000 	.word	0x10310000
 800272c:	10220000 	.word	0x10220000
 8002730:	10210000 	.word	0x10210000
 8002734:	10120000 	.word	0x10120000
 8002738:	10110000 	.word	0x10110000
 800273c:	40021000 	.word	0x40021000
 8002740:	40010000 	.word	0x40010000
 8002744:	40010800 	.word	0x40010800
 8002748:	40010c00 	.word	0x40010c00
 800274c:	40011000 	.word	0x40011000
 8002750:	40011400 	.word	0x40011400
 8002754:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_GPIO_Init+0x304>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	43db      	mvns	r3, r3
 8002760:	4909      	ldr	r1, [pc, #36]	; (8002788 <HAL_GPIO_Init+0x304>)
 8002762:	4013      	ands	r3, r2
 8002764:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	3301      	adds	r3, #1
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	fa22 f303 	lsr.w	r3, r2, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	f47f ae8e 	bne.w	8002498 <HAL_GPIO_Init+0x14>
  }
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	372c      	adds	r7, #44	; 0x2c
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	40010400 	.word	0x40010400

0800278c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4013      	ands	r3, r2
 80027a4:	041a      	lsls	r2, r3, #16
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	43d9      	mvns	r1, r3
 80027aa:	887b      	ldrh	r3, [r7, #2]
 80027ac:	400b      	ands	r3, r1
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	611a      	str	r2, [r3, #16]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
	...

080027c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e272      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 8087 	beq.w	80028ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e0:	4b92      	ldr	r3, [pc, #584]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d00c      	beq.n	8002806 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027ec:	4b8f      	ldr	r3, [pc, #572]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d112      	bne.n	800281e <HAL_RCC_OscConfig+0x5e>
 80027f8:	4b8c      	ldr	r3, [pc, #560]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002804:	d10b      	bne.n	800281e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002806:	4b89      	ldr	r3, [pc, #548]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d06c      	beq.n	80028ec <HAL_RCC_OscConfig+0x12c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d168      	bne.n	80028ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e24c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x76>
 8002828:	4b80      	ldr	r3, [pc, #512]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a7f      	ldr	r2, [pc, #508]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800282e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	e02e      	b.n	8002894 <HAL_RCC_OscConfig+0xd4>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x98>
 800283e:	4b7b      	ldr	r3, [pc, #492]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a7a      	ldr	r2, [pc, #488]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b78      	ldr	r3, [pc, #480]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a77      	ldr	r2, [pc, #476]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e01d      	b.n	8002894 <HAL_RCC_OscConfig+0xd4>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0xbc>
 8002862:	4b72      	ldr	r3, [pc, #456]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a71      	ldr	r2, [pc, #452]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b6f      	ldr	r3, [pc, #444]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6e      	ldr	r2, [pc, #440]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0xd4>
 800287c:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a6a      	ldr	r2, [pc, #424]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b68      	ldr	r3, [pc, #416]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a67      	ldr	r2, [pc, #412]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 800288e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002892:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe fffc 	bl	8001898 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe fff8 	bl	8001898 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e200      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b5d      	ldr	r3, [pc, #372]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0xe4>
 80028c2:	e014      	b.n	80028ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe ffe8 	bl	8001898 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7fe ffe4 	bl	8001898 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e1ec      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	4b53      	ldr	r3, [pc, #332]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x10c>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d063      	beq.n	80029c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028fa:	4b4c      	ldr	r3, [pc, #304]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002906:	4b49      	ldr	r3, [pc, #292]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b08      	cmp	r3, #8
 8002910:	d11c      	bne.n	800294c <HAL_RCC_OscConfig+0x18c>
 8002912:	4b46      	ldr	r3, [pc, #280]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d116      	bne.n	800294c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	4b43      	ldr	r3, [pc, #268]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_RCC_OscConfig+0x176>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d001      	beq.n	8002936 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e1c0      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4939      	ldr	r1, [pc, #228]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	e03a      	b.n	80029c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002954:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe ff9d 	bl	8001898 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002962:	f7fe ff99 	bl	8001898 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e1a1      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002980:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4927      	ldr	r1, [pc, #156]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002996:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <HAL_RCC_OscConfig+0x270>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7fe ff7c 	bl	8001898 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a4:	f7fe ff78 	bl	8001898 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e180      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d03a      	beq.n	8002a44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d019      	beq.n	8002a0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d6:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <HAL_RCC_OscConfig+0x274>)
 80029d8:	2201      	movs	r2, #1
 80029da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029dc:	f7fe ff5c 	bl	8001898 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e4:	f7fe ff58 	bl	8001898 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e160      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a02:	2001      	movs	r0, #1
 8002a04:	f000 face 	bl	8002fa4 <RCC_Delay>
 8002a08:	e01c      	b.n	8002a44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a10:	f7fe ff42 	bl	8001898 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a16:	e00f      	b.n	8002a38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a18:	f7fe ff3e 	bl	8001898 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d908      	bls.n	8002a38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e146      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	42420000 	.word	0x42420000
 8002a34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	4b92      	ldr	r3, [pc, #584]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e9      	bne.n	8002a18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80a6 	beq.w	8002b9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a56:	4b8b      	ldr	r3, [pc, #556]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10d      	bne.n	8002a7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	4b88      	ldr	r3, [pc, #544]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	4a87      	ldr	r2, [pc, #540]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	61d3      	str	r3, [r2, #28]
 8002a6e:	4b85      	ldr	r3, [pc, #532]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7e:	4b82      	ldr	r3, [pc, #520]	; (8002c88 <HAL_RCC_OscConfig+0x4c8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d118      	bne.n	8002abc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8a:	4b7f      	ldr	r3, [pc, #508]	; (8002c88 <HAL_RCC_OscConfig+0x4c8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a7e      	ldr	r2, [pc, #504]	; (8002c88 <HAL_RCC_OscConfig+0x4c8>)
 8002a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a96:	f7fe feff 	bl	8001898 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9e:	f7fe fefb 	bl	8001898 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b64      	cmp	r3, #100	; 0x64
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e103      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	4b75      	ldr	r3, [pc, #468]	; (8002c88 <HAL_RCC_OscConfig+0x4c8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x312>
 8002ac4:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	4a6e      	ldr	r2, [pc, #440]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6213      	str	r3, [r2, #32]
 8002ad0:	e02d      	b.n	8002b2e <HAL_RCC_OscConfig+0x36e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x334>
 8002ada:	4b6a      	ldr	r3, [pc, #424]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a69      	ldr	r2, [pc, #420]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	4b67      	ldr	r3, [pc, #412]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a66      	ldr	r2, [pc, #408]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	6213      	str	r3, [r2, #32]
 8002af2:	e01c      	b.n	8002b2e <HAL_RCC_OscConfig+0x36e>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b05      	cmp	r3, #5
 8002afa:	d10c      	bne.n	8002b16 <HAL_RCC_OscConfig+0x356>
 8002afc:	4b61      	ldr	r3, [pc, #388]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4a60      	ldr	r2, [pc, #384]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b02:	f043 0304 	orr.w	r3, r3, #4
 8002b06:	6213      	str	r3, [r2, #32]
 8002b08:	4b5e      	ldr	r3, [pc, #376]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4a5d      	ldr	r2, [pc, #372]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6213      	str	r3, [r2, #32]
 8002b14:	e00b      	b.n	8002b2e <HAL_RCC_OscConfig+0x36e>
 8002b16:	4b5b      	ldr	r3, [pc, #364]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4a5a      	ldr	r2, [pc, #360]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	6213      	str	r3, [r2, #32]
 8002b22:	4b58      	ldr	r3, [pc, #352]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	4a57      	ldr	r2, [pc, #348]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	f023 0304 	bic.w	r3, r3, #4
 8002b2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d015      	beq.n	8002b62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7fe feaf 	bl	8001898 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe feab 	bl	8001898 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e0b1      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b54:	4b4b      	ldr	r3, [pc, #300]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ee      	beq.n	8002b3e <HAL_RCC_OscConfig+0x37e>
 8002b60:	e014      	b.n	8002b8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b62:	f7fe fe99 	bl	8001898 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b68:	e00a      	b.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6a:	f7fe fe95 	bl	8001898 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e09b      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b80:	4b40      	ldr	r3, [pc, #256]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1ee      	bne.n	8002b6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d105      	bne.n	8002b9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b92:	4b3c      	ldr	r3, [pc, #240]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	4a3b      	ldr	r2, [pc, #236]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8087 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ba8:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d061      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d146      	bne.n	8002c4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbc:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7fe fe69 	bl	8001898 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bca:	f7fe fe65 	bl	8001898 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e06d      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bdc:	4b29      	ldr	r3, [pc, #164]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f0      	bne.n	8002bca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf0:	d108      	bne.n	8002c04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	4921      	ldr	r1, [pc, #132]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c04:	4b1f      	ldr	r3, [pc, #124]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a19      	ldr	r1, [r3, #32]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	430b      	orrs	r3, r1
 8002c16:	491b      	ldr	r1, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c22:	f7fe fe39 	bl	8001898 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c28:	e008      	b.n	8002c3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7fe fe35 	bl	8001898 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e03d      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0f0      	beq.n	8002c2a <HAL_RCC_OscConfig+0x46a>
 8002c48:	e035      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe fe22 	bl	8001898 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fe1e 	bl	8001898 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e026      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x498>
 8002c76:	e01e      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e019      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40007000 	.word	0x40007000
 8002c8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_OscConfig+0x500>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d106      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0d0      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b6a      	ldr	r3, [pc, #424]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d910      	bls.n	8002d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 0207 	bic.w	r2, r3, #7
 8002cee:	4965      	ldr	r1, [pc, #404]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf6:	4b63      	ldr	r3, [pc, #396]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0b8      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d20:	4b59      	ldr	r3, [pc, #356]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d38:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d44:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	494d      	ldr	r1, [pc, #308]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d040      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d115      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e07f      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	4b41      	ldr	r3, [pc, #260]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e073      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d92:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06b      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da2:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f023 0203 	bic.w	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4936      	ldr	r1, [pc, #216]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db4:	f7fe fd70 	bl	8001898 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbc:	f7fe fd6c 	bl	8001898 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e053      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 020c 	and.w	r2, r3, #12
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d1eb      	bne.n	8002dbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d210      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 0207 	bic.w	r2, r3, #7
 8002dfa:	4922      	ldr	r1, [pc, #136]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e032      	b.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e20:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4916      	ldr	r1, [pc, #88]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e3e:	4b12      	ldr	r3, [pc, #72]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	490e      	ldr	r1, [pc, #56]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e52:	f000 f821 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8002e56:	4602      	mov	r2, r0
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	490a      	ldr	r1, [pc, #40]	; (8002e8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e64:	5ccb      	ldrb	r3, [r1, r3]
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	4a09      	ldr	r2, [pc, #36]	; (8002e90 <HAL_RCC_ClockConfig+0x1cc>)
 8002e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <HAL_RCC_ClockConfig+0x1d0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fcce 	bl	8001814 <HAL_InitTick>

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40022000 	.word	0x40022000
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	08007a98 	.word	0x08007a98
 8002e90:	20000004 	.word	0x20000004
 8002e94:	20000008 	.word	0x20000008

08002e98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x94>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d002      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x30>
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d003      	beq.n	8002ece <HAL_RCC_GetSysClockFreq+0x36>
 8002ec6:	e027      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ec8:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eca:	613b      	str	r3, [r7, #16]
      break;
 8002ecc:	e027      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	0c9b      	lsrs	r3, r3, #18
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	4a17      	ldr	r2, [pc, #92]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ed8:	5cd3      	ldrb	r3, [r2, r3]
 8002eda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d010      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ee6:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	0c5b      	lsrs	r3, r3, #17
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ef2:	5cd3      	ldrb	r3, [r2, r3]
 8002ef4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a0d      	ldr	r2, [pc, #52]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002efa:	fb03 f202 	mul.w	r2, r3, r2
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	e004      	b.n	8002f12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a0c      	ldr	r2, [pc, #48]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f0c:	fb02 f303 	mul.w	r3, r2, r3
 8002f10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	613b      	str	r3, [r7, #16]
      break;
 8002f16:	e002      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f1a:	613b      	str	r3, [r7, #16]
      break;
 8002f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f1e:	693b      	ldr	r3, [r7, #16]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	007a1200 	.word	0x007a1200
 8002f34:	08007ab0 	.word	0x08007ab0
 8002f38:	08007ac0 	.word	0x08007ac0
 8002f3c:	003d0900 	.word	0x003d0900

08002f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f44:	4b02      	ldr	r3, [pc, #8]	; (8002f50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f46:	681b      	ldr	r3, [r3, #0]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	20000004 	.word	0x20000004

08002f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f58:	f7ff fff2 	bl	8002f40 <HAL_RCC_GetHCLKFreq>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	0a1b      	lsrs	r3, r3, #8
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	4903      	ldr	r1, [pc, #12]	; (8002f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f6a:	5ccb      	ldrb	r3, [r1, r3]
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000
 8002f78:	08007aa8 	.word	0x08007aa8

08002f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f80:	f7ff ffde 	bl	8002f40 <HAL_RCC_GetHCLKFreq>
 8002f84:	4602      	mov	r2, r0
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	0adb      	lsrs	r3, r3, #11
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	4903      	ldr	r1, [pc, #12]	; (8002fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f92:	5ccb      	ldrb	r3, [r1, r3]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	08007aa8 	.word	0x08007aa8

08002fa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <RCC_Delay+0x34>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0a      	ldr	r2, [pc, #40]	; (8002fdc <RCC_Delay+0x38>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0a5b      	lsrs	r3, r3, #9
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fc0:	bf00      	nop
  }
  while (Delay --);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1e5a      	subs	r2, r3, #1
 8002fc6:	60fa      	str	r2, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f9      	bne.n	8002fc0 <RCC_Delay+0x1c>
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	20000004 	.word	0x20000004
 8002fdc:	10624dd3 	.word	0x10624dd3

08002fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d07d      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003000:	4b4f      	ldr	r3, [pc, #316]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10d      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b4c      	ldr	r3, [pc, #304]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	4a4b      	ldr	r2, [pc, #300]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	61d3      	str	r3, [r2, #28]
 8003018:	4b49      	ldr	r3, [pc, #292]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003024:	2301      	movs	r3, #1
 8003026:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	4b46      	ldr	r3, [pc, #280]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d118      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003034:	4b43      	ldr	r3, [pc, #268]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a42      	ldr	r2, [pc, #264]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800303a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003040:	f7fe fc2a 	bl	8001898 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003046:	e008      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003048:	f7fe fc26 	bl	8001898 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e06d      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305a:	4b3a      	ldr	r3, [pc, #232]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003066:	4b36      	ldr	r3, [pc, #216]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d02e      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	429a      	cmp	r2, r3
 8003082:	d027      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003084:	4b2e      	ldr	r3, [pc, #184]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800308e:	4b2e      	ldr	r3, [pc, #184]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003090:	2201      	movs	r2, #1
 8003092:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003094:	4b2c      	ldr	r3, [pc, #176]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800309a:	4a29      	ldr	r2, [pc, #164]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d014      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fe fbf5 	bl	8001898 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f7fe fbf1 	bl	8001898 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e036      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ee      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d4:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4917      	ldr	r1, [pc, #92]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ec:	4b14      	ldr	r3, [pc, #80]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	4a13      	ldr	r2, [pc, #76]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003104:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	490b      	ldr	r1, [pc, #44]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003122:	4b07      	ldr	r3, [pc, #28]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	4904      	ldr	r1, [pc, #16]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
 8003144:	40007000 	.word	0x40007000
 8003148:	42420440 	.word	0x42420440

0800314c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	2300      	movs	r3, #0
 8003166:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b10      	cmp	r3, #16
 800316c:	d00a      	beq.n	8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b10      	cmp	r3, #16
 8003172:	f200 808a 	bhi.w	800328a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d045      	beq.n	8003208 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d075      	beq.n	800326e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003182:	e082      	b.n	800328a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003184:	4b46      	ldr	r3, [pc, #280]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800318a:	4b45      	ldr	r3, [pc, #276]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d07b      	beq.n	800328e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	0c9b      	lsrs	r3, r3, #18
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	4a41      	ldr	r2, [pc, #260]	; (80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80031a0:	5cd3      	ldrb	r3, [r2, r3]
 80031a2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d015      	beq.n	80031da <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031ae:	4b3c      	ldr	r3, [pc, #240]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	0c5b      	lsrs	r3, r3, #17
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	4a3b      	ldr	r2, [pc, #236]	; (80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00d      	beq.n	80031e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80031c8:	4a38      	ldr	r2, [pc, #224]	; (80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	e004      	b.n	80031e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4a34      	ldr	r2, [pc, #208]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80031e4:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f0:	d102      	bne.n	80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	61bb      	str	r3, [r7, #24]
      break;
 80031f6:	e04a      	b.n	800328e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4a2d      	ldr	r2, [pc, #180]	; (80032b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	61bb      	str	r3, [r7, #24]
      break;
 8003206:	e042      	b.n	800328e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003218:	d108      	bne.n	800322c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	e01f      	b.n	800326c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003236:	d109      	bne.n	800324c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003238:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003244:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	e00f      	b.n	800326c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003256:	d11c      	bne.n	8003292 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d016      	beq.n	8003292 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003264:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003268:	61bb      	str	r3, [r7, #24]
      break;
 800326a:	e012      	b.n	8003292 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800326c:	e011      	b.n	8003292 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800326e:	f7ff fe85 	bl	8002f7c <HAL_RCC_GetPCLK2Freq>
 8003272:	4602      	mov	r2, r0
 8003274:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	0b9b      	lsrs	r3, r3, #14
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	3301      	adds	r3, #1
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	fbb2 f3f3 	udiv	r3, r2, r3
 8003286:	61bb      	str	r3, [r7, #24]
      break;
 8003288:	e004      	b.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800328a:	bf00      	nop
 800328c:	e002      	b.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003292:	bf00      	nop
    }
  }
  return (frequency);
 8003294:	69bb      	ldr	r3, [r7, #24]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	08007ac4 	.word	0x08007ac4
 80032a8:	08007ad4 	.word	0x08007ad4
 80032ac:	007a1200 	.word	0x007a1200
 80032b0:	003d0900 	.word	0x003d0900
 80032b4:	aaaaaaab 	.word	0xaaaaaaab

080032b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e041      	b.n	800334e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fe f8b6 	bl	8001450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f000 fab2 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e041      	b.n	80033ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d106      	bne.n	8003382 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f839 	bl	80033f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3304      	adds	r3, #4
 8003392:	4619      	mov	r1, r3
 8003394:	4610      	mov	r0, r2
 8003396:	f000 fa63 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr
	...

08003408 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d109      	bne.n	800342c <HAL_TIM_PWM_Start+0x24>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e022      	b.n	8003472 <HAL_TIM_PWM_Start+0x6a>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2b04      	cmp	r3, #4
 8003430:	d109      	bne.n	8003446 <HAL_TIM_PWM_Start+0x3e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b01      	cmp	r3, #1
 800343c:	bf14      	ite	ne
 800343e:	2301      	movne	r3, #1
 8003440:	2300      	moveq	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	e015      	b.n	8003472 <HAL_TIM_PWM_Start+0x6a>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b08      	cmp	r3, #8
 800344a:	d109      	bne.n	8003460 <HAL_TIM_PWM_Start+0x58>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b01      	cmp	r3, #1
 8003456:	bf14      	ite	ne
 8003458:	2301      	movne	r3, #1
 800345a:	2300      	moveq	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e008      	b.n	8003472 <HAL_TIM_PWM_Start+0x6a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	bf14      	ite	ne
 800346c:	2301      	movne	r3, #1
 800346e:	2300      	moveq	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e05e      	b.n	8003538 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d104      	bne.n	800348a <HAL_TIM_PWM_Start+0x82>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003488:	e013      	b.n	80034b2 <HAL_TIM_PWM_Start+0xaa>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b04      	cmp	r3, #4
 800348e:	d104      	bne.n	800349a <HAL_TIM_PWM_Start+0x92>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003498:	e00b      	b.n	80034b2 <HAL_TIM_PWM_Start+0xaa>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d104      	bne.n	80034aa <HAL_TIM_PWM_Start+0xa2>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034a8:	e003      	b.n	80034b2 <HAL_TIM_PWM_Start+0xaa>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2201      	movs	r2, #1
 80034b8:	6839      	ldr	r1, [r7, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fc50 	bl	8003d60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1e      	ldr	r2, [pc, #120]	; (8003540 <HAL_TIM_PWM_Start+0x138>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d107      	bne.n	80034da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a18      	ldr	r2, [pc, #96]	; (8003540 <HAL_TIM_PWM_Start+0x138>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_TIM_PWM_Start+0xfa>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ec:	d009      	beq.n	8003502 <HAL_TIM_PWM_Start+0xfa>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a14      	ldr	r2, [pc, #80]	; (8003544 <HAL_TIM_PWM_Start+0x13c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_TIM_PWM_Start+0xfa>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a12      	ldr	r2, [pc, #72]	; (8003548 <HAL_TIM_PWM_Start+0x140>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d111      	bne.n	8003526 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b06      	cmp	r3, #6
 8003512:	d010      	beq.n	8003536 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003524:	e007      	b.n	8003536 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800

0800354c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003566:	2302      	movs	r3, #2
 8003568:	e0ae      	b.n	80036c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b0c      	cmp	r3, #12
 8003576:	f200 809f 	bhi.w	80036b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800357a:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	080035b5 	.word	0x080035b5
 8003584:	080036b9 	.word	0x080036b9
 8003588:	080036b9 	.word	0x080036b9
 800358c:	080036b9 	.word	0x080036b9
 8003590:	080035f5 	.word	0x080035f5
 8003594:	080036b9 	.word	0x080036b9
 8003598:	080036b9 	.word	0x080036b9
 800359c:	080036b9 	.word	0x080036b9
 80035a0:	08003637 	.word	0x08003637
 80035a4:	080036b9 	.word	0x080036b9
 80035a8:	080036b9 	.word	0x080036b9
 80035ac:	080036b9 	.word	0x080036b9
 80035b0:	08003677 	.word	0x08003677
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f9b2 	bl	8003924 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0208 	orr.w	r2, r2, #8
 80035ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0204 	bic.w	r2, r2, #4
 80035de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6999      	ldr	r1, [r3, #24]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	619a      	str	r2, [r3, #24]
      break;
 80035f2:	e064      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f9f8 	bl	80039f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800360e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6999      	ldr	r1, [r3, #24]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	021a      	lsls	r2, r3, #8
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	619a      	str	r2, [r3, #24]
      break;
 8003634:	e043      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fa41 	bl	8003ac4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	69da      	ldr	r2, [r3, #28]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0208 	orr.w	r2, r2, #8
 8003650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0204 	bic.w	r2, r2, #4
 8003660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69d9      	ldr	r1, [r3, #28]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	61da      	str	r2, [r3, #28]
      break;
 8003674:	e023      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fa8b 	bl	8003b98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69da      	ldr	r2, [r3, #28]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69d9      	ldr	r1, [r3, #28]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	021a      	lsls	r2, r3, #8
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	61da      	str	r2, [r3, #28]
      break;
 80036b6:	e002      	b.n	80036be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	75fb      	strb	r3, [r7, #23]
      break;
 80036bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_TIM_ConfigClockSource+0x1c>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e0b4      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x186>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800370a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003712:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003724:	d03e      	beq.n	80037a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372a:	f200 8087 	bhi.w	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003732:	f000 8086 	beq.w	8003842 <HAL_TIM_ConfigClockSource+0x172>
 8003736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373a:	d87f      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800373c:	2b70      	cmp	r3, #112	; 0x70
 800373e:	d01a      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0xa6>
 8003740:	2b70      	cmp	r3, #112	; 0x70
 8003742:	d87b      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 8003744:	2b60      	cmp	r3, #96	; 0x60
 8003746:	d050      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0x11a>
 8003748:	2b60      	cmp	r3, #96	; 0x60
 800374a:	d877      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800374c:	2b50      	cmp	r3, #80	; 0x50
 800374e:	d03c      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0xfa>
 8003750:	2b50      	cmp	r3, #80	; 0x50
 8003752:	d873      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 8003754:	2b40      	cmp	r3, #64	; 0x40
 8003756:	d058      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x13a>
 8003758:	2b40      	cmp	r3, #64	; 0x40
 800375a:	d86f      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800375c:	2b30      	cmp	r3, #48	; 0x30
 800375e:	d064      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003760:	2b30      	cmp	r3, #48	; 0x30
 8003762:	d86b      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 8003764:	2b20      	cmp	r3, #32
 8003766:	d060      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003768:	2b20      	cmp	r3, #32
 800376a:	d867      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d05c      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003770:	2b10      	cmp	r3, #16
 8003772:	d05a      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x15a>
 8003774:	e062      	b.n	800383c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6899      	ldr	r1, [r3, #8]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f000 facc 	bl	8003d22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	609a      	str	r2, [r3, #8]
      break;
 80037a2:	e04f      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6899      	ldr	r1, [r3, #8]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f000 fab5 	bl	8003d22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037c6:	609a      	str	r2, [r3, #8]
      break;
 80037c8:	e03c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6859      	ldr	r1, [r3, #4]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f000 fa2c 	bl	8003c34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2150      	movs	r1, #80	; 0x50
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fa83 	bl	8003cee <TIM_ITRx_SetConfig>
      break;
 80037e8:	e02c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f000 fa4a 	bl	8003c90 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2160      	movs	r1, #96	; 0x60
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fa73 	bl	8003cee <TIM_ITRx_SetConfig>
      break;
 8003808:	e01c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6859      	ldr	r1, [r3, #4]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	461a      	mov	r2, r3
 8003818:	f000 fa0c 	bl	8003c34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2140      	movs	r1, #64	; 0x40
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fa63 	bl	8003cee <TIM_ITRx_SetConfig>
      break;
 8003828:	e00c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f000 fa5a 	bl	8003cee <TIM_ITRx_SetConfig>
      break;
 800383a:	e003      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
      break;
 8003840:	e000      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a29      	ldr	r2, [pc, #164]	; (8003918 <TIM_Base_SetConfig+0xb8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00b      	beq.n	8003890 <TIM_Base_SetConfig+0x30>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387e:	d007      	beq.n	8003890 <TIM_Base_SetConfig+0x30>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a26      	ldr	r2, [pc, #152]	; (800391c <TIM_Base_SetConfig+0xbc>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_Base_SetConfig+0x30>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a25      	ldr	r2, [pc, #148]	; (8003920 <TIM_Base_SetConfig+0xc0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d108      	bne.n	80038a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <TIM_Base_SetConfig+0xb8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00b      	beq.n	80038c2 <TIM_Base_SetConfig+0x62>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b0:	d007      	beq.n	80038c2 <TIM_Base_SetConfig+0x62>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a19      	ldr	r2, [pc, #100]	; (800391c <TIM_Base_SetConfig+0xbc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d003      	beq.n	80038c2 <TIM_Base_SetConfig+0x62>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a18      	ldr	r2, [pc, #96]	; (8003920 <TIM_Base_SetConfig+0xc0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d108      	bne.n	80038d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a07      	ldr	r2, [pc, #28]	; (8003918 <TIM_Base_SetConfig+0xb8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d103      	bne.n	8003908 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	615a      	str	r2, [r3, #20]
}
 800390e:	bf00      	nop
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr
 8003918:	40012c00 	.word	0x40012c00
 800391c:	40000400 	.word	0x40000400
 8003920:	40000800 	.word	0x40000800

08003924 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	f023 0201 	bic.w	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0303 	bic.w	r3, r3, #3
 800395a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f023 0302 	bic.w	r3, r3, #2
 800396c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a1c      	ldr	r2, [pc, #112]	; (80039ec <TIM_OC1_SetConfig+0xc8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d10c      	bne.n	800399a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f023 0308 	bic.w	r3, r3, #8
 8003986:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f023 0304 	bic.w	r3, r3, #4
 8003998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a13      	ldr	r2, [pc, #76]	; (80039ec <TIM_OC1_SetConfig+0xc8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d111      	bne.n	80039c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	621a      	str	r2, [r3, #32]
}
 80039e0:	bf00      	nop
 80039e2:	371c      	adds	r7, #28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40012c00 	.word	0x40012c00

080039f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f023 0210 	bic.w	r2, r3, #16
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f023 0320 	bic.w	r3, r3, #32
 8003a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a1d      	ldr	r2, [pc, #116]	; (8003ac0 <TIM_OC2_SetConfig+0xd0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d10d      	bne.n	8003a6c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a14      	ldr	r2, [pc, #80]	; (8003ac0 <TIM_OC2_SetConfig+0xd0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d113      	bne.n	8003a9c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	40012c00 	.word	0x40012c00

08003ac4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0303 	bic.w	r3, r3, #3
 8003afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <TIM_OC3_SetConfig+0xd0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d10d      	bne.n	8003b3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <TIM_OC3_SetConfig+0xd0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d113      	bne.n	8003b6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	621a      	str	r2, [r3, #32]
}
 8003b88:	bf00      	nop
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40012c00 	.word	0x40012c00

08003b98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	021b      	lsls	r3, r3, #8
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	031b      	lsls	r3, r3, #12
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a0f      	ldr	r2, [pc, #60]	; (8003c30 <TIM_OC4_SetConfig+0x98>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d109      	bne.n	8003c0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	019b      	lsls	r3, r3, #6
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	40012c00 	.word	0x40012c00

08003c34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f023 0201 	bic.w	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f023 030a 	bic.w	r3, r3, #10
 8003c70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f023 0210 	bic.w	r2, r3, #16
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	031b      	lsls	r3, r3, #12
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	621a      	str	r2, [r3, #32]
}
 8003ce4:	bf00      	nop
 8003ce6:	371c      	adds	r7, #28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f043 0307 	orr.w	r3, r3, #7
 8003d10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr

08003d22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b087      	sub	sp, #28
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	021a      	lsls	r2, r3, #8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	609a      	str	r2, [r3, #8]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f003 031f 	and.w	r3, r3, #31
 8003d72:	2201      	movs	r2, #1
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1a      	ldr	r2, [r3, #32]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	401a      	ands	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1a      	ldr	r2, [r3, #32]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	fa01 f303 	lsl.w	r3, r1, r3
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <HAL_TIMEx_PWMN_Start+0x24>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e022      	b.n	8003e12 <HAL_TIMEx_PWMN_Start+0x6a>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d109      	bne.n	8003de6 <HAL_TIMEx_PWMN_Start+0x3e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	bf14      	ite	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	2300      	moveq	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e015      	b.n	8003e12 <HAL_TIMEx_PWMN_Start+0x6a>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d109      	bne.n	8003e00 <HAL_TIMEx_PWMN_Start+0x58>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e008      	b.n	8003e12 <HAL_TIMEx_PWMN_Start+0x6a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	bf14      	ite	ne
 8003e0c:	2301      	movne	r3, #1
 8003e0e:	2300      	moveq	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e059      	b.n	8003ece <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <HAL_TIMEx_PWMN_Start+0x82>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e28:	e013      	b.n	8003e52 <HAL_TIMEx_PWMN_Start+0xaa>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d104      	bne.n	8003e3a <HAL_TIMEx_PWMN_Start+0x92>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e38:	e00b      	b.n	8003e52 <HAL_TIMEx_PWMN_Start+0xaa>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d104      	bne.n	8003e4a <HAL_TIMEx_PWMN_Start+0xa2>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e48:	e003      	b.n	8003e52 <HAL_TIMEx_PWMN_Start+0xaa>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2204      	movs	r2, #4
 8003e58:	6839      	ldr	r1, [r7, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f8f1 	bl	8004042 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <HAL_TIMEx_PWMN_Start+0x130>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00e      	beq.n	8003e98 <HAL_TIMEx_PWMN_Start+0xf0>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e82:	d009      	beq.n	8003e98 <HAL_TIMEx_PWMN_Start+0xf0>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a14      	ldr	r2, [pc, #80]	; (8003edc <HAL_TIMEx_PWMN_Start+0x134>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d004      	beq.n	8003e98 <HAL_TIMEx_PWMN_Start+0xf0>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a13      	ldr	r2, [pc, #76]	; (8003ee0 <HAL_TIMEx_PWMN_Start+0x138>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d111      	bne.n	8003ebc <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b06      	cmp	r3, #6
 8003ea8:	d010      	beq.n	8003ecc <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0201 	orr.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eba:	e007      	b.n	8003ecc <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40012c00 	.word	0x40012c00
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40000800 	.word	0x40000800

08003ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e046      	b.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a16      	ldr	r2, [pc, #88]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00e      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f48:	d009      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a10      	ldr	r2, [pc, #64]	; (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d10c      	bne.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800

08003fa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e03d      	b.n	8004038 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004042:	b480      	push	{r7}
 8004044:	b087      	sub	sp, #28
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	2204      	movs	r2, #4
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1a      	ldr	r2, [r3, #32]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	43db      	mvns	r3, r3
 8004064:	401a      	ands	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1a      	ldr	r2, [r3, #32]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	431a      	orrs	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	621a      	str	r2, [r3, #32]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr

0800408a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e042      	b.n	8004122 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7fd fa33 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2224      	movs	r2, #36	; 0x24
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fd80 	bl	8004bd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004102:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b08a      	sub	sp, #40	; 0x28
 800412e:	af02      	add	r7, sp, #8
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	4613      	mov	r3, r2
 8004138:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b20      	cmp	r3, #32
 8004148:	d17c      	bne.n	8004244 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_UART_Receive+0x2c>
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e075      	b.n	8004246 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2222      	movs	r2, #34	; 0x22
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800416e:	f7fd fb93 	bl	8001898 <HAL_GetTick>
 8004172:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	88fa      	ldrh	r2, [r7, #6]
 8004178:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	88fa      	ldrh	r2, [r7, #6]
 800417e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004188:	d108      	bne.n	800419c <HAL_UART_Receive+0x72>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d104      	bne.n	800419c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	e003      	b.n	80041a4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80041a4:	e043      	b.n	800422e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2200      	movs	r2, #0
 80041ae:	2120      	movs	r1, #32
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 fb05 	bl	80047c0 <UART_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e042      	b.n	8004246 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10c      	bne.n	80041e0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	3302      	adds	r3, #2
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	e01f      	b.n	8004220 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e8:	d007      	beq.n	80041fa <HAL_UART_Receive+0xd0>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <HAL_UART_Receive+0xde>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e008      	b.n	800421a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004214:	b2da      	uxtb	r2, r3
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3301      	adds	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1b6      	bne.n	80041a6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	e000      	b.n	8004246 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004244:	2302      	movs	r3, #2
  }
}
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b0ba      	sub	sp, #232	; 0xe8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800427c:	2300      	movs	r3, #0
 800427e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800428e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10f      	bne.n	80042b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HAL_UART_IRQHandler+0x66>
 80042a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fbd1 	bl	8004a56 <UART_Receive_IT>
      return;
 80042b4:	e25b      	b.n	800476e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 80de 	beq.w	800447c <HAL_UART_IRQHandler+0x22c>
 80042c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80d1 	beq.w	800447c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_UART_IRQHandler+0xae>
 80042e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f043 0201 	orr.w	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <HAL_UART_IRQHandler+0xd2>
 800430a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	f043 0202 	orr.w	r2, r3, #2
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <HAL_UART_IRQHandler+0xf6>
 800432e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	f043 0204 	orr.w	r2, r3, #4
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d011      	beq.n	8004376 <HAL_UART_IRQHandler+0x126>
 8004352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d105      	bne.n	800436a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800435e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	f043 0208 	orr.w	r2, r3, #8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 81f2 	beq.w	8004764 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_UART_IRQHandler+0x14e>
 800438c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fb5c 	bl	8004a56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d103      	bne.n	80043ca <HAL_UART_IRQHandler+0x17a>
 80043c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d04f      	beq.n	800446a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fa66 	bl	800489c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d041      	beq.n	8004462 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3314      	adds	r3, #20
 80043e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3314      	adds	r3, #20
 8004406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800440a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800440e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1d9      	bne.n	80043de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	2b00      	cmp	r3, #0
 8004430:	d013      	beq.n	800445a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004436:	4a7e      	ldr	r2, [pc, #504]	; (8004630 <HAL_UART_IRQHandler+0x3e0>)
 8004438:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443e:	4618      	mov	r0, r3
 8004440:	f7fd ffa8 	bl	8002394 <HAL_DMA_Abort_IT>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d016      	beq.n	8004478 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004454:	4610      	mov	r0, r2
 8004456:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004458:	e00e      	b.n	8004478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f99c 	bl	8004798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004460:	e00a      	b.n	8004478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f998 	bl	8004798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004468:	e006      	b.n	8004478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f994 	bl	8004798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004476:	e175      	b.n	8004764 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004478:	bf00      	nop
    return;
 800447a:	e173      	b.n	8004764 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004480:	2b01      	cmp	r3, #1
 8004482:	f040 814f 	bne.w	8004724 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 8148 	beq.w	8004724 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8141 	beq.w	8004724 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80b6 	beq.w	8004634 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8145 	beq.w	8004768 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044e6:	429a      	cmp	r2, r3
 80044e8:	f080 813e 	bcs.w	8004768 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	f000 8088 	beq.w	8004610 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004516:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800451a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800451e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	330c      	adds	r3, #12
 8004528:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800452c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004530:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004538:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1d9      	bne.n	8004500 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3314      	adds	r3, #20
 8004552:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800455c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800455e:	f023 0301 	bic.w	r3, r3, #1
 8004562:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3314      	adds	r3, #20
 800456c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004570:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004574:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004578:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e1      	bne.n	800454c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3314      	adds	r3, #20
 800458e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800459a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800459e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3314      	adds	r3, #20
 80045a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e3      	bne.n	8004588 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	330c      	adds	r3, #12
 80045d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e0:	f023 0310 	bic.w	r3, r3, #16
 80045e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	330c      	adds	r3, #12
 80045ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80045f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80045f4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e3      	bne.n	80045ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	4618      	mov	r0, r3
 800460c:	f7fd fe87 	bl	800231e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800461e:	b29b      	uxth	r3, r3
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	b29b      	uxth	r3, r3
 8004624:	4619      	mov	r1, r3
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f8bf 	bl	80047aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800462c:	e09c      	b.n	8004768 <HAL_UART_IRQHandler+0x518>
 800462e:	bf00      	nop
 8004630:	08004961 	.word	0x08004961
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800463c:	b29b      	uxth	r3, r3
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 808e 	beq.w	800476c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8089 	beq.w	800476c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800466a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004670:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	330c      	adds	r3, #12
 800467a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800467e:	647a      	str	r2, [r7, #68]	; 0x44
 8004680:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800468c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e3      	bne.n	800465a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3314      	adds	r3, #20
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	623b      	str	r3, [r7, #32]
   return(result);
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3314      	adds	r3, #20
 80046b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046b6:	633a      	str	r2, [r7, #48]	; 0x30
 80046b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e3      	bne.n	8004692 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	330c      	adds	r3, #12
 80046de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0310 	bic.w	r3, r3, #16
 80046ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	330c      	adds	r3, #12
 80046f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046fc:	61fa      	str	r2, [r7, #28]
 80046fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	69b9      	ldr	r1, [r7, #24]
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	617b      	str	r3, [r7, #20]
   return(result);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e3      	bne.n	80046d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004716:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800471a:	4619      	mov	r1, r3
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f844 	bl	80047aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004722:	e023      	b.n	800476c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472c:	2b00      	cmp	r3, #0
 800472e:	d009      	beq.n	8004744 <HAL_UART_IRQHandler+0x4f4>
 8004730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f923 	bl	8004988 <UART_Transmit_IT>
    return;
 8004742:	e014      	b.n	800476e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00e      	beq.n	800476e <HAL_UART_IRQHandler+0x51e>
 8004750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f962 	bl	8004a26 <UART_EndTransmit_IT>
    return;
 8004762:	e004      	b.n	800476e <HAL_UART_IRQHandler+0x51e>
    return;
 8004764:	bf00      	nop
 8004766:	e002      	b.n	800476e <HAL_UART_IRQHandler+0x51e>
      return;
 8004768:	bf00      	nop
 800476a:	e000      	b.n	800476e <HAL_UART_IRQHandler+0x51e>
      return;
 800476c:	bf00      	nop
  }
}
 800476e:	37e8      	adds	r7, #232	; 0xe8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr

08004786 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	4770      	bx	lr

080047aa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr

080047c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b090      	sub	sp, #64	; 0x40
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	4613      	mov	r3, r2
 80047ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d0:	e050      	b.n	8004874 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d04c      	beq.n	8004874 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047e0:	f7fd f85a 	bl	8001898 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d241      	bcs.n	8004874 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004810:	637a      	str	r2, [r7, #52]	; 0x34
 8004812:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e5      	bne.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3314      	adds	r3, #20
 800482a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	613b      	str	r3, [r7, #16]
   return(result);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f023 0301 	bic.w	r3, r3, #1
 800483a:	63bb      	str	r3, [r7, #56]	; 0x38
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3314      	adds	r3, #20
 8004842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004844:	623a      	str	r2, [r7, #32]
 8004846:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	69f9      	ldr	r1, [r7, #28]
 800484a:	6a3a      	ldr	r2, [r7, #32]
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	61bb      	str	r3, [r7, #24]
   return(result);
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e5      	bne.n	8004824 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e00f      	b.n	8004894 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	429a      	cmp	r2, r3
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	429a      	cmp	r2, r3
 8004890:	d09f      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3740      	adds	r7, #64	; 0x40
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b095      	sub	sp, #84	; 0x54
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	330c      	adds	r3, #12
 80048aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	330c      	adds	r3, #12
 80048c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048c4:	643a      	str	r2, [r7, #64]	; 0x40
 80048c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e5      	bne.n	80048a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3314      	adds	r3, #20
 80048de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3314      	adds	r3, #20
 80048f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e5      	bne.n	80048d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004910:	2b01      	cmp	r3, #1
 8004912:	d119      	bne.n	8004948 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	330c      	adds	r3, #12
 800491a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	60bb      	str	r3, [r7, #8]
   return(result);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f023 0310 	bic.w	r3, r3, #16
 800492a:	647b      	str	r3, [r7, #68]	; 0x44
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	330c      	adds	r3, #12
 8004932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004934:	61ba      	str	r2, [r7, #24]
 8004936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6979      	ldr	r1, [r7, #20]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	613b      	str	r3, [r7, #16]
   return(result);
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e5      	bne.n	8004914 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004956:	bf00      	nop
 8004958:	3754      	adds	r7, #84	; 0x54
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr

08004960 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f7ff ff0c 	bl	8004798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004980:	bf00      	nop
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b21      	cmp	r3, #33	; 0x21
 800499a:	d13e      	bne.n	8004a1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a4:	d114      	bne.n	80049d0 <UART_Transmit_IT+0x48>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d110      	bne.n	80049d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	1c9a      	adds	r2, r3, #2
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	621a      	str	r2, [r3, #32]
 80049ce:	e008      	b.n	80049e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	1c59      	adds	r1, r3, #1
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6211      	str	r1, [r2, #32]
 80049da:	781a      	ldrb	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	4619      	mov	r1, r3
 80049f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10f      	bne.n	8004a16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e000      	b.n	8004a1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
  }
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr

08004a26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff fe94 	bl	8004774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b08c      	sub	sp, #48	; 0x30
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b22      	cmp	r3, #34	; 0x22
 8004a68:	f040 80ae 	bne.w	8004bc8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a74:	d117      	bne.n	8004aa6 <UART_Receive_IT+0x50>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d113      	bne.n	8004aa6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	1c9a      	adds	r2, r3, #2
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	629a      	str	r2, [r3, #40]	; 0x28
 8004aa4:	e026      	b.n	8004af4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab8:	d007      	beq.n	8004aca <UART_Receive_IT+0x74>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10a      	bne.n	8004ad8 <UART_Receive_IT+0x82>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	e008      	b.n	8004aea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	4619      	mov	r1, r3
 8004b02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d15d      	bne.n	8004bc4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0220 	bic.w	r2, r2, #32
 8004b16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695a      	ldr	r2, [r3, #20]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0201 	bic.w	r2, r2, #1
 8004b36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d135      	bne.n	8004bba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	330c      	adds	r3, #12
 8004b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	e853 3f00 	ldrex	r3, [r3]
 8004b62:	613b      	str	r3, [r7, #16]
   return(result);
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f023 0310 	bic.w	r3, r3, #16
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b74:	623a      	str	r2, [r7, #32]
 8004b76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	69f9      	ldr	r1, [r7, #28]
 8004b7a:	6a3a      	ldr	r2, [r7, #32]
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e5      	bne.n	8004b54 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d10a      	bne.n	8004bac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff fdf9 	bl	80047aa <HAL_UARTEx_RxEventCallback>
 8004bb8:	e002      	b.n	8004bc0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff fde3 	bl	8004786 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e002      	b.n	8004bca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e000      	b.n	8004bca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004bc8:	2302      	movs	r3, #2
  }
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3730      	adds	r7, #48	; 0x30
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c0e:	f023 030c 	bic.w	r3, r3, #12
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699a      	ldr	r2, [r3, #24]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a2c      	ldr	r2, [pc, #176]	; (8004ce8 <UART_SetConfig+0x114>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d103      	bne.n	8004c44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c3c:	f7fe f99e 	bl	8002f7c <HAL_RCC_GetPCLK2Freq>
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	e002      	b.n	8004c4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c44:	f7fe f986 	bl	8002f54 <HAL_RCC_GetPCLK1Freq>
 8004c48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	009a      	lsls	r2, r3, #2
 8004c54:	441a      	add	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	4a22      	ldr	r2, [pc, #136]	; (8004cec <UART_SetConfig+0x118>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	0119      	lsls	r1, r3, #4
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	009a      	lsls	r2, r3, #2
 8004c74:	441a      	add	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c80:	4b1a      	ldr	r3, [pc, #104]	; (8004cec <UART_SetConfig+0x118>)
 8004c82:	fba3 0302 	umull	r0, r3, r3, r2
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	2064      	movs	r0, #100	; 0x64
 8004c8a:	fb00 f303 	mul.w	r3, r0, r3
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	3332      	adds	r3, #50	; 0x32
 8004c94:	4a15      	ldr	r2, [pc, #84]	; (8004cec <UART_SetConfig+0x118>)
 8004c96:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca0:	4419      	add	r1, r3
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	009a      	lsls	r2, r3, #2
 8004cac:	441a      	add	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cb8:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <UART_SetConfig+0x118>)
 8004cba:	fba3 0302 	umull	r0, r3, r3, r2
 8004cbe:	095b      	lsrs	r3, r3, #5
 8004cc0:	2064      	movs	r0, #100	; 0x64
 8004cc2:	fb00 f303 	mul.w	r3, r0, r3
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	3332      	adds	r3, #50	; 0x32
 8004ccc:	4a07      	ldr	r2, [pc, #28]	; (8004cec <UART_SetConfig+0x118>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	f003 020f 	and.w	r2, r3, #15
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	440a      	add	r2, r1
 8004cde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40013800 	.word	0x40013800
 8004cec:	51eb851f 	.word	0x51eb851f

08004cf0 <atof>:
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	f000 be3d 	b.w	8005970 <strtod>
	...

08004cf8 <__errno>:
 8004cf8:	4b01      	ldr	r3, [pc, #4]	; (8004d00 <__errno+0x8>)
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000010 	.word	0x20000010

08004d04 <__libc_init_array>:
 8004d04:	b570      	push	{r4, r5, r6, lr}
 8004d06:	2600      	movs	r6, #0
 8004d08:	4d0c      	ldr	r5, [pc, #48]	; (8004d3c <__libc_init_array+0x38>)
 8004d0a:	4c0d      	ldr	r4, [pc, #52]	; (8004d40 <__libc_init_array+0x3c>)
 8004d0c:	1b64      	subs	r4, r4, r5
 8004d0e:	10a4      	asrs	r4, r4, #2
 8004d10:	42a6      	cmp	r6, r4
 8004d12:	d109      	bne.n	8004d28 <__libc_init_array+0x24>
 8004d14:	f002 feb2 	bl	8007a7c <_init>
 8004d18:	2600      	movs	r6, #0
 8004d1a:	4d0a      	ldr	r5, [pc, #40]	; (8004d44 <__libc_init_array+0x40>)
 8004d1c:	4c0a      	ldr	r4, [pc, #40]	; (8004d48 <__libc_init_array+0x44>)
 8004d1e:	1b64      	subs	r4, r4, r5
 8004d20:	10a4      	asrs	r4, r4, #2
 8004d22:	42a6      	cmp	r6, r4
 8004d24:	d105      	bne.n	8004d32 <__libc_init_array+0x2e>
 8004d26:	bd70      	pop	{r4, r5, r6, pc}
 8004d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2c:	4798      	blx	r3
 8004d2e:	3601      	adds	r6, #1
 8004d30:	e7ee      	b.n	8004d10 <__libc_init_array+0xc>
 8004d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d36:	4798      	blx	r3
 8004d38:	3601      	adds	r6, #1
 8004d3a:	e7f2      	b.n	8004d22 <__libc_init_array+0x1e>
 8004d3c:	08007f04 	.word	0x08007f04
 8004d40:	08007f04 	.word	0x08007f04
 8004d44:	08007f04 	.word	0x08007f04
 8004d48:	08007f08 	.word	0x08007f08

08004d4c <memset>:
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4402      	add	r2, r0
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d100      	bne.n	8004d56 <memset+0xa>
 8004d54:	4770      	bx	lr
 8004d56:	f803 1b01 	strb.w	r1, [r3], #1
 8004d5a:	e7f9      	b.n	8004d50 <memset+0x4>

08004d5c <sulp>:
 8004d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d60:	460f      	mov	r7, r1
 8004d62:	4690      	mov	r8, r2
 8004d64:	f001 fd06 	bl	8006774 <__ulp>
 8004d68:	4604      	mov	r4, r0
 8004d6a:	460d      	mov	r5, r1
 8004d6c:	f1b8 0f00 	cmp.w	r8, #0
 8004d70:	d011      	beq.n	8004d96 <sulp+0x3a>
 8004d72:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004d76:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	dd0b      	ble.n	8004d96 <sulp+0x3a>
 8004d7e:	2400      	movs	r4, #0
 8004d80:	051b      	lsls	r3, r3, #20
 8004d82:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004d86:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	462b      	mov	r3, r5
 8004d8e:	f7fb fba3 	bl	80004d8 <__aeabi_dmul>
 8004d92:	4604      	mov	r4, r0
 8004d94:	460d      	mov	r5, r1
 8004d96:	4620      	mov	r0, r4
 8004d98:	4629      	mov	r1, r5
 8004d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004da0 <_strtod_l>:
 8004da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da4:	469b      	mov	fp, r3
 8004da6:	2300      	movs	r3, #0
 8004da8:	b09f      	sub	sp, #124	; 0x7c
 8004daa:	931a      	str	r3, [sp, #104]	; 0x68
 8004dac:	4b9e      	ldr	r3, [pc, #632]	; (8005028 <_strtod_l+0x288>)
 8004dae:	4682      	mov	sl, r0
 8004db0:	681f      	ldr	r7, [r3, #0]
 8004db2:	460e      	mov	r6, r1
 8004db4:	4638      	mov	r0, r7
 8004db6:	9215      	str	r2, [sp, #84]	; 0x54
 8004db8:	f7fb f9ca 	bl	8000150 <strlen>
 8004dbc:	f04f 0800 	mov.w	r8, #0
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	f04f 0900 	mov.w	r9, #0
 8004dc6:	9619      	str	r6, [sp, #100]	; 0x64
 8004dc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004dca:	781a      	ldrb	r2, [r3, #0]
 8004dcc:	2a2b      	cmp	r2, #43	; 0x2b
 8004dce:	d04c      	beq.n	8004e6a <_strtod_l+0xca>
 8004dd0:	d83a      	bhi.n	8004e48 <_strtod_l+0xa8>
 8004dd2:	2a0d      	cmp	r2, #13
 8004dd4:	d833      	bhi.n	8004e3e <_strtod_l+0x9e>
 8004dd6:	2a08      	cmp	r2, #8
 8004dd8:	d833      	bhi.n	8004e42 <_strtod_l+0xa2>
 8004dda:	2a00      	cmp	r2, #0
 8004ddc:	d03d      	beq.n	8004e5a <_strtod_l+0xba>
 8004dde:	2300      	movs	r3, #0
 8004de0:	930a      	str	r3, [sp, #40]	; 0x28
 8004de2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004de4:	782b      	ldrb	r3, [r5, #0]
 8004de6:	2b30      	cmp	r3, #48	; 0x30
 8004de8:	f040 80aa 	bne.w	8004f40 <_strtod_l+0x1a0>
 8004dec:	786b      	ldrb	r3, [r5, #1]
 8004dee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004df2:	2b58      	cmp	r3, #88	; 0x58
 8004df4:	d166      	bne.n	8004ec4 <_strtod_l+0x124>
 8004df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004df8:	4650      	mov	r0, sl
 8004dfa:	9301      	str	r3, [sp, #4]
 8004dfc:	ab1a      	add	r3, sp, #104	; 0x68
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	4a8a      	ldr	r2, [pc, #552]	; (800502c <_strtod_l+0x28c>)
 8004e02:	f8cd b008 	str.w	fp, [sp, #8]
 8004e06:	ab1b      	add	r3, sp, #108	; 0x6c
 8004e08:	a919      	add	r1, sp, #100	; 0x64
 8004e0a:	f000 fe25 	bl	8005a58 <__gethex>
 8004e0e:	f010 0607 	ands.w	r6, r0, #7
 8004e12:	4604      	mov	r4, r0
 8004e14:	d005      	beq.n	8004e22 <_strtod_l+0x82>
 8004e16:	2e06      	cmp	r6, #6
 8004e18:	d129      	bne.n	8004e6e <_strtod_l+0xce>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	3501      	adds	r5, #1
 8004e1e:	9519      	str	r5, [sp, #100]	; 0x64
 8004e20:	930a      	str	r3, [sp, #40]	; 0x28
 8004e22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f040 858a 	bne.w	800593e <_strtod_l+0xb9e>
 8004e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e2c:	b1d3      	cbz	r3, 8004e64 <_strtod_l+0xc4>
 8004e2e:	4642      	mov	r2, r8
 8004e30:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004e34:	4610      	mov	r0, r2
 8004e36:	4619      	mov	r1, r3
 8004e38:	b01f      	add	sp, #124	; 0x7c
 8004e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3e:	2a20      	cmp	r2, #32
 8004e40:	d1cd      	bne.n	8004dde <_strtod_l+0x3e>
 8004e42:	3301      	adds	r3, #1
 8004e44:	9319      	str	r3, [sp, #100]	; 0x64
 8004e46:	e7bf      	b.n	8004dc8 <_strtod_l+0x28>
 8004e48:	2a2d      	cmp	r2, #45	; 0x2d
 8004e4a:	d1c8      	bne.n	8004dde <_strtod_l+0x3e>
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	920a      	str	r2, [sp, #40]	; 0x28
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	9219      	str	r2, [sp, #100]	; 0x64
 8004e54:	785b      	ldrb	r3, [r3, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1c3      	bne.n	8004de2 <_strtod_l+0x42>
 8004e5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e5c:	9619      	str	r6, [sp, #100]	; 0x64
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f040 856b 	bne.w	800593a <_strtod_l+0xb9a>
 8004e64:	4642      	mov	r2, r8
 8004e66:	464b      	mov	r3, r9
 8004e68:	e7e4      	b.n	8004e34 <_strtod_l+0x94>
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	e7ef      	b.n	8004e4e <_strtod_l+0xae>
 8004e6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004e70:	b13a      	cbz	r2, 8004e82 <_strtod_l+0xe2>
 8004e72:	2135      	movs	r1, #53	; 0x35
 8004e74:	a81c      	add	r0, sp, #112	; 0x70
 8004e76:	f001 fd81 	bl	800697c <__copybits>
 8004e7a:	4650      	mov	r0, sl
 8004e7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004e7e:	f001 f949 	bl	8006114 <_Bfree>
 8004e82:	3e01      	subs	r6, #1
 8004e84:	2e04      	cmp	r6, #4
 8004e86:	d806      	bhi.n	8004e96 <_strtod_l+0xf6>
 8004e88:	e8df f006 	tbb	[pc, r6]
 8004e8c:	1714030a 	.word	0x1714030a
 8004e90:	0a          	.byte	0x0a
 8004e91:	00          	.byte	0x00
 8004e92:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004e96:	0721      	lsls	r1, r4, #28
 8004e98:	d5c3      	bpl.n	8004e22 <_strtod_l+0x82>
 8004e9a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004e9e:	e7c0      	b.n	8004e22 <_strtod_l+0x82>
 8004ea0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004ea2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004ea6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004eaa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004eae:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004eb2:	e7f0      	b.n	8004e96 <_strtod_l+0xf6>
 8004eb4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005030 <_strtod_l+0x290>
 8004eb8:	e7ed      	b.n	8004e96 <_strtod_l+0xf6>
 8004eba:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004ebe:	f04f 38ff 	mov.w	r8, #4294967295
 8004ec2:	e7e8      	b.n	8004e96 <_strtod_l+0xf6>
 8004ec4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	9219      	str	r2, [sp, #100]	; 0x64
 8004eca:	785b      	ldrb	r3, [r3, #1]
 8004ecc:	2b30      	cmp	r3, #48	; 0x30
 8004ece:	d0f9      	beq.n	8004ec4 <_strtod_l+0x124>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0a6      	beq.n	8004e22 <_strtod_l+0x82>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	9307      	str	r3, [sp, #28]
 8004ed8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004eda:	220a      	movs	r2, #10
 8004edc:	9308      	str	r3, [sp, #32]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	469b      	mov	fp, r3
 8004ee2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004ee6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004ee8:	7805      	ldrb	r5, [r0, #0]
 8004eea:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004eee:	b2d9      	uxtb	r1, r3
 8004ef0:	2909      	cmp	r1, #9
 8004ef2:	d927      	bls.n	8004f44 <_strtod_l+0x1a4>
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	4639      	mov	r1, r7
 8004ef8:	f001 fe42 	bl	8006b80 <strncmp>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	d033      	beq.n	8004f68 <_strtod_l+0x1c8>
 8004f00:	2000      	movs	r0, #0
 8004f02:	462a      	mov	r2, r5
 8004f04:	465c      	mov	r4, fp
 8004f06:	4603      	mov	r3, r0
 8004f08:	9004      	str	r0, [sp, #16]
 8004f0a:	2a65      	cmp	r2, #101	; 0x65
 8004f0c:	d001      	beq.n	8004f12 <_strtod_l+0x172>
 8004f0e:	2a45      	cmp	r2, #69	; 0x45
 8004f10:	d114      	bne.n	8004f3c <_strtod_l+0x19c>
 8004f12:	b91c      	cbnz	r4, 8004f1c <_strtod_l+0x17c>
 8004f14:	9a07      	ldr	r2, [sp, #28]
 8004f16:	4302      	orrs	r2, r0
 8004f18:	d09f      	beq.n	8004e5a <_strtod_l+0xba>
 8004f1a:	2400      	movs	r4, #0
 8004f1c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004f1e:	1c72      	adds	r2, r6, #1
 8004f20:	9219      	str	r2, [sp, #100]	; 0x64
 8004f22:	7872      	ldrb	r2, [r6, #1]
 8004f24:	2a2b      	cmp	r2, #43	; 0x2b
 8004f26:	d079      	beq.n	800501c <_strtod_l+0x27c>
 8004f28:	2a2d      	cmp	r2, #45	; 0x2d
 8004f2a:	f000 8083 	beq.w	8005034 <_strtod_l+0x294>
 8004f2e:	2700      	movs	r7, #0
 8004f30:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004f34:	2909      	cmp	r1, #9
 8004f36:	f240 8083 	bls.w	8005040 <_strtod_l+0x2a0>
 8004f3a:	9619      	str	r6, [sp, #100]	; 0x64
 8004f3c:	2500      	movs	r5, #0
 8004f3e:	e09f      	b.n	8005080 <_strtod_l+0x2e0>
 8004f40:	2300      	movs	r3, #0
 8004f42:	e7c8      	b.n	8004ed6 <_strtod_l+0x136>
 8004f44:	f1bb 0f08 	cmp.w	fp, #8
 8004f48:	bfd5      	itete	le
 8004f4a:	9906      	ldrle	r1, [sp, #24]
 8004f4c:	9905      	ldrgt	r1, [sp, #20]
 8004f4e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004f52:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004f56:	f100 0001 	add.w	r0, r0, #1
 8004f5a:	bfd4      	ite	le
 8004f5c:	9306      	strle	r3, [sp, #24]
 8004f5e:	9305      	strgt	r3, [sp, #20]
 8004f60:	f10b 0b01 	add.w	fp, fp, #1
 8004f64:	9019      	str	r0, [sp, #100]	; 0x64
 8004f66:	e7be      	b.n	8004ee6 <_strtod_l+0x146>
 8004f68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f6a:	191a      	adds	r2, r3, r4
 8004f6c:	9219      	str	r2, [sp, #100]	; 0x64
 8004f6e:	5d1a      	ldrb	r2, [r3, r4]
 8004f70:	f1bb 0f00 	cmp.w	fp, #0
 8004f74:	d036      	beq.n	8004fe4 <_strtod_l+0x244>
 8004f76:	465c      	mov	r4, fp
 8004f78:	9004      	str	r0, [sp, #16]
 8004f7a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004f7e:	2b09      	cmp	r3, #9
 8004f80:	d912      	bls.n	8004fa8 <_strtod_l+0x208>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e7c1      	b.n	8004f0a <_strtod_l+0x16a>
 8004f86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f88:	3001      	adds	r0, #1
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	9219      	str	r2, [sp, #100]	; 0x64
 8004f8e:	785a      	ldrb	r2, [r3, #1]
 8004f90:	2a30      	cmp	r2, #48	; 0x30
 8004f92:	d0f8      	beq.n	8004f86 <_strtod_l+0x1e6>
 8004f94:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	f200 84d5 	bhi.w	8005948 <_strtod_l+0xba8>
 8004f9e:	9004      	str	r0, [sp, #16]
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fa6:	9308      	str	r3, [sp, #32]
 8004fa8:	3a30      	subs	r2, #48	; 0x30
 8004faa:	f100 0301 	add.w	r3, r0, #1
 8004fae:	d013      	beq.n	8004fd8 <_strtod_l+0x238>
 8004fb0:	9904      	ldr	r1, [sp, #16]
 8004fb2:	1905      	adds	r5, r0, r4
 8004fb4:	4419      	add	r1, r3
 8004fb6:	9104      	str	r1, [sp, #16]
 8004fb8:	4623      	mov	r3, r4
 8004fba:	210a      	movs	r1, #10
 8004fbc:	42ab      	cmp	r3, r5
 8004fbe:	d113      	bne.n	8004fe8 <_strtod_l+0x248>
 8004fc0:	1823      	adds	r3, r4, r0
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	f104 0401 	add.w	r4, r4, #1
 8004fc8:	4404      	add	r4, r0
 8004fca:	dc1b      	bgt.n	8005004 <_strtod_l+0x264>
 8004fcc:	230a      	movs	r3, #10
 8004fce:	9906      	ldr	r1, [sp, #24]
 8004fd0:	fb03 2301 	mla	r3, r3, r1, r2
 8004fd4:	9306      	str	r3, [sp, #24]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004fda:	4618      	mov	r0, r3
 8004fdc:	1c51      	adds	r1, r2, #1
 8004fde:	9119      	str	r1, [sp, #100]	; 0x64
 8004fe0:	7852      	ldrb	r2, [r2, #1]
 8004fe2:	e7ca      	b.n	8004f7a <_strtod_l+0x1da>
 8004fe4:	4658      	mov	r0, fp
 8004fe6:	e7d3      	b.n	8004f90 <_strtod_l+0x1f0>
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	dc04      	bgt.n	8004ff6 <_strtod_l+0x256>
 8004fec:	9f06      	ldr	r7, [sp, #24]
 8004fee:	434f      	muls	r7, r1
 8004ff0:	9706      	str	r7, [sp, #24]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	e7e2      	b.n	8004fbc <_strtod_l+0x21c>
 8004ff6:	1c5f      	adds	r7, r3, #1
 8004ff8:	2f10      	cmp	r7, #16
 8004ffa:	bfde      	ittt	le
 8004ffc:	9f05      	ldrle	r7, [sp, #20]
 8004ffe:	434f      	mulle	r7, r1
 8005000:	9705      	strle	r7, [sp, #20]
 8005002:	e7f6      	b.n	8004ff2 <_strtod_l+0x252>
 8005004:	2c10      	cmp	r4, #16
 8005006:	bfdf      	itttt	le
 8005008:	230a      	movle	r3, #10
 800500a:	9905      	ldrle	r1, [sp, #20]
 800500c:	fb03 2301 	mlale	r3, r3, r1, r2
 8005010:	9305      	strle	r3, [sp, #20]
 8005012:	e7e0      	b.n	8004fd6 <_strtod_l+0x236>
 8005014:	2300      	movs	r3, #0
 8005016:	9304      	str	r3, [sp, #16]
 8005018:	2301      	movs	r3, #1
 800501a:	e77b      	b.n	8004f14 <_strtod_l+0x174>
 800501c:	2700      	movs	r7, #0
 800501e:	1cb2      	adds	r2, r6, #2
 8005020:	9219      	str	r2, [sp, #100]	; 0x64
 8005022:	78b2      	ldrb	r2, [r6, #2]
 8005024:	e784      	b.n	8004f30 <_strtod_l+0x190>
 8005026:	bf00      	nop
 8005028:	08007bb0 	.word	0x08007bb0
 800502c:	08007ae8 	.word	0x08007ae8
 8005030:	7ff00000 	.word	0x7ff00000
 8005034:	2701      	movs	r7, #1
 8005036:	e7f2      	b.n	800501e <_strtod_l+0x27e>
 8005038:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800503a:	1c51      	adds	r1, r2, #1
 800503c:	9119      	str	r1, [sp, #100]	; 0x64
 800503e:	7852      	ldrb	r2, [r2, #1]
 8005040:	2a30      	cmp	r2, #48	; 0x30
 8005042:	d0f9      	beq.n	8005038 <_strtod_l+0x298>
 8005044:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005048:	2908      	cmp	r1, #8
 800504a:	f63f af77 	bhi.w	8004f3c <_strtod_l+0x19c>
 800504e:	f04f 0e0a 	mov.w	lr, #10
 8005052:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005056:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005058:	9209      	str	r2, [sp, #36]	; 0x24
 800505a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800505c:	1c51      	adds	r1, r2, #1
 800505e:	9119      	str	r1, [sp, #100]	; 0x64
 8005060:	7852      	ldrb	r2, [r2, #1]
 8005062:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005066:	2d09      	cmp	r5, #9
 8005068:	d935      	bls.n	80050d6 <_strtod_l+0x336>
 800506a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800506c:	1b49      	subs	r1, r1, r5
 800506e:	2908      	cmp	r1, #8
 8005070:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005074:	dc02      	bgt.n	800507c <_strtod_l+0x2dc>
 8005076:	4565      	cmp	r5, ip
 8005078:	bfa8      	it	ge
 800507a:	4665      	movge	r5, ip
 800507c:	b107      	cbz	r7, 8005080 <_strtod_l+0x2e0>
 800507e:	426d      	negs	r5, r5
 8005080:	2c00      	cmp	r4, #0
 8005082:	d14c      	bne.n	800511e <_strtod_l+0x37e>
 8005084:	9907      	ldr	r1, [sp, #28]
 8005086:	4301      	orrs	r1, r0
 8005088:	f47f aecb 	bne.w	8004e22 <_strtod_l+0x82>
 800508c:	2b00      	cmp	r3, #0
 800508e:	f47f aee4 	bne.w	8004e5a <_strtod_l+0xba>
 8005092:	2a69      	cmp	r2, #105	; 0x69
 8005094:	d026      	beq.n	80050e4 <_strtod_l+0x344>
 8005096:	dc23      	bgt.n	80050e0 <_strtod_l+0x340>
 8005098:	2a49      	cmp	r2, #73	; 0x49
 800509a:	d023      	beq.n	80050e4 <_strtod_l+0x344>
 800509c:	2a4e      	cmp	r2, #78	; 0x4e
 800509e:	f47f aedc 	bne.w	8004e5a <_strtod_l+0xba>
 80050a2:	499d      	ldr	r1, [pc, #628]	; (8005318 <_strtod_l+0x578>)
 80050a4:	a819      	add	r0, sp, #100	; 0x64
 80050a6:	f000 ff25 	bl	8005ef4 <__match>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	f43f aed5 	beq.w	8004e5a <_strtod_l+0xba>
 80050b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b28      	cmp	r3, #40	; 0x28
 80050b6:	d12c      	bne.n	8005112 <_strtod_l+0x372>
 80050b8:	4998      	ldr	r1, [pc, #608]	; (800531c <_strtod_l+0x57c>)
 80050ba:	aa1c      	add	r2, sp, #112	; 0x70
 80050bc:	a819      	add	r0, sp, #100	; 0x64
 80050be:	f000 ff2d 	bl	8005f1c <__hexnan>
 80050c2:	2805      	cmp	r0, #5
 80050c4:	d125      	bne.n	8005112 <_strtod_l+0x372>
 80050c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80050c8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80050cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80050d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80050d4:	e6a5      	b.n	8004e22 <_strtod_l+0x82>
 80050d6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80050da:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80050de:	e7bc      	b.n	800505a <_strtod_l+0x2ba>
 80050e0:	2a6e      	cmp	r2, #110	; 0x6e
 80050e2:	e7dc      	b.n	800509e <_strtod_l+0x2fe>
 80050e4:	498e      	ldr	r1, [pc, #568]	; (8005320 <_strtod_l+0x580>)
 80050e6:	a819      	add	r0, sp, #100	; 0x64
 80050e8:	f000 ff04 	bl	8005ef4 <__match>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	f43f aeb4 	beq.w	8004e5a <_strtod_l+0xba>
 80050f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80050f4:	498b      	ldr	r1, [pc, #556]	; (8005324 <_strtod_l+0x584>)
 80050f6:	3b01      	subs	r3, #1
 80050f8:	a819      	add	r0, sp, #100	; 0x64
 80050fa:	9319      	str	r3, [sp, #100]	; 0x64
 80050fc:	f000 fefa 	bl	8005ef4 <__match>
 8005100:	b910      	cbnz	r0, 8005108 <_strtod_l+0x368>
 8005102:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005104:	3301      	adds	r3, #1
 8005106:	9319      	str	r3, [sp, #100]	; 0x64
 8005108:	f04f 0800 	mov.w	r8, #0
 800510c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005328 <_strtod_l+0x588>
 8005110:	e687      	b.n	8004e22 <_strtod_l+0x82>
 8005112:	4886      	ldr	r0, [pc, #536]	; (800532c <_strtod_l+0x58c>)
 8005114:	f001 fd1e 	bl	8006b54 <nan>
 8005118:	4680      	mov	r8, r0
 800511a:	4689      	mov	r9, r1
 800511c:	e681      	b.n	8004e22 <_strtod_l+0x82>
 800511e:	9b04      	ldr	r3, [sp, #16]
 8005120:	f1bb 0f00 	cmp.w	fp, #0
 8005124:	bf08      	it	eq
 8005126:	46a3      	moveq	fp, r4
 8005128:	1aeb      	subs	r3, r5, r3
 800512a:	2c10      	cmp	r4, #16
 800512c:	9806      	ldr	r0, [sp, #24]
 800512e:	4626      	mov	r6, r4
 8005130:	9307      	str	r3, [sp, #28]
 8005132:	bfa8      	it	ge
 8005134:	2610      	movge	r6, #16
 8005136:	f7fb f955 	bl	80003e4 <__aeabi_ui2d>
 800513a:	2c09      	cmp	r4, #9
 800513c:	4680      	mov	r8, r0
 800513e:	4689      	mov	r9, r1
 8005140:	dd13      	ble.n	800516a <_strtod_l+0x3ca>
 8005142:	4b7b      	ldr	r3, [pc, #492]	; (8005330 <_strtod_l+0x590>)
 8005144:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005148:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800514c:	f7fb f9c4 	bl	80004d8 <__aeabi_dmul>
 8005150:	4680      	mov	r8, r0
 8005152:	9805      	ldr	r0, [sp, #20]
 8005154:	4689      	mov	r9, r1
 8005156:	f7fb f945 	bl	80003e4 <__aeabi_ui2d>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4640      	mov	r0, r8
 8005160:	4649      	mov	r1, r9
 8005162:	f7fb f803 	bl	800016c <__adddf3>
 8005166:	4680      	mov	r8, r0
 8005168:	4689      	mov	r9, r1
 800516a:	2c0f      	cmp	r4, #15
 800516c:	dc36      	bgt.n	80051dc <_strtod_l+0x43c>
 800516e:	9b07      	ldr	r3, [sp, #28]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f43f ae56 	beq.w	8004e22 <_strtod_l+0x82>
 8005176:	dd22      	ble.n	80051be <_strtod_l+0x41e>
 8005178:	2b16      	cmp	r3, #22
 800517a:	dc09      	bgt.n	8005190 <_strtod_l+0x3f0>
 800517c:	496c      	ldr	r1, [pc, #432]	; (8005330 <_strtod_l+0x590>)
 800517e:	4642      	mov	r2, r8
 8005180:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005184:	464b      	mov	r3, r9
 8005186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800518a:	f7fb f9a5 	bl	80004d8 <__aeabi_dmul>
 800518e:	e7c3      	b.n	8005118 <_strtod_l+0x378>
 8005190:	9a07      	ldr	r2, [sp, #28]
 8005192:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005196:	4293      	cmp	r3, r2
 8005198:	db20      	blt.n	80051dc <_strtod_l+0x43c>
 800519a:	4d65      	ldr	r5, [pc, #404]	; (8005330 <_strtod_l+0x590>)
 800519c:	f1c4 040f 	rsb	r4, r4, #15
 80051a0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80051a4:	4642      	mov	r2, r8
 80051a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051aa:	464b      	mov	r3, r9
 80051ac:	f7fb f994 	bl	80004d8 <__aeabi_dmul>
 80051b0:	9b07      	ldr	r3, [sp, #28]
 80051b2:	1b1c      	subs	r4, r3, r4
 80051b4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80051b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051bc:	e7e5      	b.n	800518a <_strtod_l+0x3ea>
 80051be:	9b07      	ldr	r3, [sp, #28]
 80051c0:	3316      	adds	r3, #22
 80051c2:	db0b      	blt.n	80051dc <_strtod_l+0x43c>
 80051c4:	9b04      	ldr	r3, [sp, #16]
 80051c6:	4640      	mov	r0, r8
 80051c8:	1b5d      	subs	r5, r3, r5
 80051ca:	4b59      	ldr	r3, [pc, #356]	; (8005330 <_strtod_l+0x590>)
 80051cc:	4649      	mov	r1, r9
 80051ce:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80051d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051d6:	f7fb faa9 	bl	800072c <__aeabi_ddiv>
 80051da:	e79d      	b.n	8005118 <_strtod_l+0x378>
 80051dc:	9b07      	ldr	r3, [sp, #28]
 80051de:	1ba6      	subs	r6, r4, r6
 80051e0:	441e      	add	r6, r3
 80051e2:	2e00      	cmp	r6, #0
 80051e4:	dd74      	ble.n	80052d0 <_strtod_l+0x530>
 80051e6:	f016 030f 	ands.w	r3, r6, #15
 80051ea:	d00a      	beq.n	8005202 <_strtod_l+0x462>
 80051ec:	4950      	ldr	r1, [pc, #320]	; (8005330 <_strtod_l+0x590>)
 80051ee:	4642      	mov	r2, r8
 80051f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80051f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051f8:	464b      	mov	r3, r9
 80051fa:	f7fb f96d 	bl	80004d8 <__aeabi_dmul>
 80051fe:	4680      	mov	r8, r0
 8005200:	4689      	mov	r9, r1
 8005202:	f036 060f 	bics.w	r6, r6, #15
 8005206:	d052      	beq.n	80052ae <_strtod_l+0x50e>
 8005208:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800520c:	dd27      	ble.n	800525e <_strtod_l+0x4be>
 800520e:	f04f 0b00 	mov.w	fp, #0
 8005212:	f8cd b010 	str.w	fp, [sp, #16]
 8005216:	f8cd b020 	str.w	fp, [sp, #32]
 800521a:	f8cd b018 	str.w	fp, [sp, #24]
 800521e:	2322      	movs	r3, #34	; 0x22
 8005220:	f04f 0800 	mov.w	r8, #0
 8005224:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005328 <_strtod_l+0x588>
 8005228:	f8ca 3000 	str.w	r3, [sl]
 800522c:	9b08      	ldr	r3, [sp, #32]
 800522e:	2b00      	cmp	r3, #0
 8005230:	f43f adf7 	beq.w	8004e22 <_strtod_l+0x82>
 8005234:	4650      	mov	r0, sl
 8005236:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005238:	f000 ff6c 	bl	8006114 <_Bfree>
 800523c:	4650      	mov	r0, sl
 800523e:	9906      	ldr	r1, [sp, #24]
 8005240:	f000 ff68 	bl	8006114 <_Bfree>
 8005244:	4650      	mov	r0, sl
 8005246:	9904      	ldr	r1, [sp, #16]
 8005248:	f000 ff64 	bl	8006114 <_Bfree>
 800524c:	4650      	mov	r0, sl
 800524e:	9908      	ldr	r1, [sp, #32]
 8005250:	f000 ff60 	bl	8006114 <_Bfree>
 8005254:	4659      	mov	r1, fp
 8005256:	4650      	mov	r0, sl
 8005258:	f000 ff5c 	bl	8006114 <_Bfree>
 800525c:	e5e1      	b.n	8004e22 <_strtod_l+0x82>
 800525e:	4b35      	ldr	r3, [pc, #212]	; (8005334 <_strtod_l+0x594>)
 8005260:	4640      	mov	r0, r8
 8005262:	9305      	str	r3, [sp, #20]
 8005264:	2300      	movs	r3, #0
 8005266:	4649      	mov	r1, r9
 8005268:	461f      	mov	r7, r3
 800526a:	1136      	asrs	r6, r6, #4
 800526c:	2e01      	cmp	r6, #1
 800526e:	dc21      	bgt.n	80052b4 <_strtod_l+0x514>
 8005270:	b10b      	cbz	r3, 8005276 <_strtod_l+0x4d6>
 8005272:	4680      	mov	r8, r0
 8005274:	4689      	mov	r9, r1
 8005276:	4b2f      	ldr	r3, [pc, #188]	; (8005334 <_strtod_l+0x594>)
 8005278:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800527c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005280:	4642      	mov	r2, r8
 8005282:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005286:	464b      	mov	r3, r9
 8005288:	f7fb f926 	bl	80004d8 <__aeabi_dmul>
 800528c:	4b26      	ldr	r3, [pc, #152]	; (8005328 <_strtod_l+0x588>)
 800528e:	460a      	mov	r2, r1
 8005290:	400b      	ands	r3, r1
 8005292:	4929      	ldr	r1, [pc, #164]	; (8005338 <_strtod_l+0x598>)
 8005294:	4680      	mov	r8, r0
 8005296:	428b      	cmp	r3, r1
 8005298:	d8b9      	bhi.n	800520e <_strtod_l+0x46e>
 800529a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800529e:	428b      	cmp	r3, r1
 80052a0:	bf86      	itte	hi
 80052a2:	f04f 38ff 	movhi.w	r8, #4294967295
 80052a6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800533c <_strtod_l+0x59c>
 80052aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80052ae:	2300      	movs	r3, #0
 80052b0:	9305      	str	r3, [sp, #20]
 80052b2:	e07f      	b.n	80053b4 <_strtod_l+0x614>
 80052b4:	07f2      	lsls	r2, r6, #31
 80052b6:	d505      	bpl.n	80052c4 <_strtod_l+0x524>
 80052b8:	9b05      	ldr	r3, [sp, #20]
 80052ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052be:	f7fb f90b 	bl	80004d8 <__aeabi_dmul>
 80052c2:	2301      	movs	r3, #1
 80052c4:	9a05      	ldr	r2, [sp, #20]
 80052c6:	3701      	adds	r7, #1
 80052c8:	3208      	adds	r2, #8
 80052ca:	1076      	asrs	r6, r6, #1
 80052cc:	9205      	str	r2, [sp, #20]
 80052ce:	e7cd      	b.n	800526c <_strtod_l+0x4cc>
 80052d0:	d0ed      	beq.n	80052ae <_strtod_l+0x50e>
 80052d2:	4276      	negs	r6, r6
 80052d4:	f016 020f 	ands.w	r2, r6, #15
 80052d8:	d00a      	beq.n	80052f0 <_strtod_l+0x550>
 80052da:	4b15      	ldr	r3, [pc, #84]	; (8005330 <_strtod_l+0x590>)
 80052dc:	4640      	mov	r0, r8
 80052de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052e2:	4649      	mov	r1, r9
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	f7fb fa20 	bl	800072c <__aeabi_ddiv>
 80052ec:	4680      	mov	r8, r0
 80052ee:	4689      	mov	r9, r1
 80052f0:	1136      	asrs	r6, r6, #4
 80052f2:	d0dc      	beq.n	80052ae <_strtod_l+0x50e>
 80052f4:	2e1f      	cmp	r6, #31
 80052f6:	dd23      	ble.n	8005340 <_strtod_l+0x5a0>
 80052f8:	f04f 0b00 	mov.w	fp, #0
 80052fc:	f8cd b010 	str.w	fp, [sp, #16]
 8005300:	f8cd b020 	str.w	fp, [sp, #32]
 8005304:	f8cd b018 	str.w	fp, [sp, #24]
 8005308:	2322      	movs	r3, #34	; 0x22
 800530a:	f04f 0800 	mov.w	r8, #0
 800530e:	f04f 0900 	mov.w	r9, #0
 8005312:	f8ca 3000 	str.w	r3, [sl]
 8005316:	e789      	b.n	800522c <_strtod_l+0x48c>
 8005318:	08007ae5 	.word	0x08007ae5
 800531c:	08007afc 	.word	0x08007afc
 8005320:	08007adc 	.word	0x08007adc
 8005324:	08007adf 	.word	0x08007adf
 8005328:	7ff00000 	.word	0x7ff00000
 800532c:	08007d6f 	.word	0x08007d6f
 8005330:	08007c60 	.word	0x08007c60
 8005334:	08007c38 	.word	0x08007c38
 8005338:	7ca00000 	.word	0x7ca00000
 800533c:	7fefffff 	.word	0x7fefffff
 8005340:	f016 0310 	ands.w	r3, r6, #16
 8005344:	bf18      	it	ne
 8005346:	236a      	movne	r3, #106	; 0x6a
 8005348:	4640      	mov	r0, r8
 800534a:	9305      	str	r3, [sp, #20]
 800534c:	4649      	mov	r1, r9
 800534e:	2300      	movs	r3, #0
 8005350:	4fb0      	ldr	r7, [pc, #704]	; (8005614 <_strtod_l+0x874>)
 8005352:	07f2      	lsls	r2, r6, #31
 8005354:	d504      	bpl.n	8005360 <_strtod_l+0x5c0>
 8005356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800535a:	f7fb f8bd 	bl	80004d8 <__aeabi_dmul>
 800535e:	2301      	movs	r3, #1
 8005360:	1076      	asrs	r6, r6, #1
 8005362:	f107 0708 	add.w	r7, r7, #8
 8005366:	d1f4      	bne.n	8005352 <_strtod_l+0x5b2>
 8005368:	b10b      	cbz	r3, 800536e <_strtod_l+0x5ce>
 800536a:	4680      	mov	r8, r0
 800536c:	4689      	mov	r9, r1
 800536e:	9b05      	ldr	r3, [sp, #20]
 8005370:	b1c3      	cbz	r3, 80053a4 <_strtod_l+0x604>
 8005372:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005376:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800537a:	2b00      	cmp	r3, #0
 800537c:	4649      	mov	r1, r9
 800537e:	dd11      	ble.n	80053a4 <_strtod_l+0x604>
 8005380:	2b1f      	cmp	r3, #31
 8005382:	f340 8127 	ble.w	80055d4 <_strtod_l+0x834>
 8005386:	2b34      	cmp	r3, #52	; 0x34
 8005388:	bfd8      	it	le
 800538a:	f04f 33ff 	movle.w	r3, #4294967295
 800538e:	f04f 0800 	mov.w	r8, #0
 8005392:	bfcf      	iteee	gt
 8005394:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005398:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800539c:	fa03 f202 	lslle.w	r2, r3, r2
 80053a0:	ea02 0901 	andle.w	r9, r2, r1
 80053a4:	2200      	movs	r2, #0
 80053a6:	2300      	movs	r3, #0
 80053a8:	4640      	mov	r0, r8
 80053aa:	4649      	mov	r1, r9
 80053ac:	f7fb fafc 	bl	80009a8 <__aeabi_dcmpeq>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	d1a1      	bne.n	80052f8 <_strtod_l+0x558>
 80053b4:	9b06      	ldr	r3, [sp, #24]
 80053b6:	465a      	mov	r2, fp
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	4650      	mov	r0, sl
 80053bc:	4623      	mov	r3, r4
 80053be:	9908      	ldr	r1, [sp, #32]
 80053c0:	f000 ff10 	bl	80061e4 <__s2b>
 80053c4:	9008      	str	r0, [sp, #32]
 80053c6:	2800      	cmp	r0, #0
 80053c8:	f43f af21 	beq.w	800520e <_strtod_l+0x46e>
 80053cc:	9b04      	ldr	r3, [sp, #16]
 80053ce:	f04f 0b00 	mov.w	fp, #0
 80053d2:	1b5d      	subs	r5, r3, r5
 80053d4:	9b07      	ldr	r3, [sp, #28]
 80053d6:	f8cd b010 	str.w	fp, [sp, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bfb4      	ite	lt
 80053de:	462b      	movlt	r3, r5
 80053e0:	2300      	movge	r3, #0
 80053e2:	930e      	str	r3, [sp, #56]	; 0x38
 80053e4:	9b07      	ldr	r3, [sp, #28]
 80053e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80053ea:	9314      	str	r3, [sp, #80]	; 0x50
 80053ec:	9b08      	ldr	r3, [sp, #32]
 80053ee:	4650      	mov	r0, sl
 80053f0:	6859      	ldr	r1, [r3, #4]
 80053f2:	f000 fe4f 	bl	8006094 <_Balloc>
 80053f6:	9006      	str	r0, [sp, #24]
 80053f8:	2800      	cmp	r0, #0
 80053fa:	f43f af10 	beq.w	800521e <_strtod_l+0x47e>
 80053fe:	9b08      	ldr	r3, [sp, #32]
 8005400:	300c      	adds	r0, #12
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	f103 010c 	add.w	r1, r3, #12
 8005408:	3202      	adds	r2, #2
 800540a:	0092      	lsls	r2, r2, #2
 800540c:	f000 fe34 	bl	8006078 <memcpy>
 8005410:	ab1c      	add	r3, sp, #112	; 0x70
 8005412:	9301      	str	r3, [sp, #4]
 8005414:	ab1b      	add	r3, sp, #108	; 0x6c
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	4642      	mov	r2, r8
 800541a:	464b      	mov	r3, r9
 800541c:	4650      	mov	r0, sl
 800541e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005422:	f001 fa21 	bl	8006868 <__d2b>
 8005426:	901a      	str	r0, [sp, #104]	; 0x68
 8005428:	2800      	cmp	r0, #0
 800542a:	f43f aef8 	beq.w	800521e <_strtod_l+0x47e>
 800542e:	2101      	movs	r1, #1
 8005430:	4650      	mov	r0, sl
 8005432:	f000 ff6f 	bl	8006314 <__i2b>
 8005436:	4603      	mov	r3, r0
 8005438:	9004      	str	r0, [sp, #16]
 800543a:	2800      	cmp	r0, #0
 800543c:	f43f aeef 	beq.w	800521e <_strtod_l+0x47e>
 8005440:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005442:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005444:	2d00      	cmp	r5, #0
 8005446:	bfab      	itete	ge
 8005448:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800544a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800544c:	18ee      	addge	r6, r5, r3
 800544e:	1b5c      	sublt	r4, r3, r5
 8005450:	9b05      	ldr	r3, [sp, #20]
 8005452:	bfa8      	it	ge
 8005454:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005456:	eba5 0503 	sub.w	r5, r5, r3
 800545a:	4415      	add	r5, r2
 800545c:	4b6e      	ldr	r3, [pc, #440]	; (8005618 <_strtod_l+0x878>)
 800545e:	f105 35ff 	add.w	r5, r5, #4294967295
 8005462:	bfb8      	it	lt
 8005464:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005466:	429d      	cmp	r5, r3
 8005468:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800546c:	f280 80c4 	bge.w	80055f8 <_strtod_l+0x858>
 8005470:	1b5b      	subs	r3, r3, r5
 8005472:	2b1f      	cmp	r3, #31
 8005474:	f04f 0701 	mov.w	r7, #1
 8005478:	eba2 0203 	sub.w	r2, r2, r3
 800547c:	f300 80b1 	bgt.w	80055e2 <_strtod_l+0x842>
 8005480:	2500      	movs	r5, #0
 8005482:	fa07 f303 	lsl.w	r3, r7, r3
 8005486:	930f      	str	r3, [sp, #60]	; 0x3c
 8005488:	18b7      	adds	r7, r6, r2
 800548a:	9b05      	ldr	r3, [sp, #20]
 800548c:	42be      	cmp	r6, r7
 800548e:	4414      	add	r4, r2
 8005490:	441c      	add	r4, r3
 8005492:	4633      	mov	r3, r6
 8005494:	bfa8      	it	ge
 8005496:	463b      	movge	r3, r7
 8005498:	42a3      	cmp	r3, r4
 800549a:	bfa8      	it	ge
 800549c:	4623      	movge	r3, r4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bfc2      	ittt	gt
 80054a2:	1aff      	subgt	r7, r7, r3
 80054a4:	1ae4      	subgt	r4, r4, r3
 80054a6:	1af6      	subgt	r6, r6, r3
 80054a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	dd17      	ble.n	80054de <_strtod_l+0x73e>
 80054ae:	461a      	mov	r2, r3
 80054b0:	4650      	mov	r0, sl
 80054b2:	9904      	ldr	r1, [sp, #16]
 80054b4:	f000 ffec 	bl	8006490 <__pow5mult>
 80054b8:	9004      	str	r0, [sp, #16]
 80054ba:	2800      	cmp	r0, #0
 80054bc:	f43f aeaf 	beq.w	800521e <_strtod_l+0x47e>
 80054c0:	4601      	mov	r1, r0
 80054c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80054c4:	4650      	mov	r0, sl
 80054c6:	f000 ff3b 	bl	8006340 <__multiply>
 80054ca:	9009      	str	r0, [sp, #36]	; 0x24
 80054cc:	2800      	cmp	r0, #0
 80054ce:	f43f aea6 	beq.w	800521e <_strtod_l+0x47e>
 80054d2:	4650      	mov	r0, sl
 80054d4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80054d6:	f000 fe1d 	bl	8006114 <_Bfree>
 80054da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054dc:	931a      	str	r3, [sp, #104]	; 0x68
 80054de:	2f00      	cmp	r7, #0
 80054e0:	f300 808e 	bgt.w	8005600 <_strtod_l+0x860>
 80054e4:	9b07      	ldr	r3, [sp, #28]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	dd08      	ble.n	80054fc <_strtod_l+0x75c>
 80054ea:	4650      	mov	r0, sl
 80054ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80054ee:	9906      	ldr	r1, [sp, #24]
 80054f0:	f000 ffce 	bl	8006490 <__pow5mult>
 80054f4:	9006      	str	r0, [sp, #24]
 80054f6:	2800      	cmp	r0, #0
 80054f8:	f43f ae91 	beq.w	800521e <_strtod_l+0x47e>
 80054fc:	2c00      	cmp	r4, #0
 80054fe:	dd08      	ble.n	8005512 <_strtod_l+0x772>
 8005500:	4622      	mov	r2, r4
 8005502:	4650      	mov	r0, sl
 8005504:	9906      	ldr	r1, [sp, #24]
 8005506:	f001 f81d 	bl	8006544 <__lshift>
 800550a:	9006      	str	r0, [sp, #24]
 800550c:	2800      	cmp	r0, #0
 800550e:	f43f ae86 	beq.w	800521e <_strtod_l+0x47e>
 8005512:	2e00      	cmp	r6, #0
 8005514:	dd08      	ble.n	8005528 <_strtod_l+0x788>
 8005516:	4632      	mov	r2, r6
 8005518:	4650      	mov	r0, sl
 800551a:	9904      	ldr	r1, [sp, #16]
 800551c:	f001 f812 	bl	8006544 <__lshift>
 8005520:	9004      	str	r0, [sp, #16]
 8005522:	2800      	cmp	r0, #0
 8005524:	f43f ae7b 	beq.w	800521e <_strtod_l+0x47e>
 8005528:	4650      	mov	r0, sl
 800552a:	9a06      	ldr	r2, [sp, #24]
 800552c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800552e:	f001 f895 	bl	800665c <__mdiff>
 8005532:	4683      	mov	fp, r0
 8005534:	2800      	cmp	r0, #0
 8005536:	f43f ae72 	beq.w	800521e <_strtod_l+0x47e>
 800553a:	2400      	movs	r4, #0
 800553c:	68c3      	ldr	r3, [r0, #12]
 800553e:	9904      	ldr	r1, [sp, #16]
 8005540:	60c4      	str	r4, [r0, #12]
 8005542:	930b      	str	r3, [sp, #44]	; 0x2c
 8005544:	f001 f86e 	bl	8006624 <__mcmp>
 8005548:	42a0      	cmp	r0, r4
 800554a:	da6b      	bge.n	8005624 <_strtod_l+0x884>
 800554c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800554e:	ea53 0308 	orrs.w	r3, r3, r8
 8005552:	f040 8091 	bne.w	8005678 <_strtod_l+0x8d8>
 8005556:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800555a:	2b00      	cmp	r3, #0
 800555c:	f040 808c 	bne.w	8005678 <_strtod_l+0x8d8>
 8005560:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005564:	0d1b      	lsrs	r3, r3, #20
 8005566:	051b      	lsls	r3, r3, #20
 8005568:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800556c:	f240 8084 	bls.w	8005678 <_strtod_l+0x8d8>
 8005570:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005574:	b91b      	cbnz	r3, 800557e <_strtod_l+0x7de>
 8005576:	f8db 3010 	ldr.w	r3, [fp, #16]
 800557a:	2b01      	cmp	r3, #1
 800557c:	dd7c      	ble.n	8005678 <_strtod_l+0x8d8>
 800557e:	4659      	mov	r1, fp
 8005580:	2201      	movs	r2, #1
 8005582:	4650      	mov	r0, sl
 8005584:	f000 ffde 	bl	8006544 <__lshift>
 8005588:	9904      	ldr	r1, [sp, #16]
 800558a:	4683      	mov	fp, r0
 800558c:	f001 f84a 	bl	8006624 <__mcmp>
 8005590:	2800      	cmp	r0, #0
 8005592:	dd71      	ble.n	8005678 <_strtod_l+0x8d8>
 8005594:	9905      	ldr	r1, [sp, #20]
 8005596:	464b      	mov	r3, r9
 8005598:	4a20      	ldr	r2, [pc, #128]	; (800561c <_strtod_l+0x87c>)
 800559a:	2900      	cmp	r1, #0
 800559c:	f000 808c 	beq.w	80056b8 <_strtod_l+0x918>
 80055a0:	ea02 0109 	and.w	r1, r2, r9
 80055a4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80055a8:	f300 8086 	bgt.w	80056b8 <_strtod_l+0x918>
 80055ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80055b0:	f77f aeaa 	ble.w	8005308 <_strtod_l+0x568>
 80055b4:	4640      	mov	r0, r8
 80055b6:	4649      	mov	r1, r9
 80055b8:	4b19      	ldr	r3, [pc, #100]	; (8005620 <_strtod_l+0x880>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	f7fa ff8c 	bl	80004d8 <__aeabi_dmul>
 80055c0:	460b      	mov	r3, r1
 80055c2:	4303      	orrs	r3, r0
 80055c4:	bf08      	it	eq
 80055c6:	2322      	moveq	r3, #34	; 0x22
 80055c8:	4680      	mov	r8, r0
 80055ca:	4689      	mov	r9, r1
 80055cc:	bf08      	it	eq
 80055ce:	f8ca 3000 	streq.w	r3, [sl]
 80055d2:	e62f      	b.n	8005234 <_strtod_l+0x494>
 80055d4:	f04f 32ff 	mov.w	r2, #4294967295
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	ea03 0808 	and.w	r8, r3, r8
 80055e0:	e6e0      	b.n	80053a4 <_strtod_l+0x604>
 80055e2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80055e6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80055ea:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80055ee:	35e2      	adds	r5, #226	; 0xe2
 80055f0:	fa07 f505 	lsl.w	r5, r7, r5
 80055f4:	970f      	str	r7, [sp, #60]	; 0x3c
 80055f6:	e747      	b.n	8005488 <_strtod_l+0x6e8>
 80055f8:	2301      	movs	r3, #1
 80055fa:	2500      	movs	r5, #0
 80055fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80055fe:	e743      	b.n	8005488 <_strtod_l+0x6e8>
 8005600:	463a      	mov	r2, r7
 8005602:	4650      	mov	r0, sl
 8005604:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005606:	f000 ff9d 	bl	8006544 <__lshift>
 800560a:	901a      	str	r0, [sp, #104]	; 0x68
 800560c:	2800      	cmp	r0, #0
 800560e:	f47f af69 	bne.w	80054e4 <_strtod_l+0x744>
 8005612:	e604      	b.n	800521e <_strtod_l+0x47e>
 8005614:	08007b10 	.word	0x08007b10
 8005618:	fffffc02 	.word	0xfffffc02
 800561c:	7ff00000 	.word	0x7ff00000
 8005620:	39500000 	.word	0x39500000
 8005624:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005628:	d165      	bne.n	80056f6 <_strtod_l+0x956>
 800562a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800562c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005630:	b35a      	cbz	r2, 800568a <_strtod_l+0x8ea>
 8005632:	4a99      	ldr	r2, [pc, #612]	; (8005898 <_strtod_l+0xaf8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d12b      	bne.n	8005690 <_strtod_l+0x8f0>
 8005638:	9b05      	ldr	r3, [sp, #20]
 800563a:	4641      	mov	r1, r8
 800563c:	b303      	cbz	r3, 8005680 <_strtod_l+0x8e0>
 800563e:	464a      	mov	r2, r9
 8005640:	4b96      	ldr	r3, [pc, #600]	; (800589c <_strtod_l+0xafc>)
 8005642:	4013      	ands	r3, r2
 8005644:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005648:	f04f 32ff 	mov.w	r2, #4294967295
 800564c:	d81b      	bhi.n	8005686 <_strtod_l+0x8e6>
 800564e:	0d1b      	lsrs	r3, r3, #20
 8005650:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	4299      	cmp	r1, r3
 800565a:	d119      	bne.n	8005690 <_strtod_l+0x8f0>
 800565c:	4b90      	ldr	r3, [pc, #576]	; (80058a0 <_strtod_l+0xb00>)
 800565e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005660:	429a      	cmp	r2, r3
 8005662:	d102      	bne.n	800566a <_strtod_l+0x8ca>
 8005664:	3101      	adds	r1, #1
 8005666:	f43f adda 	beq.w	800521e <_strtod_l+0x47e>
 800566a:	f04f 0800 	mov.w	r8, #0
 800566e:	4b8b      	ldr	r3, [pc, #556]	; (800589c <_strtod_l+0xafc>)
 8005670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005672:	401a      	ands	r2, r3
 8005674:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005678:	9b05      	ldr	r3, [sp, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d19a      	bne.n	80055b4 <_strtod_l+0x814>
 800567e:	e5d9      	b.n	8005234 <_strtod_l+0x494>
 8005680:	f04f 33ff 	mov.w	r3, #4294967295
 8005684:	e7e8      	b.n	8005658 <_strtod_l+0x8b8>
 8005686:	4613      	mov	r3, r2
 8005688:	e7e6      	b.n	8005658 <_strtod_l+0x8b8>
 800568a:	ea53 0308 	orrs.w	r3, r3, r8
 800568e:	d081      	beq.n	8005594 <_strtod_l+0x7f4>
 8005690:	b1e5      	cbz	r5, 80056cc <_strtod_l+0x92c>
 8005692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005694:	421d      	tst	r5, r3
 8005696:	d0ef      	beq.n	8005678 <_strtod_l+0x8d8>
 8005698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800569a:	4640      	mov	r0, r8
 800569c:	4649      	mov	r1, r9
 800569e:	9a05      	ldr	r2, [sp, #20]
 80056a0:	b1c3      	cbz	r3, 80056d4 <_strtod_l+0x934>
 80056a2:	f7ff fb5b 	bl	8004d5c <sulp>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056ae:	f7fa fd5d 	bl	800016c <__adddf3>
 80056b2:	4680      	mov	r8, r0
 80056b4:	4689      	mov	r9, r1
 80056b6:	e7df      	b.n	8005678 <_strtod_l+0x8d8>
 80056b8:	4013      	ands	r3, r2
 80056ba:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80056be:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80056c2:	f04f 38ff 	mov.w	r8, #4294967295
 80056c6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80056ca:	e7d5      	b.n	8005678 <_strtod_l+0x8d8>
 80056cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056ce:	ea13 0f08 	tst.w	r3, r8
 80056d2:	e7e0      	b.n	8005696 <_strtod_l+0x8f6>
 80056d4:	f7ff fb42 	bl	8004d5c <sulp>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056e0:	f7fa fd42 	bl	8000168 <__aeabi_dsub>
 80056e4:	2200      	movs	r2, #0
 80056e6:	2300      	movs	r3, #0
 80056e8:	4680      	mov	r8, r0
 80056ea:	4689      	mov	r9, r1
 80056ec:	f7fb f95c 	bl	80009a8 <__aeabi_dcmpeq>
 80056f0:	2800      	cmp	r0, #0
 80056f2:	d0c1      	beq.n	8005678 <_strtod_l+0x8d8>
 80056f4:	e608      	b.n	8005308 <_strtod_l+0x568>
 80056f6:	4658      	mov	r0, fp
 80056f8:	9904      	ldr	r1, [sp, #16]
 80056fa:	f001 f911 	bl	8006920 <__ratio>
 80056fe:	2200      	movs	r2, #0
 8005700:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005704:	4606      	mov	r6, r0
 8005706:	460f      	mov	r7, r1
 8005708:	f7fb f962 	bl	80009d0 <__aeabi_dcmple>
 800570c:	2800      	cmp	r0, #0
 800570e:	d070      	beq.n	80057f2 <_strtod_l+0xa52>
 8005710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d042      	beq.n	800579c <_strtod_l+0x9fc>
 8005716:	2600      	movs	r6, #0
 8005718:	4f62      	ldr	r7, [pc, #392]	; (80058a4 <_strtod_l+0xb04>)
 800571a:	4d62      	ldr	r5, [pc, #392]	; (80058a4 <_strtod_l+0xb04>)
 800571c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800571e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005722:	0d1b      	lsrs	r3, r3, #20
 8005724:	051b      	lsls	r3, r3, #20
 8005726:	930f      	str	r3, [sp, #60]	; 0x3c
 8005728:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800572a:	4b5f      	ldr	r3, [pc, #380]	; (80058a8 <_strtod_l+0xb08>)
 800572c:	429a      	cmp	r2, r3
 800572e:	f040 80c3 	bne.w	80058b8 <_strtod_l+0xb18>
 8005732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005734:	4640      	mov	r0, r8
 8005736:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800573a:	4649      	mov	r1, r9
 800573c:	f001 f81a 	bl	8006774 <__ulp>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4630      	mov	r0, r6
 8005746:	4639      	mov	r1, r7
 8005748:	f7fa fec6 	bl	80004d8 <__aeabi_dmul>
 800574c:	4642      	mov	r2, r8
 800574e:	464b      	mov	r3, r9
 8005750:	f7fa fd0c 	bl	800016c <__adddf3>
 8005754:	460b      	mov	r3, r1
 8005756:	4951      	ldr	r1, [pc, #324]	; (800589c <_strtod_l+0xafc>)
 8005758:	4a54      	ldr	r2, [pc, #336]	; (80058ac <_strtod_l+0xb0c>)
 800575a:	4019      	ands	r1, r3
 800575c:	4291      	cmp	r1, r2
 800575e:	4680      	mov	r8, r0
 8005760:	d95d      	bls.n	800581e <_strtod_l+0xa7e>
 8005762:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005764:	4b4e      	ldr	r3, [pc, #312]	; (80058a0 <_strtod_l+0xb00>)
 8005766:	429a      	cmp	r2, r3
 8005768:	d103      	bne.n	8005772 <_strtod_l+0x9d2>
 800576a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800576c:	3301      	adds	r3, #1
 800576e:	f43f ad56 	beq.w	800521e <_strtod_l+0x47e>
 8005772:	f04f 38ff 	mov.w	r8, #4294967295
 8005776:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80058a0 <_strtod_l+0xb00>
 800577a:	4650      	mov	r0, sl
 800577c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800577e:	f000 fcc9 	bl	8006114 <_Bfree>
 8005782:	4650      	mov	r0, sl
 8005784:	9906      	ldr	r1, [sp, #24]
 8005786:	f000 fcc5 	bl	8006114 <_Bfree>
 800578a:	4650      	mov	r0, sl
 800578c:	9904      	ldr	r1, [sp, #16]
 800578e:	f000 fcc1 	bl	8006114 <_Bfree>
 8005792:	4659      	mov	r1, fp
 8005794:	4650      	mov	r0, sl
 8005796:	f000 fcbd 	bl	8006114 <_Bfree>
 800579a:	e627      	b.n	80053ec <_strtod_l+0x64c>
 800579c:	f1b8 0f00 	cmp.w	r8, #0
 80057a0:	d119      	bne.n	80057d6 <_strtod_l+0xa36>
 80057a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057a8:	b9e3      	cbnz	r3, 80057e4 <_strtod_l+0xa44>
 80057aa:	2200      	movs	r2, #0
 80057ac:	4630      	mov	r0, r6
 80057ae:	4639      	mov	r1, r7
 80057b0:	4b3c      	ldr	r3, [pc, #240]	; (80058a4 <_strtod_l+0xb04>)
 80057b2:	f7fb f903 	bl	80009bc <__aeabi_dcmplt>
 80057b6:	b9c8      	cbnz	r0, 80057ec <_strtod_l+0xa4c>
 80057b8:	2200      	movs	r2, #0
 80057ba:	4630      	mov	r0, r6
 80057bc:	4639      	mov	r1, r7
 80057be:	4b3c      	ldr	r3, [pc, #240]	; (80058b0 <_strtod_l+0xb10>)
 80057c0:	f7fa fe8a 	bl	80004d8 <__aeabi_dmul>
 80057c4:	4604      	mov	r4, r0
 80057c6:	460d      	mov	r5, r1
 80057c8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80057cc:	9416      	str	r4, [sp, #88]	; 0x58
 80057ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80057d0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80057d4:	e7a2      	b.n	800571c <_strtod_l+0x97c>
 80057d6:	f1b8 0f01 	cmp.w	r8, #1
 80057da:	d103      	bne.n	80057e4 <_strtod_l+0xa44>
 80057dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f43f ad92 	beq.w	8005308 <_strtod_l+0x568>
 80057e4:	2600      	movs	r6, #0
 80057e6:	2400      	movs	r4, #0
 80057e8:	4f32      	ldr	r7, [pc, #200]	; (80058b4 <_strtod_l+0xb14>)
 80057ea:	e796      	b.n	800571a <_strtod_l+0x97a>
 80057ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80057ee:	4d30      	ldr	r5, [pc, #192]	; (80058b0 <_strtod_l+0xb10>)
 80057f0:	e7ea      	b.n	80057c8 <_strtod_l+0xa28>
 80057f2:	4b2f      	ldr	r3, [pc, #188]	; (80058b0 <_strtod_l+0xb10>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	4630      	mov	r0, r6
 80057f8:	4639      	mov	r1, r7
 80057fa:	f7fa fe6d 	bl	80004d8 <__aeabi_dmul>
 80057fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005800:	4604      	mov	r4, r0
 8005802:	460d      	mov	r5, r1
 8005804:	b933      	cbnz	r3, 8005814 <_strtod_l+0xa74>
 8005806:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800580a:	9010      	str	r0, [sp, #64]	; 0x40
 800580c:	9311      	str	r3, [sp, #68]	; 0x44
 800580e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005812:	e783      	b.n	800571c <_strtod_l+0x97c>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800581c:	e7f7      	b.n	800580e <_strtod_l+0xa6e>
 800581e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005822:	9b05      	ldr	r3, [sp, #20]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1a8      	bne.n	800577a <_strtod_l+0x9da>
 8005828:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800582c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800582e:	0d1b      	lsrs	r3, r3, #20
 8005830:	051b      	lsls	r3, r3, #20
 8005832:	429a      	cmp	r2, r3
 8005834:	d1a1      	bne.n	800577a <_strtod_l+0x9da>
 8005836:	4620      	mov	r0, r4
 8005838:	4629      	mov	r1, r5
 800583a:	f7fb fadb 	bl	8000df4 <__aeabi_d2lz>
 800583e:	f7fa fe1d 	bl	800047c <__aeabi_l2d>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4620      	mov	r0, r4
 8005848:	4629      	mov	r1, r5
 800584a:	f7fa fc8d 	bl	8000168 <__aeabi_dsub>
 800584e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005850:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005854:	ea43 0308 	orr.w	r3, r3, r8
 8005858:	4313      	orrs	r3, r2
 800585a:	4604      	mov	r4, r0
 800585c:	460d      	mov	r5, r1
 800585e:	d066      	beq.n	800592e <_strtod_l+0xb8e>
 8005860:	a309      	add	r3, pc, #36	; (adr r3, 8005888 <_strtod_l+0xae8>)
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f7fb f8a9 	bl	80009bc <__aeabi_dcmplt>
 800586a:	2800      	cmp	r0, #0
 800586c:	f47f ace2 	bne.w	8005234 <_strtod_l+0x494>
 8005870:	a307      	add	r3, pc, #28	; (adr r3, 8005890 <_strtod_l+0xaf0>)
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	4620      	mov	r0, r4
 8005878:	4629      	mov	r1, r5
 800587a:	f7fb f8bd 	bl	80009f8 <__aeabi_dcmpgt>
 800587e:	2800      	cmp	r0, #0
 8005880:	f43f af7b 	beq.w	800577a <_strtod_l+0x9da>
 8005884:	e4d6      	b.n	8005234 <_strtod_l+0x494>
 8005886:	bf00      	nop
 8005888:	94a03595 	.word	0x94a03595
 800588c:	3fdfffff 	.word	0x3fdfffff
 8005890:	35afe535 	.word	0x35afe535
 8005894:	3fe00000 	.word	0x3fe00000
 8005898:	000fffff 	.word	0x000fffff
 800589c:	7ff00000 	.word	0x7ff00000
 80058a0:	7fefffff 	.word	0x7fefffff
 80058a4:	3ff00000 	.word	0x3ff00000
 80058a8:	7fe00000 	.word	0x7fe00000
 80058ac:	7c9fffff 	.word	0x7c9fffff
 80058b0:	3fe00000 	.word	0x3fe00000
 80058b4:	bff00000 	.word	0xbff00000
 80058b8:	9b05      	ldr	r3, [sp, #20]
 80058ba:	b313      	cbz	r3, 8005902 <_strtod_l+0xb62>
 80058bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80058c2:	d81e      	bhi.n	8005902 <_strtod_l+0xb62>
 80058c4:	a326      	add	r3, pc, #152	; (adr r3, 8005960 <_strtod_l+0xbc0>)
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	4620      	mov	r0, r4
 80058cc:	4629      	mov	r1, r5
 80058ce:	f7fb f87f 	bl	80009d0 <__aeabi_dcmple>
 80058d2:	b190      	cbz	r0, 80058fa <_strtod_l+0xb5a>
 80058d4:	4629      	mov	r1, r5
 80058d6:	4620      	mov	r0, r4
 80058d8:	f7fb f898 	bl	8000a0c <__aeabi_d2uiz>
 80058dc:	2801      	cmp	r0, #1
 80058de:	bf38      	it	cc
 80058e0:	2001      	movcc	r0, #1
 80058e2:	f7fa fd7f 	bl	80003e4 <__aeabi_ui2d>
 80058e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058e8:	4604      	mov	r4, r0
 80058ea:	460d      	mov	r5, r1
 80058ec:	b9d3      	cbnz	r3, 8005924 <_strtod_l+0xb84>
 80058ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058f2:	9012      	str	r0, [sp, #72]	; 0x48
 80058f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80058f6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80058fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058fc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005900:	1a9f      	subs	r7, r3, r2
 8005902:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005906:	f000 ff35 	bl	8006774 <__ulp>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	4630      	mov	r0, r6
 8005910:	4639      	mov	r1, r7
 8005912:	f7fa fde1 	bl	80004d8 <__aeabi_dmul>
 8005916:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800591a:	f7fa fc27 	bl	800016c <__adddf3>
 800591e:	4680      	mov	r8, r0
 8005920:	4689      	mov	r9, r1
 8005922:	e77e      	b.n	8005822 <_strtod_l+0xa82>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800592c:	e7e3      	b.n	80058f6 <_strtod_l+0xb56>
 800592e:	a30e      	add	r3, pc, #56	; (adr r3, 8005968 <_strtod_l+0xbc8>)
 8005930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005934:	f7fb f842 	bl	80009bc <__aeabi_dcmplt>
 8005938:	e7a1      	b.n	800587e <_strtod_l+0xade>
 800593a:	2300      	movs	r3, #0
 800593c:	930a      	str	r3, [sp, #40]	; 0x28
 800593e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005940:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	f7ff ba71 	b.w	8004e2a <_strtod_l+0x8a>
 8005948:	2a65      	cmp	r2, #101	; 0x65
 800594a:	f43f ab63 	beq.w	8005014 <_strtod_l+0x274>
 800594e:	2a45      	cmp	r2, #69	; 0x45
 8005950:	f43f ab60 	beq.w	8005014 <_strtod_l+0x274>
 8005954:	2301      	movs	r3, #1
 8005956:	f7ff bb95 	b.w	8005084 <_strtod_l+0x2e4>
 800595a:	bf00      	nop
 800595c:	f3af 8000 	nop.w
 8005960:	ffc00000 	.word	0xffc00000
 8005964:	41dfffff 	.word	0x41dfffff
 8005968:	94a03595 	.word	0x94a03595
 800596c:	3fcfffff 	.word	0x3fcfffff

08005970 <strtod>:
 8005970:	460a      	mov	r2, r1
 8005972:	4601      	mov	r1, r0
 8005974:	4802      	ldr	r0, [pc, #8]	; (8005980 <strtod+0x10>)
 8005976:	4b03      	ldr	r3, [pc, #12]	; (8005984 <strtod+0x14>)
 8005978:	6800      	ldr	r0, [r0, #0]
 800597a:	f7ff ba11 	b.w	8004da0 <_strtod_l>
 800597e:	bf00      	nop
 8005980:	20000010 	.word	0x20000010
 8005984:	20000078 	.word	0x20000078

08005988 <rshift>:
 8005988:	6903      	ldr	r3, [r0, #16]
 800598a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800598e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005992:	f100 0414 	add.w	r4, r0, #20
 8005996:	ea4f 1261 	mov.w	r2, r1, asr #5
 800599a:	dd46      	ble.n	8005a2a <rshift+0xa2>
 800599c:	f011 011f 	ands.w	r1, r1, #31
 80059a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80059a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80059a8:	d10c      	bne.n	80059c4 <rshift+0x3c>
 80059aa:	4629      	mov	r1, r5
 80059ac:	f100 0710 	add.w	r7, r0, #16
 80059b0:	42b1      	cmp	r1, r6
 80059b2:	d335      	bcc.n	8005a20 <rshift+0x98>
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	1eea      	subs	r2, r5, #3
 80059ba:	4296      	cmp	r6, r2
 80059bc:	bf38      	it	cc
 80059be:	2300      	movcc	r3, #0
 80059c0:	4423      	add	r3, r4
 80059c2:	e015      	b.n	80059f0 <rshift+0x68>
 80059c4:	46a1      	mov	r9, r4
 80059c6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80059ca:	f1c1 0820 	rsb	r8, r1, #32
 80059ce:	40cf      	lsrs	r7, r1
 80059d0:	f105 0e04 	add.w	lr, r5, #4
 80059d4:	4576      	cmp	r6, lr
 80059d6:	46f4      	mov	ip, lr
 80059d8:	d816      	bhi.n	8005a08 <rshift+0x80>
 80059da:	1a9a      	subs	r2, r3, r2
 80059dc:	0092      	lsls	r2, r2, #2
 80059de:	3a04      	subs	r2, #4
 80059e0:	3501      	adds	r5, #1
 80059e2:	42ae      	cmp	r6, r5
 80059e4:	bf38      	it	cc
 80059e6:	2200      	movcc	r2, #0
 80059e8:	18a3      	adds	r3, r4, r2
 80059ea:	50a7      	str	r7, [r4, r2]
 80059ec:	b107      	cbz	r7, 80059f0 <rshift+0x68>
 80059ee:	3304      	adds	r3, #4
 80059f0:	42a3      	cmp	r3, r4
 80059f2:	eba3 0204 	sub.w	r2, r3, r4
 80059f6:	bf08      	it	eq
 80059f8:	2300      	moveq	r3, #0
 80059fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80059fe:	6102      	str	r2, [r0, #16]
 8005a00:	bf08      	it	eq
 8005a02:	6143      	streq	r3, [r0, #20]
 8005a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a08:	f8dc c000 	ldr.w	ip, [ip]
 8005a0c:	fa0c fc08 	lsl.w	ip, ip, r8
 8005a10:	ea4c 0707 	orr.w	r7, ip, r7
 8005a14:	f849 7b04 	str.w	r7, [r9], #4
 8005a18:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005a1c:	40cf      	lsrs	r7, r1
 8005a1e:	e7d9      	b.n	80059d4 <rshift+0x4c>
 8005a20:	f851 cb04 	ldr.w	ip, [r1], #4
 8005a24:	f847 cf04 	str.w	ip, [r7, #4]!
 8005a28:	e7c2      	b.n	80059b0 <rshift+0x28>
 8005a2a:	4623      	mov	r3, r4
 8005a2c:	e7e0      	b.n	80059f0 <rshift+0x68>

08005a2e <__hexdig_fun>:
 8005a2e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005a32:	2b09      	cmp	r3, #9
 8005a34:	d802      	bhi.n	8005a3c <__hexdig_fun+0xe>
 8005a36:	3820      	subs	r0, #32
 8005a38:	b2c0      	uxtb	r0, r0
 8005a3a:	4770      	bx	lr
 8005a3c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005a40:	2b05      	cmp	r3, #5
 8005a42:	d801      	bhi.n	8005a48 <__hexdig_fun+0x1a>
 8005a44:	3847      	subs	r0, #71	; 0x47
 8005a46:	e7f7      	b.n	8005a38 <__hexdig_fun+0xa>
 8005a48:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005a4c:	2b05      	cmp	r3, #5
 8005a4e:	d801      	bhi.n	8005a54 <__hexdig_fun+0x26>
 8005a50:	3827      	subs	r0, #39	; 0x27
 8005a52:	e7f1      	b.n	8005a38 <__hexdig_fun+0xa>
 8005a54:	2000      	movs	r0, #0
 8005a56:	4770      	bx	lr

08005a58 <__gethex>:
 8005a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	b08b      	sub	sp, #44	; 0x2c
 8005a5e:	9305      	str	r3, [sp, #20]
 8005a60:	4bb2      	ldr	r3, [pc, #712]	; (8005d2c <__gethex+0x2d4>)
 8005a62:	9002      	str	r0, [sp, #8]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	468b      	mov	fp, r1
 8005a68:	4618      	mov	r0, r3
 8005a6a:	4690      	mov	r8, r2
 8005a6c:	9303      	str	r3, [sp, #12]
 8005a6e:	f7fa fb6f 	bl	8000150 <strlen>
 8005a72:	4682      	mov	sl, r0
 8005a74:	9b03      	ldr	r3, [sp, #12]
 8005a76:	f8db 2000 	ldr.w	r2, [fp]
 8005a7a:	4403      	add	r3, r0
 8005a7c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005a80:	9306      	str	r3, [sp, #24]
 8005a82:	1c93      	adds	r3, r2, #2
 8005a84:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005a88:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005a8c:	32fe      	adds	r2, #254	; 0xfe
 8005a8e:	18d1      	adds	r1, r2, r3
 8005a90:	461f      	mov	r7, r3
 8005a92:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005a96:	9101      	str	r1, [sp, #4]
 8005a98:	2830      	cmp	r0, #48	; 0x30
 8005a9a:	d0f8      	beq.n	8005a8e <__gethex+0x36>
 8005a9c:	f7ff ffc7 	bl	8005a2e <__hexdig_fun>
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d13a      	bne.n	8005b1c <__gethex+0xc4>
 8005aa6:	4652      	mov	r2, sl
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	9903      	ldr	r1, [sp, #12]
 8005aac:	f001 f868 	bl	8006b80 <strncmp>
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d166      	bne.n	8005b84 <__gethex+0x12c>
 8005ab6:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005aba:	eb07 060a 	add.w	r6, r7, sl
 8005abe:	f7ff ffb6 	bl	8005a2e <__hexdig_fun>
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d060      	beq.n	8005b88 <__gethex+0x130>
 8005ac6:	4633      	mov	r3, r6
 8005ac8:	7818      	ldrb	r0, [r3, #0]
 8005aca:	461f      	mov	r7, r3
 8005acc:	2830      	cmp	r0, #48	; 0x30
 8005ace:	f103 0301 	add.w	r3, r3, #1
 8005ad2:	d0f9      	beq.n	8005ac8 <__gethex+0x70>
 8005ad4:	f7ff ffab 	bl	8005a2e <__hexdig_fun>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	fab0 f480 	clz	r4, r0
 8005ade:	4635      	mov	r5, r6
 8005ae0:	0964      	lsrs	r4, r4, #5
 8005ae2:	9301      	str	r3, [sp, #4]
 8005ae4:	463a      	mov	r2, r7
 8005ae6:	4616      	mov	r6, r2
 8005ae8:	7830      	ldrb	r0, [r6, #0]
 8005aea:	3201      	adds	r2, #1
 8005aec:	f7ff ff9f 	bl	8005a2e <__hexdig_fun>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	d1f8      	bne.n	8005ae6 <__gethex+0x8e>
 8005af4:	4652      	mov	r2, sl
 8005af6:	4630      	mov	r0, r6
 8005af8:	9903      	ldr	r1, [sp, #12]
 8005afa:	f001 f841 	bl	8006b80 <strncmp>
 8005afe:	b980      	cbnz	r0, 8005b22 <__gethex+0xca>
 8005b00:	b94d      	cbnz	r5, 8005b16 <__gethex+0xbe>
 8005b02:	eb06 050a 	add.w	r5, r6, sl
 8005b06:	462a      	mov	r2, r5
 8005b08:	4616      	mov	r6, r2
 8005b0a:	7830      	ldrb	r0, [r6, #0]
 8005b0c:	3201      	adds	r2, #1
 8005b0e:	f7ff ff8e 	bl	8005a2e <__hexdig_fun>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d1f8      	bne.n	8005b08 <__gethex+0xb0>
 8005b16:	1bad      	subs	r5, r5, r6
 8005b18:	00ad      	lsls	r5, r5, #2
 8005b1a:	e004      	b.n	8005b26 <__gethex+0xce>
 8005b1c:	2400      	movs	r4, #0
 8005b1e:	4625      	mov	r5, r4
 8005b20:	e7e0      	b.n	8005ae4 <__gethex+0x8c>
 8005b22:	2d00      	cmp	r5, #0
 8005b24:	d1f7      	bne.n	8005b16 <__gethex+0xbe>
 8005b26:	7833      	ldrb	r3, [r6, #0]
 8005b28:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005b2c:	2b50      	cmp	r3, #80	; 0x50
 8005b2e:	d139      	bne.n	8005ba4 <__gethex+0x14c>
 8005b30:	7873      	ldrb	r3, [r6, #1]
 8005b32:	2b2b      	cmp	r3, #43	; 0x2b
 8005b34:	d02a      	beq.n	8005b8c <__gethex+0x134>
 8005b36:	2b2d      	cmp	r3, #45	; 0x2d
 8005b38:	d02c      	beq.n	8005b94 <__gethex+0x13c>
 8005b3a:	f04f 0900 	mov.w	r9, #0
 8005b3e:	1c71      	adds	r1, r6, #1
 8005b40:	7808      	ldrb	r0, [r1, #0]
 8005b42:	f7ff ff74 	bl	8005a2e <__hexdig_fun>
 8005b46:	1e43      	subs	r3, r0, #1
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b18      	cmp	r3, #24
 8005b4c:	d82a      	bhi.n	8005ba4 <__gethex+0x14c>
 8005b4e:	f1a0 0210 	sub.w	r2, r0, #16
 8005b52:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005b56:	f7ff ff6a 	bl	8005a2e <__hexdig_fun>
 8005b5a:	1e43      	subs	r3, r0, #1
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b18      	cmp	r3, #24
 8005b60:	d91b      	bls.n	8005b9a <__gethex+0x142>
 8005b62:	f1b9 0f00 	cmp.w	r9, #0
 8005b66:	d000      	beq.n	8005b6a <__gethex+0x112>
 8005b68:	4252      	negs	r2, r2
 8005b6a:	4415      	add	r5, r2
 8005b6c:	f8cb 1000 	str.w	r1, [fp]
 8005b70:	b1d4      	cbz	r4, 8005ba8 <__gethex+0x150>
 8005b72:	9b01      	ldr	r3, [sp, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	bf14      	ite	ne
 8005b78:	2700      	movne	r7, #0
 8005b7a:	2706      	moveq	r7, #6
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	b00b      	add	sp, #44	; 0x2c
 8005b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b84:	463e      	mov	r6, r7
 8005b86:	4625      	mov	r5, r4
 8005b88:	2401      	movs	r4, #1
 8005b8a:	e7cc      	b.n	8005b26 <__gethex+0xce>
 8005b8c:	f04f 0900 	mov.w	r9, #0
 8005b90:	1cb1      	adds	r1, r6, #2
 8005b92:	e7d5      	b.n	8005b40 <__gethex+0xe8>
 8005b94:	f04f 0901 	mov.w	r9, #1
 8005b98:	e7fa      	b.n	8005b90 <__gethex+0x138>
 8005b9a:	230a      	movs	r3, #10
 8005b9c:	fb03 0202 	mla	r2, r3, r2, r0
 8005ba0:	3a10      	subs	r2, #16
 8005ba2:	e7d6      	b.n	8005b52 <__gethex+0xfa>
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	e7e1      	b.n	8005b6c <__gethex+0x114>
 8005ba8:	4621      	mov	r1, r4
 8005baa:	1bf3      	subs	r3, r6, r7
 8005bac:	3b01      	subs	r3, #1
 8005bae:	2b07      	cmp	r3, #7
 8005bb0:	dc0a      	bgt.n	8005bc8 <__gethex+0x170>
 8005bb2:	9802      	ldr	r0, [sp, #8]
 8005bb4:	f000 fa6e 	bl	8006094 <_Balloc>
 8005bb8:	4604      	mov	r4, r0
 8005bba:	b940      	cbnz	r0, 8005bce <__gethex+0x176>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	21de      	movs	r1, #222	; 0xde
 8005bc0:	4b5b      	ldr	r3, [pc, #364]	; (8005d30 <__gethex+0x2d8>)
 8005bc2:	485c      	ldr	r0, [pc, #368]	; (8005d34 <__gethex+0x2dc>)
 8005bc4:	f000 fffe 	bl	8006bc4 <__assert_func>
 8005bc8:	3101      	adds	r1, #1
 8005bca:	105b      	asrs	r3, r3, #1
 8005bcc:	e7ef      	b.n	8005bae <__gethex+0x156>
 8005bce:	f04f 0b00 	mov.w	fp, #0
 8005bd2:	f100 0914 	add.w	r9, r0, #20
 8005bd6:	f1ca 0301 	rsb	r3, sl, #1
 8005bda:	f8cd 9010 	str.w	r9, [sp, #16]
 8005bde:	f8cd b004 	str.w	fp, [sp, #4]
 8005be2:	9308      	str	r3, [sp, #32]
 8005be4:	42b7      	cmp	r7, r6
 8005be6:	d33f      	bcc.n	8005c68 <__gethex+0x210>
 8005be8:	9f04      	ldr	r7, [sp, #16]
 8005bea:	9b01      	ldr	r3, [sp, #4]
 8005bec:	f847 3b04 	str.w	r3, [r7], #4
 8005bf0:	eba7 0709 	sub.w	r7, r7, r9
 8005bf4:	10bf      	asrs	r7, r7, #2
 8005bf6:	6127      	str	r7, [r4, #16]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fb3d 	bl	8006278 <__hi0bits>
 8005bfe:	017f      	lsls	r7, r7, #5
 8005c00:	f8d8 6000 	ldr.w	r6, [r8]
 8005c04:	1a3f      	subs	r7, r7, r0
 8005c06:	42b7      	cmp	r7, r6
 8005c08:	dd62      	ble.n	8005cd0 <__gethex+0x278>
 8005c0a:	1bbf      	subs	r7, r7, r6
 8005c0c:	4639      	mov	r1, r7
 8005c0e:	4620      	mov	r0, r4
 8005c10:	f000 fed7 	bl	80069c2 <__any_on>
 8005c14:	4682      	mov	sl, r0
 8005c16:	b1a8      	cbz	r0, 8005c44 <__gethex+0x1ec>
 8005c18:	f04f 0a01 	mov.w	sl, #1
 8005c1c:	1e7b      	subs	r3, r7, #1
 8005c1e:	1159      	asrs	r1, r3, #5
 8005c20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005c24:	f003 021f 	and.w	r2, r3, #31
 8005c28:	fa0a f202 	lsl.w	r2, sl, r2
 8005c2c:	420a      	tst	r2, r1
 8005c2e:	d009      	beq.n	8005c44 <__gethex+0x1ec>
 8005c30:	4553      	cmp	r3, sl
 8005c32:	dd05      	ble.n	8005c40 <__gethex+0x1e8>
 8005c34:	4620      	mov	r0, r4
 8005c36:	1eb9      	subs	r1, r7, #2
 8005c38:	f000 fec3 	bl	80069c2 <__any_on>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	d144      	bne.n	8005cca <__gethex+0x272>
 8005c40:	f04f 0a02 	mov.w	sl, #2
 8005c44:	4639      	mov	r1, r7
 8005c46:	4620      	mov	r0, r4
 8005c48:	f7ff fe9e 	bl	8005988 <rshift>
 8005c4c:	443d      	add	r5, r7
 8005c4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c52:	42ab      	cmp	r3, r5
 8005c54:	da4a      	bge.n	8005cec <__gethex+0x294>
 8005c56:	4621      	mov	r1, r4
 8005c58:	9802      	ldr	r0, [sp, #8]
 8005c5a:	f000 fa5b 	bl	8006114 <_Bfree>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005c62:	27a3      	movs	r7, #163	; 0xa3
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	e789      	b.n	8005b7c <__gethex+0x124>
 8005c68:	1e73      	subs	r3, r6, #1
 8005c6a:	9a06      	ldr	r2, [sp, #24]
 8005c6c:	9307      	str	r3, [sp, #28]
 8005c6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d019      	beq.n	8005caa <__gethex+0x252>
 8005c76:	f1bb 0f20 	cmp.w	fp, #32
 8005c7a:	d107      	bne.n	8005c8c <__gethex+0x234>
 8005c7c:	9b04      	ldr	r3, [sp, #16]
 8005c7e:	9a01      	ldr	r2, [sp, #4]
 8005c80:	f843 2b04 	str.w	r2, [r3], #4
 8005c84:	9304      	str	r3, [sp, #16]
 8005c86:	2300      	movs	r3, #0
 8005c88:	469b      	mov	fp, r3
 8005c8a:	9301      	str	r3, [sp, #4]
 8005c8c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005c90:	f7ff fecd 	bl	8005a2e <__hexdig_fun>
 8005c94:	9b01      	ldr	r3, [sp, #4]
 8005c96:	f000 000f 	and.w	r0, r0, #15
 8005c9a:	fa00 f00b 	lsl.w	r0, r0, fp
 8005c9e:	4303      	orrs	r3, r0
 8005ca0:	9301      	str	r3, [sp, #4]
 8005ca2:	f10b 0b04 	add.w	fp, fp, #4
 8005ca6:	9b07      	ldr	r3, [sp, #28]
 8005ca8:	e00d      	b.n	8005cc6 <__gethex+0x26e>
 8005caa:	9a08      	ldr	r2, [sp, #32]
 8005cac:	1e73      	subs	r3, r6, #1
 8005cae:	4413      	add	r3, r2
 8005cb0:	42bb      	cmp	r3, r7
 8005cb2:	d3e0      	bcc.n	8005c76 <__gethex+0x21e>
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	4652      	mov	r2, sl
 8005cb8:	9903      	ldr	r1, [sp, #12]
 8005cba:	9309      	str	r3, [sp, #36]	; 0x24
 8005cbc:	f000 ff60 	bl	8006b80 <strncmp>
 8005cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d1d7      	bne.n	8005c76 <__gethex+0x21e>
 8005cc6:	461e      	mov	r6, r3
 8005cc8:	e78c      	b.n	8005be4 <__gethex+0x18c>
 8005cca:	f04f 0a03 	mov.w	sl, #3
 8005cce:	e7b9      	b.n	8005c44 <__gethex+0x1ec>
 8005cd0:	da09      	bge.n	8005ce6 <__gethex+0x28e>
 8005cd2:	1bf7      	subs	r7, r6, r7
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	463a      	mov	r2, r7
 8005cd8:	9802      	ldr	r0, [sp, #8]
 8005cda:	f000 fc33 	bl	8006544 <__lshift>
 8005cde:	4604      	mov	r4, r0
 8005ce0:	1bed      	subs	r5, r5, r7
 8005ce2:	f100 0914 	add.w	r9, r0, #20
 8005ce6:	f04f 0a00 	mov.w	sl, #0
 8005cea:	e7b0      	b.n	8005c4e <__gethex+0x1f6>
 8005cec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005cf0:	42a8      	cmp	r0, r5
 8005cf2:	dd72      	ble.n	8005dda <__gethex+0x382>
 8005cf4:	1b45      	subs	r5, r0, r5
 8005cf6:	42ae      	cmp	r6, r5
 8005cf8:	dc35      	bgt.n	8005d66 <__gethex+0x30e>
 8005cfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d029      	beq.n	8005d56 <__gethex+0x2fe>
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d02b      	beq.n	8005d5e <__gethex+0x306>
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d11c      	bne.n	8005d44 <__gethex+0x2ec>
 8005d0a:	42ae      	cmp	r6, r5
 8005d0c:	d11a      	bne.n	8005d44 <__gethex+0x2ec>
 8005d0e:	2e01      	cmp	r6, #1
 8005d10:	d112      	bne.n	8005d38 <__gethex+0x2e0>
 8005d12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005d16:	9a05      	ldr	r2, [sp, #20]
 8005d18:	2762      	movs	r7, #98	; 0x62
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	6123      	str	r3, [r4, #16]
 8005d20:	f8c9 3000 	str.w	r3, [r9]
 8005d24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d26:	601c      	str	r4, [r3, #0]
 8005d28:	e728      	b.n	8005b7c <__gethex+0x124>
 8005d2a:	bf00      	nop
 8005d2c:	08007bb0 	.word	0x08007bb0
 8005d30:	08007b38 	.word	0x08007b38
 8005d34:	08007b49 	.word	0x08007b49
 8005d38:	4620      	mov	r0, r4
 8005d3a:	1e71      	subs	r1, r6, #1
 8005d3c:	f000 fe41 	bl	80069c2 <__any_on>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d1e6      	bne.n	8005d12 <__gethex+0x2ba>
 8005d44:	4621      	mov	r1, r4
 8005d46:	9802      	ldr	r0, [sp, #8]
 8005d48:	f000 f9e4 	bl	8006114 <_Bfree>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005d50:	2750      	movs	r7, #80	; 0x50
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	e712      	b.n	8005b7c <__gethex+0x124>
 8005d56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1f3      	bne.n	8005d44 <__gethex+0x2ec>
 8005d5c:	e7d9      	b.n	8005d12 <__gethex+0x2ba>
 8005d5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1d6      	bne.n	8005d12 <__gethex+0x2ba>
 8005d64:	e7ee      	b.n	8005d44 <__gethex+0x2ec>
 8005d66:	1e6f      	subs	r7, r5, #1
 8005d68:	f1ba 0f00 	cmp.w	sl, #0
 8005d6c:	d132      	bne.n	8005dd4 <__gethex+0x37c>
 8005d6e:	b127      	cbz	r7, 8005d7a <__gethex+0x322>
 8005d70:	4639      	mov	r1, r7
 8005d72:	4620      	mov	r0, r4
 8005d74:	f000 fe25 	bl	80069c2 <__any_on>
 8005d78:	4682      	mov	sl, r0
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	117b      	asrs	r3, r7, #5
 8005d7e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005d82:	f007 071f 	and.w	r7, r7, #31
 8005d86:	fa01 f707 	lsl.w	r7, r1, r7
 8005d8a:	421f      	tst	r7, r3
 8005d8c:	f04f 0702 	mov.w	r7, #2
 8005d90:	4629      	mov	r1, r5
 8005d92:	4620      	mov	r0, r4
 8005d94:	bf18      	it	ne
 8005d96:	f04a 0a02 	orrne.w	sl, sl, #2
 8005d9a:	1b76      	subs	r6, r6, r5
 8005d9c:	f7ff fdf4 	bl	8005988 <rshift>
 8005da0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005da4:	f1ba 0f00 	cmp.w	sl, #0
 8005da8:	d048      	beq.n	8005e3c <__gethex+0x3e4>
 8005daa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d015      	beq.n	8005dde <__gethex+0x386>
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d017      	beq.n	8005de6 <__gethex+0x38e>
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d109      	bne.n	8005dce <__gethex+0x376>
 8005dba:	f01a 0f02 	tst.w	sl, #2
 8005dbe:	d006      	beq.n	8005dce <__gethex+0x376>
 8005dc0:	f8d9 0000 	ldr.w	r0, [r9]
 8005dc4:	ea4a 0a00 	orr.w	sl, sl, r0
 8005dc8:	f01a 0f01 	tst.w	sl, #1
 8005dcc:	d10e      	bne.n	8005dec <__gethex+0x394>
 8005dce:	f047 0710 	orr.w	r7, r7, #16
 8005dd2:	e033      	b.n	8005e3c <__gethex+0x3e4>
 8005dd4:	f04f 0a01 	mov.w	sl, #1
 8005dd8:	e7cf      	b.n	8005d7a <__gethex+0x322>
 8005dda:	2701      	movs	r7, #1
 8005ddc:	e7e2      	b.n	8005da4 <__gethex+0x34c>
 8005dde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005de0:	f1c3 0301 	rsb	r3, r3, #1
 8005de4:	9315      	str	r3, [sp, #84]	; 0x54
 8005de6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0f0      	beq.n	8005dce <__gethex+0x376>
 8005dec:	f04f 0c00 	mov.w	ip, #0
 8005df0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005df4:	f104 0314 	add.w	r3, r4, #20
 8005df8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005dfc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e06:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005e0a:	d01c      	beq.n	8005e46 <__gethex+0x3ee>
 8005e0c:	3201      	adds	r2, #1
 8005e0e:	6002      	str	r2, [r0, #0]
 8005e10:	2f02      	cmp	r7, #2
 8005e12:	f104 0314 	add.w	r3, r4, #20
 8005e16:	d13d      	bne.n	8005e94 <__gethex+0x43c>
 8005e18:	f8d8 2000 	ldr.w	r2, [r8]
 8005e1c:	3a01      	subs	r2, #1
 8005e1e:	42b2      	cmp	r2, r6
 8005e20:	d10a      	bne.n	8005e38 <__gethex+0x3e0>
 8005e22:	2201      	movs	r2, #1
 8005e24:	1171      	asrs	r1, r6, #5
 8005e26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005e2a:	f006 061f 	and.w	r6, r6, #31
 8005e2e:	fa02 f606 	lsl.w	r6, r2, r6
 8005e32:	421e      	tst	r6, r3
 8005e34:	bf18      	it	ne
 8005e36:	4617      	movne	r7, r2
 8005e38:	f047 0720 	orr.w	r7, r7, #32
 8005e3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e3e:	601c      	str	r4, [r3, #0]
 8005e40:	9b05      	ldr	r3, [sp, #20]
 8005e42:	601d      	str	r5, [r3, #0]
 8005e44:	e69a      	b.n	8005b7c <__gethex+0x124>
 8005e46:	4299      	cmp	r1, r3
 8005e48:	f843 cc04 	str.w	ip, [r3, #-4]
 8005e4c:	d8d8      	bhi.n	8005e00 <__gethex+0x3a8>
 8005e4e:	68a3      	ldr	r3, [r4, #8]
 8005e50:	459b      	cmp	fp, r3
 8005e52:	db17      	blt.n	8005e84 <__gethex+0x42c>
 8005e54:	6861      	ldr	r1, [r4, #4]
 8005e56:	9802      	ldr	r0, [sp, #8]
 8005e58:	3101      	adds	r1, #1
 8005e5a:	f000 f91b 	bl	8006094 <_Balloc>
 8005e5e:	4681      	mov	r9, r0
 8005e60:	b918      	cbnz	r0, 8005e6a <__gethex+0x412>
 8005e62:	4602      	mov	r2, r0
 8005e64:	2184      	movs	r1, #132	; 0x84
 8005e66:	4b19      	ldr	r3, [pc, #100]	; (8005ecc <__gethex+0x474>)
 8005e68:	e6ab      	b.n	8005bc2 <__gethex+0x16a>
 8005e6a:	6922      	ldr	r2, [r4, #16]
 8005e6c:	f104 010c 	add.w	r1, r4, #12
 8005e70:	3202      	adds	r2, #2
 8005e72:	0092      	lsls	r2, r2, #2
 8005e74:	300c      	adds	r0, #12
 8005e76:	f000 f8ff 	bl	8006078 <memcpy>
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	9802      	ldr	r0, [sp, #8]
 8005e7e:	f000 f949 	bl	8006114 <_Bfree>
 8005e82:	464c      	mov	r4, r9
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	6122      	str	r2, [r4, #16]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e90:	615a      	str	r2, [r3, #20]
 8005e92:	e7bd      	b.n	8005e10 <__gethex+0x3b8>
 8005e94:	6922      	ldr	r2, [r4, #16]
 8005e96:	455a      	cmp	r2, fp
 8005e98:	dd0b      	ble.n	8005eb2 <__gethex+0x45a>
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f7ff fd73 	bl	8005988 <rshift>
 8005ea2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005ea6:	3501      	adds	r5, #1
 8005ea8:	42ab      	cmp	r3, r5
 8005eaa:	f6ff aed4 	blt.w	8005c56 <__gethex+0x1fe>
 8005eae:	2701      	movs	r7, #1
 8005eb0:	e7c2      	b.n	8005e38 <__gethex+0x3e0>
 8005eb2:	f016 061f 	ands.w	r6, r6, #31
 8005eb6:	d0fa      	beq.n	8005eae <__gethex+0x456>
 8005eb8:	4453      	add	r3, sl
 8005eba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005ebe:	f000 f9db 	bl	8006278 <__hi0bits>
 8005ec2:	f1c6 0620 	rsb	r6, r6, #32
 8005ec6:	42b0      	cmp	r0, r6
 8005ec8:	dbe7      	blt.n	8005e9a <__gethex+0x442>
 8005eca:	e7f0      	b.n	8005eae <__gethex+0x456>
 8005ecc:	08007b38 	.word	0x08007b38

08005ed0 <L_shift>:
 8005ed0:	f1c2 0208 	rsb	r2, r2, #8
 8005ed4:	0092      	lsls	r2, r2, #2
 8005ed6:	b570      	push	{r4, r5, r6, lr}
 8005ed8:	f1c2 0620 	rsb	r6, r2, #32
 8005edc:	6843      	ldr	r3, [r0, #4]
 8005ede:	6804      	ldr	r4, [r0, #0]
 8005ee0:	fa03 f506 	lsl.w	r5, r3, r6
 8005ee4:	432c      	orrs	r4, r5
 8005ee6:	40d3      	lsrs	r3, r2
 8005ee8:	6004      	str	r4, [r0, #0]
 8005eea:	f840 3f04 	str.w	r3, [r0, #4]!
 8005eee:	4288      	cmp	r0, r1
 8005ef0:	d3f4      	bcc.n	8005edc <L_shift+0xc>
 8005ef2:	bd70      	pop	{r4, r5, r6, pc}

08005ef4 <__match>:
 8005ef4:	b530      	push	{r4, r5, lr}
 8005ef6:	6803      	ldr	r3, [r0, #0]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005efe:	b914      	cbnz	r4, 8005f06 <__match+0x12>
 8005f00:	6003      	str	r3, [r0, #0]
 8005f02:	2001      	movs	r0, #1
 8005f04:	bd30      	pop	{r4, r5, pc}
 8005f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005f0e:	2d19      	cmp	r5, #25
 8005f10:	bf98      	it	ls
 8005f12:	3220      	addls	r2, #32
 8005f14:	42a2      	cmp	r2, r4
 8005f16:	d0f0      	beq.n	8005efa <__match+0x6>
 8005f18:	2000      	movs	r0, #0
 8005f1a:	e7f3      	b.n	8005f04 <__match+0x10>

08005f1c <__hexnan>:
 8005f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f20:	2500      	movs	r5, #0
 8005f22:	680b      	ldr	r3, [r1, #0]
 8005f24:	4682      	mov	sl, r0
 8005f26:	115e      	asrs	r6, r3, #5
 8005f28:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005f2c:	f013 031f 	ands.w	r3, r3, #31
 8005f30:	bf18      	it	ne
 8005f32:	3604      	addne	r6, #4
 8005f34:	1f37      	subs	r7, r6, #4
 8005f36:	46b9      	mov	r9, r7
 8005f38:	463c      	mov	r4, r7
 8005f3a:	46ab      	mov	fp, r5
 8005f3c:	b087      	sub	sp, #28
 8005f3e:	4690      	mov	r8, r2
 8005f40:	6802      	ldr	r2, [r0, #0]
 8005f42:	9301      	str	r3, [sp, #4]
 8005f44:	f846 5c04 	str.w	r5, [r6, #-4]
 8005f48:	9502      	str	r5, [sp, #8]
 8005f4a:	7851      	ldrb	r1, [r2, #1]
 8005f4c:	1c53      	adds	r3, r2, #1
 8005f4e:	9303      	str	r3, [sp, #12]
 8005f50:	b341      	cbz	r1, 8005fa4 <__hexnan+0x88>
 8005f52:	4608      	mov	r0, r1
 8005f54:	9205      	str	r2, [sp, #20]
 8005f56:	9104      	str	r1, [sp, #16]
 8005f58:	f7ff fd69 	bl	8005a2e <__hexdig_fun>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	d14f      	bne.n	8006000 <__hexnan+0xe4>
 8005f60:	9904      	ldr	r1, [sp, #16]
 8005f62:	9a05      	ldr	r2, [sp, #20]
 8005f64:	2920      	cmp	r1, #32
 8005f66:	d818      	bhi.n	8005f9a <__hexnan+0x7e>
 8005f68:	9b02      	ldr	r3, [sp, #8]
 8005f6a:	459b      	cmp	fp, r3
 8005f6c:	dd13      	ble.n	8005f96 <__hexnan+0x7a>
 8005f6e:	454c      	cmp	r4, r9
 8005f70:	d206      	bcs.n	8005f80 <__hexnan+0x64>
 8005f72:	2d07      	cmp	r5, #7
 8005f74:	dc04      	bgt.n	8005f80 <__hexnan+0x64>
 8005f76:	462a      	mov	r2, r5
 8005f78:	4649      	mov	r1, r9
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f7ff ffa8 	bl	8005ed0 <L_shift>
 8005f80:	4544      	cmp	r4, r8
 8005f82:	d950      	bls.n	8006026 <__hexnan+0x10a>
 8005f84:	2300      	movs	r3, #0
 8005f86:	f1a4 0904 	sub.w	r9, r4, #4
 8005f8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8005f8e:	461d      	mov	r5, r3
 8005f90:	464c      	mov	r4, r9
 8005f92:	f8cd b008 	str.w	fp, [sp, #8]
 8005f96:	9a03      	ldr	r2, [sp, #12]
 8005f98:	e7d7      	b.n	8005f4a <__hexnan+0x2e>
 8005f9a:	2929      	cmp	r1, #41	; 0x29
 8005f9c:	d156      	bne.n	800604c <__hexnan+0x130>
 8005f9e:	3202      	adds	r2, #2
 8005fa0:	f8ca 2000 	str.w	r2, [sl]
 8005fa4:	f1bb 0f00 	cmp.w	fp, #0
 8005fa8:	d050      	beq.n	800604c <__hexnan+0x130>
 8005faa:	454c      	cmp	r4, r9
 8005fac:	d206      	bcs.n	8005fbc <__hexnan+0xa0>
 8005fae:	2d07      	cmp	r5, #7
 8005fb0:	dc04      	bgt.n	8005fbc <__hexnan+0xa0>
 8005fb2:	462a      	mov	r2, r5
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f7ff ff8a 	bl	8005ed0 <L_shift>
 8005fbc:	4544      	cmp	r4, r8
 8005fbe:	d934      	bls.n	800602a <__hexnan+0x10e>
 8005fc0:	4623      	mov	r3, r4
 8005fc2:	f1a8 0204 	sub.w	r2, r8, #4
 8005fc6:	f853 1b04 	ldr.w	r1, [r3], #4
 8005fca:	429f      	cmp	r7, r3
 8005fcc:	f842 1f04 	str.w	r1, [r2, #4]!
 8005fd0:	d2f9      	bcs.n	8005fc6 <__hexnan+0xaa>
 8005fd2:	1b3b      	subs	r3, r7, r4
 8005fd4:	f023 0303 	bic.w	r3, r3, #3
 8005fd8:	3304      	adds	r3, #4
 8005fda:	3401      	adds	r4, #1
 8005fdc:	3e03      	subs	r6, #3
 8005fde:	42b4      	cmp	r4, r6
 8005fe0:	bf88      	it	hi
 8005fe2:	2304      	movhi	r3, #4
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	4443      	add	r3, r8
 8005fe8:	f843 2b04 	str.w	r2, [r3], #4
 8005fec:	429f      	cmp	r7, r3
 8005fee:	d2fb      	bcs.n	8005fe8 <__hexnan+0xcc>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	b91b      	cbnz	r3, 8005ffc <__hexnan+0xe0>
 8005ff4:	4547      	cmp	r7, r8
 8005ff6:	d127      	bne.n	8006048 <__hexnan+0x12c>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	603b      	str	r3, [r7, #0]
 8005ffc:	2005      	movs	r0, #5
 8005ffe:	e026      	b.n	800604e <__hexnan+0x132>
 8006000:	3501      	adds	r5, #1
 8006002:	2d08      	cmp	r5, #8
 8006004:	f10b 0b01 	add.w	fp, fp, #1
 8006008:	dd06      	ble.n	8006018 <__hexnan+0xfc>
 800600a:	4544      	cmp	r4, r8
 800600c:	d9c3      	bls.n	8005f96 <__hexnan+0x7a>
 800600e:	2300      	movs	r3, #0
 8006010:	2501      	movs	r5, #1
 8006012:	f844 3c04 	str.w	r3, [r4, #-4]
 8006016:	3c04      	subs	r4, #4
 8006018:	6822      	ldr	r2, [r4, #0]
 800601a:	f000 000f 	and.w	r0, r0, #15
 800601e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006022:	6022      	str	r2, [r4, #0]
 8006024:	e7b7      	b.n	8005f96 <__hexnan+0x7a>
 8006026:	2508      	movs	r5, #8
 8006028:	e7b5      	b.n	8005f96 <__hexnan+0x7a>
 800602a:	9b01      	ldr	r3, [sp, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0df      	beq.n	8005ff0 <__hexnan+0xd4>
 8006030:	f04f 32ff 	mov.w	r2, #4294967295
 8006034:	f1c3 0320 	rsb	r3, r3, #32
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
 800603c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006040:	401a      	ands	r2, r3
 8006042:	f846 2c04 	str.w	r2, [r6, #-4]
 8006046:	e7d3      	b.n	8005ff0 <__hexnan+0xd4>
 8006048:	3f04      	subs	r7, #4
 800604a:	e7d1      	b.n	8005ff0 <__hexnan+0xd4>
 800604c:	2004      	movs	r0, #4
 800604e:	b007      	add	sp, #28
 8006050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006054 <__ascii_mbtowc>:
 8006054:	b082      	sub	sp, #8
 8006056:	b901      	cbnz	r1, 800605a <__ascii_mbtowc+0x6>
 8006058:	a901      	add	r1, sp, #4
 800605a:	b142      	cbz	r2, 800606e <__ascii_mbtowc+0x1a>
 800605c:	b14b      	cbz	r3, 8006072 <__ascii_mbtowc+0x1e>
 800605e:	7813      	ldrb	r3, [r2, #0]
 8006060:	600b      	str	r3, [r1, #0]
 8006062:	7812      	ldrb	r2, [r2, #0]
 8006064:	1e10      	subs	r0, r2, #0
 8006066:	bf18      	it	ne
 8006068:	2001      	movne	r0, #1
 800606a:	b002      	add	sp, #8
 800606c:	4770      	bx	lr
 800606e:	4610      	mov	r0, r2
 8006070:	e7fb      	b.n	800606a <__ascii_mbtowc+0x16>
 8006072:	f06f 0001 	mvn.w	r0, #1
 8006076:	e7f8      	b.n	800606a <__ascii_mbtowc+0x16>

08006078 <memcpy>:
 8006078:	440a      	add	r2, r1
 800607a:	4291      	cmp	r1, r2
 800607c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006080:	d100      	bne.n	8006084 <memcpy+0xc>
 8006082:	4770      	bx	lr
 8006084:	b510      	push	{r4, lr}
 8006086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800608a:	4291      	cmp	r1, r2
 800608c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006090:	d1f9      	bne.n	8006086 <memcpy+0xe>
 8006092:	bd10      	pop	{r4, pc}

08006094 <_Balloc>:
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006098:	4604      	mov	r4, r0
 800609a:	460d      	mov	r5, r1
 800609c:	b976      	cbnz	r6, 80060bc <_Balloc+0x28>
 800609e:	2010      	movs	r0, #16
 80060a0:	f000 fdc0 	bl	8006c24 <malloc>
 80060a4:	4602      	mov	r2, r0
 80060a6:	6260      	str	r0, [r4, #36]	; 0x24
 80060a8:	b920      	cbnz	r0, 80060b4 <_Balloc+0x20>
 80060aa:	2166      	movs	r1, #102	; 0x66
 80060ac:	4b17      	ldr	r3, [pc, #92]	; (800610c <_Balloc+0x78>)
 80060ae:	4818      	ldr	r0, [pc, #96]	; (8006110 <_Balloc+0x7c>)
 80060b0:	f000 fd88 	bl	8006bc4 <__assert_func>
 80060b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060b8:	6006      	str	r6, [r0, #0]
 80060ba:	60c6      	str	r6, [r0, #12]
 80060bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80060be:	68f3      	ldr	r3, [r6, #12]
 80060c0:	b183      	cbz	r3, 80060e4 <_Balloc+0x50>
 80060c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060ca:	b9b8      	cbnz	r0, 80060fc <_Balloc+0x68>
 80060cc:	2101      	movs	r1, #1
 80060ce:	fa01 f605 	lsl.w	r6, r1, r5
 80060d2:	1d72      	adds	r2, r6, #5
 80060d4:	4620      	mov	r0, r4
 80060d6:	0092      	lsls	r2, r2, #2
 80060d8:	f000 fc94 	bl	8006a04 <_calloc_r>
 80060dc:	b160      	cbz	r0, 80060f8 <_Balloc+0x64>
 80060de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060e2:	e00e      	b.n	8006102 <_Balloc+0x6e>
 80060e4:	2221      	movs	r2, #33	; 0x21
 80060e6:	2104      	movs	r1, #4
 80060e8:	4620      	mov	r0, r4
 80060ea:	f000 fc8b 	bl	8006a04 <_calloc_r>
 80060ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060f0:	60f0      	str	r0, [r6, #12]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1e4      	bne.n	80060c2 <_Balloc+0x2e>
 80060f8:	2000      	movs	r0, #0
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	6802      	ldr	r2, [r0, #0]
 80060fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006102:	2300      	movs	r3, #0
 8006104:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006108:	e7f7      	b.n	80060fa <_Balloc+0x66>
 800610a:	bf00      	nop
 800610c:	08007bc4 	.word	0x08007bc4
 8006110:	08007bdb 	.word	0x08007bdb

08006114 <_Bfree>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006118:	4605      	mov	r5, r0
 800611a:	460c      	mov	r4, r1
 800611c:	b976      	cbnz	r6, 800613c <_Bfree+0x28>
 800611e:	2010      	movs	r0, #16
 8006120:	f000 fd80 	bl	8006c24 <malloc>
 8006124:	4602      	mov	r2, r0
 8006126:	6268      	str	r0, [r5, #36]	; 0x24
 8006128:	b920      	cbnz	r0, 8006134 <_Bfree+0x20>
 800612a:	218a      	movs	r1, #138	; 0x8a
 800612c:	4b08      	ldr	r3, [pc, #32]	; (8006150 <_Bfree+0x3c>)
 800612e:	4809      	ldr	r0, [pc, #36]	; (8006154 <_Bfree+0x40>)
 8006130:	f000 fd48 	bl	8006bc4 <__assert_func>
 8006134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006138:	6006      	str	r6, [r0, #0]
 800613a:	60c6      	str	r6, [r0, #12]
 800613c:	b13c      	cbz	r4, 800614e <_Bfree+0x3a>
 800613e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006140:	6862      	ldr	r2, [r4, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006148:	6021      	str	r1, [r4, #0]
 800614a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800614e:	bd70      	pop	{r4, r5, r6, pc}
 8006150:	08007bc4 	.word	0x08007bc4
 8006154:	08007bdb 	.word	0x08007bdb

08006158 <__multadd>:
 8006158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800615c:	4607      	mov	r7, r0
 800615e:	460c      	mov	r4, r1
 8006160:	461e      	mov	r6, r3
 8006162:	2000      	movs	r0, #0
 8006164:	690d      	ldr	r5, [r1, #16]
 8006166:	f101 0c14 	add.w	ip, r1, #20
 800616a:	f8dc 3000 	ldr.w	r3, [ip]
 800616e:	3001      	adds	r0, #1
 8006170:	b299      	uxth	r1, r3
 8006172:	fb02 6101 	mla	r1, r2, r1, r6
 8006176:	0c1e      	lsrs	r6, r3, #16
 8006178:	0c0b      	lsrs	r3, r1, #16
 800617a:	fb02 3306 	mla	r3, r2, r6, r3
 800617e:	b289      	uxth	r1, r1
 8006180:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006184:	4285      	cmp	r5, r0
 8006186:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800618a:	f84c 1b04 	str.w	r1, [ip], #4
 800618e:	dcec      	bgt.n	800616a <__multadd+0x12>
 8006190:	b30e      	cbz	r6, 80061d6 <__multadd+0x7e>
 8006192:	68a3      	ldr	r3, [r4, #8]
 8006194:	42ab      	cmp	r3, r5
 8006196:	dc19      	bgt.n	80061cc <__multadd+0x74>
 8006198:	6861      	ldr	r1, [r4, #4]
 800619a:	4638      	mov	r0, r7
 800619c:	3101      	adds	r1, #1
 800619e:	f7ff ff79 	bl	8006094 <_Balloc>
 80061a2:	4680      	mov	r8, r0
 80061a4:	b928      	cbnz	r0, 80061b2 <__multadd+0x5a>
 80061a6:	4602      	mov	r2, r0
 80061a8:	21b5      	movs	r1, #181	; 0xb5
 80061aa:	4b0c      	ldr	r3, [pc, #48]	; (80061dc <__multadd+0x84>)
 80061ac:	480c      	ldr	r0, [pc, #48]	; (80061e0 <__multadd+0x88>)
 80061ae:	f000 fd09 	bl	8006bc4 <__assert_func>
 80061b2:	6922      	ldr	r2, [r4, #16]
 80061b4:	f104 010c 	add.w	r1, r4, #12
 80061b8:	3202      	adds	r2, #2
 80061ba:	0092      	lsls	r2, r2, #2
 80061bc:	300c      	adds	r0, #12
 80061be:	f7ff ff5b 	bl	8006078 <memcpy>
 80061c2:	4621      	mov	r1, r4
 80061c4:	4638      	mov	r0, r7
 80061c6:	f7ff ffa5 	bl	8006114 <_Bfree>
 80061ca:	4644      	mov	r4, r8
 80061cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061d0:	3501      	adds	r5, #1
 80061d2:	615e      	str	r6, [r3, #20]
 80061d4:	6125      	str	r5, [r4, #16]
 80061d6:	4620      	mov	r0, r4
 80061d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061dc:	08007b38 	.word	0x08007b38
 80061e0:	08007bdb 	.word	0x08007bdb

080061e4 <__s2b>:
 80061e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e8:	4615      	mov	r5, r2
 80061ea:	2209      	movs	r2, #9
 80061ec:	461f      	mov	r7, r3
 80061ee:	3308      	adds	r3, #8
 80061f0:	460c      	mov	r4, r1
 80061f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80061f6:	4606      	mov	r6, r0
 80061f8:	2201      	movs	r2, #1
 80061fa:	2100      	movs	r1, #0
 80061fc:	429a      	cmp	r2, r3
 80061fe:	db09      	blt.n	8006214 <__s2b+0x30>
 8006200:	4630      	mov	r0, r6
 8006202:	f7ff ff47 	bl	8006094 <_Balloc>
 8006206:	b940      	cbnz	r0, 800621a <__s2b+0x36>
 8006208:	4602      	mov	r2, r0
 800620a:	21ce      	movs	r1, #206	; 0xce
 800620c:	4b18      	ldr	r3, [pc, #96]	; (8006270 <__s2b+0x8c>)
 800620e:	4819      	ldr	r0, [pc, #100]	; (8006274 <__s2b+0x90>)
 8006210:	f000 fcd8 	bl	8006bc4 <__assert_func>
 8006214:	0052      	lsls	r2, r2, #1
 8006216:	3101      	adds	r1, #1
 8006218:	e7f0      	b.n	80061fc <__s2b+0x18>
 800621a:	9b08      	ldr	r3, [sp, #32]
 800621c:	2d09      	cmp	r5, #9
 800621e:	6143      	str	r3, [r0, #20]
 8006220:	f04f 0301 	mov.w	r3, #1
 8006224:	6103      	str	r3, [r0, #16]
 8006226:	dd16      	ble.n	8006256 <__s2b+0x72>
 8006228:	f104 0909 	add.w	r9, r4, #9
 800622c:	46c8      	mov	r8, r9
 800622e:	442c      	add	r4, r5
 8006230:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006234:	4601      	mov	r1, r0
 8006236:	220a      	movs	r2, #10
 8006238:	4630      	mov	r0, r6
 800623a:	3b30      	subs	r3, #48	; 0x30
 800623c:	f7ff ff8c 	bl	8006158 <__multadd>
 8006240:	45a0      	cmp	r8, r4
 8006242:	d1f5      	bne.n	8006230 <__s2b+0x4c>
 8006244:	f1a5 0408 	sub.w	r4, r5, #8
 8006248:	444c      	add	r4, r9
 800624a:	1b2d      	subs	r5, r5, r4
 800624c:	1963      	adds	r3, r4, r5
 800624e:	42bb      	cmp	r3, r7
 8006250:	db04      	blt.n	800625c <__s2b+0x78>
 8006252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006256:	2509      	movs	r5, #9
 8006258:	340a      	adds	r4, #10
 800625a:	e7f6      	b.n	800624a <__s2b+0x66>
 800625c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006260:	4601      	mov	r1, r0
 8006262:	220a      	movs	r2, #10
 8006264:	4630      	mov	r0, r6
 8006266:	3b30      	subs	r3, #48	; 0x30
 8006268:	f7ff ff76 	bl	8006158 <__multadd>
 800626c:	e7ee      	b.n	800624c <__s2b+0x68>
 800626e:	bf00      	nop
 8006270:	08007b38 	.word	0x08007b38
 8006274:	08007bdb 	.word	0x08007bdb

08006278 <__hi0bits>:
 8006278:	0c02      	lsrs	r2, r0, #16
 800627a:	0412      	lsls	r2, r2, #16
 800627c:	4603      	mov	r3, r0
 800627e:	b9ca      	cbnz	r2, 80062b4 <__hi0bits+0x3c>
 8006280:	0403      	lsls	r3, r0, #16
 8006282:	2010      	movs	r0, #16
 8006284:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006288:	bf04      	itt	eq
 800628a:	021b      	lsleq	r3, r3, #8
 800628c:	3008      	addeq	r0, #8
 800628e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006292:	bf04      	itt	eq
 8006294:	011b      	lsleq	r3, r3, #4
 8006296:	3004      	addeq	r0, #4
 8006298:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800629c:	bf04      	itt	eq
 800629e:	009b      	lsleq	r3, r3, #2
 80062a0:	3002      	addeq	r0, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	db05      	blt.n	80062b2 <__hi0bits+0x3a>
 80062a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80062aa:	f100 0001 	add.w	r0, r0, #1
 80062ae:	bf08      	it	eq
 80062b0:	2020      	moveq	r0, #32
 80062b2:	4770      	bx	lr
 80062b4:	2000      	movs	r0, #0
 80062b6:	e7e5      	b.n	8006284 <__hi0bits+0xc>

080062b8 <__lo0bits>:
 80062b8:	6803      	ldr	r3, [r0, #0]
 80062ba:	4602      	mov	r2, r0
 80062bc:	f013 0007 	ands.w	r0, r3, #7
 80062c0:	d00b      	beq.n	80062da <__lo0bits+0x22>
 80062c2:	07d9      	lsls	r1, r3, #31
 80062c4:	d421      	bmi.n	800630a <__lo0bits+0x52>
 80062c6:	0798      	lsls	r0, r3, #30
 80062c8:	bf49      	itett	mi
 80062ca:	085b      	lsrmi	r3, r3, #1
 80062cc:	089b      	lsrpl	r3, r3, #2
 80062ce:	2001      	movmi	r0, #1
 80062d0:	6013      	strmi	r3, [r2, #0]
 80062d2:	bf5c      	itt	pl
 80062d4:	2002      	movpl	r0, #2
 80062d6:	6013      	strpl	r3, [r2, #0]
 80062d8:	4770      	bx	lr
 80062da:	b299      	uxth	r1, r3
 80062dc:	b909      	cbnz	r1, 80062e2 <__lo0bits+0x2a>
 80062de:	2010      	movs	r0, #16
 80062e0:	0c1b      	lsrs	r3, r3, #16
 80062e2:	b2d9      	uxtb	r1, r3
 80062e4:	b909      	cbnz	r1, 80062ea <__lo0bits+0x32>
 80062e6:	3008      	adds	r0, #8
 80062e8:	0a1b      	lsrs	r3, r3, #8
 80062ea:	0719      	lsls	r1, r3, #28
 80062ec:	bf04      	itt	eq
 80062ee:	091b      	lsreq	r3, r3, #4
 80062f0:	3004      	addeq	r0, #4
 80062f2:	0799      	lsls	r1, r3, #30
 80062f4:	bf04      	itt	eq
 80062f6:	089b      	lsreq	r3, r3, #2
 80062f8:	3002      	addeq	r0, #2
 80062fa:	07d9      	lsls	r1, r3, #31
 80062fc:	d403      	bmi.n	8006306 <__lo0bits+0x4e>
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	f100 0001 	add.w	r0, r0, #1
 8006304:	d003      	beq.n	800630e <__lo0bits+0x56>
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	4770      	bx	lr
 800630a:	2000      	movs	r0, #0
 800630c:	4770      	bx	lr
 800630e:	2020      	movs	r0, #32
 8006310:	4770      	bx	lr
	...

08006314 <__i2b>:
 8006314:	b510      	push	{r4, lr}
 8006316:	460c      	mov	r4, r1
 8006318:	2101      	movs	r1, #1
 800631a:	f7ff febb 	bl	8006094 <_Balloc>
 800631e:	4602      	mov	r2, r0
 8006320:	b928      	cbnz	r0, 800632e <__i2b+0x1a>
 8006322:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006326:	4b04      	ldr	r3, [pc, #16]	; (8006338 <__i2b+0x24>)
 8006328:	4804      	ldr	r0, [pc, #16]	; (800633c <__i2b+0x28>)
 800632a:	f000 fc4b 	bl	8006bc4 <__assert_func>
 800632e:	2301      	movs	r3, #1
 8006330:	6144      	str	r4, [r0, #20]
 8006332:	6103      	str	r3, [r0, #16]
 8006334:	bd10      	pop	{r4, pc}
 8006336:	bf00      	nop
 8006338:	08007b38 	.word	0x08007b38
 800633c:	08007bdb 	.word	0x08007bdb

08006340 <__multiply>:
 8006340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006344:	4691      	mov	r9, r2
 8006346:	690a      	ldr	r2, [r1, #16]
 8006348:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800634c:	460c      	mov	r4, r1
 800634e:	429a      	cmp	r2, r3
 8006350:	bfbe      	ittt	lt
 8006352:	460b      	movlt	r3, r1
 8006354:	464c      	movlt	r4, r9
 8006356:	4699      	movlt	r9, r3
 8006358:	6927      	ldr	r7, [r4, #16]
 800635a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800635e:	68a3      	ldr	r3, [r4, #8]
 8006360:	6861      	ldr	r1, [r4, #4]
 8006362:	eb07 060a 	add.w	r6, r7, sl
 8006366:	42b3      	cmp	r3, r6
 8006368:	b085      	sub	sp, #20
 800636a:	bfb8      	it	lt
 800636c:	3101      	addlt	r1, #1
 800636e:	f7ff fe91 	bl	8006094 <_Balloc>
 8006372:	b930      	cbnz	r0, 8006382 <__multiply+0x42>
 8006374:	4602      	mov	r2, r0
 8006376:	f240 115d 	movw	r1, #349	; 0x15d
 800637a:	4b43      	ldr	r3, [pc, #268]	; (8006488 <__multiply+0x148>)
 800637c:	4843      	ldr	r0, [pc, #268]	; (800648c <__multiply+0x14c>)
 800637e:	f000 fc21 	bl	8006bc4 <__assert_func>
 8006382:	f100 0514 	add.w	r5, r0, #20
 8006386:	462b      	mov	r3, r5
 8006388:	2200      	movs	r2, #0
 800638a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800638e:	4543      	cmp	r3, r8
 8006390:	d321      	bcc.n	80063d6 <__multiply+0x96>
 8006392:	f104 0314 	add.w	r3, r4, #20
 8006396:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800639a:	f109 0314 	add.w	r3, r9, #20
 800639e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80063a2:	9202      	str	r2, [sp, #8]
 80063a4:	1b3a      	subs	r2, r7, r4
 80063a6:	3a15      	subs	r2, #21
 80063a8:	f022 0203 	bic.w	r2, r2, #3
 80063ac:	3204      	adds	r2, #4
 80063ae:	f104 0115 	add.w	r1, r4, #21
 80063b2:	428f      	cmp	r7, r1
 80063b4:	bf38      	it	cc
 80063b6:	2204      	movcc	r2, #4
 80063b8:	9201      	str	r2, [sp, #4]
 80063ba:	9a02      	ldr	r2, [sp, #8]
 80063bc:	9303      	str	r3, [sp, #12]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d80c      	bhi.n	80063dc <__multiply+0x9c>
 80063c2:	2e00      	cmp	r6, #0
 80063c4:	dd03      	ble.n	80063ce <__multiply+0x8e>
 80063c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d059      	beq.n	8006482 <__multiply+0x142>
 80063ce:	6106      	str	r6, [r0, #16]
 80063d0:	b005      	add	sp, #20
 80063d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d6:	f843 2b04 	str.w	r2, [r3], #4
 80063da:	e7d8      	b.n	800638e <__multiply+0x4e>
 80063dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80063e0:	f1ba 0f00 	cmp.w	sl, #0
 80063e4:	d023      	beq.n	800642e <__multiply+0xee>
 80063e6:	46a9      	mov	r9, r5
 80063e8:	f04f 0c00 	mov.w	ip, #0
 80063ec:	f104 0e14 	add.w	lr, r4, #20
 80063f0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80063f4:	f8d9 1000 	ldr.w	r1, [r9]
 80063f8:	fa1f fb82 	uxth.w	fp, r2
 80063fc:	b289      	uxth	r1, r1
 80063fe:	fb0a 110b 	mla	r1, sl, fp, r1
 8006402:	4461      	add	r1, ip
 8006404:	f8d9 c000 	ldr.w	ip, [r9]
 8006408:	0c12      	lsrs	r2, r2, #16
 800640a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800640e:	fb0a c202 	mla	r2, sl, r2, ip
 8006412:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006416:	b289      	uxth	r1, r1
 8006418:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800641c:	4577      	cmp	r7, lr
 800641e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006422:	f849 1b04 	str.w	r1, [r9], #4
 8006426:	d8e3      	bhi.n	80063f0 <__multiply+0xb0>
 8006428:	9a01      	ldr	r2, [sp, #4]
 800642a:	f845 c002 	str.w	ip, [r5, r2]
 800642e:	9a03      	ldr	r2, [sp, #12]
 8006430:	3304      	adds	r3, #4
 8006432:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006436:	f1b9 0f00 	cmp.w	r9, #0
 800643a:	d020      	beq.n	800647e <__multiply+0x13e>
 800643c:	46ae      	mov	lr, r5
 800643e:	f04f 0a00 	mov.w	sl, #0
 8006442:	6829      	ldr	r1, [r5, #0]
 8006444:	f104 0c14 	add.w	ip, r4, #20
 8006448:	f8bc b000 	ldrh.w	fp, [ip]
 800644c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006450:	b289      	uxth	r1, r1
 8006452:	fb09 220b 	mla	r2, r9, fp, r2
 8006456:	4492      	add	sl, r2
 8006458:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800645c:	f84e 1b04 	str.w	r1, [lr], #4
 8006460:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006464:	f8be 1000 	ldrh.w	r1, [lr]
 8006468:	0c12      	lsrs	r2, r2, #16
 800646a:	fb09 1102 	mla	r1, r9, r2, r1
 800646e:	4567      	cmp	r7, ip
 8006470:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006474:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006478:	d8e6      	bhi.n	8006448 <__multiply+0x108>
 800647a:	9a01      	ldr	r2, [sp, #4]
 800647c:	50a9      	str	r1, [r5, r2]
 800647e:	3504      	adds	r5, #4
 8006480:	e79b      	b.n	80063ba <__multiply+0x7a>
 8006482:	3e01      	subs	r6, #1
 8006484:	e79d      	b.n	80063c2 <__multiply+0x82>
 8006486:	bf00      	nop
 8006488:	08007b38 	.word	0x08007b38
 800648c:	08007bdb 	.word	0x08007bdb

08006490 <__pow5mult>:
 8006490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006494:	4615      	mov	r5, r2
 8006496:	f012 0203 	ands.w	r2, r2, #3
 800649a:	4606      	mov	r6, r0
 800649c:	460f      	mov	r7, r1
 800649e:	d007      	beq.n	80064b0 <__pow5mult+0x20>
 80064a0:	4c25      	ldr	r4, [pc, #148]	; (8006538 <__pow5mult+0xa8>)
 80064a2:	3a01      	subs	r2, #1
 80064a4:	2300      	movs	r3, #0
 80064a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064aa:	f7ff fe55 	bl	8006158 <__multadd>
 80064ae:	4607      	mov	r7, r0
 80064b0:	10ad      	asrs	r5, r5, #2
 80064b2:	d03d      	beq.n	8006530 <__pow5mult+0xa0>
 80064b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80064b6:	b97c      	cbnz	r4, 80064d8 <__pow5mult+0x48>
 80064b8:	2010      	movs	r0, #16
 80064ba:	f000 fbb3 	bl	8006c24 <malloc>
 80064be:	4602      	mov	r2, r0
 80064c0:	6270      	str	r0, [r6, #36]	; 0x24
 80064c2:	b928      	cbnz	r0, 80064d0 <__pow5mult+0x40>
 80064c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80064c8:	4b1c      	ldr	r3, [pc, #112]	; (800653c <__pow5mult+0xac>)
 80064ca:	481d      	ldr	r0, [pc, #116]	; (8006540 <__pow5mult+0xb0>)
 80064cc:	f000 fb7a 	bl	8006bc4 <__assert_func>
 80064d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064d4:	6004      	str	r4, [r0, #0]
 80064d6:	60c4      	str	r4, [r0, #12]
 80064d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80064dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064e0:	b94c      	cbnz	r4, 80064f6 <__pow5mult+0x66>
 80064e2:	f240 2171 	movw	r1, #625	; 0x271
 80064e6:	4630      	mov	r0, r6
 80064e8:	f7ff ff14 	bl	8006314 <__i2b>
 80064ec:	2300      	movs	r3, #0
 80064ee:	4604      	mov	r4, r0
 80064f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80064f4:	6003      	str	r3, [r0, #0]
 80064f6:	f04f 0900 	mov.w	r9, #0
 80064fa:	07eb      	lsls	r3, r5, #31
 80064fc:	d50a      	bpl.n	8006514 <__pow5mult+0x84>
 80064fe:	4639      	mov	r1, r7
 8006500:	4622      	mov	r2, r4
 8006502:	4630      	mov	r0, r6
 8006504:	f7ff ff1c 	bl	8006340 <__multiply>
 8006508:	4680      	mov	r8, r0
 800650a:	4639      	mov	r1, r7
 800650c:	4630      	mov	r0, r6
 800650e:	f7ff fe01 	bl	8006114 <_Bfree>
 8006512:	4647      	mov	r7, r8
 8006514:	106d      	asrs	r5, r5, #1
 8006516:	d00b      	beq.n	8006530 <__pow5mult+0xa0>
 8006518:	6820      	ldr	r0, [r4, #0]
 800651a:	b938      	cbnz	r0, 800652c <__pow5mult+0x9c>
 800651c:	4622      	mov	r2, r4
 800651e:	4621      	mov	r1, r4
 8006520:	4630      	mov	r0, r6
 8006522:	f7ff ff0d 	bl	8006340 <__multiply>
 8006526:	6020      	str	r0, [r4, #0]
 8006528:	f8c0 9000 	str.w	r9, [r0]
 800652c:	4604      	mov	r4, r0
 800652e:	e7e4      	b.n	80064fa <__pow5mult+0x6a>
 8006530:	4638      	mov	r0, r7
 8006532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006536:	bf00      	nop
 8006538:	08007d28 	.word	0x08007d28
 800653c:	08007bc4 	.word	0x08007bc4
 8006540:	08007bdb 	.word	0x08007bdb

08006544 <__lshift>:
 8006544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006548:	460c      	mov	r4, r1
 800654a:	4607      	mov	r7, r0
 800654c:	4691      	mov	r9, r2
 800654e:	6923      	ldr	r3, [r4, #16]
 8006550:	6849      	ldr	r1, [r1, #4]
 8006552:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006556:	68a3      	ldr	r3, [r4, #8]
 8006558:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800655c:	f108 0601 	add.w	r6, r8, #1
 8006560:	42b3      	cmp	r3, r6
 8006562:	db0b      	blt.n	800657c <__lshift+0x38>
 8006564:	4638      	mov	r0, r7
 8006566:	f7ff fd95 	bl	8006094 <_Balloc>
 800656a:	4605      	mov	r5, r0
 800656c:	b948      	cbnz	r0, 8006582 <__lshift+0x3e>
 800656e:	4602      	mov	r2, r0
 8006570:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006574:	4b29      	ldr	r3, [pc, #164]	; (800661c <__lshift+0xd8>)
 8006576:	482a      	ldr	r0, [pc, #168]	; (8006620 <__lshift+0xdc>)
 8006578:	f000 fb24 	bl	8006bc4 <__assert_func>
 800657c:	3101      	adds	r1, #1
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	e7ee      	b.n	8006560 <__lshift+0x1c>
 8006582:	2300      	movs	r3, #0
 8006584:	f100 0114 	add.w	r1, r0, #20
 8006588:	f100 0210 	add.w	r2, r0, #16
 800658c:	4618      	mov	r0, r3
 800658e:	4553      	cmp	r3, sl
 8006590:	db37      	blt.n	8006602 <__lshift+0xbe>
 8006592:	6920      	ldr	r0, [r4, #16]
 8006594:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006598:	f104 0314 	add.w	r3, r4, #20
 800659c:	f019 091f 	ands.w	r9, r9, #31
 80065a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80065a8:	d02f      	beq.n	800660a <__lshift+0xc6>
 80065aa:	468a      	mov	sl, r1
 80065ac:	f04f 0c00 	mov.w	ip, #0
 80065b0:	f1c9 0e20 	rsb	lr, r9, #32
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	fa02 f209 	lsl.w	r2, r2, r9
 80065ba:	ea42 020c 	orr.w	r2, r2, ip
 80065be:	f84a 2b04 	str.w	r2, [sl], #4
 80065c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c6:	4298      	cmp	r0, r3
 80065c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80065cc:	d8f2      	bhi.n	80065b4 <__lshift+0x70>
 80065ce:	1b03      	subs	r3, r0, r4
 80065d0:	3b15      	subs	r3, #21
 80065d2:	f023 0303 	bic.w	r3, r3, #3
 80065d6:	3304      	adds	r3, #4
 80065d8:	f104 0215 	add.w	r2, r4, #21
 80065dc:	4290      	cmp	r0, r2
 80065de:	bf38      	it	cc
 80065e0:	2304      	movcc	r3, #4
 80065e2:	f841 c003 	str.w	ip, [r1, r3]
 80065e6:	f1bc 0f00 	cmp.w	ip, #0
 80065ea:	d001      	beq.n	80065f0 <__lshift+0xac>
 80065ec:	f108 0602 	add.w	r6, r8, #2
 80065f0:	3e01      	subs	r6, #1
 80065f2:	4638      	mov	r0, r7
 80065f4:	4621      	mov	r1, r4
 80065f6:	612e      	str	r6, [r5, #16]
 80065f8:	f7ff fd8c 	bl	8006114 <_Bfree>
 80065fc:	4628      	mov	r0, r5
 80065fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006602:	f842 0f04 	str.w	r0, [r2, #4]!
 8006606:	3301      	adds	r3, #1
 8006608:	e7c1      	b.n	800658e <__lshift+0x4a>
 800660a:	3904      	subs	r1, #4
 800660c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006610:	4298      	cmp	r0, r3
 8006612:	f841 2f04 	str.w	r2, [r1, #4]!
 8006616:	d8f9      	bhi.n	800660c <__lshift+0xc8>
 8006618:	e7ea      	b.n	80065f0 <__lshift+0xac>
 800661a:	bf00      	nop
 800661c:	08007b38 	.word	0x08007b38
 8006620:	08007bdb 	.word	0x08007bdb

08006624 <__mcmp>:
 8006624:	4603      	mov	r3, r0
 8006626:	690a      	ldr	r2, [r1, #16]
 8006628:	6900      	ldr	r0, [r0, #16]
 800662a:	b530      	push	{r4, r5, lr}
 800662c:	1a80      	subs	r0, r0, r2
 800662e:	d10d      	bne.n	800664c <__mcmp+0x28>
 8006630:	3314      	adds	r3, #20
 8006632:	3114      	adds	r1, #20
 8006634:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006638:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800663c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006640:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006644:	4295      	cmp	r5, r2
 8006646:	d002      	beq.n	800664e <__mcmp+0x2a>
 8006648:	d304      	bcc.n	8006654 <__mcmp+0x30>
 800664a:	2001      	movs	r0, #1
 800664c:	bd30      	pop	{r4, r5, pc}
 800664e:	42a3      	cmp	r3, r4
 8006650:	d3f4      	bcc.n	800663c <__mcmp+0x18>
 8006652:	e7fb      	b.n	800664c <__mcmp+0x28>
 8006654:	f04f 30ff 	mov.w	r0, #4294967295
 8006658:	e7f8      	b.n	800664c <__mcmp+0x28>
	...

0800665c <__mdiff>:
 800665c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006660:	460d      	mov	r5, r1
 8006662:	4607      	mov	r7, r0
 8006664:	4611      	mov	r1, r2
 8006666:	4628      	mov	r0, r5
 8006668:	4614      	mov	r4, r2
 800666a:	f7ff ffdb 	bl	8006624 <__mcmp>
 800666e:	1e06      	subs	r6, r0, #0
 8006670:	d111      	bne.n	8006696 <__mdiff+0x3a>
 8006672:	4631      	mov	r1, r6
 8006674:	4638      	mov	r0, r7
 8006676:	f7ff fd0d 	bl	8006094 <_Balloc>
 800667a:	4602      	mov	r2, r0
 800667c:	b928      	cbnz	r0, 800668a <__mdiff+0x2e>
 800667e:	f240 2132 	movw	r1, #562	; 0x232
 8006682:	4b3a      	ldr	r3, [pc, #232]	; (800676c <__mdiff+0x110>)
 8006684:	483a      	ldr	r0, [pc, #232]	; (8006770 <__mdiff+0x114>)
 8006686:	f000 fa9d 	bl	8006bc4 <__assert_func>
 800668a:	2301      	movs	r3, #1
 800668c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006690:	4610      	mov	r0, r2
 8006692:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006696:	bfa4      	itt	ge
 8006698:	4623      	movge	r3, r4
 800669a:	462c      	movge	r4, r5
 800669c:	4638      	mov	r0, r7
 800669e:	6861      	ldr	r1, [r4, #4]
 80066a0:	bfa6      	itte	ge
 80066a2:	461d      	movge	r5, r3
 80066a4:	2600      	movge	r6, #0
 80066a6:	2601      	movlt	r6, #1
 80066a8:	f7ff fcf4 	bl	8006094 <_Balloc>
 80066ac:	4602      	mov	r2, r0
 80066ae:	b918      	cbnz	r0, 80066b8 <__mdiff+0x5c>
 80066b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80066b4:	4b2d      	ldr	r3, [pc, #180]	; (800676c <__mdiff+0x110>)
 80066b6:	e7e5      	b.n	8006684 <__mdiff+0x28>
 80066b8:	f102 0814 	add.w	r8, r2, #20
 80066bc:	46c2      	mov	sl, r8
 80066be:	f04f 0c00 	mov.w	ip, #0
 80066c2:	6927      	ldr	r7, [r4, #16]
 80066c4:	60c6      	str	r6, [r0, #12]
 80066c6:	692e      	ldr	r6, [r5, #16]
 80066c8:	f104 0014 	add.w	r0, r4, #20
 80066cc:	f105 0914 	add.w	r9, r5, #20
 80066d0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80066d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80066d8:	3410      	adds	r4, #16
 80066da:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80066de:	f859 3b04 	ldr.w	r3, [r9], #4
 80066e2:	fa1f f18b 	uxth.w	r1, fp
 80066e6:	448c      	add	ip, r1
 80066e8:	b299      	uxth	r1, r3
 80066ea:	0c1b      	lsrs	r3, r3, #16
 80066ec:	ebac 0101 	sub.w	r1, ip, r1
 80066f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80066f4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80066f8:	b289      	uxth	r1, r1
 80066fa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80066fe:	454e      	cmp	r6, r9
 8006700:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006704:	f84a 3b04 	str.w	r3, [sl], #4
 8006708:	d8e7      	bhi.n	80066da <__mdiff+0x7e>
 800670a:	1b73      	subs	r3, r6, r5
 800670c:	3b15      	subs	r3, #21
 800670e:	f023 0303 	bic.w	r3, r3, #3
 8006712:	3515      	adds	r5, #21
 8006714:	3304      	adds	r3, #4
 8006716:	42ae      	cmp	r6, r5
 8006718:	bf38      	it	cc
 800671a:	2304      	movcc	r3, #4
 800671c:	4418      	add	r0, r3
 800671e:	4443      	add	r3, r8
 8006720:	461e      	mov	r6, r3
 8006722:	4605      	mov	r5, r0
 8006724:	4575      	cmp	r5, lr
 8006726:	d30e      	bcc.n	8006746 <__mdiff+0xea>
 8006728:	f10e 0103 	add.w	r1, lr, #3
 800672c:	1a09      	subs	r1, r1, r0
 800672e:	f021 0103 	bic.w	r1, r1, #3
 8006732:	3803      	subs	r0, #3
 8006734:	4586      	cmp	lr, r0
 8006736:	bf38      	it	cc
 8006738:	2100      	movcc	r1, #0
 800673a:	4419      	add	r1, r3
 800673c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006740:	b18b      	cbz	r3, 8006766 <__mdiff+0x10a>
 8006742:	6117      	str	r7, [r2, #16]
 8006744:	e7a4      	b.n	8006690 <__mdiff+0x34>
 8006746:	f855 8b04 	ldr.w	r8, [r5], #4
 800674a:	fa1f f188 	uxth.w	r1, r8
 800674e:	4461      	add	r1, ip
 8006750:	140c      	asrs	r4, r1, #16
 8006752:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006756:	b289      	uxth	r1, r1
 8006758:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800675c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006760:	f846 1b04 	str.w	r1, [r6], #4
 8006764:	e7de      	b.n	8006724 <__mdiff+0xc8>
 8006766:	3f01      	subs	r7, #1
 8006768:	e7e8      	b.n	800673c <__mdiff+0xe0>
 800676a:	bf00      	nop
 800676c:	08007b38 	.word	0x08007b38
 8006770:	08007bdb 	.word	0x08007bdb

08006774 <__ulp>:
 8006774:	4b11      	ldr	r3, [pc, #68]	; (80067bc <__ulp+0x48>)
 8006776:	400b      	ands	r3, r1
 8006778:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800677c:	2b00      	cmp	r3, #0
 800677e:	dd02      	ble.n	8006786 <__ulp+0x12>
 8006780:	2000      	movs	r0, #0
 8006782:	4619      	mov	r1, r3
 8006784:	4770      	bx	lr
 8006786:	425b      	negs	r3, r3
 8006788:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800678c:	f04f 0000 	mov.w	r0, #0
 8006790:	f04f 0100 	mov.w	r1, #0
 8006794:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006798:	da04      	bge.n	80067a4 <__ulp+0x30>
 800679a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800679e:	fa43 f102 	asr.w	r1, r3, r2
 80067a2:	4770      	bx	lr
 80067a4:	f1a2 0314 	sub.w	r3, r2, #20
 80067a8:	2b1e      	cmp	r3, #30
 80067aa:	bfd6      	itet	le
 80067ac:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80067b0:	2301      	movgt	r3, #1
 80067b2:	fa22 f303 	lsrle.w	r3, r2, r3
 80067b6:	4618      	mov	r0, r3
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	7ff00000 	.word	0x7ff00000

080067c0 <__b2d>:
 80067c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067c4:	6907      	ldr	r7, [r0, #16]
 80067c6:	f100 0914 	add.w	r9, r0, #20
 80067ca:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80067ce:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80067d2:	f1a7 0804 	sub.w	r8, r7, #4
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7ff fd4e 	bl	8006278 <__hi0bits>
 80067dc:	f1c0 0320 	rsb	r3, r0, #32
 80067e0:	280a      	cmp	r0, #10
 80067e2:	600b      	str	r3, [r1, #0]
 80067e4:	491f      	ldr	r1, [pc, #124]	; (8006864 <__b2d+0xa4>)
 80067e6:	dc17      	bgt.n	8006818 <__b2d+0x58>
 80067e8:	45c1      	cmp	r9, r8
 80067ea:	bf28      	it	cs
 80067ec:	2200      	movcs	r2, #0
 80067ee:	f1c0 0c0b 	rsb	ip, r0, #11
 80067f2:	fa26 f30c 	lsr.w	r3, r6, ip
 80067f6:	bf38      	it	cc
 80067f8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80067fc:	ea43 0501 	orr.w	r5, r3, r1
 8006800:	f100 0315 	add.w	r3, r0, #21
 8006804:	fa06 f303 	lsl.w	r3, r6, r3
 8006808:	fa22 f20c 	lsr.w	r2, r2, ip
 800680c:	ea43 0402 	orr.w	r4, r3, r2
 8006810:	4620      	mov	r0, r4
 8006812:	4629      	mov	r1, r5
 8006814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006818:	45c1      	cmp	r9, r8
 800681a:	bf2e      	itee	cs
 800681c:	2200      	movcs	r2, #0
 800681e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006822:	f1a7 0808 	subcc.w	r8, r7, #8
 8006826:	f1b0 030b 	subs.w	r3, r0, #11
 800682a:	d016      	beq.n	800685a <__b2d+0x9a>
 800682c:	f1c3 0720 	rsb	r7, r3, #32
 8006830:	fa22 f107 	lsr.w	r1, r2, r7
 8006834:	45c8      	cmp	r8, r9
 8006836:	fa06 f603 	lsl.w	r6, r6, r3
 800683a:	ea46 0601 	orr.w	r6, r6, r1
 800683e:	bf94      	ite	ls
 8006840:	2100      	movls	r1, #0
 8006842:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006846:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800684a:	fa02 f003 	lsl.w	r0, r2, r3
 800684e:	40f9      	lsrs	r1, r7
 8006850:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006854:	ea40 0401 	orr.w	r4, r0, r1
 8006858:	e7da      	b.n	8006810 <__b2d+0x50>
 800685a:	4614      	mov	r4, r2
 800685c:	ea46 0501 	orr.w	r5, r6, r1
 8006860:	e7d6      	b.n	8006810 <__b2d+0x50>
 8006862:	bf00      	nop
 8006864:	3ff00000 	.word	0x3ff00000

08006868 <__d2b>:
 8006868:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800686c:	2101      	movs	r1, #1
 800686e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006872:	4690      	mov	r8, r2
 8006874:	461d      	mov	r5, r3
 8006876:	f7ff fc0d 	bl	8006094 <_Balloc>
 800687a:	4604      	mov	r4, r0
 800687c:	b930      	cbnz	r0, 800688c <__d2b+0x24>
 800687e:	4602      	mov	r2, r0
 8006880:	f240 310a 	movw	r1, #778	; 0x30a
 8006884:	4b24      	ldr	r3, [pc, #144]	; (8006918 <__d2b+0xb0>)
 8006886:	4825      	ldr	r0, [pc, #148]	; (800691c <__d2b+0xb4>)
 8006888:	f000 f99c 	bl	8006bc4 <__assert_func>
 800688c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006890:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006894:	bb2d      	cbnz	r5, 80068e2 <__d2b+0x7a>
 8006896:	9301      	str	r3, [sp, #4]
 8006898:	f1b8 0300 	subs.w	r3, r8, #0
 800689c:	d026      	beq.n	80068ec <__d2b+0x84>
 800689e:	4668      	mov	r0, sp
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	f7ff fd09 	bl	80062b8 <__lo0bits>
 80068a6:	9900      	ldr	r1, [sp, #0]
 80068a8:	b1f0      	cbz	r0, 80068e8 <__d2b+0x80>
 80068aa:	9a01      	ldr	r2, [sp, #4]
 80068ac:	f1c0 0320 	rsb	r3, r0, #32
 80068b0:	fa02 f303 	lsl.w	r3, r2, r3
 80068b4:	430b      	orrs	r3, r1
 80068b6:	40c2      	lsrs	r2, r0
 80068b8:	6163      	str	r3, [r4, #20]
 80068ba:	9201      	str	r2, [sp, #4]
 80068bc:	9b01      	ldr	r3, [sp, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	bf14      	ite	ne
 80068c2:	2102      	movne	r1, #2
 80068c4:	2101      	moveq	r1, #1
 80068c6:	61a3      	str	r3, [r4, #24]
 80068c8:	6121      	str	r1, [r4, #16]
 80068ca:	b1c5      	cbz	r5, 80068fe <__d2b+0x96>
 80068cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80068d0:	4405      	add	r5, r0
 80068d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068d6:	603d      	str	r5, [r7, #0]
 80068d8:	6030      	str	r0, [r6, #0]
 80068da:	4620      	mov	r0, r4
 80068dc:	b002      	add	sp, #8
 80068de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068e6:	e7d6      	b.n	8006896 <__d2b+0x2e>
 80068e8:	6161      	str	r1, [r4, #20]
 80068ea:	e7e7      	b.n	80068bc <__d2b+0x54>
 80068ec:	a801      	add	r0, sp, #4
 80068ee:	f7ff fce3 	bl	80062b8 <__lo0bits>
 80068f2:	2101      	movs	r1, #1
 80068f4:	9b01      	ldr	r3, [sp, #4]
 80068f6:	6121      	str	r1, [r4, #16]
 80068f8:	6163      	str	r3, [r4, #20]
 80068fa:	3020      	adds	r0, #32
 80068fc:	e7e5      	b.n	80068ca <__d2b+0x62>
 80068fe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006902:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006906:	6038      	str	r0, [r7, #0]
 8006908:	6918      	ldr	r0, [r3, #16]
 800690a:	f7ff fcb5 	bl	8006278 <__hi0bits>
 800690e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006912:	6031      	str	r1, [r6, #0]
 8006914:	e7e1      	b.n	80068da <__d2b+0x72>
 8006916:	bf00      	nop
 8006918:	08007b38 	.word	0x08007b38
 800691c:	08007bdb 	.word	0x08007bdb

08006920 <__ratio>:
 8006920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	4688      	mov	r8, r1
 8006926:	4669      	mov	r1, sp
 8006928:	4681      	mov	r9, r0
 800692a:	f7ff ff49 	bl	80067c0 <__b2d>
 800692e:	460f      	mov	r7, r1
 8006930:	4604      	mov	r4, r0
 8006932:	460d      	mov	r5, r1
 8006934:	4640      	mov	r0, r8
 8006936:	a901      	add	r1, sp, #4
 8006938:	f7ff ff42 	bl	80067c0 <__b2d>
 800693c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006940:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006944:	468b      	mov	fp, r1
 8006946:	eba3 0c02 	sub.w	ip, r3, r2
 800694a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800694e:	1a9b      	subs	r3, r3, r2
 8006950:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006954:	2b00      	cmp	r3, #0
 8006956:	bfd5      	itete	le
 8006958:	460a      	movle	r2, r1
 800695a:	462a      	movgt	r2, r5
 800695c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006960:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006964:	bfd8      	it	le
 8006966:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800696a:	465b      	mov	r3, fp
 800696c:	4602      	mov	r2, r0
 800696e:	4639      	mov	r1, r7
 8006970:	4620      	mov	r0, r4
 8006972:	f7f9 fedb 	bl	800072c <__aeabi_ddiv>
 8006976:	b003      	add	sp, #12
 8006978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800697c <__copybits>:
 800697c:	3901      	subs	r1, #1
 800697e:	b570      	push	{r4, r5, r6, lr}
 8006980:	1149      	asrs	r1, r1, #5
 8006982:	6914      	ldr	r4, [r2, #16]
 8006984:	3101      	adds	r1, #1
 8006986:	f102 0314 	add.w	r3, r2, #20
 800698a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800698e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006992:	1f05      	subs	r5, r0, #4
 8006994:	42a3      	cmp	r3, r4
 8006996:	d30c      	bcc.n	80069b2 <__copybits+0x36>
 8006998:	1aa3      	subs	r3, r4, r2
 800699a:	3b11      	subs	r3, #17
 800699c:	f023 0303 	bic.w	r3, r3, #3
 80069a0:	3211      	adds	r2, #17
 80069a2:	42a2      	cmp	r2, r4
 80069a4:	bf88      	it	hi
 80069a6:	2300      	movhi	r3, #0
 80069a8:	4418      	add	r0, r3
 80069aa:	2300      	movs	r3, #0
 80069ac:	4288      	cmp	r0, r1
 80069ae:	d305      	bcc.n	80069bc <__copybits+0x40>
 80069b0:	bd70      	pop	{r4, r5, r6, pc}
 80069b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80069b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80069ba:	e7eb      	b.n	8006994 <__copybits+0x18>
 80069bc:	f840 3b04 	str.w	r3, [r0], #4
 80069c0:	e7f4      	b.n	80069ac <__copybits+0x30>

080069c2 <__any_on>:
 80069c2:	f100 0214 	add.w	r2, r0, #20
 80069c6:	6900      	ldr	r0, [r0, #16]
 80069c8:	114b      	asrs	r3, r1, #5
 80069ca:	4298      	cmp	r0, r3
 80069cc:	b510      	push	{r4, lr}
 80069ce:	db11      	blt.n	80069f4 <__any_on+0x32>
 80069d0:	dd0a      	ble.n	80069e8 <__any_on+0x26>
 80069d2:	f011 011f 	ands.w	r1, r1, #31
 80069d6:	d007      	beq.n	80069e8 <__any_on+0x26>
 80069d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80069dc:	fa24 f001 	lsr.w	r0, r4, r1
 80069e0:	fa00 f101 	lsl.w	r1, r0, r1
 80069e4:	428c      	cmp	r4, r1
 80069e6:	d10b      	bne.n	8006a00 <__any_on+0x3e>
 80069e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d803      	bhi.n	80069f8 <__any_on+0x36>
 80069f0:	2000      	movs	r0, #0
 80069f2:	bd10      	pop	{r4, pc}
 80069f4:	4603      	mov	r3, r0
 80069f6:	e7f7      	b.n	80069e8 <__any_on+0x26>
 80069f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069fc:	2900      	cmp	r1, #0
 80069fe:	d0f5      	beq.n	80069ec <__any_on+0x2a>
 8006a00:	2001      	movs	r0, #1
 8006a02:	e7f6      	b.n	80069f2 <__any_on+0x30>

08006a04 <_calloc_r>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	fba1 5402 	umull	r5, r4, r1, r2
 8006a0a:	b934      	cbnz	r4, 8006a1a <_calloc_r+0x16>
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	f000 f82d 	bl	8006a6c <_malloc_r>
 8006a12:	4606      	mov	r6, r0
 8006a14:	b928      	cbnz	r0, 8006a22 <_calloc_r+0x1e>
 8006a16:	4630      	mov	r0, r6
 8006a18:	bd70      	pop	{r4, r5, r6, pc}
 8006a1a:	220c      	movs	r2, #12
 8006a1c:	2600      	movs	r6, #0
 8006a1e:	6002      	str	r2, [r0, #0]
 8006a20:	e7f9      	b.n	8006a16 <_calloc_r+0x12>
 8006a22:	462a      	mov	r2, r5
 8006a24:	4621      	mov	r1, r4
 8006a26:	f7fe f991 	bl	8004d4c <memset>
 8006a2a:	e7f4      	b.n	8006a16 <_calloc_r+0x12>

08006a2c <sbrk_aligned>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	4e0e      	ldr	r6, [pc, #56]	; (8006a68 <sbrk_aligned+0x3c>)
 8006a30:	460c      	mov	r4, r1
 8006a32:	6831      	ldr	r1, [r6, #0]
 8006a34:	4605      	mov	r5, r0
 8006a36:	b911      	cbnz	r1, 8006a3e <sbrk_aligned+0x12>
 8006a38:	f000 f892 	bl	8006b60 <_sbrk_r>
 8006a3c:	6030      	str	r0, [r6, #0]
 8006a3e:	4621      	mov	r1, r4
 8006a40:	4628      	mov	r0, r5
 8006a42:	f000 f88d 	bl	8006b60 <_sbrk_r>
 8006a46:	1c43      	adds	r3, r0, #1
 8006a48:	d00a      	beq.n	8006a60 <sbrk_aligned+0x34>
 8006a4a:	1cc4      	adds	r4, r0, #3
 8006a4c:	f024 0403 	bic.w	r4, r4, #3
 8006a50:	42a0      	cmp	r0, r4
 8006a52:	d007      	beq.n	8006a64 <sbrk_aligned+0x38>
 8006a54:	1a21      	subs	r1, r4, r0
 8006a56:	4628      	mov	r0, r5
 8006a58:	f000 f882 	bl	8006b60 <_sbrk_r>
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d101      	bne.n	8006a64 <sbrk_aligned+0x38>
 8006a60:	f04f 34ff 	mov.w	r4, #4294967295
 8006a64:	4620      	mov	r0, r4
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	200002e8 	.word	0x200002e8

08006a6c <_malloc_r>:
 8006a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a70:	1ccd      	adds	r5, r1, #3
 8006a72:	f025 0503 	bic.w	r5, r5, #3
 8006a76:	3508      	adds	r5, #8
 8006a78:	2d0c      	cmp	r5, #12
 8006a7a:	bf38      	it	cc
 8006a7c:	250c      	movcc	r5, #12
 8006a7e:	2d00      	cmp	r5, #0
 8006a80:	4607      	mov	r7, r0
 8006a82:	db01      	blt.n	8006a88 <_malloc_r+0x1c>
 8006a84:	42a9      	cmp	r1, r5
 8006a86:	d905      	bls.n	8006a94 <_malloc_r+0x28>
 8006a88:	230c      	movs	r3, #12
 8006a8a:	2600      	movs	r6, #0
 8006a8c:	603b      	str	r3, [r7, #0]
 8006a8e:	4630      	mov	r0, r6
 8006a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a94:	4e2e      	ldr	r6, [pc, #184]	; (8006b50 <_malloc_r+0xe4>)
 8006a96:	f000 f8cd 	bl	8006c34 <__malloc_lock>
 8006a9a:	6833      	ldr	r3, [r6, #0]
 8006a9c:	461c      	mov	r4, r3
 8006a9e:	bb34      	cbnz	r4, 8006aee <_malloc_r+0x82>
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	f7ff ffc2 	bl	8006a2c <sbrk_aligned>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	4604      	mov	r4, r0
 8006aac:	d14d      	bne.n	8006b4a <_malloc_r+0xde>
 8006aae:	6834      	ldr	r4, [r6, #0]
 8006ab0:	4626      	mov	r6, r4
 8006ab2:	2e00      	cmp	r6, #0
 8006ab4:	d140      	bne.n	8006b38 <_malloc_r+0xcc>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	4631      	mov	r1, r6
 8006aba:	4638      	mov	r0, r7
 8006abc:	eb04 0803 	add.w	r8, r4, r3
 8006ac0:	f000 f84e 	bl	8006b60 <_sbrk_r>
 8006ac4:	4580      	cmp	r8, r0
 8006ac6:	d13a      	bne.n	8006b3e <_malloc_r+0xd2>
 8006ac8:	6821      	ldr	r1, [r4, #0]
 8006aca:	3503      	adds	r5, #3
 8006acc:	1a6d      	subs	r5, r5, r1
 8006ace:	f025 0503 	bic.w	r5, r5, #3
 8006ad2:	3508      	adds	r5, #8
 8006ad4:	2d0c      	cmp	r5, #12
 8006ad6:	bf38      	it	cc
 8006ad8:	250c      	movcc	r5, #12
 8006ada:	4638      	mov	r0, r7
 8006adc:	4629      	mov	r1, r5
 8006ade:	f7ff ffa5 	bl	8006a2c <sbrk_aligned>
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	d02b      	beq.n	8006b3e <_malloc_r+0xd2>
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	442b      	add	r3, r5
 8006aea:	6023      	str	r3, [r4, #0]
 8006aec:	e00e      	b.n	8006b0c <_malloc_r+0xa0>
 8006aee:	6822      	ldr	r2, [r4, #0]
 8006af0:	1b52      	subs	r2, r2, r5
 8006af2:	d41e      	bmi.n	8006b32 <_malloc_r+0xc6>
 8006af4:	2a0b      	cmp	r2, #11
 8006af6:	d916      	bls.n	8006b26 <_malloc_r+0xba>
 8006af8:	1961      	adds	r1, r4, r5
 8006afa:	42a3      	cmp	r3, r4
 8006afc:	6025      	str	r5, [r4, #0]
 8006afe:	bf18      	it	ne
 8006b00:	6059      	strne	r1, [r3, #4]
 8006b02:	6863      	ldr	r3, [r4, #4]
 8006b04:	bf08      	it	eq
 8006b06:	6031      	streq	r1, [r6, #0]
 8006b08:	5162      	str	r2, [r4, r5]
 8006b0a:	604b      	str	r3, [r1, #4]
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	f104 060b 	add.w	r6, r4, #11
 8006b12:	f000 f895 	bl	8006c40 <__malloc_unlock>
 8006b16:	f026 0607 	bic.w	r6, r6, #7
 8006b1a:	1d23      	adds	r3, r4, #4
 8006b1c:	1af2      	subs	r2, r6, r3
 8006b1e:	d0b6      	beq.n	8006a8e <_malloc_r+0x22>
 8006b20:	1b9b      	subs	r3, r3, r6
 8006b22:	50a3      	str	r3, [r4, r2]
 8006b24:	e7b3      	b.n	8006a8e <_malloc_r+0x22>
 8006b26:	6862      	ldr	r2, [r4, #4]
 8006b28:	42a3      	cmp	r3, r4
 8006b2a:	bf0c      	ite	eq
 8006b2c:	6032      	streq	r2, [r6, #0]
 8006b2e:	605a      	strne	r2, [r3, #4]
 8006b30:	e7ec      	b.n	8006b0c <_malloc_r+0xa0>
 8006b32:	4623      	mov	r3, r4
 8006b34:	6864      	ldr	r4, [r4, #4]
 8006b36:	e7b2      	b.n	8006a9e <_malloc_r+0x32>
 8006b38:	4634      	mov	r4, r6
 8006b3a:	6876      	ldr	r6, [r6, #4]
 8006b3c:	e7b9      	b.n	8006ab2 <_malloc_r+0x46>
 8006b3e:	230c      	movs	r3, #12
 8006b40:	4638      	mov	r0, r7
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	f000 f87c 	bl	8006c40 <__malloc_unlock>
 8006b48:	e7a1      	b.n	8006a8e <_malloc_r+0x22>
 8006b4a:	6025      	str	r5, [r4, #0]
 8006b4c:	e7de      	b.n	8006b0c <_malloc_r+0xa0>
 8006b4e:	bf00      	nop
 8006b50:	200002e4 	.word	0x200002e4

08006b54 <nan>:
 8006b54:	2000      	movs	r0, #0
 8006b56:	4901      	ldr	r1, [pc, #4]	; (8006b5c <nan+0x8>)
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	7ff80000 	.word	0x7ff80000

08006b60 <_sbrk_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	2300      	movs	r3, #0
 8006b64:	4d05      	ldr	r5, [pc, #20]	; (8006b7c <_sbrk_r+0x1c>)
 8006b66:	4604      	mov	r4, r0
 8006b68:	4608      	mov	r0, r1
 8006b6a:	602b      	str	r3, [r5, #0]
 8006b6c:	f7fa fdda 	bl	8001724 <_sbrk>
 8006b70:	1c43      	adds	r3, r0, #1
 8006b72:	d102      	bne.n	8006b7a <_sbrk_r+0x1a>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	b103      	cbz	r3, 8006b7a <_sbrk_r+0x1a>
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
 8006b7c:	200002ec 	.word	0x200002ec

08006b80 <strncmp>:
 8006b80:	4603      	mov	r3, r0
 8006b82:	b510      	push	{r4, lr}
 8006b84:	b172      	cbz	r2, 8006ba4 <strncmp+0x24>
 8006b86:	3901      	subs	r1, #1
 8006b88:	1884      	adds	r4, r0, r2
 8006b8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006b8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006b92:	4290      	cmp	r0, r2
 8006b94:	d101      	bne.n	8006b9a <strncmp+0x1a>
 8006b96:	42a3      	cmp	r3, r4
 8006b98:	d101      	bne.n	8006b9e <strncmp+0x1e>
 8006b9a:	1a80      	subs	r0, r0, r2
 8006b9c:	bd10      	pop	{r4, pc}
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d1f3      	bne.n	8006b8a <strncmp+0xa>
 8006ba2:	e7fa      	b.n	8006b9a <strncmp+0x1a>
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	e7f9      	b.n	8006b9c <strncmp+0x1c>

08006ba8 <__ascii_wctomb>:
 8006ba8:	4603      	mov	r3, r0
 8006baa:	4608      	mov	r0, r1
 8006bac:	b141      	cbz	r1, 8006bc0 <__ascii_wctomb+0x18>
 8006bae:	2aff      	cmp	r2, #255	; 0xff
 8006bb0:	d904      	bls.n	8006bbc <__ascii_wctomb+0x14>
 8006bb2:	228a      	movs	r2, #138	; 0x8a
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	4770      	bx	lr
 8006bbc:	2001      	movs	r0, #1
 8006bbe:	700a      	strb	r2, [r1, #0]
 8006bc0:	4770      	bx	lr
	...

08006bc4 <__assert_func>:
 8006bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bc6:	4614      	mov	r4, r2
 8006bc8:	461a      	mov	r2, r3
 8006bca:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <__assert_func+0x2c>)
 8006bcc:	4605      	mov	r5, r0
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68d8      	ldr	r0, [r3, #12]
 8006bd2:	b14c      	cbz	r4, 8006be8 <__assert_func+0x24>
 8006bd4:	4b07      	ldr	r3, [pc, #28]	; (8006bf4 <__assert_func+0x30>)
 8006bd6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bda:	9100      	str	r1, [sp, #0]
 8006bdc:	462b      	mov	r3, r5
 8006bde:	4906      	ldr	r1, [pc, #24]	; (8006bf8 <__assert_func+0x34>)
 8006be0:	f000 f80e 	bl	8006c00 <fiprintf>
 8006be4:	f000 fc28 	bl	8007438 <abort>
 8006be8:	4b04      	ldr	r3, [pc, #16]	; (8006bfc <__assert_func+0x38>)
 8006bea:	461c      	mov	r4, r3
 8006bec:	e7f3      	b.n	8006bd6 <__assert_func+0x12>
 8006bee:	bf00      	nop
 8006bf0:	20000010 	.word	0x20000010
 8006bf4:	08007d34 	.word	0x08007d34
 8006bf8:	08007d41 	.word	0x08007d41
 8006bfc:	08007d6f 	.word	0x08007d6f

08006c00 <fiprintf>:
 8006c00:	b40e      	push	{r1, r2, r3}
 8006c02:	b503      	push	{r0, r1, lr}
 8006c04:	4601      	mov	r1, r0
 8006c06:	ab03      	add	r3, sp, #12
 8006c08:	4805      	ldr	r0, [pc, #20]	; (8006c20 <fiprintf+0x20>)
 8006c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c0e:	6800      	ldr	r0, [r0, #0]
 8006c10:	9301      	str	r3, [sp, #4]
 8006c12:	f000 f88b 	bl	8006d2c <_vfiprintf_r>
 8006c16:	b002      	add	sp, #8
 8006c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c1c:	b003      	add	sp, #12
 8006c1e:	4770      	bx	lr
 8006c20:	20000010 	.word	0x20000010

08006c24 <malloc>:
 8006c24:	4b02      	ldr	r3, [pc, #8]	; (8006c30 <malloc+0xc>)
 8006c26:	4601      	mov	r1, r0
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	f7ff bf1f 	b.w	8006a6c <_malloc_r>
 8006c2e:	bf00      	nop
 8006c30:	20000010 	.word	0x20000010

08006c34 <__malloc_lock>:
 8006c34:	4801      	ldr	r0, [pc, #4]	; (8006c3c <__malloc_lock+0x8>)
 8006c36:	f000 bdbb 	b.w	80077b0 <__retarget_lock_acquire_recursive>
 8006c3a:	bf00      	nop
 8006c3c:	200002f0 	.word	0x200002f0

08006c40 <__malloc_unlock>:
 8006c40:	4801      	ldr	r0, [pc, #4]	; (8006c48 <__malloc_unlock+0x8>)
 8006c42:	f000 bdb6 	b.w	80077b2 <__retarget_lock_release_recursive>
 8006c46:	bf00      	nop
 8006c48:	200002f0 	.word	0x200002f0

08006c4c <_free_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	4605      	mov	r5, r0
 8006c50:	2900      	cmp	r1, #0
 8006c52:	d040      	beq.n	8006cd6 <_free_r+0x8a>
 8006c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c58:	1f0c      	subs	r4, r1, #4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	bfb8      	it	lt
 8006c5e:	18e4      	addlt	r4, r4, r3
 8006c60:	f7ff ffe8 	bl	8006c34 <__malloc_lock>
 8006c64:	4a1c      	ldr	r2, [pc, #112]	; (8006cd8 <_free_r+0x8c>)
 8006c66:	6813      	ldr	r3, [r2, #0]
 8006c68:	b933      	cbnz	r3, 8006c78 <_free_r+0x2c>
 8006c6a:	6063      	str	r3, [r4, #4]
 8006c6c:	6014      	str	r4, [r2, #0]
 8006c6e:	4628      	mov	r0, r5
 8006c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c74:	f7ff bfe4 	b.w	8006c40 <__malloc_unlock>
 8006c78:	42a3      	cmp	r3, r4
 8006c7a:	d908      	bls.n	8006c8e <_free_r+0x42>
 8006c7c:	6820      	ldr	r0, [r4, #0]
 8006c7e:	1821      	adds	r1, r4, r0
 8006c80:	428b      	cmp	r3, r1
 8006c82:	bf01      	itttt	eq
 8006c84:	6819      	ldreq	r1, [r3, #0]
 8006c86:	685b      	ldreq	r3, [r3, #4]
 8006c88:	1809      	addeq	r1, r1, r0
 8006c8a:	6021      	streq	r1, [r4, #0]
 8006c8c:	e7ed      	b.n	8006c6a <_free_r+0x1e>
 8006c8e:	461a      	mov	r2, r3
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	b10b      	cbz	r3, 8006c98 <_free_r+0x4c>
 8006c94:	42a3      	cmp	r3, r4
 8006c96:	d9fa      	bls.n	8006c8e <_free_r+0x42>
 8006c98:	6811      	ldr	r1, [r2, #0]
 8006c9a:	1850      	adds	r0, r2, r1
 8006c9c:	42a0      	cmp	r0, r4
 8006c9e:	d10b      	bne.n	8006cb8 <_free_r+0x6c>
 8006ca0:	6820      	ldr	r0, [r4, #0]
 8006ca2:	4401      	add	r1, r0
 8006ca4:	1850      	adds	r0, r2, r1
 8006ca6:	4283      	cmp	r3, r0
 8006ca8:	6011      	str	r1, [r2, #0]
 8006caa:	d1e0      	bne.n	8006c6e <_free_r+0x22>
 8006cac:	6818      	ldr	r0, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	4401      	add	r1, r0
 8006cb2:	6011      	str	r1, [r2, #0]
 8006cb4:	6053      	str	r3, [r2, #4]
 8006cb6:	e7da      	b.n	8006c6e <_free_r+0x22>
 8006cb8:	d902      	bls.n	8006cc0 <_free_r+0x74>
 8006cba:	230c      	movs	r3, #12
 8006cbc:	602b      	str	r3, [r5, #0]
 8006cbe:	e7d6      	b.n	8006c6e <_free_r+0x22>
 8006cc0:	6820      	ldr	r0, [r4, #0]
 8006cc2:	1821      	adds	r1, r4, r0
 8006cc4:	428b      	cmp	r3, r1
 8006cc6:	bf01      	itttt	eq
 8006cc8:	6819      	ldreq	r1, [r3, #0]
 8006cca:	685b      	ldreq	r3, [r3, #4]
 8006ccc:	1809      	addeq	r1, r1, r0
 8006cce:	6021      	streq	r1, [r4, #0]
 8006cd0:	6063      	str	r3, [r4, #4]
 8006cd2:	6054      	str	r4, [r2, #4]
 8006cd4:	e7cb      	b.n	8006c6e <_free_r+0x22>
 8006cd6:	bd38      	pop	{r3, r4, r5, pc}
 8006cd8:	200002e4 	.word	0x200002e4

08006cdc <__sfputc_r>:
 8006cdc:	6893      	ldr	r3, [r2, #8]
 8006cde:	b410      	push	{r4}
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	6093      	str	r3, [r2, #8]
 8006ce6:	da07      	bge.n	8006cf8 <__sfputc_r+0x1c>
 8006ce8:	6994      	ldr	r4, [r2, #24]
 8006cea:	42a3      	cmp	r3, r4
 8006cec:	db01      	blt.n	8006cf2 <__sfputc_r+0x16>
 8006cee:	290a      	cmp	r1, #10
 8006cf0:	d102      	bne.n	8006cf8 <__sfputc_r+0x1c>
 8006cf2:	bc10      	pop	{r4}
 8006cf4:	f000 bae0 	b.w	80072b8 <__swbuf_r>
 8006cf8:	6813      	ldr	r3, [r2, #0]
 8006cfa:	1c58      	adds	r0, r3, #1
 8006cfc:	6010      	str	r0, [r2, #0]
 8006cfe:	7019      	strb	r1, [r3, #0]
 8006d00:	4608      	mov	r0, r1
 8006d02:	bc10      	pop	{r4}
 8006d04:	4770      	bx	lr

08006d06 <__sfputs_r>:
 8006d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d08:	4606      	mov	r6, r0
 8006d0a:	460f      	mov	r7, r1
 8006d0c:	4614      	mov	r4, r2
 8006d0e:	18d5      	adds	r5, r2, r3
 8006d10:	42ac      	cmp	r4, r5
 8006d12:	d101      	bne.n	8006d18 <__sfputs_r+0x12>
 8006d14:	2000      	movs	r0, #0
 8006d16:	e007      	b.n	8006d28 <__sfputs_r+0x22>
 8006d18:	463a      	mov	r2, r7
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d20:	f7ff ffdc 	bl	8006cdc <__sfputc_r>
 8006d24:	1c43      	adds	r3, r0, #1
 8006d26:	d1f3      	bne.n	8006d10 <__sfputs_r+0xa>
 8006d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d2c <_vfiprintf_r>:
 8006d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d30:	460d      	mov	r5, r1
 8006d32:	4614      	mov	r4, r2
 8006d34:	4698      	mov	r8, r3
 8006d36:	4606      	mov	r6, r0
 8006d38:	b09d      	sub	sp, #116	; 0x74
 8006d3a:	b118      	cbz	r0, 8006d44 <_vfiprintf_r+0x18>
 8006d3c:	6983      	ldr	r3, [r0, #24]
 8006d3e:	b90b      	cbnz	r3, 8006d44 <_vfiprintf_r+0x18>
 8006d40:	f000 fc98 	bl	8007674 <__sinit>
 8006d44:	4b89      	ldr	r3, [pc, #548]	; (8006f6c <_vfiprintf_r+0x240>)
 8006d46:	429d      	cmp	r5, r3
 8006d48:	d11b      	bne.n	8006d82 <_vfiprintf_r+0x56>
 8006d4a:	6875      	ldr	r5, [r6, #4]
 8006d4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d4e:	07d9      	lsls	r1, r3, #31
 8006d50:	d405      	bmi.n	8006d5e <_vfiprintf_r+0x32>
 8006d52:	89ab      	ldrh	r3, [r5, #12]
 8006d54:	059a      	lsls	r2, r3, #22
 8006d56:	d402      	bmi.n	8006d5e <_vfiprintf_r+0x32>
 8006d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d5a:	f000 fd29 	bl	80077b0 <__retarget_lock_acquire_recursive>
 8006d5e:	89ab      	ldrh	r3, [r5, #12]
 8006d60:	071b      	lsls	r3, r3, #28
 8006d62:	d501      	bpl.n	8006d68 <_vfiprintf_r+0x3c>
 8006d64:	692b      	ldr	r3, [r5, #16]
 8006d66:	b9eb      	cbnz	r3, 8006da4 <_vfiprintf_r+0x78>
 8006d68:	4629      	mov	r1, r5
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f000 faf6 	bl	800735c <__swsetup_r>
 8006d70:	b1c0      	cbz	r0, 8006da4 <_vfiprintf_r+0x78>
 8006d72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d74:	07dc      	lsls	r4, r3, #31
 8006d76:	d50e      	bpl.n	8006d96 <_vfiprintf_r+0x6a>
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7c:	b01d      	add	sp, #116	; 0x74
 8006d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d82:	4b7b      	ldr	r3, [pc, #492]	; (8006f70 <_vfiprintf_r+0x244>)
 8006d84:	429d      	cmp	r5, r3
 8006d86:	d101      	bne.n	8006d8c <_vfiprintf_r+0x60>
 8006d88:	68b5      	ldr	r5, [r6, #8]
 8006d8a:	e7df      	b.n	8006d4c <_vfiprintf_r+0x20>
 8006d8c:	4b79      	ldr	r3, [pc, #484]	; (8006f74 <_vfiprintf_r+0x248>)
 8006d8e:	429d      	cmp	r5, r3
 8006d90:	bf08      	it	eq
 8006d92:	68f5      	ldreq	r5, [r6, #12]
 8006d94:	e7da      	b.n	8006d4c <_vfiprintf_r+0x20>
 8006d96:	89ab      	ldrh	r3, [r5, #12]
 8006d98:	0598      	lsls	r0, r3, #22
 8006d9a:	d4ed      	bmi.n	8006d78 <_vfiprintf_r+0x4c>
 8006d9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d9e:	f000 fd08 	bl	80077b2 <__retarget_lock_release_recursive>
 8006da2:	e7e9      	b.n	8006d78 <_vfiprintf_r+0x4c>
 8006da4:	2300      	movs	r3, #0
 8006da6:	9309      	str	r3, [sp, #36]	; 0x24
 8006da8:	2320      	movs	r3, #32
 8006daa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dae:	2330      	movs	r3, #48	; 0x30
 8006db0:	f04f 0901 	mov.w	r9, #1
 8006db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006db8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006f78 <_vfiprintf_r+0x24c>
 8006dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dc0:	4623      	mov	r3, r4
 8006dc2:	469a      	mov	sl, r3
 8006dc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dc8:	b10a      	cbz	r2, 8006dce <_vfiprintf_r+0xa2>
 8006dca:	2a25      	cmp	r2, #37	; 0x25
 8006dcc:	d1f9      	bne.n	8006dc2 <_vfiprintf_r+0x96>
 8006dce:	ebba 0b04 	subs.w	fp, sl, r4
 8006dd2:	d00b      	beq.n	8006dec <_vfiprintf_r+0xc0>
 8006dd4:	465b      	mov	r3, fp
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	4629      	mov	r1, r5
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f7ff ff93 	bl	8006d06 <__sfputs_r>
 8006de0:	3001      	adds	r0, #1
 8006de2:	f000 80aa 	beq.w	8006f3a <_vfiprintf_r+0x20e>
 8006de6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006de8:	445a      	add	r2, fp
 8006dea:	9209      	str	r2, [sp, #36]	; 0x24
 8006dec:	f89a 3000 	ldrb.w	r3, [sl]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 80a2 	beq.w	8006f3a <_vfiprintf_r+0x20e>
 8006df6:	2300      	movs	r3, #0
 8006df8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e00:	f10a 0a01 	add.w	sl, sl, #1
 8006e04:	9304      	str	r3, [sp, #16]
 8006e06:	9307      	str	r3, [sp, #28]
 8006e08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e0c:	931a      	str	r3, [sp, #104]	; 0x68
 8006e0e:	4654      	mov	r4, sl
 8006e10:	2205      	movs	r2, #5
 8006e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e16:	4858      	ldr	r0, [pc, #352]	; (8006f78 <_vfiprintf_r+0x24c>)
 8006e18:	f000 fd32 	bl	8007880 <memchr>
 8006e1c:	9a04      	ldr	r2, [sp, #16]
 8006e1e:	b9d8      	cbnz	r0, 8006e58 <_vfiprintf_r+0x12c>
 8006e20:	06d1      	lsls	r1, r2, #27
 8006e22:	bf44      	itt	mi
 8006e24:	2320      	movmi	r3, #32
 8006e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e2a:	0713      	lsls	r3, r2, #28
 8006e2c:	bf44      	itt	mi
 8006e2e:	232b      	movmi	r3, #43	; 0x2b
 8006e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e34:	f89a 3000 	ldrb.w	r3, [sl]
 8006e38:	2b2a      	cmp	r3, #42	; 0x2a
 8006e3a:	d015      	beq.n	8006e68 <_vfiprintf_r+0x13c>
 8006e3c:	4654      	mov	r4, sl
 8006e3e:	2000      	movs	r0, #0
 8006e40:	f04f 0c0a 	mov.w	ip, #10
 8006e44:	9a07      	ldr	r2, [sp, #28]
 8006e46:	4621      	mov	r1, r4
 8006e48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e4c:	3b30      	subs	r3, #48	; 0x30
 8006e4e:	2b09      	cmp	r3, #9
 8006e50:	d94e      	bls.n	8006ef0 <_vfiprintf_r+0x1c4>
 8006e52:	b1b0      	cbz	r0, 8006e82 <_vfiprintf_r+0x156>
 8006e54:	9207      	str	r2, [sp, #28]
 8006e56:	e014      	b.n	8006e82 <_vfiprintf_r+0x156>
 8006e58:	eba0 0308 	sub.w	r3, r0, r8
 8006e5c:	fa09 f303 	lsl.w	r3, r9, r3
 8006e60:	4313      	orrs	r3, r2
 8006e62:	46a2      	mov	sl, r4
 8006e64:	9304      	str	r3, [sp, #16]
 8006e66:	e7d2      	b.n	8006e0e <_vfiprintf_r+0xe2>
 8006e68:	9b03      	ldr	r3, [sp, #12]
 8006e6a:	1d19      	adds	r1, r3, #4
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	9103      	str	r1, [sp, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	bfbb      	ittet	lt
 8006e74:	425b      	neglt	r3, r3
 8006e76:	f042 0202 	orrlt.w	r2, r2, #2
 8006e7a:	9307      	strge	r3, [sp, #28]
 8006e7c:	9307      	strlt	r3, [sp, #28]
 8006e7e:	bfb8      	it	lt
 8006e80:	9204      	strlt	r2, [sp, #16]
 8006e82:	7823      	ldrb	r3, [r4, #0]
 8006e84:	2b2e      	cmp	r3, #46	; 0x2e
 8006e86:	d10c      	bne.n	8006ea2 <_vfiprintf_r+0x176>
 8006e88:	7863      	ldrb	r3, [r4, #1]
 8006e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e8c:	d135      	bne.n	8006efa <_vfiprintf_r+0x1ce>
 8006e8e:	9b03      	ldr	r3, [sp, #12]
 8006e90:	3402      	adds	r4, #2
 8006e92:	1d1a      	adds	r2, r3, #4
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	9203      	str	r2, [sp, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	bfb8      	it	lt
 8006e9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ea0:	9305      	str	r3, [sp, #20]
 8006ea2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006f7c <_vfiprintf_r+0x250>
 8006ea6:	2203      	movs	r2, #3
 8006ea8:	4650      	mov	r0, sl
 8006eaa:	7821      	ldrb	r1, [r4, #0]
 8006eac:	f000 fce8 	bl	8007880 <memchr>
 8006eb0:	b140      	cbz	r0, 8006ec4 <_vfiprintf_r+0x198>
 8006eb2:	2340      	movs	r3, #64	; 0x40
 8006eb4:	eba0 000a 	sub.w	r0, r0, sl
 8006eb8:	fa03 f000 	lsl.w	r0, r3, r0
 8006ebc:	9b04      	ldr	r3, [sp, #16]
 8006ebe:	3401      	adds	r4, #1
 8006ec0:	4303      	orrs	r3, r0
 8006ec2:	9304      	str	r3, [sp, #16]
 8006ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec8:	2206      	movs	r2, #6
 8006eca:	482d      	ldr	r0, [pc, #180]	; (8006f80 <_vfiprintf_r+0x254>)
 8006ecc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ed0:	f000 fcd6 	bl	8007880 <memchr>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d03f      	beq.n	8006f58 <_vfiprintf_r+0x22c>
 8006ed8:	4b2a      	ldr	r3, [pc, #168]	; (8006f84 <_vfiprintf_r+0x258>)
 8006eda:	bb1b      	cbnz	r3, 8006f24 <_vfiprintf_r+0x1f8>
 8006edc:	9b03      	ldr	r3, [sp, #12]
 8006ede:	3307      	adds	r3, #7
 8006ee0:	f023 0307 	bic.w	r3, r3, #7
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	9303      	str	r3, [sp, #12]
 8006ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eea:	443b      	add	r3, r7
 8006eec:	9309      	str	r3, [sp, #36]	; 0x24
 8006eee:	e767      	b.n	8006dc0 <_vfiprintf_r+0x94>
 8006ef0:	460c      	mov	r4, r1
 8006ef2:	2001      	movs	r0, #1
 8006ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ef8:	e7a5      	b.n	8006e46 <_vfiprintf_r+0x11a>
 8006efa:	2300      	movs	r3, #0
 8006efc:	f04f 0c0a 	mov.w	ip, #10
 8006f00:	4619      	mov	r1, r3
 8006f02:	3401      	adds	r4, #1
 8006f04:	9305      	str	r3, [sp, #20]
 8006f06:	4620      	mov	r0, r4
 8006f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f0c:	3a30      	subs	r2, #48	; 0x30
 8006f0e:	2a09      	cmp	r2, #9
 8006f10:	d903      	bls.n	8006f1a <_vfiprintf_r+0x1ee>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0c5      	beq.n	8006ea2 <_vfiprintf_r+0x176>
 8006f16:	9105      	str	r1, [sp, #20]
 8006f18:	e7c3      	b.n	8006ea2 <_vfiprintf_r+0x176>
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f22:	e7f0      	b.n	8006f06 <_vfiprintf_r+0x1da>
 8006f24:	ab03      	add	r3, sp, #12
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	462a      	mov	r2, r5
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	4b16      	ldr	r3, [pc, #88]	; (8006f88 <_vfiprintf_r+0x25c>)
 8006f2e:	a904      	add	r1, sp, #16
 8006f30:	f3af 8000 	nop.w
 8006f34:	4607      	mov	r7, r0
 8006f36:	1c78      	adds	r0, r7, #1
 8006f38:	d1d6      	bne.n	8006ee8 <_vfiprintf_r+0x1bc>
 8006f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f3c:	07d9      	lsls	r1, r3, #31
 8006f3e:	d405      	bmi.n	8006f4c <_vfiprintf_r+0x220>
 8006f40:	89ab      	ldrh	r3, [r5, #12]
 8006f42:	059a      	lsls	r2, r3, #22
 8006f44:	d402      	bmi.n	8006f4c <_vfiprintf_r+0x220>
 8006f46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f48:	f000 fc33 	bl	80077b2 <__retarget_lock_release_recursive>
 8006f4c:	89ab      	ldrh	r3, [r5, #12]
 8006f4e:	065b      	lsls	r3, r3, #25
 8006f50:	f53f af12 	bmi.w	8006d78 <_vfiprintf_r+0x4c>
 8006f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f56:	e711      	b.n	8006d7c <_vfiprintf_r+0x50>
 8006f58:	ab03      	add	r3, sp, #12
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	462a      	mov	r2, r5
 8006f5e:	4630      	mov	r0, r6
 8006f60:	4b09      	ldr	r3, [pc, #36]	; (8006f88 <_vfiprintf_r+0x25c>)
 8006f62:	a904      	add	r1, sp, #16
 8006f64:	f000 f882 	bl	800706c <_printf_i>
 8006f68:	e7e4      	b.n	8006f34 <_vfiprintf_r+0x208>
 8006f6a:	bf00      	nop
 8006f6c:	08007ec4 	.word	0x08007ec4
 8006f70:	08007ee4 	.word	0x08007ee4
 8006f74:	08007ea4 	.word	0x08007ea4
 8006f78:	08007e71 	.word	0x08007e71
 8006f7c:	08007e77 	.word	0x08007e77
 8006f80:	08007e7b 	.word	0x08007e7b
 8006f84:	00000000 	.word	0x00000000
 8006f88:	08006d07 	.word	0x08006d07

08006f8c <_printf_common>:
 8006f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f90:	4616      	mov	r6, r2
 8006f92:	4699      	mov	r9, r3
 8006f94:	688a      	ldr	r2, [r1, #8]
 8006f96:	690b      	ldr	r3, [r1, #16]
 8006f98:	4607      	mov	r7, r0
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	bfb8      	it	lt
 8006f9e:	4613      	movlt	r3, r2
 8006fa0:	6033      	str	r3, [r6, #0]
 8006fa2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fac:	b10a      	cbz	r2, 8006fb2 <_printf_common+0x26>
 8006fae:	3301      	adds	r3, #1
 8006fb0:	6033      	str	r3, [r6, #0]
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	0699      	lsls	r1, r3, #26
 8006fb6:	bf42      	ittt	mi
 8006fb8:	6833      	ldrmi	r3, [r6, #0]
 8006fba:	3302      	addmi	r3, #2
 8006fbc:	6033      	strmi	r3, [r6, #0]
 8006fbe:	6825      	ldr	r5, [r4, #0]
 8006fc0:	f015 0506 	ands.w	r5, r5, #6
 8006fc4:	d106      	bne.n	8006fd4 <_printf_common+0x48>
 8006fc6:	f104 0a19 	add.w	sl, r4, #25
 8006fca:	68e3      	ldr	r3, [r4, #12]
 8006fcc:	6832      	ldr	r2, [r6, #0]
 8006fce:	1a9b      	subs	r3, r3, r2
 8006fd0:	42ab      	cmp	r3, r5
 8006fd2:	dc28      	bgt.n	8007026 <_printf_common+0x9a>
 8006fd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fd8:	1e13      	subs	r3, r2, #0
 8006fda:	6822      	ldr	r2, [r4, #0]
 8006fdc:	bf18      	it	ne
 8006fde:	2301      	movne	r3, #1
 8006fe0:	0692      	lsls	r2, r2, #26
 8006fe2:	d42d      	bmi.n	8007040 <_printf_common+0xb4>
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fec:	47c0      	blx	r8
 8006fee:	3001      	adds	r0, #1
 8006ff0:	d020      	beq.n	8007034 <_printf_common+0xa8>
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	68e5      	ldr	r5, [r4, #12]
 8006ff6:	f003 0306 	and.w	r3, r3, #6
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	bf18      	it	ne
 8006ffe:	2500      	movne	r5, #0
 8007000:	6832      	ldr	r2, [r6, #0]
 8007002:	f04f 0600 	mov.w	r6, #0
 8007006:	68a3      	ldr	r3, [r4, #8]
 8007008:	bf08      	it	eq
 800700a:	1aad      	subeq	r5, r5, r2
 800700c:	6922      	ldr	r2, [r4, #16]
 800700e:	bf08      	it	eq
 8007010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007014:	4293      	cmp	r3, r2
 8007016:	bfc4      	itt	gt
 8007018:	1a9b      	subgt	r3, r3, r2
 800701a:	18ed      	addgt	r5, r5, r3
 800701c:	341a      	adds	r4, #26
 800701e:	42b5      	cmp	r5, r6
 8007020:	d11a      	bne.n	8007058 <_printf_common+0xcc>
 8007022:	2000      	movs	r0, #0
 8007024:	e008      	b.n	8007038 <_printf_common+0xac>
 8007026:	2301      	movs	r3, #1
 8007028:	4652      	mov	r2, sl
 800702a:	4649      	mov	r1, r9
 800702c:	4638      	mov	r0, r7
 800702e:	47c0      	blx	r8
 8007030:	3001      	adds	r0, #1
 8007032:	d103      	bne.n	800703c <_printf_common+0xb0>
 8007034:	f04f 30ff 	mov.w	r0, #4294967295
 8007038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800703c:	3501      	adds	r5, #1
 800703e:	e7c4      	b.n	8006fca <_printf_common+0x3e>
 8007040:	2030      	movs	r0, #48	; 0x30
 8007042:	18e1      	adds	r1, r4, r3
 8007044:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800704e:	4422      	add	r2, r4
 8007050:	3302      	adds	r3, #2
 8007052:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007056:	e7c5      	b.n	8006fe4 <_printf_common+0x58>
 8007058:	2301      	movs	r3, #1
 800705a:	4622      	mov	r2, r4
 800705c:	4649      	mov	r1, r9
 800705e:	4638      	mov	r0, r7
 8007060:	47c0      	blx	r8
 8007062:	3001      	adds	r0, #1
 8007064:	d0e6      	beq.n	8007034 <_printf_common+0xa8>
 8007066:	3601      	adds	r6, #1
 8007068:	e7d9      	b.n	800701e <_printf_common+0x92>
	...

0800706c <_printf_i>:
 800706c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007070:	7e0f      	ldrb	r7, [r1, #24]
 8007072:	4691      	mov	r9, r2
 8007074:	2f78      	cmp	r7, #120	; 0x78
 8007076:	4680      	mov	r8, r0
 8007078:	460c      	mov	r4, r1
 800707a:	469a      	mov	sl, r3
 800707c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800707e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007082:	d807      	bhi.n	8007094 <_printf_i+0x28>
 8007084:	2f62      	cmp	r7, #98	; 0x62
 8007086:	d80a      	bhi.n	800709e <_printf_i+0x32>
 8007088:	2f00      	cmp	r7, #0
 800708a:	f000 80d9 	beq.w	8007240 <_printf_i+0x1d4>
 800708e:	2f58      	cmp	r7, #88	; 0x58
 8007090:	f000 80a4 	beq.w	80071dc <_printf_i+0x170>
 8007094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800709c:	e03a      	b.n	8007114 <_printf_i+0xa8>
 800709e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070a2:	2b15      	cmp	r3, #21
 80070a4:	d8f6      	bhi.n	8007094 <_printf_i+0x28>
 80070a6:	a101      	add	r1, pc, #4	; (adr r1, 80070ac <_printf_i+0x40>)
 80070a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070ac:	08007105 	.word	0x08007105
 80070b0:	08007119 	.word	0x08007119
 80070b4:	08007095 	.word	0x08007095
 80070b8:	08007095 	.word	0x08007095
 80070bc:	08007095 	.word	0x08007095
 80070c0:	08007095 	.word	0x08007095
 80070c4:	08007119 	.word	0x08007119
 80070c8:	08007095 	.word	0x08007095
 80070cc:	08007095 	.word	0x08007095
 80070d0:	08007095 	.word	0x08007095
 80070d4:	08007095 	.word	0x08007095
 80070d8:	08007227 	.word	0x08007227
 80070dc:	08007149 	.word	0x08007149
 80070e0:	08007209 	.word	0x08007209
 80070e4:	08007095 	.word	0x08007095
 80070e8:	08007095 	.word	0x08007095
 80070ec:	08007249 	.word	0x08007249
 80070f0:	08007095 	.word	0x08007095
 80070f4:	08007149 	.word	0x08007149
 80070f8:	08007095 	.word	0x08007095
 80070fc:	08007095 	.word	0x08007095
 8007100:	08007211 	.word	0x08007211
 8007104:	682b      	ldr	r3, [r5, #0]
 8007106:	1d1a      	adds	r2, r3, #4
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	602a      	str	r2, [r5, #0]
 800710c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007114:	2301      	movs	r3, #1
 8007116:	e0a4      	b.n	8007262 <_printf_i+0x1f6>
 8007118:	6820      	ldr	r0, [r4, #0]
 800711a:	6829      	ldr	r1, [r5, #0]
 800711c:	0606      	lsls	r6, r0, #24
 800711e:	f101 0304 	add.w	r3, r1, #4
 8007122:	d50a      	bpl.n	800713a <_printf_i+0xce>
 8007124:	680e      	ldr	r6, [r1, #0]
 8007126:	602b      	str	r3, [r5, #0]
 8007128:	2e00      	cmp	r6, #0
 800712a:	da03      	bge.n	8007134 <_printf_i+0xc8>
 800712c:	232d      	movs	r3, #45	; 0x2d
 800712e:	4276      	negs	r6, r6
 8007130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007134:	230a      	movs	r3, #10
 8007136:	485e      	ldr	r0, [pc, #376]	; (80072b0 <_printf_i+0x244>)
 8007138:	e019      	b.n	800716e <_printf_i+0x102>
 800713a:	680e      	ldr	r6, [r1, #0]
 800713c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007140:	602b      	str	r3, [r5, #0]
 8007142:	bf18      	it	ne
 8007144:	b236      	sxthne	r6, r6
 8007146:	e7ef      	b.n	8007128 <_printf_i+0xbc>
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	6820      	ldr	r0, [r4, #0]
 800714c:	1d19      	adds	r1, r3, #4
 800714e:	6029      	str	r1, [r5, #0]
 8007150:	0601      	lsls	r1, r0, #24
 8007152:	d501      	bpl.n	8007158 <_printf_i+0xec>
 8007154:	681e      	ldr	r6, [r3, #0]
 8007156:	e002      	b.n	800715e <_printf_i+0xf2>
 8007158:	0646      	lsls	r6, r0, #25
 800715a:	d5fb      	bpl.n	8007154 <_printf_i+0xe8>
 800715c:	881e      	ldrh	r6, [r3, #0]
 800715e:	2f6f      	cmp	r7, #111	; 0x6f
 8007160:	bf0c      	ite	eq
 8007162:	2308      	moveq	r3, #8
 8007164:	230a      	movne	r3, #10
 8007166:	4852      	ldr	r0, [pc, #328]	; (80072b0 <_printf_i+0x244>)
 8007168:	2100      	movs	r1, #0
 800716a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800716e:	6865      	ldr	r5, [r4, #4]
 8007170:	2d00      	cmp	r5, #0
 8007172:	bfa8      	it	ge
 8007174:	6821      	ldrge	r1, [r4, #0]
 8007176:	60a5      	str	r5, [r4, #8]
 8007178:	bfa4      	itt	ge
 800717a:	f021 0104 	bicge.w	r1, r1, #4
 800717e:	6021      	strge	r1, [r4, #0]
 8007180:	b90e      	cbnz	r6, 8007186 <_printf_i+0x11a>
 8007182:	2d00      	cmp	r5, #0
 8007184:	d04d      	beq.n	8007222 <_printf_i+0x1b6>
 8007186:	4615      	mov	r5, r2
 8007188:	fbb6 f1f3 	udiv	r1, r6, r3
 800718c:	fb03 6711 	mls	r7, r3, r1, r6
 8007190:	5dc7      	ldrb	r7, [r0, r7]
 8007192:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007196:	4637      	mov	r7, r6
 8007198:	42bb      	cmp	r3, r7
 800719a:	460e      	mov	r6, r1
 800719c:	d9f4      	bls.n	8007188 <_printf_i+0x11c>
 800719e:	2b08      	cmp	r3, #8
 80071a0:	d10b      	bne.n	80071ba <_printf_i+0x14e>
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	07de      	lsls	r6, r3, #31
 80071a6:	d508      	bpl.n	80071ba <_printf_i+0x14e>
 80071a8:	6923      	ldr	r3, [r4, #16]
 80071aa:	6861      	ldr	r1, [r4, #4]
 80071ac:	4299      	cmp	r1, r3
 80071ae:	bfde      	ittt	le
 80071b0:	2330      	movle	r3, #48	; 0x30
 80071b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071ba:	1b52      	subs	r2, r2, r5
 80071bc:	6122      	str	r2, [r4, #16]
 80071be:	464b      	mov	r3, r9
 80071c0:	4621      	mov	r1, r4
 80071c2:	4640      	mov	r0, r8
 80071c4:	f8cd a000 	str.w	sl, [sp]
 80071c8:	aa03      	add	r2, sp, #12
 80071ca:	f7ff fedf 	bl	8006f8c <_printf_common>
 80071ce:	3001      	adds	r0, #1
 80071d0:	d14c      	bne.n	800726c <_printf_i+0x200>
 80071d2:	f04f 30ff 	mov.w	r0, #4294967295
 80071d6:	b004      	add	sp, #16
 80071d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071dc:	4834      	ldr	r0, [pc, #208]	; (80072b0 <_printf_i+0x244>)
 80071de:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071e2:	6829      	ldr	r1, [r5, #0]
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80071ea:	6029      	str	r1, [r5, #0]
 80071ec:	061d      	lsls	r5, r3, #24
 80071ee:	d514      	bpl.n	800721a <_printf_i+0x1ae>
 80071f0:	07df      	lsls	r7, r3, #31
 80071f2:	bf44      	itt	mi
 80071f4:	f043 0320 	orrmi.w	r3, r3, #32
 80071f8:	6023      	strmi	r3, [r4, #0]
 80071fa:	b91e      	cbnz	r6, 8007204 <_printf_i+0x198>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	f023 0320 	bic.w	r3, r3, #32
 8007202:	6023      	str	r3, [r4, #0]
 8007204:	2310      	movs	r3, #16
 8007206:	e7af      	b.n	8007168 <_printf_i+0xfc>
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	f043 0320 	orr.w	r3, r3, #32
 800720e:	6023      	str	r3, [r4, #0]
 8007210:	2378      	movs	r3, #120	; 0x78
 8007212:	4828      	ldr	r0, [pc, #160]	; (80072b4 <_printf_i+0x248>)
 8007214:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007218:	e7e3      	b.n	80071e2 <_printf_i+0x176>
 800721a:	0659      	lsls	r1, r3, #25
 800721c:	bf48      	it	mi
 800721e:	b2b6      	uxthmi	r6, r6
 8007220:	e7e6      	b.n	80071f0 <_printf_i+0x184>
 8007222:	4615      	mov	r5, r2
 8007224:	e7bb      	b.n	800719e <_printf_i+0x132>
 8007226:	682b      	ldr	r3, [r5, #0]
 8007228:	6826      	ldr	r6, [r4, #0]
 800722a:	1d18      	adds	r0, r3, #4
 800722c:	6961      	ldr	r1, [r4, #20]
 800722e:	6028      	str	r0, [r5, #0]
 8007230:	0635      	lsls	r5, r6, #24
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	d501      	bpl.n	800723a <_printf_i+0x1ce>
 8007236:	6019      	str	r1, [r3, #0]
 8007238:	e002      	b.n	8007240 <_printf_i+0x1d4>
 800723a:	0670      	lsls	r0, r6, #25
 800723c:	d5fb      	bpl.n	8007236 <_printf_i+0x1ca>
 800723e:	8019      	strh	r1, [r3, #0]
 8007240:	2300      	movs	r3, #0
 8007242:	4615      	mov	r5, r2
 8007244:	6123      	str	r3, [r4, #16]
 8007246:	e7ba      	b.n	80071be <_printf_i+0x152>
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	2100      	movs	r1, #0
 800724c:	1d1a      	adds	r2, r3, #4
 800724e:	602a      	str	r2, [r5, #0]
 8007250:	681d      	ldr	r5, [r3, #0]
 8007252:	6862      	ldr	r2, [r4, #4]
 8007254:	4628      	mov	r0, r5
 8007256:	f000 fb13 	bl	8007880 <memchr>
 800725a:	b108      	cbz	r0, 8007260 <_printf_i+0x1f4>
 800725c:	1b40      	subs	r0, r0, r5
 800725e:	6060      	str	r0, [r4, #4]
 8007260:	6863      	ldr	r3, [r4, #4]
 8007262:	6123      	str	r3, [r4, #16]
 8007264:	2300      	movs	r3, #0
 8007266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800726a:	e7a8      	b.n	80071be <_printf_i+0x152>
 800726c:	462a      	mov	r2, r5
 800726e:	4649      	mov	r1, r9
 8007270:	4640      	mov	r0, r8
 8007272:	6923      	ldr	r3, [r4, #16]
 8007274:	47d0      	blx	sl
 8007276:	3001      	adds	r0, #1
 8007278:	d0ab      	beq.n	80071d2 <_printf_i+0x166>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	079b      	lsls	r3, r3, #30
 800727e:	d413      	bmi.n	80072a8 <_printf_i+0x23c>
 8007280:	68e0      	ldr	r0, [r4, #12]
 8007282:	9b03      	ldr	r3, [sp, #12]
 8007284:	4298      	cmp	r0, r3
 8007286:	bfb8      	it	lt
 8007288:	4618      	movlt	r0, r3
 800728a:	e7a4      	b.n	80071d6 <_printf_i+0x16a>
 800728c:	2301      	movs	r3, #1
 800728e:	4632      	mov	r2, r6
 8007290:	4649      	mov	r1, r9
 8007292:	4640      	mov	r0, r8
 8007294:	47d0      	blx	sl
 8007296:	3001      	adds	r0, #1
 8007298:	d09b      	beq.n	80071d2 <_printf_i+0x166>
 800729a:	3501      	adds	r5, #1
 800729c:	68e3      	ldr	r3, [r4, #12]
 800729e:	9903      	ldr	r1, [sp, #12]
 80072a0:	1a5b      	subs	r3, r3, r1
 80072a2:	42ab      	cmp	r3, r5
 80072a4:	dcf2      	bgt.n	800728c <_printf_i+0x220>
 80072a6:	e7eb      	b.n	8007280 <_printf_i+0x214>
 80072a8:	2500      	movs	r5, #0
 80072aa:	f104 0619 	add.w	r6, r4, #25
 80072ae:	e7f5      	b.n	800729c <_printf_i+0x230>
 80072b0:	08007e82 	.word	0x08007e82
 80072b4:	08007e93 	.word	0x08007e93

080072b8 <__swbuf_r>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	460e      	mov	r6, r1
 80072bc:	4614      	mov	r4, r2
 80072be:	4605      	mov	r5, r0
 80072c0:	b118      	cbz	r0, 80072ca <__swbuf_r+0x12>
 80072c2:	6983      	ldr	r3, [r0, #24]
 80072c4:	b90b      	cbnz	r3, 80072ca <__swbuf_r+0x12>
 80072c6:	f000 f9d5 	bl	8007674 <__sinit>
 80072ca:	4b21      	ldr	r3, [pc, #132]	; (8007350 <__swbuf_r+0x98>)
 80072cc:	429c      	cmp	r4, r3
 80072ce:	d12b      	bne.n	8007328 <__swbuf_r+0x70>
 80072d0:	686c      	ldr	r4, [r5, #4]
 80072d2:	69a3      	ldr	r3, [r4, #24]
 80072d4:	60a3      	str	r3, [r4, #8]
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	071a      	lsls	r2, r3, #28
 80072da:	d52f      	bpl.n	800733c <__swbuf_r+0x84>
 80072dc:	6923      	ldr	r3, [r4, #16]
 80072de:	b36b      	cbz	r3, 800733c <__swbuf_r+0x84>
 80072e0:	6923      	ldr	r3, [r4, #16]
 80072e2:	6820      	ldr	r0, [r4, #0]
 80072e4:	b2f6      	uxtb	r6, r6
 80072e6:	1ac0      	subs	r0, r0, r3
 80072e8:	6963      	ldr	r3, [r4, #20]
 80072ea:	4637      	mov	r7, r6
 80072ec:	4283      	cmp	r3, r0
 80072ee:	dc04      	bgt.n	80072fa <__swbuf_r+0x42>
 80072f0:	4621      	mov	r1, r4
 80072f2:	4628      	mov	r0, r5
 80072f4:	f000 f92a 	bl	800754c <_fflush_r>
 80072f8:	bb30      	cbnz	r0, 8007348 <__swbuf_r+0x90>
 80072fa:	68a3      	ldr	r3, [r4, #8]
 80072fc:	3001      	adds	r0, #1
 80072fe:	3b01      	subs	r3, #1
 8007300:	60a3      	str	r3, [r4, #8]
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	1c5a      	adds	r2, r3, #1
 8007306:	6022      	str	r2, [r4, #0]
 8007308:	701e      	strb	r6, [r3, #0]
 800730a:	6963      	ldr	r3, [r4, #20]
 800730c:	4283      	cmp	r3, r0
 800730e:	d004      	beq.n	800731a <__swbuf_r+0x62>
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	07db      	lsls	r3, r3, #31
 8007314:	d506      	bpl.n	8007324 <__swbuf_r+0x6c>
 8007316:	2e0a      	cmp	r6, #10
 8007318:	d104      	bne.n	8007324 <__swbuf_r+0x6c>
 800731a:	4621      	mov	r1, r4
 800731c:	4628      	mov	r0, r5
 800731e:	f000 f915 	bl	800754c <_fflush_r>
 8007322:	b988      	cbnz	r0, 8007348 <__swbuf_r+0x90>
 8007324:	4638      	mov	r0, r7
 8007326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007328:	4b0a      	ldr	r3, [pc, #40]	; (8007354 <__swbuf_r+0x9c>)
 800732a:	429c      	cmp	r4, r3
 800732c:	d101      	bne.n	8007332 <__swbuf_r+0x7a>
 800732e:	68ac      	ldr	r4, [r5, #8]
 8007330:	e7cf      	b.n	80072d2 <__swbuf_r+0x1a>
 8007332:	4b09      	ldr	r3, [pc, #36]	; (8007358 <__swbuf_r+0xa0>)
 8007334:	429c      	cmp	r4, r3
 8007336:	bf08      	it	eq
 8007338:	68ec      	ldreq	r4, [r5, #12]
 800733a:	e7ca      	b.n	80072d2 <__swbuf_r+0x1a>
 800733c:	4621      	mov	r1, r4
 800733e:	4628      	mov	r0, r5
 8007340:	f000 f80c 	bl	800735c <__swsetup_r>
 8007344:	2800      	cmp	r0, #0
 8007346:	d0cb      	beq.n	80072e0 <__swbuf_r+0x28>
 8007348:	f04f 37ff 	mov.w	r7, #4294967295
 800734c:	e7ea      	b.n	8007324 <__swbuf_r+0x6c>
 800734e:	bf00      	nop
 8007350:	08007ec4 	.word	0x08007ec4
 8007354:	08007ee4 	.word	0x08007ee4
 8007358:	08007ea4 	.word	0x08007ea4

0800735c <__swsetup_r>:
 800735c:	4b32      	ldr	r3, [pc, #200]	; (8007428 <__swsetup_r+0xcc>)
 800735e:	b570      	push	{r4, r5, r6, lr}
 8007360:	681d      	ldr	r5, [r3, #0]
 8007362:	4606      	mov	r6, r0
 8007364:	460c      	mov	r4, r1
 8007366:	b125      	cbz	r5, 8007372 <__swsetup_r+0x16>
 8007368:	69ab      	ldr	r3, [r5, #24]
 800736a:	b913      	cbnz	r3, 8007372 <__swsetup_r+0x16>
 800736c:	4628      	mov	r0, r5
 800736e:	f000 f981 	bl	8007674 <__sinit>
 8007372:	4b2e      	ldr	r3, [pc, #184]	; (800742c <__swsetup_r+0xd0>)
 8007374:	429c      	cmp	r4, r3
 8007376:	d10f      	bne.n	8007398 <__swsetup_r+0x3c>
 8007378:	686c      	ldr	r4, [r5, #4]
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007380:	0719      	lsls	r1, r3, #28
 8007382:	d42c      	bmi.n	80073de <__swsetup_r+0x82>
 8007384:	06dd      	lsls	r5, r3, #27
 8007386:	d411      	bmi.n	80073ac <__swsetup_r+0x50>
 8007388:	2309      	movs	r3, #9
 800738a:	6033      	str	r3, [r6, #0]
 800738c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007390:	f04f 30ff 	mov.w	r0, #4294967295
 8007394:	81a3      	strh	r3, [r4, #12]
 8007396:	e03e      	b.n	8007416 <__swsetup_r+0xba>
 8007398:	4b25      	ldr	r3, [pc, #148]	; (8007430 <__swsetup_r+0xd4>)
 800739a:	429c      	cmp	r4, r3
 800739c:	d101      	bne.n	80073a2 <__swsetup_r+0x46>
 800739e:	68ac      	ldr	r4, [r5, #8]
 80073a0:	e7eb      	b.n	800737a <__swsetup_r+0x1e>
 80073a2:	4b24      	ldr	r3, [pc, #144]	; (8007434 <__swsetup_r+0xd8>)
 80073a4:	429c      	cmp	r4, r3
 80073a6:	bf08      	it	eq
 80073a8:	68ec      	ldreq	r4, [r5, #12]
 80073aa:	e7e6      	b.n	800737a <__swsetup_r+0x1e>
 80073ac:	0758      	lsls	r0, r3, #29
 80073ae:	d512      	bpl.n	80073d6 <__swsetup_r+0x7a>
 80073b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073b2:	b141      	cbz	r1, 80073c6 <__swsetup_r+0x6a>
 80073b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073b8:	4299      	cmp	r1, r3
 80073ba:	d002      	beq.n	80073c2 <__swsetup_r+0x66>
 80073bc:	4630      	mov	r0, r6
 80073be:	f7ff fc45 	bl	8006c4c <_free_r>
 80073c2:	2300      	movs	r3, #0
 80073c4:	6363      	str	r3, [r4, #52]	; 0x34
 80073c6:	89a3      	ldrh	r3, [r4, #12]
 80073c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073cc:	81a3      	strh	r3, [r4, #12]
 80073ce:	2300      	movs	r3, #0
 80073d0:	6063      	str	r3, [r4, #4]
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	89a3      	ldrh	r3, [r4, #12]
 80073d8:	f043 0308 	orr.w	r3, r3, #8
 80073dc:	81a3      	strh	r3, [r4, #12]
 80073de:	6923      	ldr	r3, [r4, #16]
 80073e0:	b94b      	cbnz	r3, 80073f6 <__swsetup_r+0x9a>
 80073e2:	89a3      	ldrh	r3, [r4, #12]
 80073e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ec:	d003      	beq.n	80073f6 <__swsetup_r+0x9a>
 80073ee:	4621      	mov	r1, r4
 80073f0:	4630      	mov	r0, r6
 80073f2:	f000 fa05 	bl	8007800 <__smakebuf_r>
 80073f6:	89a0      	ldrh	r0, [r4, #12]
 80073f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073fc:	f010 0301 	ands.w	r3, r0, #1
 8007400:	d00a      	beq.n	8007418 <__swsetup_r+0xbc>
 8007402:	2300      	movs	r3, #0
 8007404:	60a3      	str	r3, [r4, #8]
 8007406:	6963      	ldr	r3, [r4, #20]
 8007408:	425b      	negs	r3, r3
 800740a:	61a3      	str	r3, [r4, #24]
 800740c:	6923      	ldr	r3, [r4, #16]
 800740e:	b943      	cbnz	r3, 8007422 <__swsetup_r+0xc6>
 8007410:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007414:	d1ba      	bne.n	800738c <__swsetup_r+0x30>
 8007416:	bd70      	pop	{r4, r5, r6, pc}
 8007418:	0781      	lsls	r1, r0, #30
 800741a:	bf58      	it	pl
 800741c:	6963      	ldrpl	r3, [r4, #20]
 800741e:	60a3      	str	r3, [r4, #8]
 8007420:	e7f4      	b.n	800740c <__swsetup_r+0xb0>
 8007422:	2000      	movs	r0, #0
 8007424:	e7f7      	b.n	8007416 <__swsetup_r+0xba>
 8007426:	bf00      	nop
 8007428:	20000010 	.word	0x20000010
 800742c:	08007ec4 	.word	0x08007ec4
 8007430:	08007ee4 	.word	0x08007ee4
 8007434:	08007ea4 	.word	0x08007ea4

08007438 <abort>:
 8007438:	2006      	movs	r0, #6
 800743a:	b508      	push	{r3, lr}
 800743c:	f000 fa56 	bl	80078ec <raise>
 8007440:	2001      	movs	r0, #1
 8007442:	f7fa f918 	bl	8001676 <_exit>
	...

08007448 <__sflush_r>:
 8007448:	898a      	ldrh	r2, [r1, #12]
 800744a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744c:	4605      	mov	r5, r0
 800744e:	0710      	lsls	r0, r2, #28
 8007450:	460c      	mov	r4, r1
 8007452:	d457      	bmi.n	8007504 <__sflush_r+0xbc>
 8007454:	684b      	ldr	r3, [r1, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	dc04      	bgt.n	8007464 <__sflush_r+0x1c>
 800745a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800745c:	2b00      	cmp	r3, #0
 800745e:	dc01      	bgt.n	8007464 <__sflush_r+0x1c>
 8007460:	2000      	movs	r0, #0
 8007462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007466:	2e00      	cmp	r6, #0
 8007468:	d0fa      	beq.n	8007460 <__sflush_r+0x18>
 800746a:	2300      	movs	r3, #0
 800746c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007470:	682f      	ldr	r7, [r5, #0]
 8007472:	602b      	str	r3, [r5, #0]
 8007474:	d032      	beq.n	80074dc <__sflush_r+0x94>
 8007476:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	075a      	lsls	r2, r3, #29
 800747c:	d505      	bpl.n	800748a <__sflush_r+0x42>
 800747e:	6863      	ldr	r3, [r4, #4]
 8007480:	1ac0      	subs	r0, r0, r3
 8007482:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007484:	b10b      	cbz	r3, 800748a <__sflush_r+0x42>
 8007486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007488:	1ac0      	subs	r0, r0, r3
 800748a:	2300      	movs	r3, #0
 800748c:	4602      	mov	r2, r0
 800748e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007490:	4628      	mov	r0, r5
 8007492:	6a21      	ldr	r1, [r4, #32]
 8007494:	47b0      	blx	r6
 8007496:	1c43      	adds	r3, r0, #1
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	d106      	bne.n	80074aa <__sflush_r+0x62>
 800749c:	6829      	ldr	r1, [r5, #0]
 800749e:	291d      	cmp	r1, #29
 80074a0:	d82c      	bhi.n	80074fc <__sflush_r+0xb4>
 80074a2:	4a29      	ldr	r2, [pc, #164]	; (8007548 <__sflush_r+0x100>)
 80074a4:	40ca      	lsrs	r2, r1
 80074a6:	07d6      	lsls	r6, r2, #31
 80074a8:	d528      	bpl.n	80074fc <__sflush_r+0xb4>
 80074aa:	2200      	movs	r2, #0
 80074ac:	6062      	str	r2, [r4, #4]
 80074ae:	6922      	ldr	r2, [r4, #16]
 80074b0:	04d9      	lsls	r1, r3, #19
 80074b2:	6022      	str	r2, [r4, #0]
 80074b4:	d504      	bpl.n	80074c0 <__sflush_r+0x78>
 80074b6:	1c42      	adds	r2, r0, #1
 80074b8:	d101      	bne.n	80074be <__sflush_r+0x76>
 80074ba:	682b      	ldr	r3, [r5, #0]
 80074bc:	b903      	cbnz	r3, 80074c0 <__sflush_r+0x78>
 80074be:	6560      	str	r0, [r4, #84]	; 0x54
 80074c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074c2:	602f      	str	r7, [r5, #0]
 80074c4:	2900      	cmp	r1, #0
 80074c6:	d0cb      	beq.n	8007460 <__sflush_r+0x18>
 80074c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074cc:	4299      	cmp	r1, r3
 80074ce:	d002      	beq.n	80074d6 <__sflush_r+0x8e>
 80074d0:	4628      	mov	r0, r5
 80074d2:	f7ff fbbb 	bl	8006c4c <_free_r>
 80074d6:	2000      	movs	r0, #0
 80074d8:	6360      	str	r0, [r4, #52]	; 0x34
 80074da:	e7c2      	b.n	8007462 <__sflush_r+0x1a>
 80074dc:	6a21      	ldr	r1, [r4, #32]
 80074de:	2301      	movs	r3, #1
 80074e0:	4628      	mov	r0, r5
 80074e2:	47b0      	blx	r6
 80074e4:	1c41      	adds	r1, r0, #1
 80074e6:	d1c7      	bne.n	8007478 <__sflush_r+0x30>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0c4      	beq.n	8007478 <__sflush_r+0x30>
 80074ee:	2b1d      	cmp	r3, #29
 80074f0:	d001      	beq.n	80074f6 <__sflush_r+0xae>
 80074f2:	2b16      	cmp	r3, #22
 80074f4:	d101      	bne.n	80074fa <__sflush_r+0xb2>
 80074f6:	602f      	str	r7, [r5, #0]
 80074f8:	e7b2      	b.n	8007460 <__sflush_r+0x18>
 80074fa:	89a3      	ldrh	r3, [r4, #12]
 80074fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	e7ae      	b.n	8007462 <__sflush_r+0x1a>
 8007504:	690f      	ldr	r7, [r1, #16]
 8007506:	2f00      	cmp	r7, #0
 8007508:	d0aa      	beq.n	8007460 <__sflush_r+0x18>
 800750a:	0793      	lsls	r3, r2, #30
 800750c:	bf18      	it	ne
 800750e:	2300      	movne	r3, #0
 8007510:	680e      	ldr	r6, [r1, #0]
 8007512:	bf08      	it	eq
 8007514:	694b      	ldreq	r3, [r1, #20]
 8007516:	1bf6      	subs	r6, r6, r7
 8007518:	600f      	str	r7, [r1, #0]
 800751a:	608b      	str	r3, [r1, #8]
 800751c:	2e00      	cmp	r6, #0
 800751e:	dd9f      	ble.n	8007460 <__sflush_r+0x18>
 8007520:	4633      	mov	r3, r6
 8007522:	463a      	mov	r2, r7
 8007524:	4628      	mov	r0, r5
 8007526:	6a21      	ldr	r1, [r4, #32]
 8007528:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800752c:	47e0      	blx	ip
 800752e:	2800      	cmp	r0, #0
 8007530:	dc06      	bgt.n	8007540 <__sflush_r+0xf8>
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	f04f 30ff 	mov.w	r0, #4294967295
 8007538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800753c:	81a3      	strh	r3, [r4, #12]
 800753e:	e790      	b.n	8007462 <__sflush_r+0x1a>
 8007540:	4407      	add	r7, r0
 8007542:	1a36      	subs	r6, r6, r0
 8007544:	e7ea      	b.n	800751c <__sflush_r+0xd4>
 8007546:	bf00      	nop
 8007548:	20400001 	.word	0x20400001

0800754c <_fflush_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	690b      	ldr	r3, [r1, #16]
 8007550:	4605      	mov	r5, r0
 8007552:	460c      	mov	r4, r1
 8007554:	b913      	cbnz	r3, 800755c <_fflush_r+0x10>
 8007556:	2500      	movs	r5, #0
 8007558:	4628      	mov	r0, r5
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	b118      	cbz	r0, 8007566 <_fflush_r+0x1a>
 800755e:	6983      	ldr	r3, [r0, #24]
 8007560:	b90b      	cbnz	r3, 8007566 <_fflush_r+0x1a>
 8007562:	f000 f887 	bl	8007674 <__sinit>
 8007566:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <_fflush_r+0x6c>)
 8007568:	429c      	cmp	r4, r3
 800756a:	d11b      	bne.n	80075a4 <_fflush_r+0x58>
 800756c:	686c      	ldr	r4, [r5, #4]
 800756e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0ef      	beq.n	8007556 <_fflush_r+0xa>
 8007576:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007578:	07d0      	lsls	r0, r2, #31
 800757a:	d404      	bmi.n	8007586 <_fflush_r+0x3a>
 800757c:	0599      	lsls	r1, r3, #22
 800757e:	d402      	bmi.n	8007586 <_fflush_r+0x3a>
 8007580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007582:	f000 f915 	bl	80077b0 <__retarget_lock_acquire_recursive>
 8007586:	4628      	mov	r0, r5
 8007588:	4621      	mov	r1, r4
 800758a:	f7ff ff5d 	bl	8007448 <__sflush_r>
 800758e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007590:	4605      	mov	r5, r0
 8007592:	07da      	lsls	r2, r3, #31
 8007594:	d4e0      	bmi.n	8007558 <_fflush_r+0xc>
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	059b      	lsls	r3, r3, #22
 800759a:	d4dd      	bmi.n	8007558 <_fflush_r+0xc>
 800759c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800759e:	f000 f908 	bl	80077b2 <__retarget_lock_release_recursive>
 80075a2:	e7d9      	b.n	8007558 <_fflush_r+0xc>
 80075a4:	4b05      	ldr	r3, [pc, #20]	; (80075bc <_fflush_r+0x70>)
 80075a6:	429c      	cmp	r4, r3
 80075a8:	d101      	bne.n	80075ae <_fflush_r+0x62>
 80075aa:	68ac      	ldr	r4, [r5, #8]
 80075ac:	e7df      	b.n	800756e <_fflush_r+0x22>
 80075ae:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <_fflush_r+0x74>)
 80075b0:	429c      	cmp	r4, r3
 80075b2:	bf08      	it	eq
 80075b4:	68ec      	ldreq	r4, [r5, #12]
 80075b6:	e7da      	b.n	800756e <_fflush_r+0x22>
 80075b8:	08007ec4 	.word	0x08007ec4
 80075bc:	08007ee4 	.word	0x08007ee4
 80075c0:	08007ea4 	.word	0x08007ea4

080075c4 <std>:
 80075c4:	2300      	movs	r3, #0
 80075c6:	b510      	push	{r4, lr}
 80075c8:	4604      	mov	r4, r0
 80075ca:	e9c0 3300 	strd	r3, r3, [r0]
 80075ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075d2:	6083      	str	r3, [r0, #8]
 80075d4:	8181      	strh	r1, [r0, #12]
 80075d6:	6643      	str	r3, [r0, #100]	; 0x64
 80075d8:	81c2      	strh	r2, [r0, #14]
 80075da:	6183      	str	r3, [r0, #24]
 80075dc:	4619      	mov	r1, r3
 80075de:	2208      	movs	r2, #8
 80075e0:	305c      	adds	r0, #92	; 0x5c
 80075e2:	f7fd fbb3 	bl	8004d4c <memset>
 80075e6:	4b05      	ldr	r3, [pc, #20]	; (80075fc <std+0x38>)
 80075e8:	6224      	str	r4, [r4, #32]
 80075ea:	6263      	str	r3, [r4, #36]	; 0x24
 80075ec:	4b04      	ldr	r3, [pc, #16]	; (8007600 <std+0x3c>)
 80075ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80075f0:	4b04      	ldr	r3, [pc, #16]	; (8007604 <std+0x40>)
 80075f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075f4:	4b04      	ldr	r3, [pc, #16]	; (8007608 <std+0x44>)
 80075f6:	6323      	str	r3, [r4, #48]	; 0x30
 80075f8:	bd10      	pop	{r4, pc}
 80075fa:	bf00      	nop
 80075fc:	08007925 	.word	0x08007925
 8007600:	08007947 	.word	0x08007947
 8007604:	0800797f 	.word	0x0800797f
 8007608:	080079a3 	.word	0x080079a3

0800760c <_cleanup_r>:
 800760c:	4901      	ldr	r1, [pc, #4]	; (8007614 <_cleanup_r+0x8>)
 800760e:	f000 b8af 	b.w	8007770 <_fwalk_reent>
 8007612:	bf00      	nop
 8007614:	0800754d 	.word	0x0800754d

08007618 <__sfmoreglue>:
 8007618:	2268      	movs	r2, #104	; 0x68
 800761a:	b570      	push	{r4, r5, r6, lr}
 800761c:	1e4d      	subs	r5, r1, #1
 800761e:	4355      	muls	r5, r2
 8007620:	460e      	mov	r6, r1
 8007622:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007626:	f7ff fa21 	bl	8006a6c <_malloc_r>
 800762a:	4604      	mov	r4, r0
 800762c:	b140      	cbz	r0, 8007640 <__sfmoreglue+0x28>
 800762e:	2100      	movs	r1, #0
 8007630:	e9c0 1600 	strd	r1, r6, [r0]
 8007634:	300c      	adds	r0, #12
 8007636:	60a0      	str	r0, [r4, #8]
 8007638:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800763c:	f7fd fb86 	bl	8004d4c <memset>
 8007640:	4620      	mov	r0, r4
 8007642:	bd70      	pop	{r4, r5, r6, pc}

08007644 <__sfp_lock_acquire>:
 8007644:	4801      	ldr	r0, [pc, #4]	; (800764c <__sfp_lock_acquire+0x8>)
 8007646:	f000 b8b3 	b.w	80077b0 <__retarget_lock_acquire_recursive>
 800764a:	bf00      	nop
 800764c:	200002f1 	.word	0x200002f1

08007650 <__sfp_lock_release>:
 8007650:	4801      	ldr	r0, [pc, #4]	; (8007658 <__sfp_lock_release+0x8>)
 8007652:	f000 b8ae 	b.w	80077b2 <__retarget_lock_release_recursive>
 8007656:	bf00      	nop
 8007658:	200002f1 	.word	0x200002f1

0800765c <__sinit_lock_acquire>:
 800765c:	4801      	ldr	r0, [pc, #4]	; (8007664 <__sinit_lock_acquire+0x8>)
 800765e:	f000 b8a7 	b.w	80077b0 <__retarget_lock_acquire_recursive>
 8007662:	bf00      	nop
 8007664:	200002f2 	.word	0x200002f2

08007668 <__sinit_lock_release>:
 8007668:	4801      	ldr	r0, [pc, #4]	; (8007670 <__sinit_lock_release+0x8>)
 800766a:	f000 b8a2 	b.w	80077b2 <__retarget_lock_release_recursive>
 800766e:	bf00      	nop
 8007670:	200002f2 	.word	0x200002f2

08007674 <__sinit>:
 8007674:	b510      	push	{r4, lr}
 8007676:	4604      	mov	r4, r0
 8007678:	f7ff fff0 	bl	800765c <__sinit_lock_acquire>
 800767c:	69a3      	ldr	r3, [r4, #24]
 800767e:	b11b      	cbz	r3, 8007688 <__sinit+0x14>
 8007680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007684:	f7ff bff0 	b.w	8007668 <__sinit_lock_release>
 8007688:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800768c:	6523      	str	r3, [r4, #80]	; 0x50
 800768e:	4b13      	ldr	r3, [pc, #76]	; (80076dc <__sinit+0x68>)
 8007690:	4a13      	ldr	r2, [pc, #76]	; (80076e0 <__sinit+0x6c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	62a2      	str	r2, [r4, #40]	; 0x28
 8007696:	42a3      	cmp	r3, r4
 8007698:	bf08      	it	eq
 800769a:	2301      	moveq	r3, #1
 800769c:	4620      	mov	r0, r4
 800769e:	bf08      	it	eq
 80076a0:	61a3      	streq	r3, [r4, #24]
 80076a2:	f000 f81f 	bl	80076e4 <__sfp>
 80076a6:	6060      	str	r0, [r4, #4]
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 f81b 	bl	80076e4 <__sfp>
 80076ae:	60a0      	str	r0, [r4, #8]
 80076b0:	4620      	mov	r0, r4
 80076b2:	f000 f817 	bl	80076e4 <__sfp>
 80076b6:	2200      	movs	r2, #0
 80076b8:	2104      	movs	r1, #4
 80076ba:	60e0      	str	r0, [r4, #12]
 80076bc:	6860      	ldr	r0, [r4, #4]
 80076be:	f7ff ff81 	bl	80075c4 <std>
 80076c2:	2201      	movs	r2, #1
 80076c4:	2109      	movs	r1, #9
 80076c6:	68a0      	ldr	r0, [r4, #8]
 80076c8:	f7ff ff7c 	bl	80075c4 <std>
 80076cc:	2202      	movs	r2, #2
 80076ce:	2112      	movs	r1, #18
 80076d0:	68e0      	ldr	r0, [r4, #12]
 80076d2:	f7ff ff77 	bl	80075c4 <std>
 80076d6:	2301      	movs	r3, #1
 80076d8:	61a3      	str	r3, [r4, #24]
 80076da:	e7d1      	b.n	8007680 <__sinit+0xc>
 80076dc:	08007ad8 	.word	0x08007ad8
 80076e0:	0800760d 	.word	0x0800760d

080076e4 <__sfp>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	4607      	mov	r7, r0
 80076e8:	f7ff ffac 	bl	8007644 <__sfp_lock_acquire>
 80076ec:	4b1e      	ldr	r3, [pc, #120]	; (8007768 <__sfp+0x84>)
 80076ee:	681e      	ldr	r6, [r3, #0]
 80076f0:	69b3      	ldr	r3, [r6, #24]
 80076f2:	b913      	cbnz	r3, 80076fa <__sfp+0x16>
 80076f4:	4630      	mov	r0, r6
 80076f6:	f7ff ffbd 	bl	8007674 <__sinit>
 80076fa:	3648      	adds	r6, #72	; 0x48
 80076fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007700:	3b01      	subs	r3, #1
 8007702:	d503      	bpl.n	800770c <__sfp+0x28>
 8007704:	6833      	ldr	r3, [r6, #0]
 8007706:	b30b      	cbz	r3, 800774c <__sfp+0x68>
 8007708:	6836      	ldr	r6, [r6, #0]
 800770a:	e7f7      	b.n	80076fc <__sfp+0x18>
 800770c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007710:	b9d5      	cbnz	r5, 8007748 <__sfp+0x64>
 8007712:	4b16      	ldr	r3, [pc, #88]	; (800776c <__sfp+0x88>)
 8007714:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007718:	60e3      	str	r3, [r4, #12]
 800771a:	6665      	str	r5, [r4, #100]	; 0x64
 800771c:	f000 f847 	bl	80077ae <__retarget_lock_init_recursive>
 8007720:	f7ff ff96 	bl	8007650 <__sfp_lock_release>
 8007724:	2208      	movs	r2, #8
 8007726:	4629      	mov	r1, r5
 8007728:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800772c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007730:	6025      	str	r5, [r4, #0]
 8007732:	61a5      	str	r5, [r4, #24]
 8007734:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007738:	f7fd fb08 	bl	8004d4c <memset>
 800773c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007740:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007744:	4620      	mov	r0, r4
 8007746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007748:	3468      	adds	r4, #104	; 0x68
 800774a:	e7d9      	b.n	8007700 <__sfp+0x1c>
 800774c:	2104      	movs	r1, #4
 800774e:	4638      	mov	r0, r7
 8007750:	f7ff ff62 	bl	8007618 <__sfmoreglue>
 8007754:	4604      	mov	r4, r0
 8007756:	6030      	str	r0, [r6, #0]
 8007758:	2800      	cmp	r0, #0
 800775a:	d1d5      	bne.n	8007708 <__sfp+0x24>
 800775c:	f7ff ff78 	bl	8007650 <__sfp_lock_release>
 8007760:	230c      	movs	r3, #12
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	e7ee      	b.n	8007744 <__sfp+0x60>
 8007766:	bf00      	nop
 8007768:	08007ad8 	.word	0x08007ad8
 800776c:	ffff0001 	.word	0xffff0001

08007770 <_fwalk_reent>:
 8007770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007774:	4606      	mov	r6, r0
 8007776:	4688      	mov	r8, r1
 8007778:	2700      	movs	r7, #0
 800777a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800777e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007782:	f1b9 0901 	subs.w	r9, r9, #1
 8007786:	d505      	bpl.n	8007794 <_fwalk_reent+0x24>
 8007788:	6824      	ldr	r4, [r4, #0]
 800778a:	2c00      	cmp	r4, #0
 800778c:	d1f7      	bne.n	800777e <_fwalk_reent+0xe>
 800778e:	4638      	mov	r0, r7
 8007790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007794:	89ab      	ldrh	r3, [r5, #12]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d907      	bls.n	80077aa <_fwalk_reent+0x3a>
 800779a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800779e:	3301      	adds	r3, #1
 80077a0:	d003      	beq.n	80077aa <_fwalk_reent+0x3a>
 80077a2:	4629      	mov	r1, r5
 80077a4:	4630      	mov	r0, r6
 80077a6:	47c0      	blx	r8
 80077a8:	4307      	orrs	r7, r0
 80077aa:	3568      	adds	r5, #104	; 0x68
 80077ac:	e7e9      	b.n	8007782 <_fwalk_reent+0x12>

080077ae <__retarget_lock_init_recursive>:
 80077ae:	4770      	bx	lr

080077b0 <__retarget_lock_acquire_recursive>:
 80077b0:	4770      	bx	lr

080077b2 <__retarget_lock_release_recursive>:
 80077b2:	4770      	bx	lr

080077b4 <__swhatbuf_r>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	460e      	mov	r6, r1
 80077b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077bc:	4614      	mov	r4, r2
 80077be:	2900      	cmp	r1, #0
 80077c0:	461d      	mov	r5, r3
 80077c2:	b096      	sub	sp, #88	; 0x58
 80077c4:	da08      	bge.n	80077d8 <__swhatbuf_r+0x24>
 80077c6:	2200      	movs	r2, #0
 80077c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80077cc:	602a      	str	r2, [r5, #0]
 80077ce:	061a      	lsls	r2, r3, #24
 80077d0:	d410      	bmi.n	80077f4 <__swhatbuf_r+0x40>
 80077d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077d6:	e00e      	b.n	80077f6 <__swhatbuf_r+0x42>
 80077d8:	466a      	mov	r2, sp
 80077da:	f000 f909 	bl	80079f0 <_fstat_r>
 80077de:	2800      	cmp	r0, #0
 80077e0:	dbf1      	blt.n	80077c6 <__swhatbuf_r+0x12>
 80077e2:	9a01      	ldr	r2, [sp, #4]
 80077e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077ec:	425a      	negs	r2, r3
 80077ee:	415a      	adcs	r2, r3
 80077f0:	602a      	str	r2, [r5, #0]
 80077f2:	e7ee      	b.n	80077d2 <__swhatbuf_r+0x1e>
 80077f4:	2340      	movs	r3, #64	; 0x40
 80077f6:	2000      	movs	r0, #0
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	b016      	add	sp, #88	; 0x58
 80077fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007800 <__smakebuf_r>:
 8007800:	898b      	ldrh	r3, [r1, #12]
 8007802:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007804:	079d      	lsls	r5, r3, #30
 8007806:	4606      	mov	r6, r0
 8007808:	460c      	mov	r4, r1
 800780a:	d507      	bpl.n	800781c <__smakebuf_r+0x1c>
 800780c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	6123      	str	r3, [r4, #16]
 8007814:	2301      	movs	r3, #1
 8007816:	6163      	str	r3, [r4, #20]
 8007818:	b002      	add	sp, #8
 800781a:	bd70      	pop	{r4, r5, r6, pc}
 800781c:	466a      	mov	r2, sp
 800781e:	ab01      	add	r3, sp, #4
 8007820:	f7ff ffc8 	bl	80077b4 <__swhatbuf_r>
 8007824:	9900      	ldr	r1, [sp, #0]
 8007826:	4605      	mov	r5, r0
 8007828:	4630      	mov	r0, r6
 800782a:	f7ff f91f 	bl	8006a6c <_malloc_r>
 800782e:	b948      	cbnz	r0, 8007844 <__smakebuf_r+0x44>
 8007830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007834:	059a      	lsls	r2, r3, #22
 8007836:	d4ef      	bmi.n	8007818 <__smakebuf_r+0x18>
 8007838:	f023 0303 	bic.w	r3, r3, #3
 800783c:	f043 0302 	orr.w	r3, r3, #2
 8007840:	81a3      	strh	r3, [r4, #12]
 8007842:	e7e3      	b.n	800780c <__smakebuf_r+0xc>
 8007844:	4b0d      	ldr	r3, [pc, #52]	; (800787c <__smakebuf_r+0x7c>)
 8007846:	62b3      	str	r3, [r6, #40]	; 0x28
 8007848:	89a3      	ldrh	r3, [r4, #12]
 800784a:	6020      	str	r0, [r4, #0]
 800784c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007850:	81a3      	strh	r3, [r4, #12]
 8007852:	9b00      	ldr	r3, [sp, #0]
 8007854:	6120      	str	r0, [r4, #16]
 8007856:	6163      	str	r3, [r4, #20]
 8007858:	9b01      	ldr	r3, [sp, #4]
 800785a:	b15b      	cbz	r3, 8007874 <__smakebuf_r+0x74>
 800785c:	4630      	mov	r0, r6
 800785e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007862:	f000 f8d7 	bl	8007a14 <_isatty_r>
 8007866:	b128      	cbz	r0, 8007874 <__smakebuf_r+0x74>
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	f023 0303 	bic.w	r3, r3, #3
 800786e:	f043 0301 	orr.w	r3, r3, #1
 8007872:	81a3      	strh	r3, [r4, #12]
 8007874:	89a0      	ldrh	r0, [r4, #12]
 8007876:	4305      	orrs	r5, r0
 8007878:	81a5      	strh	r5, [r4, #12]
 800787a:	e7cd      	b.n	8007818 <__smakebuf_r+0x18>
 800787c:	0800760d 	.word	0x0800760d

08007880 <memchr>:
 8007880:	4603      	mov	r3, r0
 8007882:	b510      	push	{r4, lr}
 8007884:	b2c9      	uxtb	r1, r1
 8007886:	4402      	add	r2, r0
 8007888:	4293      	cmp	r3, r2
 800788a:	4618      	mov	r0, r3
 800788c:	d101      	bne.n	8007892 <memchr+0x12>
 800788e:	2000      	movs	r0, #0
 8007890:	e003      	b.n	800789a <memchr+0x1a>
 8007892:	7804      	ldrb	r4, [r0, #0]
 8007894:	3301      	adds	r3, #1
 8007896:	428c      	cmp	r4, r1
 8007898:	d1f6      	bne.n	8007888 <memchr+0x8>
 800789a:	bd10      	pop	{r4, pc}

0800789c <_raise_r>:
 800789c:	291f      	cmp	r1, #31
 800789e:	b538      	push	{r3, r4, r5, lr}
 80078a0:	4604      	mov	r4, r0
 80078a2:	460d      	mov	r5, r1
 80078a4:	d904      	bls.n	80078b0 <_raise_r+0x14>
 80078a6:	2316      	movs	r3, #22
 80078a8:	6003      	str	r3, [r0, #0]
 80078aa:	f04f 30ff 	mov.w	r0, #4294967295
 80078ae:	bd38      	pop	{r3, r4, r5, pc}
 80078b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078b2:	b112      	cbz	r2, 80078ba <_raise_r+0x1e>
 80078b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078b8:	b94b      	cbnz	r3, 80078ce <_raise_r+0x32>
 80078ba:	4620      	mov	r0, r4
 80078bc:	f000 f830 	bl	8007920 <_getpid_r>
 80078c0:	462a      	mov	r2, r5
 80078c2:	4601      	mov	r1, r0
 80078c4:	4620      	mov	r0, r4
 80078c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078ca:	f000 b817 	b.w	80078fc <_kill_r>
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d00a      	beq.n	80078e8 <_raise_r+0x4c>
 80078d2:	1c59      	adds	r1, r3, #1
 80078d4:	d103      	bne.n	80078de <_raise_r+0x42>
 80078d6:	2316      	movs	r3, #22
 80078d8:	6003      	str	r3, [r0, #0]
 80078da:	2001      	movs	r0, #1
 80078dc:	e7e7      	b.n	80078ae <_raise_r+0x12>
 80078de:	2400      	movs	r4, #0
 80078e0:	4628      	mov	r0, r5
 80078e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078e6:	4798      	blx	r3
 80078e8:	2000      	movs	r0, #0
 80078ea:	e7e0      	b.n	80078ae <_raise_r+0x12>

080078ec <raise>:
 80078ec:	4b02      	ldr	r3, [pc, #8]	; (80078f8 <raise+0xc>)
 80078ee:	4601      	mov	r1, r0
 80078f0:	6818      	ldr	r0, [r3, #0]
 80078f2:	f7ff bfd3 	b.w	800789c <_raise_r>
 80078f6:	bf00      	nop
 80078f8:	20000010 	.word	0x20000010

080078fc <_kill_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	2300      	movs	r3, #0
 8007900:	4d06      	ldr	r5, [pc, #24]	; (800791c <_kill_r+0x20>)
 8007902:	4604      	mov	r4, r0
 8007904:	4608      	mov	r0, r1
 8007906:	4611      	mov	r1, r2
 8007908:	602b      	str	r3, [r5, #0]
 800790a:	f7f9 fea4 	bl	8001656 <_kill>
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	d102      	bne.n	8007918 <_kill_r+0x1c>
 8007912:	682b      	ldr	r3, [r5, #0]
 8007914:	b103      	cbz	r3, 8007918 <_kill_r+0x1c>
 8007916:	6023      	str	r3, [r4, #0]
 8007918:	bd38      	pop	{r3, r4, r5, pc}
 800791a:	bf00      	nop
 800791c:	200002ec 	.word	0x200002ec

08007920 <_getpid_r>:
 8007920:	f7f9 be92 	b.w	8001648 <_getpid>

08007924 <__sread>:
 8007924:	b510      	push	{r4, lr}
 8007926:	460c      	mov	r4, r1
 8007928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792c:	f000 f894 	bl	8007a58 <_read_r>
 8007930:	2800      	cmp	r0, #0
 8007932:	bfab      	itete	ge
 8007934:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007936:	89a3      	ldrhlt	r3, [r4, #12]
 8007938:	181b      	addge	r3, r3, r0
 800793a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800793e:	bfac      	ite	ge
 8007940:	6563      	strge	r3, [r4, #84]	; 0x54
 8007942:	81a3      	strhlt	r3, [r4, #12]
 8007944:	bd10      	pop	{r4, pc}

08007946 <__swrite>:
 8007946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794a:	461f      	mov	r7, r3
 800794c:	898b      	ldrh	r3, [r1, #12]
 800794e:	4605      	mov	r5, r0
 8007950:	05db      	lsls	r3, r3, #23
 8007952:	460c      	mov	r4, r1
 8007954:	4616      	mov	r6, r2
 8007956:	d505      	bpl.n	8007964 <__swrite+0x1e>
 8007958:	2302      	movs	r3, #2
 800795a:	2200      	movs	r2, #0
 800795c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007960:	f000 f868 	bl	8007a34 <_lseek_r>
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	4632      	mov	r2, r6
 8007968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800796c:	81a3      	strh	r3, [r4, #12]
 800796e:	4628      	mov	r0, r5
 8007970:	463b      	mov	r3, r7
 8007972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800797a:	f000 b817 	b.w	80079ac <_write_r>

0800797e <__sseek>:
 800797e:	b510      	push	{r4, lr}
 8007980:	460c      	mov	r4, r1
 8007982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007986:	f000 f855 	bl	8007a34 <_lseek_r>
 800798a:	1c43      	adds	r3, r0, #1
 800798c:	89a3      	ldrh	r3, [r4, #12]
 800798e:	bf15      	itete	ne
 8007990:	6560      	strne	r0, [r4, #84]	; 0x54
 8007992:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007996:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800799a:	81a3      	strheq	r3, [r4, #12]
 800799c:	bf18      	it	ne
 800799e:	81a3      	strhne	r3, [r4, #12]
 80079a0:	bd10      	pop	{r4, pc}

080079a2 <__sclose>:
 80079a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a6:	f000 b813 	b.w	80079d0 <_close_r>
	...

080079ac <_write_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4604      	mov	r4, r0
 80079b0:	4608      	mov	r0, r1
 80079b2:	4611      	mov	r1, r2
 80079b4:	2200      	movs	r2, #0
 80079b6:	4d05      	ldr	r5, [pc, #20]	; (80079cc <_write_r+0x20>)
 80079b8:	602a      	str	r2, [r5, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	f7f9 fa78 	bl	8000eb0 <_write>
 80079c0:	1c43      	adds	r3, r0, #1
 80079c2:	d102      	bne.n	80079ca <_write_r+0x1e>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	b103      	cbz	r3, 80079ca <_write_r+0x1e>
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	bd38      	pop	{r3, r4, r5, pc}
 80079cc:	200002ec 	.word	0x200002ec

080079d0 <_close_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	2300      	movs	r3, #0
 80079d4:	4d05      	ldr	r5, [pc, #20]	; (80079ec <_close_r+0x1c>)
 80079d6:	4604      	mov	r4, r0
 80079d8:	4608      	mov	r0, r1
 80079da:	602b      	str	r3, [r5, #0]
 80079dc:	f7f9 fe72 	bl	80016c4 <_close>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	d102      	bne.n	80079ea <_close_r+0x1a>
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	b103      	cbz	r3, 80079ea <_close_r+0x1a>
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	bd38      	pop	{r3, r4, r5, pc}
 80079ec:	200002ec 	.word	0x200002ec

080079f0 <_fstat_r>:
 80079f0:	b538      	push	{r3, r4, r5, lr}
 80079f2:	2300      	movs	r3, #0
 80079f4:	4d06      	ldr	r5, [pc, #24]	; (8007a10 <_fstat_r+0x20>)
 80079f6:	4604      	mov	r4, r0
 80079f8:	4608      	mov	r0, r1
 80079fa:	4611      	mov	r1, r2
 80079fc:	602b      	str	r3, [r5, #0]
 80079fe:	f7f9 fe6c 	bl	80016da <_fstat>
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	d102      	bne.n	8007a0c <_fstat_r+0x1c>
 8007a06:	682b      	ldr	r3, [r5, #0]
 8007a08:	b103      	cbz	r3, 8007a0c <_fstat_r+0x1c>
 8007a0a:	6023      	str	r3, [r4, #0]
 8007a0c:	bd38      	pop	{r3, r4, r5, pc}
 8007a0e:	bf00      	nop
 8007a10:	200002ec 	.word	0x200002ec

08007a14 <_isatty_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	2300      	movs	r3, #0
 8007a18:	4d05      	ldr	r5, [pc, #20]	; (8007a30 <_isatty_r+0x1c>)
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	4608      	mov	r0, r1
 8007a1e:	602b      	str	r3, [r5, #0]
 8007a20:	f7f9 fe6a 	bl	80016f8 <_isatty>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d102      	bne.n	8007a2e <_isatty_r+0x1a>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	b103      	cbz	r3, 8007a2e <_isatty_r+0x1a>
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	200002ec 	.word	0x200002ec

08007a34 <_lseek_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4604      	mov	r4, r0
 8007a38:	4608      	mov	r0, r1
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	4d05      	ldr	r5, [pc, #20]	; (8007a54 <_lseek_r+0x20>)
 8007a40:	602a      	str	r2, [r5, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	f7f9 fe62 	bl	800170c <_lseek>
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	d102      	bne.n	8007a52 <_lseek_r+0x1e>
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	b103      	cbz	r3, 8007a52 <_lseek_r+0x1e>
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
 8007a54:	200002ec 	.word	0x200002ec

08007a58 <_read_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	4611      	mov	r1, r2
 8007a60:	2200      	movs	r2, #0
 8007a62:	4d05      	ldr	r5, [pc, #20]	; (8007a78 <_read_r+0x20>)
 8007a64:	602a      	str	r2, [r5, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	f7f9 fe0f 	bl	800168a <_read>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_read_r+0x1e>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_read_r+0x1e>
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	200002ec 	.word	0x200002ec

08007a7c <_init>:
 8007a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7e:	bf00      	nop
 8007a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a82:	bc08      	pop	{r3}
 8007a84:	469e      	mov	lr, r3
 8007a86:	4770      	bx	lr

08007a88 <_fini>:
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8a:	bf00      	nop
 8007a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8e:	bc08      	pop	{r3}
 8007a90:	469e      	mov	lr, r3
 8007a92:	4770      	bx	lr
