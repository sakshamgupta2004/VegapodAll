
LU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004388  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004494  08004494  00014494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044d4  080044d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080044d4  080044d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044d4  080044d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  080044e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080044e8  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2f7  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f41  00000000  00000000  0002e32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00030270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00030fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001837b  00000000  00000000  00031c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea16  00000000  00000000  00049f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f58d  00000000  00000000  000589a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7f36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003720  00000000  00000000  000e7f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800447c 	.word	0x0800447c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800447c 	.word	0x0800447c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc64 	bl	8000a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f83a 	bl	80001cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fa10 	bl	800057c <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f892 	bl	8000284 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000160:	f000 f8ce 	bl	8000300 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f9e0 	bl	8000528 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000168:	f000 f96a 	bl	8000440 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start(&hadc1);
 800016c:	4810      	ldr	r0, [pc, #64]	; (80001b0 <main+0x64>)
 800016e:	f000 fd8f 	bl	8000c90 <HAL_ADC_Start>
HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_1);
 8000172:	2100      	movs	r1, #0
 8000174:	480f      	ldr	r0, [pc, #60]	; (80001b4 <main+0x68>)
 8000176:	f003 f967 	bl	8003448 <HAL_TIMEx_PWMN_Start_IT>
HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800017a:	2100      	movs	r1, #0
 800017c:	480d      	ldr	r0, [pc, #52]	; (80001b4 <main+0x68>)
 800017e:	f002 fab5 	bl	80026ec <HAL_TIM_PWM_Start_IT>
HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000182:	2100      	movs	r1, #0
 8000184:	480c      	ldr	r0, [pc, #48]	; (80001b8 <main+0x6c>)
 8000186:	f002 fab1 	bl	80026ec <HAL_TIM_PWM_Start_IT>
targetCurrentma = 0;
 800018a:	4b0c      	ldr	r3, [pc, #48]	; (80001bc <main+0x70>)
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]

    /* USER CODE BEGIN 3 */
//	  sprintf(txBuffer,"%d\n",number);
	  //HAL_Delay(50);
	  //HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer,  strlen(txBuffer),500);
	  if(HAL_UART_Receive(&huart1,con_sig,10,10) != HAL_OK) {
 8000190:	230a      	movs	r3, #10
 8000192:	220a      	movs	r2, #10
 8000194:	490a      	ldr	r1, [pc, #40]	; (80001c0 <main+0x74>)
 8000196:	480b      	ldr	r0, [pc, #44]	; (80001c4 <main+0x78>)
 8000198:	f003 fb61 	bl	800385e <HAL_UART_Receive>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d0f6      	beq.n	8000190 <main+0x44>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a6:	4808      	ldr	r0, [pc, #32]	; (80001c8 <main+0x7c>)
 80001a8:	f001 fc0a 	bl	80019c0 <HAL_GPIO_TogglePin>
	  if(HAL_UART_Receive(&huart1,con_sig,10,10) != HAL_OK) {
 80001ac:	e7f0      	b.n	8000190 <main+0x44>
 80001ae:	bf00      	nop
 80001b0:	20000028 	.word	0x20000028
 80001b4:	20000058 	.word	0x20000058
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	20000148 	.word	0x20000148
 80001c0:	20000134 	.word	0x20000134
 80001c4:	200000e8 	.word	0x200000e8
 80001c8:	40011000 	.word	0x40011000

080001cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b094      	sub	sp, #80	; 0x50
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d6:	2228      	movs	r2, #40	; 0x28
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f004 f946 	bl	800446c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]
 80001ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001fc:	2301      	movs	r3, #1
 80001fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000204:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020a:	2301      	movs	r3, #1
 800020c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020e:	2302      	movs	r3, #2
 8000210:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000216:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000218:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800021c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000222:	4618      	mov	r0, r3
 8000224:	f001 fbe6 	bl	80019f4 <HAL_RCC_OscConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800022e:	f000 f9c7 	bl	80005c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000232:	230f      	movs	r3, #15
 8000234:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000236:	2302      	movs	r3, #2
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000242:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000248:	f107 0314 	add.w	r3, r7, #20
 800024c:	2102      	movs	r1, #2
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fe52 	bl	8001ef8 <HAL_RCC_ClockConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800025a:	f000 f9b1 	bl	80005c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800025e:	2302      	movs	r3, #2
 8000260:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000266:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	4618      	mov	r0, r3
 800026c:	f001 ffd2 	bl	8002214 <HAL_RCCEx_PeriphCLKConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000276:	f000 f9a3 	bl	80005c0 <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3750      	adds	r7, #80	; 0x50
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000294:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <MX_ADC1_Init+0x74>)
 8000296:	4a19      	ldr	r2, [pc, #100]	; (80002fc <MX_ADC1_Init+0x78>)
 8000298:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800029a:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <MX_ADC1_Init+0x74>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002a0:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <MX_ADC1_Init+0x74>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <MX_ADC1_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ac:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <MX_ADC1_Init+0x74>)
 80002ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <MX_ADC1_Init+0x74>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002ba:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <MX_ADC1_Init+0x74>)
 80002bc:	2201      	movs	r2, #1
 80002be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002c0:	480d      	ldr	r0, [pc, #52]	; (80002f8 <MX_ADC1_Init+0x74>)
 80002c2:	f000 fc0d 	bl	8000ae0 <HAL_ADC_Init>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002cc:	f000 f978 	bl	80005c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002d4:	2301      	movs	r3, #1
 80002d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4619      	mov	r1, r3
 80002e0:	4805      	ldr	r0, [pc, #20]	; (80002f8 <MX_ADC1_Init+0x74>)
 80002e2:	f000 fe95 	bl	8001010 <HAL_ADC_ConfigChannel>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002ec:	f000 f968 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f0:	bf00      	nop
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000028 	.word	0x20000028
 80002fc:	40012400 	.word	0x40012400

08000300 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b096      	sub	sp, #88	; 0x58
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000306:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000314:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800031e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]
 800032e:	615a      	str	r2, [r3, #20]
 8000330:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2220      	movs	r2, #32
 8000336:	2100      	movs	r1, #0
 8000338:	4618      	mov	r0, r3
 800033a:	f004 f897 	bl	800446c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800033e:	4b3e      	ldr	r3, [pc, #248]	; (8000438 <MX_TIM1_Init+0x138>)
 8000340:	4a3e      	ldr	r2, [pc, #248]	; (800043c <MX_TIM1_Init+0x13c>)
 8000342:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000344:	4b3c      	ldr	r3, [pc, #240]	; (8000438 <MX_TIM1_Init+0x138>)
 8000346:	2200      	movs	r2, #0
 8000348:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034a:	4b3b      	ldr	r3, [pc, #236]	; (8000438 <MX_TIM1_Init+0x138>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1439;
 8000350:	4b39      	ldr	r3, [pc, #228]	; (8000438 <MX_TIM1_Init+0x138>)
 8000352:	f240 529f 	movw	r2, #1439	; 0x59f
 8000356:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000358:	4b37      	ldr	r3, [pc, #220]	; (8000438 <MX_TIM1_Init+0x138>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800035e:	4b36      	ldr	r3, [pc, #216]	; (8000438 <MX_TIM1_Init+0x138>)
 8000360:	2200      	movs	r2, #0
 8000362:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000364:	4b34      	ldr	r3, [pc, #208]	; (8000438 <MX_TIM1_Init+0x138>)
 8000366:	2200      	movs	r2, #0
 8000368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800036a:	4833      	ldr	r0, [pc, #204]	; (8000438 <MX_TIM1_Init+0x138>)
 800036c:	f002 f8be 	bl	80024ec <HAL_TIM_Base_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000376:	f000 f923 	bl	80005c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800037e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000380:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000384:	4619      	mov	r1, r3
 8000386:	482c      	ldr	r0, [pc, #176]	; (8000438 <MX_TIM1_Init+0x138>)
 8000388:	f002 fcc6 	bl	8002d18 <HAL_TIM_ConfigClockSource>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000392:	f000 f915 	bl	80005c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000396:	4828      	ldr	r0, [pc, #160]	; (8000438 <MX_TIM1_Init+0x138>)
 8000398:	f002 f94f 	bl	800263a <HAL_TIM_PWM_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80003a2:	f000 f90d 	bl	80005c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a6:	2300      	movs	r3, #0
 80003a8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003aa:	2300      	movs	r3, #0
 80003ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003b2:	4619      	mov	r1, r3
 80003b4:	4820      	ldr	r0, [pc, #128]	; (8000438 <MX_TIM1_Init+0x138>)
 80003b6:	f003 f91d 	bl	80035f4 <HAL_TIMEx_MasterConfigSynchronization>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80003c0:	f000 f8fe 	bl	80005c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003c4:	2360      	movs	r3, #96	; 0x60
 80003c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003cc:	2300      	movs	r3, #0
 80003ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003d0:	2300      	movs	r3, #0
 80003d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003d4:	2300      	movs	r3, #0
 80003d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003d8:	2300      	movs	r3, #0
 80003da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003dc:	2300      	movs	r3, #0
 80003de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003e4:	2200      	movs	r2, #0
 80003e6:	4619      	mov	r1, r3
 80003e8:	4813      	ldr	r0, [pc, #76]	; (8000438 <MX_TIM1_Init+0x138>)
 80003ea:	f002 fbd3 	bl	8002b94 <HAL_TIM_PWM_ConfigChannel>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80003f4:	f000 f8e4 	bl	80005c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003f8:	2300      	movs	r3, #0
 80003fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 120;
 8000404:	2378      	movs	r3, #120	; 0x78
 8000406:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800040c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000410:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000412:	2300      	movs	r3, #0
 8000414:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	4619      	mov	r1, r3
 800041a:	4807      	ldr	r0, [pc, #28]	; (8000438 <MX_TIM1_Init+0x138>)
 800041c:	f003 f948 	bl	80036b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000426:	f000 f8cb 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800042a:	4803      	ldr	r0, [pc, #12]	; (8000438 <MX_TIM1_Init+0x138>)
 800042c:	f000 f96c 	bl	8000708 <HAL_TIM_MspPostInit>

}
 8000430:	bf00      	nop
 8000432:	3758      	adds	r7, #88	; 0x58
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000058 	.word	0x20000058
 800043c:	40012c00 	.word	0x40012c00

08000440 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b08e      	sub	sp, #56	; 0x38
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000454:	f107 0320 	add.w	r3, r7, #32
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
 800046c:	615a      	str	r2, [r3, #20]
 800046e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000470:	4b2c      	ldr	r3, [pc, #176]	; (8000524 <MX_TIM2_Init+0xe4>)
 8000472:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000476:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000478:	4b2a      	ldr	r3, [pc, #168]	; (8000524 <MX_TIM2_Init+0xe4>)
 800047a:	2200      	movs	r2, #0
 800047c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800047e:	4b29      	ldr	r3, [pc, #164]	; (8000524 <MX_TIM2_Init+0xe4>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000484:	4b27      	ldr	r3, [pc, #156]	; (8000524 <MX_TIM2_Init+0xe4>)
 8000486:	f241 3288 	movw	r2, #5000	; 0x1388
 800048a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800048c:	4b25      	ldr	r3, [pc, #148]	; (8000524 <MX_TIM2_Init+0xe4>)
 800048e:	2200      	movs	r2, #0
 8000490:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000492:	4b24      	ldr	r3, [pc, #144]	; (8000524 <MX_TIM2_Init+0xe4>)
 8000494:	2200      	movs	r2, #0
 8000496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000498:	4822      	ldr	r0, [pc, #136]	; (8000524 <MX_TIM2_Init+0xe4>)
 800049a:	f002 f827 	bl	80024ec <HAL_TIM_Base_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80004a4:	f000 f88c 	bl	80005c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004b2:	4619      	mov	r1, r3
 80004b4:	481b      	ldr	r0, [pc, #108]	; (8000524 <MX_TIM2_Init+0xe4>)
 80004b6:	f002 fc2f 	bl	8002d18 <HAL_TIM_ConfigClockSource>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80004c0:	f000 f87e 	bl	80005c0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80004c4:	4817      	ldr	r0, [pc, #92]	; (8000524 <MX_TIM2_Init+0xe4>)
 80004c6:	f002 f860 	bl	800258a <HAL_TIM_OC_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80004d0:	f000 f876 	bl	80005c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d8:	2300      	movs	r3, #0
 80004da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004dc:	f107 0320 	add.w	r3, r7, #32
 80004e0:	4619      	mov	r1, r3
 80004e2:	4810      	ldr	r0, [pc, #64]	; (8000524 <MX_TIM2_Init+0xe4>)
 80004e4:	f003 f886 	bl	80035f4 <HAL_TIMEx_MasterConfigSynchronization>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80004ee:	f000 f867 	bl	80005c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2500;
 80004f6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80004fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	4619      	mov	r1, r3
 800050a:	4806      	ldr	r0, [pc, #24]	; (8000524 <MX_TIM2_Init+0xe4>)
 800050c:	f002 fae6 	bl	8002adc <HAL_TIM_OC_ConfigChannel>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000516:	f000 f853 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	3738      	adds	r7, #56	; 0x38
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200000a0 	.word	0x200000a0

08000528 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 800052e:	4a12      	ldr	r2, [pc, #72]	; (8000578 <MX_USART1_UART_Init+0x50>)
 8000530:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 8000534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000538:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 800054e:	2204      	movs	r2, #4
 8000550:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 8000560:	f003 f92d 	bl	80037be <HAL_UART_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800056a:	f000 f829 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200000e8 	.word	0x200000e8
 8000578:	40013800 	.word	0x40013800

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_GPIO_Init+0x40>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <MX_GPIO_Init+0x40>)
 8000588:	f043 0320 	orr.w	r3, r3, #32
 800058c:	6193      	str	r3, [r2, #24]
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <MX_GPIO_Init+0x40>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	f003 0320 	and.w	r3, r3, #32
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <MX_GPIO_Init+0x40>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <MX_GPIO_Init+0x40>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <MX_GPIO_Init+0x40>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <HAL_MspInit+0x40>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a0d      	ldr	r2, [pc, #52]	; (800060c <HAL_MspInit+0x40>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <HAL_MspInit+0x40>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <HAL_MspInit+0x40>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a07      	ldr	r2, [pc, #28]	; (800060c <HAL_MspInit+0x40>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <HAL_MspInit+0x40>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a14      	ldr	r2, [pc, #80]	; (800067c <HAL_ADC_MspInit+0x6c>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d121      	bne.n	8000674 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <HAL_ADC_MspInit+0x70>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a12      	ldr	r2, [pc, #72]	; (8000680 <HAL_ADC_MspInit+0x70>)
 8000636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <HAL_ADC_MspInit+0x70>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <HAL_ADC_MspInit+0x70>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_ADC_MspInit+0x70>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_ADC_MspInit+0x70>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0304 	and.w	r3, r3, #4
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000660:	2301      	movs	r3, #1
 8000662:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000664:	2303      	movs	r3, #3
 8000666:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	4619      	mov	r1, r3
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <HAL_ADC_MspInit+0x74>)
 8000670:	f001 f822 	bl	80016b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40012400 	.word	0x40012400
 8000680:	40021000 	.word	0x40021000
 8000684:	40010800 	.word	0x40010800

08000688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <HAL_TIM_Base_MspInit+0x78>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d114      	bne.n	80006c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <HAL_TIM_Base_MspInit+0x7c>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	4a19      	ldr	r2, [pc, #100]	; (8000704 <HAL_TIM_Base_MspInit+0x7c>)
 80006a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006a4:	6193      	str	r3, [r2, #24]
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <HAL_TIM_Base_MspInit+0x7c>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	2019      	movs	r0, #25
 80006b8:	f000 ff15 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006bc:	2019      	movs	r0, #25
 80006be:	f000 ff2e 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006c2:	e018      	b.n	80006f6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006cc:	d113      	bne.n	80006f6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <HAL_TIM_Base_MspInit+0x7c>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a0c      	ldr	r2, [pc, #48]	; (8000704 <HAL_TIM_Base_MspInit+0x7c>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <HAL_TIM_Base_MspInit+0x7c>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	201c      	movs	r0, #28
 80006ec:	f000 fefb 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006f0:	201c      	movs	r0, #28
 80006f2:	f000 ff14 	bl	800151e <HAL_NVIC_EnableIRQ>
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40012c00 	.word	0x40012c00
 8000704:	40021000 	.word	0x40021000

08000708 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a19      	ldr	r2, [pc, #100]	; (8000788 <HAL_TIM_MspPostInit+0x80>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d12a      	bne.n	800077e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_TIM_MspPostInit+0x84>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a17      	ldr	r2, [pc, #92]	; (800078c <HAL_TIM_MspPostInit+0x84>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_TIM_MspPostInit+0x84>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000740:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000744:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2302      	movs	r3, #2
 800074c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4619      	mov	r1, r3
 8000754:	480e      	ldr	r0, [pc, #56]	; (8000790 <HAL_TIM_MspPostInit+0x88>)
 8000756:	f000 ffaf 	bl	80016b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <HAL_TIM_MspPostInit+0x8c>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	61fb      	str	r3, [r7, #28]
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000766:	61fb      	str	r3, [r7, #28]
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800076e:	61fb      	str	r3, [r7, #28]
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000776:	61fb      	str	r3, [r7, #28]
 8000778:	4a06      	ldr	r2, [pc, #24]	; (8000794 <HAL_TIM_MspPostInit+0x8c>)
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800077e:	bf00      	nop
 8000780:	3720      	adds	r7, #32
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40012c00 	.word	0x40012c00
 800078c:	40021000 	.word	0x40021000
 8000790:	40010800 	.word	0x40010800
 8000794:	40010000 	.word	0x40010000

08000798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a20      	ldr	r2, [pc, #128]	; (8000834 <HAL_UART_MspInit+0x9c>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d139      	bne.n	800082c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <HAL_UART_MspInit+0xa0>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <HAL_UART_MspInit+0xa0>)
 80007be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <HAL_UART_MspInit+0xa0>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <HAL_UART_MspInit+0xa0>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a18      	ldr	r2, [pc, #96]	; (8000838 <HAL_UART_MspInit+0xa0>)
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <HAL_UART_MspInit+0xa0>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	4619      	mov	r1, r3
 80007fc:	480f      	ldr	r0, [pc, #60]	; (800083c <HAL_UART_MspInit+0xa4>)
 80007fe:	f000 ff5b 	bl	80016b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000806:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <HAL_UART_MspInit+0xa4>)
 8000818:	f000 ff4e 	bl	80016b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	2025      	movs	r0, #37	; 0x25
 8000822:	f000 fe60 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000826:	2025      	movs	r0, #37	; 0x25
 8000828:	f000 fe79 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800082c:	bf00      	nop
 800082e:	3720      	adds	r7, #32
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40013800 	.word	0x40013800
 8000838:	40021000 	.word	0x40021000
 800083c:	40010800 	.word	0x40010800

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <NMI_Handler+0x4>

08000846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <MemManage_Handler+0x4>

08000852 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <BusFault_Handler+0x4>

08000858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <UsageFault_Handler+0x4>

0800085e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr

08000876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
	...

08000884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
ticks++;
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <SysTick_Handler+0x28>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	3301      	adds	r3, #1
 800088e:	4a07      	ldr	r2, [pc, #28]	; (80008ac <SysTick_Handler+0x28>)
 8000890:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000892:	f000 f909 	bl	8000aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

if (ticks >= 1000) {
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <SysTick_Handler+0x28>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800089e:	db02      	blt.n	80008a6 <SysTick_Handler+0x22>
	ticks = 0;
 80008a0:	4b02      	ldr	r3, [pc, #8]	; (80008ac <SysTick_Handler+0x28>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
//		  targetCurrentma = 11000;
//	  else
//		  targetCurrentma = 1000;
}
  /* USER CODE END SysTick_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000014c 	.word	0x2000014c

080008b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <TIM1_UP_IRQHandler+0x10>)
 80008b6:	f002 f809 	bl	80028cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000058 	.word	0x20000058

080008c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008c8:	4831      	ldr	r0, [pc, #196]	; (8000990 <TIM2_IRQHandler+0xcc>)
 80008ca:	f001 ffff 	bl	80028cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if (targetCurrentma > 10000) {
 80008ce:	4b31      	ldr	r3, [pc, #196]	; (8000994 <TIM2_IRQHandler+0xd0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80008d6:	4293      	cmp	r3, r2
 80008d8:	dd04      	ble.n	80008e4 <TIM2_IRQHandler+0x20>
      	  		  targetCurrentma = 10000;
 80008da:	4b2e      	ldr	r3, [pc, #184]	; (8000994 <TIM2_IRQHandler+0xd0>)
 80008dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	e008      	b.n	80008f6 <TIM2_IRQHandler+0x32>
      	  	  }
      	  	  else if (targetCurrentma < 1200) {
 80008e4:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <TIM2_IRQHandler+0xd0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80008ec:	da03      	bge.n	80008f6 <TIM2_IRQHandler+0x32>
      	  		  targetCurrentma = 1200;
 80008ee:	4b29      	ldr	r3, [pc, #164]	; (8000994 <TIM2_IRQHandler+0xd0>)
 80008f0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80008f4:	601a      	str	r2, [r3, #0]
      	  	  }
    	  	  HAL_ADC_PollForConversion(&hadc1, 0);
 80008f6:	2100      	movs	r1, #0
 80008f8:	4827      	ldr	r0, [pc, #156]	; (8000998 <TIM2_IRQHandler+0xd4>)
 80008fa:	f000 fa77 	bl	8000dec <HAL_ADC_PollForConversion>
    	  	  value1 = HAL_ADC_GetValue(&hadc1);
 80008fe:	4826      	ldr	r0, [pc, #152]	; (8000998 <TIM2_IRQHandler+0xd4>)
 8000900:	f000 fb7a 	bl	8000ff8 <HAL_ADC_GetValue>
 8000904:	4603      	mov	r3, r0
 8000906:	b29a      	uxth	r2, r3
 8000908:	4b24      	ldr	r3, [pc, #144]	; (800099c <TIM2_IRQHandler+0xd8>)
 800090a:	801a      	strh	r2, [r3, #0]
    	  	  	  currentma = (value1 * 10000)/1240;
 800090c:	4b23      	ldr	r3, [pc, #140]	; (800099c <TIM2_IRQHandler+0xd8>)
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	f242 7310 	movw	r3, #10000	; 0x2710
 8000916:	fb02 f303 	mul.w	r3, r2, r3
 800091a:	4a21      	ldr	r2, [pc, #132]	; (80009a0 <TIM2_IRQHandler+0xdc>)
 800091c:	fb82 1203 	smull	r1, r2, r2, r3
 8000920:	11d2      	asrs	r2, r2, #7
 8000922:	17db      	asrs	r3, r3, #31
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	4a1f      	ldr	r2, [pc, #124]	; (80009a4 <TIM2_IRQHandler+0xe0>)
 8000928:	6013      	str	r3, [r2, #0]
    	  	  	  if (currentma+1000 > targetCurrentma) currPWM-=5;
 800092a:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <TIM2_IRQHandler+0xe0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <TIM2_IRQHandler+0xd0>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	429a      	cmp	r2, r3
 8000938:	db05      	blt.n	8000946 <TIM2_IRQHandler+0x82>
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <TIM2_IRQHandler+0xe4>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	3b05      	subs	r3, #5
 8000940:	4a19      	ldr	r2, [pc, #100]	; (80009a8 <TIM2_IRQHandler+0xe4>)
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e00c      	b.n	8000960 <TIM2_IRQHandler+0x9c>
    	  	  	  else if (currentma+1000 < targetCurrentma)currPWM+=5;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <TIM2_IRQHandler+0xe0>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <TIM2_IRQHandler+0xd0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	429a      	cmp	r2, r3
 8000954:	da04      	bge.n	8000960 <TIM2_IRQHandler+0x9c>
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <TIM2_IRQHandler+0xe4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	3305      	adds	r3, #5
 800095c:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <TIM2_IRQHandler+0xe4>)
 800095e:	6013      	str	r3, [r2, #0]
    	  	  	  if (currPWM > 1250) currPWM = 1250;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <TIM2_IRQHandler+0xe4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000968:	4293      	cmp	r3, r2
 800096a:	dd04      	ble.n	8000976 <TIM2_IRQHandler+0xb2>
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <TIM2_IRQHandler+0xe4>)
 800096e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	e006      	b.n	8000984 <TIM2_IRQHandler+0xc0>
    	  	  	  else if (currPWM < 0) currPWM = 0;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <TIM2_IRQHandler+0xe4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	da02      	bge.n	8000984 <TIM2_IRQHandler+0xc0>
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <TIM2_IRQHandler+0xe4>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
    	  	  	  TIM1->CCR1=currPWM;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <TIM2_IRQHandler+0xe4>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <TIM2_IRQHandler+0xe8>)
 800098a:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END TIM2_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200000a0 	.word	0x200000a0
 8000994:	20000148 	.word	0x20000148
 8000998:	20000028 	.word	0x20000028
 800099c:	20000130 	.word	0x20000130
 80009a0:	1a6d01a7 	.word	0x1a6d01a7
 80009a4:	20000140 	.word	0x20000140
 80009a8:	20000144 	.word	0x20000144
 80009ac:	40012c00 	.word	0x40012c00

080009b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <USART1_IRQHandler+0x10>)
 80009b6:	f002 ffe5 	bl	8003984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000e8 	.word	0x200000e8

080009c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d0:	f7ff fff8 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009d6:	490c      	ldr	r1, [pc, #48]	; (8000a08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <LoopFillZerobss+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009dc:	e002      	b.n	80009e4 <LoopCopyDataInit>

080009de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e2:	3304      	adds	r3, #4

080009e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e8:	d3f9      	bcc.n	80009de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ea:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009ec:	4c09      	ldr	r4, [pc, #36]	; (8000a14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f0:	e001      	b.n	80009f6 <LoopFillZerobss>

080009f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f4:	3204      	adds	r2, #4

080009f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f8:	d3fb      	bcc.n	80009f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fa:	f003 fd13 	bl	8004424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fe:	f7ff fba5 	bl	800014c <main>
  bx lr
 8000a02:	4770      	bx	lr
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a0c:	080044dc 	.word	0x080044dc
  ldr r2, =_sbss
 8000a10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a14:	20000154 	.word	0x20000154

08000a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC1_2_IRQHandler>
	...

08000a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_Init+0x28>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_Init+0x28>)
 8000a26:	f043 0310 	orr.w	r3, r3, #16
 8000a2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 fd4f 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a32:	200f      	movs	r0, #15
 8000a34:	f000 f808 	bl	8000a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a38:	f7ff fdc8 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40022000 	.word	0x40022000

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_InitTick+0x54>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_InitTick+0x58>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fd67 	bl	800153a <HAL_SYSTICK_Config>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00e      	b.n	8000a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b0f      	cmp	r3, #15
 8000a7a:	d80a      	bhi.n	8000a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f000 fd2f 	bl	80014e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a88:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <HAL_InitTick+0x5c>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e000      	b.n	8000a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_IncTick+0x1c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x20>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a03      	ldr	r2, [pc, #12]	; (8000ac8 <HAL_IncTick+0x20>)
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000150 	.word	0x20000150

08000acc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <HAL_GetTick+0x10>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	20000150 	.word	0x20000150

08000ae0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d101      	bne.n	8000b02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e0be      	b.n	8000c80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d109      	bne.n	8000b24 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff fd76 	bl	8000610 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f000 fbc5 	bl	80012b4 <ADC_ConversionStop_Disable>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f040 8099 	bne.w	8000c6e <HAL_ADC_Init+0x18e>
 8000b3c:	7dfb      	ldrb	r3, [r7, #23]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8095 	bne.w	8000c6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b4c:	f023 0302 	bic.w	r3, r3, #2
 8000b50:	f043 0202 	orr.w	r2, r3, #2
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b60:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7b1b      	ldrb	r3, [r3, #12]
 8000b66:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b68:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b78:	d003      	beq.n	8000b82 <HAL_ADC_Init+0xa2>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d102      	bne.n	8000b88 <HAL_ADC_Init+0xa8>
 8000b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b86:	e000      	b.n	8000b8a <HAL_ADC_Init+0xaa>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7d1b      	ldrb	r3, [r3, #20]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d119      	bne.n	8000bcc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7b1b      	ldrb	r3, [r3, #12]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d109      	bne.n	8000bb4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	035a      	lsls	r2, r3, #13
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	e00b      	b.n	8000bcc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb8:	f043 0220 	orr.w	r2, r3, #32
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc4:	f043 0201 	orr.w	r2, r3, #1
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <HAL_ADC_Init+0x1a8>)
 8000be8:	4013      	ands	r3, r2
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	6812      	ldr	r2, [r2, #0]
 8000bee:	68b9      	ldr	r1, [r7, #8]
 8000bf0:	430b      	orrs	r3, r1
 8000bf2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bfc:	d003      	beq.n	8000c06 <HAL_ADC_Init+0x126>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d104      	bne.n	8000c10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	691b      	ldr	r3, [r3, #16]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	051b      	lsls	r3, r3, #20
 8000c0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	430a      	orrs	r2, r1
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_ADC_Init+0x1ac>)
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d10b      	bne.n	8000c4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3e:	f023 0303 	bic.w	r3, r3, #3
 8000c42:	f043 0201 	orr.w	r2, r3, #1
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c4a:	e018      	b.n	8000c7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	f023 0312 	bic.w	r3, r3, #18
 8000c54:	f043 0210 	orr.w	r2, r3, #16
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	f043 0201 	orr.w	r2, r3, #1
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c6c:	e007      	b.n	8000c7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	f043 0210 	orr.w	r2, r3, #16
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	ffe1f7fd 	.word	0xffe1f7fd
 8000c8c:	ff1f0efe 	.word	0xff1f0efe

08000c90 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d101      	bne.n	8000caa <HAL_ADC_Start+0x1a>
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	e098      	b.n	8000ddc <HAL_ADC_Start+0x14c>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2201      	movs	r2, #1
 8000cae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f000 faa4 	bl	8001200 <ADC_Enable>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8087 	bne.w	8000dd2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ccc:	f023 0301 	bic.w	r3, r3, #1
 8000cd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a41      	ldr	r2, [pc, #260]	; (8000de4 <HAL_ADC_Start+0x154>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d105      	bne.n	8000cee <HAL_ADC_Start+0x5e>
 8000ce2:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <HAL_ADC_Start+0x158>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d115      	bne.n	8000d1a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d026      	beq.n	8000d56 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d18:	e01d      	b.n	8000d56 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a2f      	ldr	r2, [pc, #188]	; (8000de8 <HAL_ADC_Start+0x158>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d004      	beq.n	8000d3a <HAL_ADC_Start+0xaa>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a2b      	ldr	r2, [pc, #172]	; (8000de4 <HAL_ADC_Start+0x154>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d10d      	bne.n	8000d56 <HAL_ADC_Start+0xc6>
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <HAL_ADC_Start+0x158>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d007      	beq.n	8000d56 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d006      	beq.n	8000d70 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d66:	f023 0206 	bic.w	r2, r3, #6
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d6e:	e002      	b.n	8000d76 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f06f 0202 	mvn.w	r2, #2
 8000d86:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d92:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d96:	d113      	bne.n	8000dc0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d9c:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <HAL_ADC_Start+0x154>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d105      	bne.n	8000dae <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_ADC_Start+0x158>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d108      	bne.n	8000dc0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	e00c      	b.n	8000dda <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689a      	ldr	r2, [r3, #8]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	e003      	b.n	8000dda <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40012800 	.word	0x40012800
 8000de8:	40012400 	.word	0x40012400

08000dec <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e02:	f7ff fe63 	bl	8000acc <HAL_GetTick>
 8000e06:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00b      	beq.n	8000e2e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1a:	f043 0220 	orr.w	r2, r3, #32
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e0d3      	b.n	8000fd6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d131      	bne.n	8000ea0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d12a      	bne.n	8000ea0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e4a:	e021      	b.n	8000e90 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e52:	d01d      	beq.n	8000e90 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d007      	beq.n	8000e6a <HAL_ADC_PollForConversion+0x7e>
 8000e5a:	f7ff fe37 	bl	8000acc <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d212      	bcs.n	8000e90 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10b      	bne.n	8000e90 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7c:	f043 0204 	orr.w	r2, r3, #4
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e0a2      	b.n	8000fd6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0d6      	beq.n	8000e4c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000e9e:	e070      	b.n	8000f82 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000ea0:	4b4f      	ldr	r3, [pc, #316]	; (8000fe0 <HAL_ADC_PollForConversion+0x1f4>)
 8000ea2:	681c      	ldr	r4, [r3, #0]
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f001 fa6b 	bl	8002380 <HAL_RCCEx_GetPeriphCLKFreq>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6919      	ldr	r1, [r3, #16]
 8000eb6:	4b4b      	ldr	r3, [pc, #300]	; (8000fe4 <HAL_ADC_PollForConversion+0x1f8>)
 8000eb8:	400b      	ands	r3, r1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d118      	bne.n	8000ef0 <HAL_ADC_PollForConversion+0x104>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68d9      	ldr	r1, [r3, #12]
 8000ec4:	4b48      	ldr	r3, [pc, #288]	; (8000fe8 <HAL_ADC_PollForConversion+0x1fc>)
 8000ec6:	400b      	ands	r3, r1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d111      	bne.n	8000ef0 <HAL_ADC_PollForConversion+0x104>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6919      	ldr	r1, [r3, #16]
 8000ed2:	4b46      	ldr	r3, [pc, #280]	; (8000fec <HAL_ADC_PollForConversion+0x200>)
 8000ed4:	400b      	ands	r3, r1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d108      	bne.n	8000eec <HAL_ADC_PollForConversion+0x100>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68d9      	ldr	r1, [r3, #12]
 8000ee0:	4b43      	ldr	r3, [pc, #268]	; (8000ff0 <HAL_ADC_PollForConversion+0x204>)
 8000ee2:	400b      	ands	r3, r1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d101      	bne.n	8000eec <HAL_ADC_PollForConversion+0x100>
 8000ee8:	2314      	movs	r3, #20
 8000eea:	e020      	b.n	8000f2e <HAL_ADC_PollForConversion+0x142>
 8000eec:	2329      	movs	r3, #41	; 0x29
 8000eee:	e01e      	b.n	8000f2e <HAL_ADC_PollForConversion+0x142>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6919      	ldr	r1, [r3, #16]
 8000ef6:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <HAL_ADC_PollForConversion+0x200>)
 8000ef8:	400b      	ands	r3, r1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d106      	bne.n	8000f0c <HAL_ADC_PollForConversion+0x120>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68d9      	ldr	r1, [r3, #12]
 8000f04:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <HAL_ADC_PollForConversion+0x204>)
 8000f06:	400b      	ands	r3, r1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00d      	beq.n	8000f28 <HAL_ADC_PollForConversion+0x13c>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6919      	ldr	r1, [r3, #16]
 8000f12:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <HAL_ADC_PollForConversion+0x208>)
 8000f14:	400b      	ands	r3, r1
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d108      	bne.n	8000f2c <HAL_ADC_PollForConversion+0x140>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68d9      	ldr	r1, [r3, #12]
 8000f20:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <HAL_ADC_PollForConversion+0x208>)
 8000f22:	400b      	ands	r3, r1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <HAL_ADC_PollForConversion+0x140>
 8000f28:	2354      	movs	r3, #84	; 0x54
 8000f2a:	e000      	b.n	8000f2e <HAL_ADC_PollForConversion+0x142>
 8000f2c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000f2e:	fb02 f303 	mul.w	r3, r2, r3
 8000f32:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f34:	e021      	b.n	8000f7a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3c:	d01a      	beq.n	8000f74 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d007      	beq.n	8000f54 <HAL_ADC_PollForConversion+0x168>
 8000f44:	f7ff fdc2 	bl	8000acc <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d20f      	bcs.n	8000f74 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d90b      	bls.n	8000f74 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f60:	f043 0204 	orr.w	r2, r3, #4
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e030      	b.n	8000fd6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3301      	adds	r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d8d9      	bhi.n	8000f36 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f06f 0212 	mvn.w	r2, #18
 8000f8a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fa2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fa6:	d115      	bne.n	8000fd4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d111      	bne.n	8000fd4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d105      	bne.n	8000fd4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	f043 0201 	orr.w	r2, r3, #1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	371c      	adds	r7, #28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd90      	pop	{r4, r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	24924924 	.word	0x24924924
 8000fe8:	00924924 	.word	0x00924924
 8000fec:	12492492 	.word	0x12492492
 8000ff0:	00492492 	.word	0x00492492
 8000ff4:	00249249 	.word	0x00249249

08000ff8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001028:	2b01      	cmp	r3, #1
 800102a:	d101      	bne.n	8001030 <HAL_ADC_ConfigChannel+0x20>
 800102c:	2302      	movs	r3, #2
 800102e:	e0dc      	b.n	80011ea <HAL_ADC_ConfigChannel+0x1da>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b06      	cmp	r3, #6
 800103e:	d81c      	bhi.n	800107a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	3b05      	subs	r3, #5
 8001052:	221f      	movs	r2, #31
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	4019      	ands	r1, r3
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	3b05      	subs	r3, #5
 800106c:	fa00 f203 	lsl.w	r2, r0, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	430a      	orrs	r2, r1
 8001076:	635a      	str	r2, [r3, #52]	; 0x34
 8001078:	e03c      	b.n	80010f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b0c      	cmp	r3, #12
 8001080:	d81c      	bhi.n	80010bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	3b23      	subs	r3, #35	; 0x23
 8001094:	221f      	movs	r2, #31
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	4019      	ands	r1, r3
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	3b23      	subs	r3, #35	; 0x23
 80010ae:	fa00 f203 	lsl.w	r2, r0, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
 80010ba:	e01b      	b.n	80010f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	3b41      	subs	r3, #65	; 0x41
 80010ce:	221f      	movs	r2, #31
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	4019      	ands	r1, r3
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	3b41      	subs	r3, #65	; 0x41
 80010e8:	fa00 f203 	lsl.w	r2, r0, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b09      	cmp	r3, #9
 80010fa:	d91c      	bls.n	8001136 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	68d9      	ldr	r1, [r3, #12]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4613      	mov	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4413      	add	r3, r2
 800110c:	3b1e      	subs	r3, #30
 800110e:	2207      	movs	r2, #7
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	4019      	ands	r1, r3
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	6898      	ldr	r0, [r3, #8]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	3b1e      	subs	r3, #30
 8001128:	fa00 f203 	lsl.w	r2, r0, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	e019      	b.n	800116a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6919      	ldr	r1, [r3, #16]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	2207      	movs	r2, #7
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	4019      	ands	r1, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	6898      	ldr	r0, [r3, #8]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	fa00 f203 	lsl.w	r2, r0, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b10      	cmp	r3, #16
 8001170:	d003      	beq.n	800117a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001176:	2b11      	cmp	r3, #17
 8001178:	d132      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d125      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d126      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b10      	cmp	r3, #16
 80011a8:	d11a      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a13      	ldr	r2, [pc, #76]	; (80011fc <HAL_ADC_ConfigChannel+0x1ec>)
 80011b0:	fba2 2303 	umull	r2, r3, r2, r3
 80011b4:	0c9a      	lsrs	r2, r3, #18
 80011b6:	4613      	mov	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011c0:	e002      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f9      	bne.n	80011c2 <HAL_ADC_ConfigChannel+0x1b2>
 80011ce:	e007      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	f043 0220 	orr.w	r2, r3, #32
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	40012400 	.word	0x40012400
 80011f8:	20000000 	.word	0x20000000
 80011fc:	431bde83 	.word	0x431bde83

08001200 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b01      	cmp	r3, #1
 800121c:	d040      	beq.n	80012a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0201 	orr.w	r2, r2, #1
 800122c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <ADC_Enable+0xac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <ADC_Enable+0xb0>)
 8001234:	fba2 2303 	umull	r2, r3, r2, r3
 8001238:	0c9b      	lsrs	r3, r3, #18
 800123a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800123c:	e002      	b.n	8001244 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	3b01      	subs	r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f9      	bne.n	800123e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800124a:	f7ff fc3f 	bl	8000acc <HAL_GetTick>
 800124e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001250:	e01f      	b.n	8001292 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001252:	f7ff fc3b 	bl	8000acc <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d918      	bls.n	8001292 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b01      	cmp	r3, #1
 800126c:	d011      	beq.n	8001292 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001272:	f043 0210 	orr.w	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127e:	f043 0201 	orr.w	r2, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e007      	b.n	80012a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b01      	cmp	r3, #1
 800129e:	d1d8      	bne.n	8001252 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000000 	.word	0x20000000
 80012b0:	431bde83 	.word	0x431bde83

080012b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d12e      	bne.n	800132c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0201 	bic.w	r2, r2, #1
 80012dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012de:	f7ff fbf5 	bl	8000acc <HAL_GetTick>
 80012e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012e4:	e01b      	b.n	800131e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012e6:	f7ff fbf1 	bl	8000acc <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d914      	bls.n	800131e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d10d      	bne.n	800131e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001306:	f043 0210 	orr.w	r2, r3, #16
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	f043 0201 	orr.w	r2, r3, #1
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e007      	b.n	800132e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b01      	cmp	r3, #1
 800132a:	d0dc      	beq.n	80012e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db0b      	blt.n	80013c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f003 021f 	and.w	r2, r3, #31
 80013b4:	4906      	ldr	r1, [pc, #24]	; (80013d0 <__NVIC_EnableIRQ+0x34>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	2001      	movs	r0, #1
 80013be:	fa00 f202 	lsl.w	r2, r0, r2
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100

080013d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db0a      	blt.n	80013fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	490c      	ldr	r1, [pc, #48]	; (8001420 <__NVIC_SetPriority+0x4c>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	440b      	add	r3, r1
 80013f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013fc:	e00a      	b.n	8001414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <__NVIC_SetPriority+0x50>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	3b04      	subs	r3, #4
 800140c:	0112      	lsls	r2, r2, #4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	440b      	add	r3, r1
 8001412:	761a      	strb	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f1c3 0307 	rsb	r3, r3, #7
 8001442:	2b04      	cmp	r3, #4
 8001444:	bf28      	it	cs
 8001446:	2304      	movcs	r3, #4
 8001448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3304      	adds	r3, #4
 800144e:	2b06      	cmp	r3, #6
 8001450:	d902      	bls.n	8001458 <NVIC_EncodePriority+0x30>
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3b03      	subs	r3, #3
 8001456:	e000      	b.n	800145a <NVIC_EncodePriority+0x32>
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	f04f 32ff 	mov.w	r2, #4294967295
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001470:	f04f 31ff 	mov.w	r1, #4294967295
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43d9      	mvns	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	4313      	orrs	r3, r2
         );
}
 8001482:	4618      	mov	r0, r3
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800149c:	d301      	bcc.n	80014a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149e:	2301      	movs	r3, #1
 80014a0:	e00f      	b.n	80014c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <SysTick_Config+0x40>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014aa:	210f      	movs	r1, #15
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f7ff ff90 	bl	80013d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <SysTick_Config+0x40>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SysTick_Config+0x40>)
 80014bc:	2207      	movs	r2, #7
 80014be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff2d 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f8:	f7ff ff42 	bl	8001380 <__NVIC_GetPriorityGrouping>
 80014fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ff90 	bl	8001428 <NVIC_EncodePriority>
 8001508:	4602      	mov	r2, r0
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff5f 	bl	80013d4 <__NVIC_SetPriority>
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff35 	bl	800139c <__NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ffa2 	bl	800148c <SysTick_Config>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001552:	b480      	push	{r7}
 8001554:	b085      	sub	sp, #20
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d008      	beq.n	800157c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2204      	movs	r2, #4
 800156e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e020      	b.n	80015be <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 020e 	bic.w	r2, r2, #14
 800158a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a4:	2101      	movs	r1, #1
 80015a6:	fa01 f202 	lsl.w	r2, r1, r2
 80015aa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d005      	beq.n	80015ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2204      	movs	r2, #4
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	e051      	b.n	8001690 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 020e 	bic.w	r2, r2, #14
 80015fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a22      	ldr	r2, [pc, #136]	; (800169c <HAL_DMA_Abort_IT+0xd4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d029      	beq.n	800166a <HAL_DMA_Abort_IT+0xa2>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a21      	ldr	r2, [pc, #132]	; (80016a0 <HAL_DMA_Abort_IT+0xd8>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d022      	beq.n	8001666 <HAL_DMA_Abort_IT+0x9e>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1f      	ldr	r2, [pc, #124]	; (80016a4 <HAL_DMA_Abort_IT+0xdc>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d01a      	beq.n	8001660 <HAL_DMA_Abort_IT+0x98>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a1e      	ldr	r2, [pc, #120]	; (80016a8 <HAL_DMA_Abort_IT+0xe0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d012      	beq.n	800165a <HAL_DMA_Abort_IT+0x92>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a1c      	ldr	r2, [pc, #112]	; (80016ac <HAL_DMA_Abort_IT+0xe4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d00a      	beq.n	8001654 <HAL_DMA_Abort_IT+0x8c>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <HAL_DMA_Abort_IT+0xe8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d102      	bne.n	800164e <HAL_DMA_Abort_IT+0x86>
 8001648:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800164c:	e00e      	b.n	800166c <HAL_DMA_Abort_IT+0xa4>
 800164e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001652:	e00b      	b.n	800166c <HAL_DMA_Abort_IT+0xa4>
 8001654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001658:	e008      	b.n	800166c <HAL_DMA_Abort_IT+0xa4>
 800165a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165e:	e005      	b.n	800166c <HAL_DMA_Abort_IT+0xa4>
 8001660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001664:	e002      	b.n	800166c <HAL_DMA_Abort_IT+0xa4>
 8001666:	2310      	movs	r3, #16
 8001668:	e000      	b.n	800166c <HAL_DMA_Abort_IT+0xa4>
 800166a:	2301      	movs	r3, #1
 800166c:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_DMA_Abort_IT+0xec>)
 800166e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	4798      	blx	r3
    } 
  }
  return status;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40020008 	.word	0x40020008
 80016a0:	4002001c 	.word	0x4002001c
 80016a4:	40020030 	.word	0x40020030
 80016a8:	40020044 	.word	0x40020044
 80016ac:	40020058 	.word	0x40020058
 80016b0:	4002006c 	.word	0x4002006c
 80016b4:	40020000 	.word	0x40020000

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b08b      	sub	sp, #44	; 0x2c
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ca:	e169      	b.n	80019a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016cc:	2201      	movs	r2, #1
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f040 8158 	bne.w	800199a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4a9a      	ldr	r2, [pc, #616]	; (8001958 <HAL_GPIO_Init+0x2a0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d05e      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 80016f4:	4a98      	ldr	r2, [pc, #608]	; (8001958 <HAL_GPIO_Init+0x2a0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d875      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 80016fa:	4a98      	ldr	r2, [pc, #608]	; (800195c <HAL_GPIO_Init+0x2a4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d058      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 8001700:	4a96      	ldr	r2, [pc, #600]	; (800195c <HAL_GPIO_Init+0x2a4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d86f      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 8001706:	4a96      	ldr	r2, [pc, #600]	; (8001960 <HAL_GPIO_Init+0x2a8>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d052      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 800170c:	4a94      	ldr	r2, [pc, #592]	; (8001960 <HAL_GPIO_Init+0x2a8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d869      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 8001712:	4a94      	ldr	r2, [pc, #592]	; (8001964 <HAL_GPIO_Init+0x2ac>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d04c      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 8001718:	4a92      	ldr	r2, [pc, #584]	; (8001964 <HAL_GPIO_Init+0x2ac>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d863      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 800171e:	4a92      	ldr	r2, [pc, #584]	; (8001968 <HAL_GPIO_Init+0x2b0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d046      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
 8001724:	4a90      	ldr	r2, [pc, #576]	; (8001968 <HAL_GPIO_Init+0x2b0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d85d      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 800172a:	2b12      	cmp	r3, #18
 800172c:	d82a      	bhi.n	8001784 <HAL_GPIO_Init+0xcc>
 800172e:	2b12      	cmp	r3, #18
 8001730:	d859      	bhi.n	80017e6 <HAL_GPIO_Init+0x12e>
 8001732:	a201      	add	r2, pc, #4	; (adr r2, 8001738 <HAL_GPIO_Init+0x80>)
 8001734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001738:	080017b3 	.word	0x080017b3
 800173c:	0800178d 	.word	0x0800178d
 8001740:	0800179f 	.word	0x0800179f
 8001744:	080017e1 	.word	0x080017e1
 8001748:	080017e7 	.word	0x080017e7
 800174c:	080017e7 	.word	0x080017e7
 8001750:	080017e7 	.word	0x080017e7
 8001754:	080017e7 	.word	0x080017e7
 8001758:	080017e7 	.word	0x080017e7
 800175c:	080017e7 	.word	0x080017e7
 8001760:	080017e7 	.word	0x080017e7
 8001764:	080017e7 	.word	0x080017e7
 8001768:	080017e7 	.word	0x080017e7
 800176c:	080017e7 	.word	0x080017e7
 8001770:	080017e7 	.word	0x080017e7
 8001774:	080017e7 	.word	0x080017e7
 8001778:	080017e7 	.word	0x080017e7
 800177c:	08001795 	.word	0x08001795
 8001780:	080017a9 	.word	0x080017a9
 8001784:	4a79      	ldr	r2, [pc, #484]	; (800196c <HAL_GPIO_Init+0x2b4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800178a:	e02c      	b.n	80017e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e029      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	3304      	adds	r3, #4
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e024      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	3308      	adds	r3, #8
 80017a4:	623b      	str	r3, [r7, #32]
          break;
 80017a6:	e01f      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	330c      	adds	r3, #12
 80017ae:	623b      	str	r3, [r7, #32]
          break;
 80017b0:	e01a      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ba:	2304      	movs	r3, #4
 80017bc:	623b      	str	r3, [r7, #32]
          break;
 80017be:	e013      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c8:	2308      	movs	r3, #8
 80017ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	611a      	str	r2, [r3, #16]
          break;
 80017d2:	e009      	b.n	80017e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d4:	2308      	movs	r3, #8
 80017d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	615a      	str	r2, [r3, #20]
          break;
 80017de:	e003      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	e000      	b.n	80017e8 <HAL_GPIO_Init+0x130>
          break;
 80017e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2bff      	cmp	r3, #255	; 0xff
 80017ec:	d801      	bhi.n	80017f2 <HAL_GPIO_Init+0x13a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	e001      	b.n	80017f6 <HAL_GPIO_Init+0x13e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3304      	adds	r3, #4
 80017f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2bff      	cmp	r3, #255	; 0xff
 80017fc:	d802      	bhi.n	8001804 <HAL_GPIO_Init+0x14c>
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	e002      	b.n	800180a <HAL_GPIO_Init+0x152>
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	3b08      	subs	r3, #8
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	210f      	movs	r1, #15
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	401a      	ands	r2, r3
 800181c:	6a39      	ldr	r1, [r7, #32]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	431a      	orrs	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 80b1 	beq.w	800199a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001838:	4b4d      	ldr	r3, [pc, #308]	; (8001970 <HAL_GPIO_Init+0x2b8>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a4c      	ldr	r2, [pc, #304]	; (8001970 <HAL_GPIO_Init+0x2b8>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b4a      	ldr	r3, [pc, #296]	; (8001970 <HAL_GPIO_Init+0x2b8>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001850:	4a48      	ldr	r2, [pc, #288]	; (8001974 <HAL_GPIO_Init+0x2bc>)
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a40      	ldr	r2, [pc, #256]	; (8001978 <HAL_GPIO_Init+0x2c0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d013      	beq.n	80018a4 <HAL_GPIO_Init+0x1ec>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a3f      	ldr	r2, [pc, #252]	; (800197c <HAL_GPIO_Init+0x2c4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d00d      	beq.n	80018a0 <HAL_GPIO_Init+0x1e8>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a3e      	ldr	r2, [pc, #248]	; (8001980 <HAL_GPIO_Init+0x2c8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d007      	beq.n	800189c <HAL_GPIO_Init+0x1e4>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a3d      	ldr	r2, [pc, #244]	; (8001984 <HAL_GPIO_Init+0x2cc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_GPIO_Init+0x1e0>
 8001894:	2303      	movs	r3, #3
 8001896:	e006      	b.n	80018a6 <HAL_GPIO_Init+0x1ee>
 8001898:	2304      	movs	r3, #4
 800189a:	e004      	b.n	80018a6 <HAL_GPIO_Init+0x1ee>
 800189c:	2302      	movs	r3, #2
 800189e:	e002      	b.n	80018a6 <HAL_GPIO_Init+0x1ee>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_GPIO_Init+0x1ee>
 80018a4:	2300      	movs	r3, #0
 80018a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a8:	f002 0203 	and.w	r2, r2, #3
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	4093      	lsls	r3, r2
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018b6:	492f      	ldr	r1, [pc, #188]	; (8001974 <HAL_GPIO_Init+0x2bc>)
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	492c      	ldr	r1, [pc, #176]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	608b      	str	r3, [r1, #8]
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018de:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	4928      	ldr	r1, [pc, #160]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f8:	4b23      	ldr	r3, [pc, #140]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	4922      	ldr	r1, [pc, #136]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	60cb      	str	r3, [r1, #12]
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001906:	4b20      	ldr	r3, [pc, #128]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	43db      	mvns	r3, r3
 800190e:	491e      	ldr	r1, [pc, #120]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 8001910:	4013      	ands	r3, r2
 8001912:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	4918      	ldr	r1, [pc, #96]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	43db      	mvns	r3, r3
 8001936:	4914      	ldr	r1, [pc, #80]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 8001938:	4013      	ands	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d021      	beq.n	800198c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	490e      	ldr	r1, [pc, #56]	; (8001988 <HAL_GPIO_Init+0x2d0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]
 8001954:	e021      	b.n	800199a <HAL_GPIO_Init+0x2e2>
 8001956:	bf00      	nop
 8001958:	10320000 	.word	0x10320000
 800195c:	10310000 	.word	0x10310000
 8001960:	10220000 	.word	0x10220000
 8001964:	10210000 	.word	0x10210000
 8001968:	10120000 	.word	0x10120000
 800196c:	10110000 	.word	0x10110000
 8001970:	40021000 	.word	0x40021000
 8001974:	40010000 	.word	0x40010000
 8001978:	40010800 	.word	0x40010800
 800197c:	40010c00 	.word	0x40010c00
 8001980:	40011000 	.word	0x40011000
 8001984:	40011400 	.word	0x40011400
 8001988:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_GPIO_Init+0x304>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	43db      	mvns	r3, r3
 8001994:	4909      	ldr	r1, [pc, #36]	; (80019bc <HAL_GPIO_Init+0x304>)
 8001996:	4013      	ands	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	3301      	adds	r3, #1
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	fa22 f303 	lsr.w	r3, r2, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f47f ae8e 	bne.w	80016cc <HAL_GPIO_Init+0x14>
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	372c      	adds	r7, #44	; 0x2c
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	40010400 	.word	0x40010400

080019c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4013      	ands	r3, r2
 80019d8:	041a      	lsls	r2, r3, #16
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	43d9      	mvns	r1, r3
 80019de:	887b      	ldrh	r3, [r7, #2]
 80019e0:	400b      	ands	r3, r1
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	611a      	str	r2, [r3, #16]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e272      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8087 	beq.w	8001b22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a14:	4b92      	ldr	r3, [pc, #584]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d00c      	beq.n	8001a3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a20:	4b8f      	ldr	r3, [pc, #572]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d112      	bne.n	8001a52 <HAL_RCC_OscConfig+0x5e>
 8001a2c:	4b8c      	ldr	r3, [pc, #560]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a38:	d10b      	bne.n	8001a52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3a:	4b89      	ldr	r3, [pc, #548]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d06c      	beq.n	8001b20 <HAL_RCC_OscConfig+0x12c>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d168      	bne.n	8001b20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e24c      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5a:	d106      	bne.n	8001a6a <HAL_RCC_OscConfig+0x76>
 8001a5c:	4b80      	ldr	r3, [pc, #512]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a7f      	ldr	r2, [pc, #508]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e02e      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd4>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x98>
 8001a72:	4b7b      	ldr	r3, [pc, #492]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a7a      	ldr	r2, [pc, #488]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b78      	ldr	r3, [pc, #480]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a77      	ldr	r2, [pc, #476]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	e01d      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd4>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xbc>
 8001a96:	4b72      	ldr	r3, [pc, #456]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a71      	ldr	r2, [pc, #452]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b6f      	ldr	r3, [pc, #444]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a6e      	ldr	r2, [pc, #440]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0xd4>
 8001ab0:	4b6b      	ldr	r3, [pc, #428]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a6a      	ldr	r2, [pc, #424]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	4b68      	ldr	r3, [pc, #416]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a67      	ldr	r2, [pc, #412]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d013      	beq.n	8001af8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7fe fffc 	bl	8000acc <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad8:	f7fe fff8 	bl	8000acc <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b64      	cmp	r3, #100	; 0x64
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e200      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	4b5d      	ldr	r3, [pc, #372]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0xe4>
 8001af6:	e014      	b.n	8001b22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7fe ffe8 	bl	8000acc <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7fe ffe4 	bl	8000acc <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e1ec      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b12:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x10c>
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d063      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b2e:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00b      	beq.n	8001b52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b3a:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b08      	cmp	r3, #8
 8001b44:	d11c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x18c>
 8001b46:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d116      	bne.n	8001b80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b52:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <HAL_RCC_OscConfig+0x176>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e1c0      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4939      	ldr	r1, [pc, #228]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	e03a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d020      	beq.n	8001bca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b88:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8e:	f7fe ff9d 	bl	8000acc <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b96:	f7fe ff99 	bl	8000acc <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e1a1      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4927      	ldr	r1, [pc, #156]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]
 8001bc8:	e015      	b.n	8001bf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7fe ff7c 	bl	8000acc <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd8:	f7fe ff78 	bl	8000acc <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e180      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d03a      	beq.n	8001c78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d019      	beq.n	8001c3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c10:	f7fe ff5c 	bl	8000acc <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c18:	f7fe ff58 	bl	8000acc <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e160      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f000 face 	bl	80021d8 <RCC_Delay>
 8001c3c:	e01c      	b.n	8001c78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_RCC_OscConfig+0x274>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c44:	f7fe ff42 	bl	8000acc <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4a:	e00f      	b.n	8001c6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7fe ff3e 	bl	8000acc <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d908      	bls.n	8001c6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e146      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	42420000 	.word	0x42420000
 8001c68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6c:	4b92      	ldr	r3, [pc, #584]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e9      	bne.n	8001c4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80a6 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8a:	4b8b      	ldr	r3, [pc, #556]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10d      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b88      	ldr	r3, [pc, #544]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a87      	ldr	r2, [pc, #540]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	61d3      	str	r3, [r2, #28]
 8001ca2:	4b85      	ldr	r3, [pc, #532]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	4b82      	ldr	r3, [pc, #520]	; (8001ebc <HAL_RCC_OscConfig+0x4c8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d118      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cbe:	4b7f      	ldr	r3, [pc, #508]	; (8001ebc <HAL_RCC_OscConfig+0x4c8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a7e      	ldr	r2, [pc, #504]	; (8001ebc <HAL_RCC_OscConfig+0x4c8>)
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cca:	f7fe feff 	bl	8000acc <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd2:	f7fe fefb 	bl	8000acc <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b64      	cmp	r3, #100	; 0x64
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e103      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	4b75      	ldr	r3, [pc, #468]	; (8001ebc <HAL_RCC_OscConfig+0x4c8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d106      	bne.n	8001d06 <HAL_RCC_OscConfig+0x312>
 8001cf8:	4b6f      	ldr	r3, [pc, #444]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a6e      	ldr	r2, [pc, #440]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6213      	str	r3, [r2, #32]
 8001d04:	e02d      	b.n	8001d62 <HAL_RCC_OscConfig+0x36e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x334>
 8001d0e:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a69      	ldr	r2, [pc, #420]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	6213      	str	r3, [r2, #32]
 8001d1a:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4a66      	ldr	r2, [pc, #408]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	f023 0304 	bic.w	r3, r3, #4
 8001d24:	6213      	str	r3, [r2, #32]
 8001d26:	e01c      	b.n	8001d62 <HAL_RCC_OscConfig+0x36e>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2b05      	cmp	r3, #5
 8001d2e:	d10c      	bne.n	8001d4a <HAL_RCC_OscConfig+0x356>
 8001d30:	4b61      	ldr	r3, [pc, #388]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4a60      	ldr	r2, [pc, #384]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6213      	str	r3, [r2, #32]
 8001d3c:	4b5e      	ldr	r3, [pc, #376]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4a5d      	ldr	r2, [pc, #372]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	6213      	str	r3, [r2, #32]
 8001d48:	e00b      	b.n	8001d62 <HAL_RCC_OscConfig+0x36e>
 8001d4a:	4b5b      	ldr	r3, [pc, #364]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4a5a      	ldr	r2, [pc, #360]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6213      	str	r3, [r2, #32]
 8001d56:	4b58      	ldr	r3, [pc, #352]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4a57      	ldr	r2, [pc, #348]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d015      	beq.n	8001d96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7fe feaf 	bl	8000acc <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d72:	f7fe feab 	bl	8000acc <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e0b1      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d88:	4b4b      	ldr	r3, [pc, #300]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0ee      	beq.n	8001d72 <HAL_RCC_OscConfig+0x37e>
 8001d94:	e014      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7fe fe99 	bl	8000acc <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7fe fe95 	bl	8000acc <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e09b      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db4:	4b40      	ldr	r3, [pc, #256]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1ee      	bne.n	8001d9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dc0:	7dfb      	ldrb	r3, [r7, #23]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d105      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc6:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4a3b      	ldr	r2, [pc, #236]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8087 	beq.w	8001eea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d061      	beq.n	8001eac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d146      	bne.n	8001e7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df0:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <HAL_RCC_OscConfig+0x4cc>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7fe fe69 	bl	8000acc <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7fe fe65 	bl	8000acc <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e06d      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e10:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e24:	d108      	bne.n	8001e38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4921      	ldr	r1, [pc, #132]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e38:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a19      	ldr	r1, [r3, #32]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	491b      	ldr	r1, [pc, #108]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_RCC_OscConfig+0x4cc>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7fe fe39 	bl	8000acc <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5e:	f7fe fe35 	bl	8000acc <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e03d      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x46a>
 8001e7c:	e035      	b.n	8001eea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <HAL_RCC_OscConfig+0x4cc>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7fe fe22 	bl	8000acc <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7fe fe1e 	bl	8000acc <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e026      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x498>
 8001eaa:	e01e      	b.n	8001eea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e019      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCC_OscConfig+0x500>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0d0      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b6a      	ldr	r3, [pc, #424]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d910      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	4965      	ldr	r1, [pc, #404]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b8      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f54:	4b59      	ldr	r3, [pc, #356]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a58      	ldr	r2, [pc, #352]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f6c:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4a52      	ldr	r2, [pc, #328]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	4b50      	ldr	r3, [pc, #320]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	494d      	ldr	r1, [pc, #308]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d040      	beq.n	8002018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d115      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e07f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	4b41      	ldr	r3, [pc, #260]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e073      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e06b      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4936      	ldr	r1, [pc, #216]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe8:	f7fe fd70 	bl	8000acc <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7fe fd6c 	bl	8000acc <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e053      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d210      	bcs.n	8002048 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	4922      	ldr	r1, [pc, #136]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e032      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4916      	ldr	r1, [pc, #88]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	490e      	ldr	r1, [pc, #56]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002086:	f000 f821 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800208a:	4602      	mov	r2, r0
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	490a      	ldr	r1, [pc, #40]	; (80020c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002098:	5ccb      	ldrb	r3, [r1, r3]
 800209a:	fa22 f303 	lsr.w	r3, r2, r3
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_RCC_ClockConfig+0x1cc>)
 80020a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x1d0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fcce 	bl	8000a48 <HAL_InitTick>

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08004494 	.word	0x08004494
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <HAL_RCC_GetSysClockFreq+0x94>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d002      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x30>
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d003      	beq.n	8002102 <HAL_RCC_GetSysClockFreq+0x36>
 80020fa:	e027      	b.n	800214c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_RCC_GetSysClockFreq+0x98>)
 80020fe:	613b      	str	r3, [r7, #16]
      break;
 8002100:	e027      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	0c9b      	lsrs	r3, r3, #18
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	4a17      	ldr	r2, [pc, #92]	; (8002168 <HAL_RCC_GetSysClockFreq+0x9c>)
 800210c:	5cd3      	ldrb	r3, [r2, r3]
 800210e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d010      	beq.n	800213c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCC_GetSysClockFreq+0x94>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	0c5b      	lsrs	r3, r3, #17
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	4a11      	ldr	r2, [pc, #68]	; (800216c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002126:	5cd3      	ldrb	r3, [r2, r3]
 8002128:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <HAL_RCC_GetSysClockFreq+0x98>)
 800212e:	fb03 f202 	mul.w	r2, r3, r2
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e004      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a0c      	ldr	r2, [pc, #48]	; (8002170 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002140:	fb02 f303 	mul.w	r3, r2, r3
 8002144:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	613b      	str	r3, [r7, #16]
      break;
 800214a:	e002      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_RCC_GetSysClockFreq+0x98>)
 800214e:	613b      	str	r3, [r7, #16]
      break;
 8002150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002152:	693b      	ldr	r3, [r7, #16]
}
 8002154:	4618      	mov	r0, r3
 8002156:	371c      	adds	r7, #28
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	007a1200 	.word	0x007a1200
 8002168:	080044ac 	.word	0x080044ac
 800216c:	080044bc 	.word	0x080044bc
 8002170:	003d0900 	.word	0x003d0900

08002174 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002178:	4b02      	ldr	r3, [pc, #8]	; (8002184 <HAL_RCC_GetHCLKFreq+0x10>)
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	20000000 	.word	0x20000000

08002188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800218c:	f7ff fff2 	bl	8002174 <HAL_RCC_GetHCLKFreq>
 8002190:	4602      	mov	r2, r0
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	4903      	ldr	r1, [pc, #12]	; (80021ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800219e:	5ccb      	ldrb	r3, [r1, r3]
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	080044a4 	.word	0x080044a4

080021b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021b4:	f7ff ffde 	bl	8002174 <HAL_RCC_GetHCLKFreq>
 80021b8:	4602      	mov	r2, r0
 80021ba:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	0adb      	lsrs	r3, r3, #11
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	4903      	ldr	r1, [pc, #12]	; (80021d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021c6:	5ccb      	ldrb	r3, [r1, r3]
 80021c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40021000 	.word	0x40021000
 80021d4:	080044a4 	.word	0x080044a4

080021d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <RCC_Delay+0x34>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <RCC_Delay+0x38>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0a5b      	lsrs	r3, r3, #9
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	fb02 f303 	mul.w	r3, r2, r3
 80021f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021f4:	bf00      	nop
  }
  while (Delay --);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1e5a      	subs	r2, r3, #1
 80021fa:	60fa      	str	r2, [r7, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1f9      	bne.n	80021f4 <RCC_Delay+0x1c>
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	20000000 	.word	0x20000000
 8002210:	10624dd3 	.word	0x10624dd3

08002214 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d07d      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002230:	2300      	movs	r3, #0
 8002232:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002234:	4b4f      	ldr	r3, [pc, #316]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10d      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	4b4c      	ldr	r3, [pc, #304]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	4a4b      	ldr	r2, [pc, #300]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224a:	61d3      	str	r3, [r2, #28]
 800224c:	4b49      	ldr	r3, [pc, #292]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002258:	2301      	movs	r3, #1
 800225a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	4b46      	ldr	r3, [pc, #280]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d118      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002268:	4b43      	ldr	r3, [pc, #268]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a42      	ldr	r2, [pc, #264]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800226e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002272:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002274:	f7fe fc2a 	bl	8000acc <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227a:	e008      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227c:	f7fe fc26 	bl	8000acc <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e06d      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228e:	4b3a      	ldr	r3, [pc, #232]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800229a:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d02e      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d027      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022b8:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022c2:	4b2e      	ldr	r3, [pc, #184]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022c8:	4b2c      	ldr	r3, [pc, #176]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022ce:	4a29      	ldr	r2, [pc, #164]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d014      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7fe fbf5 	bl	8000acc <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	e00a      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7fe fbf1 	bl	8000acc <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e036      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ee      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4917      	ldr	r1, [pc, #92]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002316:	4313      	orrs	r3, r2
 8002318:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800231a:	7dfb      	ldrb	r3, [r7, #23]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d105      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	4a13      	ldr	r2, [pc, #76]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	490b      	ldr	r1, [pc, #44]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	d008      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	4904      	ldr	r1, [pc, #16]	; (8002374 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	40007000 	.word	0x40007000
 800237c:	42420440 	.word	0x42420440

08002380 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	2300      	movs	r3, #0
 8002392:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b10      	cmp	r3, #16
 80023a0:	d00a      	beq.n	80023b8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	f200 808a 	bhi.w	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d045      	beq.n	800243c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d075      	beq.n	80024a2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80023b6:	e082      	b.n	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80023b8:	4b46      	ldr	r3, [pc, #280]	; (80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80023be:	4b45      	ldr	r3, [pc, #276]	; (80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d07b      	beq.n	80024c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	0c9b      	lsrs	r3, r3, #18
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	4a41      	ldr	r2, [pc, #260]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80023d4:	5cd3      	ldrb	r3, [r2, r3]
 80023d6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d015      	beq.n	800240e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023e2:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	0c5b      	lsrs	r3, r3, #17
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	4a3b      	ldr	r2, [pc, #236]	; (80024dc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00d      	beq.n	8002418 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80023fc:	4a38      	ldr	r2, [pc, #224]	; (80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	fbb2 f2f3 	udiv	r2, r2, r3
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	61fb      	str	r3, [r7, #28]
 800240c:	e004      	b.n	8002418 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4a34      	ldr	r2, [pc, #208]	; (80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002418:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002420:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002424:	d102      	bne.n	800242c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	61bb      	str	r3, [r7, #24]
      break;
 800242a:	e04a      	b.n	80024c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4a2d      	ldr	r2, [pc, #180]	; (80024e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	085b      	lsrs	r3, r3, #1
 8002438:	61bb      	str	r3, [r7, #24]
      break;
 800243a:	e042      	b.n	80024c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800244c:	d108      	bne.n	8002460 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	e01f      	b.n	80024a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800246a:	d109      	bne.n	8002480 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002478:	f649 4340 	movw	r3, #40000	; 0x9c40
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	e00f      	b.n	80024a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800248a:	d11c      	bne.n	80024c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d016      	beq.n	80024c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002498:	f24f 4324 	movw	r3, #62500	; 0xf424
 800249c:	61bb      	str	r3, [r7, #24]
      break;
 800249e:	e012      	b.n	80024c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80024a0:	e011      	b.n	80024c6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80024a2:	f7ff fe85 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 80024a6:	4602      	mov	r2, r0
 80024a8:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	0b9b      	lsrs	r3, r3, #14
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	3301      	adds	r3, #1
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ba:	61bb      	str	r3, [r7, #24]
      break;
 80024bc:	e004      	b.n	80024c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80024be:	bf00      	nop
 80024c0:	e002      	b.n	80024c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80024c2:	bf00      	nop
 80024c4:	e000      	b.n	80024c8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80024c6:	bf00      	nop
    }
  }
  return (frequency);
 80024c8:	69bb      	ldr	r3, [r7, #24]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	080044c0 	.word	0x080044c0
 80024dc:	080044d0 	.word	0x080044d0
 80024e0:	007a1200 	.word	0x007a1200
 80024e4:	003d0900 	.word	0x003d0900
 80024e8:	aaaaaaab 	.word	0xaaaaaaab

080024ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e041      	b.n	8002582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d106      	bne.n	8002518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe f8b8 	bl	8000688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3304      	adds	r3, #4
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f000 fce8 	bl	8002f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e041      	b.n	8002620 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d106      	bne.n	80025b6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f839 	bl	8002628 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3304      	adds	r3, #4
 80025c6:	4619      	mov	r1, r3
 80025c8:	4610      	mov	r0, r2
 80025ca:	f000 fc99 	bl	8002f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e041      	b.n	80026d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d106      	bne.n	8002666 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f839 	bl	80026d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2202      	movs	r2, #2
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3304      	adds	r3, #4
 8002676:	4619      	mov	r1, r3
 8002678:	4610      	mov	r0, r2
 800267a:	f000 fc41 	bl	8002f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_TIM_PWM_Start_IT+0x28>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	e022      	b.n	800275a <HAL_TIM_PWM_Start_IT+0x6e>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b04      	cmp	r3, #4
 8002718:	d109      	bne.n	800272e <HAL_TIM_PWM_Start_IT+0x42>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b01      	cmp	r3, #1
 8002724:	bf14      	ite	ne
 8002726:	2301      	movne	r3, #1
 8002728:	2300      	moveq	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	e015      	b.n	800275a <HAL_TIM_PWM_Start_IT+0x6e>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d109      	bne.n	8002748 <HAL_TIM_PWM_Start_IT+0x5c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b01      	cmp	r3, #1
 800273e:	bf14      	ite	ne
 8002740:	2301      	movne	r3, #1
 8002742:	2300      	moveq	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	e008      	b.n	800275a <HAL_TIM_PWM_Start_IT+0x6e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	bf14      	ite	ne
 8002754:	2301      	movne	r3, #1
 8002756:	2300      	moveq	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e0a9      	b.n	80028b6 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d104      	bne.n	8002772 <HAL_TIM_PWM_Start_IT+0x86>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002770:	e013      	b.n	800279a <HAL_TIM_PWM_Start_IT+0xae>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	2b04      	cmp	r3, #4
 8002776:	d104      	bne.n	8002782 <HAL_TIM_PWM_Start_IT+0x96>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002780:	e00b      	b.n	800279a <HAL_TIM_PWM_Start_IT+0xae>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b08      	cmp	r3, #8
 8002786:	d104      	bne.n	8002792 <HAL_TIM_PWM_Start_IT+0xa6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002790:	e003      	b.n	800279a <HAL_TIM_PWM_Start_IT+0xae>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b0c      	cmp	r3, #12
 800279e:	d841      	bhi.n	8002824 <HAL_TIM_PWM_Start_IT+0x138>
 80027a0:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <HAL_TIM_PWM_Start_IT+0xbc>)
 80027a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a6:	bf00      	nop
 80027a8:	080027dd 	.word	0x080027dd
 80027ac:	08002825 	.word	0x08002825
 80027b0:	08002825 	.word	0x08002825
 80027b4:	08002825 	.word	0x08002825
 80027b8:	080027ef 	.word	0x080027ef
 80027bc:	08002825 	.word	0x08002825
 80027c0:	08002825 	.word	0x08002825
 80027c4:	08002825 	.word	0x08002825
 80027c8:	08002801 	.word	0x08002801
 80027cc:	08002825 	.word	0x08002825
 80027d0:	08002825 	.word	0x08002825
 80027d4:	08002825 	.word	0x08002825
 80027d8:	08002813 	.word	0x08002813
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0202 	orr.w	r2, r2, #2
 80027ea:	60da      	str	r2, [r3, #12]
      break;
 80027ec:	e01d      	b.n	800282a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0204 	orr.w	r2, r2, #4
 80027fc:	60da      	str	r2, [r3, #12]
      break;
 80027fe:	e014      	b.n	800282a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0208 	orr.w	r2, r2, #8
 800280e:	60da      	str	r2, [r3, #12]
      break;
 8002810:	e00b      	b.n	800282a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0210 	orr.w	r2, r2, #16
 8002820:	60da      	str	r2, [r3, #12]
      break;
 8002822:	e002      	b.n	800282a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
      break;
 8002828:	bf00      	nop
  }

  if (status == HAL_OK)
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d141      	bne.n	80028b4 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2201      	movs	r2, #1
 8002836:	6839      	ldr	r1, [r7, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fde1 	bl	8003400 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d107      	bne.n	8002858 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002856:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a18      	ldr	r2, [pc, #96]	; (80028c0 <HAL_TIM_PWM_Start_IT+0x1d4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00e      	beq.n	8002880 <HAL_TIM_PWM_Start_IT+0x194>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286a:	d009      	beq.n	8002880 <HAL_TIM_PWM_Start_IT+0x194>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a14      	ldr	r2, [pc, #80]	; (80028c4 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d004      	beq.n	8002880 <HAL_TIM_PWM_Start_IT+0x194>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <HAL_TIM_PWM_Start_IT+0x1dc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d111      	bne.n	80028a4 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b06      	cmp	r3, #6
 8002890:	d010      	beq.n	80028b4 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0201 	orr.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a2:	e007      	b.n	80028b4 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800

080028cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d122      	bne.n	8002928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d11b      	bne.n	8002928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0202 	mvn.w	r2, #2
 80028f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fadb 	bl	8002eca <HAL_TIM_IC_CaptureCallback>
 8002914:	e005      	b.n	8002922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 face 	bl	8002eb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fadd 	bl	8002edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b04      	cmp	r3, #4
 8002934:	d122      	bne.n	800297c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b04      	cmp	r3, #4
 8002942:	d11b      	bne.n	800297c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0204 	mvn.w	r2, #4
 800294c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2202      	movs	r2, #2
 8002952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fab1 	bl	8002eca <HAL_TIM_IC_CaptureCallback>
 8002968:	e005      	b.n	8002976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 faa4 	bl	8002eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fab3 	bl	8002edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b08      	cmp	r3, #8
 8002988:	d122      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b08      	cmp	r3, #8
 8002996:	d11b      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0208 	mvn.w	r2, #8
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2204      	movs	r2, #4
 80029a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fa87 	bl	8002eca <HAL_TIM_IC_CaptureCallback>
 80029bc:	e005      	b.n	80029ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fa7a 	bl	8002eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fa89 	bl	8002edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d122      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d11b      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0210 	mvn.w	r2, #16
 80029f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2208      	movs	r2, #8
 80029fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fa5d 	bl	8002eca <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fa50 	bl	8002eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 fa5f 	bl	8002edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d10e      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d107      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0201 	mvn.w	r2, #1
 8002a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fa2b 	bl	8002ea6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5a:	2b80      	cmp	r3, #128	; 0x80
 8002a5c:	d10e      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a68:	2b80      	cmp	r3, #128	; 0x80
 8002a6a:	d107      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fe74 	bl	8003764 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	2b40      	cmp	r3, #64	; 0x40
 8002a88:	d10e      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a94:	2b40      	cmp	r3, #64	; 0x40
 8002a96:	d107      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fa23 	bl	8002eee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d107      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0220 	mvn.w	r2, #32
 8002acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fe3f 	bl	8003752 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_TIM_OC_ConfigChannel+0x1e>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e048      	b.n	8002b8c <HAL_TIM_OC_ConfigChannel+0xb0>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	d839      	bhi.n	8002b7c <HAL_TIM_OC_ConfigChannel+0xa0>
 8002b08:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0e:	bf00      	nop
 8002b10:	08002b45 	.word	0x08002b45
 8002b14:	08002b7d 	.word	0x08002b7d
 8002b18:	08002b7d 	.word	0x08002b7d
 8002b1c:	08002b7d 	.word	0x08002b7d
 8002b20:	08002b53 	.word	0x08002b53
 8002b24:	08002b7d 	.word	0x08002b7d
 8002b28:	08002b7d 	.word	0x08002b7d
 8002b2c:	08002b7d 	.word	0x08002b7d
 8002b30:	08002b61 	.word	0x08002b61
 8002b34:	08002b7d 	.word	0x08002b7d
 8002b38:	08002b7d 	.word	0x08002b7d
 8002b3c:	08002b7d 	.word	0x08002b7d
 8002b40:	08002b6f 	.word	0x08002b6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fa3a 	bl	8002fc4 <TIM_OC1_SetConfig>
      break;
 8002b50:	e017      	b.n	8002b82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fa99 	bl	8003090 <TIM_OC2_SetConfig>
      break;
 8002b5e:	e010      	b.n	8002b82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fafc 	bl	8003164 <TIM_OC3_SetConfig>
      break;
 8002b6c:	e009      	b.n	8002b82 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fb5f 	bl	8003238 <TIM_OC4_SetConfig>
      break;
 8002b7a:	e002      	b.n	8002b82 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e0ae      	b.n	8002d10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b0c      	cmp	r3, #12
 8002bbe:	f200 809f 	bhi.w	8002d00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bc2:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc8:	08002bfd 	.word	0x08002bfd
 8002bcc:	08002d01 	.word	0x08002d01
 8002bd0:	08002d01 	.word	0x08002d01
 8002bd4:	08002d01 	.word	0x08002d01
 8002bd8:	08002c3d 	.word	0x08002c3d
 8002bdc:	08002d01 	.word	0x08002d01
 8002be0:	08002d01 	.word	0x08002d01
 8002be4:	08002d01 	.word	0x08002d01
 8002be8:	08002c7f 	.word	0x08002c7f
 8002bec:	08002d01 	.word	0x08002d01
 8002bf0:	08002d01 	.word	0x08002d01
 8002bf4:	08002d01 	.word	0x08002d01
 8002bf8:	08002cbf 	.word	0x08002cbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 f9de 	bl	8002fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0208 	orr.w	r2, r2, #8
 8002c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0204 	bic.w	r2, r2, #4
 8002c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6999      	ldr	r1, [r3, #24]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	619a      	str	r2, [r3, #24]
      break;
 8002c3a:	e064      	b.n	8002d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 fa24 	bl	8003090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6999      	ldr	r1, [r3, #24]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	021a      	lsls	r2, r3, #8
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	619a      	str	r2, [r3, #24]
      break;
 8002c7c:	e043      	b.n	8002d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fa6d 	bl	8003164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0208 	orr.w	r2, r2, #8
 8002c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0204 	bic.w	r2, r2, #4
 8002ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69d9      	ldr	r1, [r3, #28]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	61da      	str	r2, [r3, #28]
      break;
 8002cbc:	e023      	b.n	8002d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fab7 	bl	8003238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69da      	ldr	r2, [r3, #28]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69d9      	ldr	r1, [r3, #28]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	021a      	lsls	r2, r3, #8
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	61da      	str	r2, [r3, #28]
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	75fb      	strb	r3, [r7, #23]
      break;
 8002d04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_TIM_ConfigClockSource+0x1c>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e0b4      	b.n	8002e9e <HAL_TIM_ConfigClockSource+0x186>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d6c:	d03e      	beq.n	8002dec <HAL_TIM_ConfigClockSource+0xd4>
 8002d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d72:	f200 8087 	bhi.w	8002e84 <HAL_TIM_ConfigClockSource+0x16c>
 8002d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7a:	f000 8086 	beq.w	8002e8a <HAL_TIM_ConfigClockSource+0x172>
 8002d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d82:	d87f      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x16c>
 8002d84:	2b70      	cmp	r3, #112	; 0x70
 8002d86:	d01a      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0xa6>
 8002d88:	2b70      	cmp	r3, #112	; 0x70
 8002d8a:	d87b      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x16c>
 8002d8c:	2b60      	cmp	r3, #96	; 0x60
 8002d8e:	d050      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x11a>
 8002d90:	2b60      	cmp	r3, #96	; 0x60
 8002d92:	d877      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b50      	cmp	r3, #80	; 0x50
 8002d96:	d03c      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0xfa>
 8002d98:	2b50      	cmp	r3, #80	; 0x50
 8002d9a:	d873      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x16c>
 8002d9c:	2b40      	cmp	r3, #64	; 0x40
 8002d9e:	d058      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x13a>
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d86f      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x16c>
 8002da4:	2b30      	cmp	r3, #48	; 0x30
 8002da6:	d064      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0x15a>
 8002da8:	2b30      	cmp	r3, #48	; 0x30
 8002daa:	d86b      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x16c>
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d060      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0x15a>
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d867      	bhi.n	8002e84 <HAL_TIM_ConfigClockSource+0x16c>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d05c      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0x15a>
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d05a      	beq.n	8002e72 <HAL_TIM_ConfigClockSource+0x15a>
 8002dbc:	e062      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6899      	ldr	r1, [r3, #8]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f000 faf8 	bl	80033c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002de0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	609a      	str	r2, [r3, #8]
      break;
 8002dea:	e04f      	b.n	8002e8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	6899      	ldr	r1, [r3, #8]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f000 fae1 	bl	80033c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e0e:	609a      	str	r2, [r3, #8]
      break;
 8002e10:	e03c      	b.n	8002e8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f000 fa58 	bl	80032d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2150      	movs	r1, #80	; 0x50
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 faaf 	bl	800338e <TIM_ITRx_SetConfig>
      break;
 8002e30:	e02c      	b.n	8002e8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f000 fa76 	bl	8003330 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2160      	movs	r1, #96	; 0x60
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fa9f 	bl	800338e <TIM_ITRx_SetConfig>
      break;
 8002e50:	e01c      	b.n	8002e8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6859      	ldr	r1, [r3, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f000 fa38 	bl	80032d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2140      	movs	r1, #64	; 0x40
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fa8f 	bl	800338e <TIM_ITRx_SetConfig>
      break;
 8002e70:	e00c      	b.n	8002e8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	f000 fa86 	bl	800338e <TIM_ITRx_SetConfig>
      break;
 8002e82:	e003      	b.n	8002e8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
      break;
 8002e88:	e000      	b.n	8002e8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a29      	ldr	r2, [pc, #164]	; (8002fb8 <TIM_Base_SetConfig+0xb8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00b      	beq.n	8002f30 <TIM_Base_SetConfig+0x30>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1e:	d007      	beq.n	8002f30 <TIM_Base_SetConfig+0x30>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a26      	ldr	r2, [pc, #152]	; (8002fbc <TIM_Base_SetConfig+0xbc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d003      	beq.n	8002f30 <TIM_Base_SetConfig+0x30>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a25      	ldr	r2, [pc, #148]	; (8002fc0 <TIM_Base_SetConfig+0xc0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d108      	bne.n	8002f42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a1c      	ldr	r2, [pc, #112]	; (8002fb8 <TIM_Base_SetConfig+0xb8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00b      	beq.n	8002f62 <TIM_Base_SetConfig+0x62>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f50:	d007      	beq.n	8002f62 <TIM_Base_SetConfig+0x62>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <TIM_Base_SetConfig+0xbc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d003      	beq.n	8002f62 <TIM_Base_SetConfig+0x62>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a18      	ldr	r2, [pc, #96]	; (8002fc0 <TIM_Base_SetConfig+0xc0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d108      	bne.n	8002f74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a07      	ldr	r2, [pc, #28]	; (8002fb8 <TIM_Base_SetConfig+0xb8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d103      	bne.n	8002fa8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	615a      	str	r2, [r3, #20]
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800

08002fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f023 0201 	bic.w	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0303 	bic.w	r3, r3, #3
 8002ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f023 0302 	bic.w	r3, r3, #2
 800300c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a1c      	ldr	r2, [pc, #112]	; (800308c <TIM_OC1_SetConfig+0xc8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d10c      	bne.n	800303a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f023 0308 	bic.w	r3, r3, #8
 8003026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f023 0304 	bic.w	r3, r3, #4
 8003038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a13      	ldr	r2, [pc, #76]	; (800308c <TIM_OC1_SetConfig+0xc8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d111      	bne.n	8003066 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	621a      	str	r2, [r3, #32]
}
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40012c00 	.word	0x40012c00

08003090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f023 0210 	bic.w	r2, r3, #16
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f023 0320 	bic.w	r3, r3, #32
 80030da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a1d      	ldr	r2, [pc, #116]	; (8003160 <TIM_OC2_SetConfig+0xd0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d10d      	bne.n	800310c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800310a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a14      	ldr	r2, [pc, #80]	; (8003160 <TIM_OC2_SetConfig+0xd0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d113      	bne.n	800313c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800311a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr
 8003160:	40012c00 	.word	0x40012c00

08003164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0303 	bic.w	r3, r3, #3
 800319a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <TIM_OC3_SetConfig+0xd0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10d      	bne.n	80031de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a14      	ldr	r2, [pc, #80]	; (8003234 <TIM_OC3_SetConfig+0xd0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d113      	bne.n	800320e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	011b      	lsls	r3, r3, #4
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	621a      	str	r2, [r3, #32]
}
 8003228:	bf00      	nop
 800322a:	371c      	adds	r7, #28
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40012c00 	.word	0x40012c00

08003238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800326e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	021b      	lsls	r3, r3, #8
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4313      	orrs	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	031b      	lsls	r3, r3, #12
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a0f      	ldr	r2, [pc, #60]	; (80032d0 <TIM_OC4_SetConfig+0x98>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d109      	bne.n	80032ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800329e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	019b      	lsls	r3, r3, #6
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	621a      	str	r2, [r3, #32]
}
 80032c6:	bf00      	nop
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr
 80032d0:	40012c00 	.word	0x40012c00

080032d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f023 0201 	bic.w	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f023 030a 	bic.w	r3, r3, #10
 8003310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	621a      	str	r2, [r3, #32]
}
 8003326:	bf00      	nop
 8003328:	371c      	adds	r7, #28
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f023 0210 	bic.w	r2, r3, #16
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800335a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	031b      	lsls	r3, r3, #12
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800336c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	621a      	str	r2, [r3, #32]
}
 8003384:	bf00      	nop
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr

0800338e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800338e:	b480      	push	{r7}
 8003390:	b085      	sub	sp, #20
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f043 0307 	orr.w	r3, r3, #7
 80033b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	609a      	str	r2, [r3, #8]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b087      	sub	sp, #28
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	021a      	lsls	r2, r3, #8
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	609a      	str	r2, [r3, #8]
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr

08003400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	2201      	movs	r2, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1a      	ldr	r2, [r3, #32]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	43db      	mvns	r3, r3
 8003422:	401a      	ands	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a1a      	ldr	r2, [r3, #32]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	431a      	orrs	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <HAL_TIMEx_PWMN_Start_IT+0x28>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	bf14      	ite	ne
 8003468:	2301      	movne	r3, #1
 800346a:	2300      	moveq	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e022      	b.n	80034b6 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b04      	cmp	r3, #4
 8003474:	d109      	bne.n	800348a <HAL_TIMEx_PWMN_Start_IT+0x42>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b01      	cmp	r3, #1
 8003480:	bf14      	ite	ne
 8003482:	2301      	movne	r3, #1
 8003484:	2300      	moveq	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	e015      	b.n	80034b6 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b08      	cmp	r3, #8
 800348e:	d109      	bne.n	80034a4 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b01      	cmp	r3, #1
 800349a:	bf14      	ite	ne
 800349c:	2301      	movne	r3, #1
 800349e:	2300      	moveq	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	e008      	b.n	80034b6 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	bf14      	ite	ne
 80034b0:	2301      	movne	r3, #1
 80034b2:	2300      	moveq	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e08f      	b.n	80035de <HAL_TIMEx_PWMN_Start_IT+0x196>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d104      	bne.n	80034ce <HAL_TIMEx_PWMN_Start_IT+0x86>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034cc:	e013      	b.n	80034f6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d104      	bne.n	80034de <HAL_TIMEx_PWMN_Start_IT+0x96>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034dc:	e00b      	b.n	80034f6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d104      	bne.n	80034ee <HAL_TIMEx_PWMN_Start_IT+0xa6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ec:	e003      	b.n	80034f6 <HAL_TIMEx_PWMN_Start_IT+0xae>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2202      	movs	r2, #2
 80034f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d01b      	beq.n	8003534 <HAL_TIMEx_PWMN_Start_IT+0xec>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d821      	bhi.n	8003546 <HAL_TIMEx_PWMN_Start_IT+0xfe>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_TIMEx_PWMN_Start_IT+0xc8>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b04      	cmp	r3, #4
 800350c:	d009      	beq.n	8003522 <HAL_TIMEx_PWMN_Start_IT+0xda>
 800350e:	e01a      	b.n	8003546 <HAL_TIMEx_PWMN_Start_IT+0xfe>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0202 	orr.w	r2, r2, #2
 800351e:	60da      	str	r2, [r3, #12]
      break;
 8003520:	e014      	b.n	800354c <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0204 	orr.w	r2, r2, #4
 8003530:	60da      	str	r2, [r3, #12]
      break;
 8003532:	e00b      	b.n	800354c <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0208 	orr.w	r2, r2, #8
 8003542:	60da      	str	r2, [r3, #12]
      break;
 8003544:	e002      	b.n	800354c <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    default:
      status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
      break;
 800354a:	bf00      	nop
  }

  if (status == HAL_OK)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d144      	bne.n	80035dc <HAL_TIMEx_PWMN_Start_IT+0x194>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003560:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2204      	movs	r2, #4
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f000 f903 	bl	8003776 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800357e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a18      	ldr	r2, [pc, #96]	; (80035e8 <HAL_TIMEx_PWMN_Start_IT+0x1a0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00e      	beq.n	80035a8 <HAL_TIMEx_PWMN_Start_IT+0x160>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003592:	d009      	beq.n	80035a8 <HAL_TIMEx_PWMN_Start_IT+0x160>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a14      	ldr	r2, [pc, #80]	; (80035ec <HAL_TIMEx_PWMN_Start_IT+0x1a4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d004      	beq.n	80035a8 <HAL_TIMEx_PWMN_Start_IT+0x160>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a13      	ldr	r2, [pc, #76]	; (80035f0 <HAL_TIMEx_PWMN_Start_IT+0x1a8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d111      	bne.n	80035cc <HAL_TIMEx_PWMN_Start_IT+0x184>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b06      	cmp	r3, #6
 80035b8:	d010      	beq.n	80035dc <HAL_TIMEx_PWMN_Start_IT+0x194>
      {
        __HAL_TIM_ENABLE(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ca:	e007      	b.n	80035dc <HAL_TIMEx_PWMN_Start_IT+0x194>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40012c00 	.word	0x40012c00
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40000800 	.word	0x40000800

080035f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003608:	2302      	movs	r3, #2
 800360a:	e046      	b.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003632:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a16      	ldr	r2, [pc, #88]	; (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00e      	beq.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003658:	d009      	beq.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a12      	ldr	r2, [pc, #72]	; (80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d004      	beq.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a10      	ldr	r2, [pc, #64]	; (80036ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d10c      	bne.n	8003688 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	4313      	orrs	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	40012c00 	.word	0x40012c00
 80036a8:	40000400 	.word	0x40000400
 80036ac:	40000800 	.word	0x40000800

080036b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e03d      	b.n	8003748 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4313      	orrs	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr

08003776 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003776:	b480      	push	{r7}
 8003778:	b087      	sub	sp, #28
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	2204      	movs	r2, #4
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a1a      	ldr	r2, [r3, #32]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	43db      	mvns	r3, r3
 8003798:	401a      	ands	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a1a      	ldr	r2, [r3, #32]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	fa01 f303 	lsl.w	r3, r1, r3
 80037ae:	431a      	orrs	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	621a      	str	r2, [r3, #32]
}
 80037b4:	bf00      	nop
 80037b6:	371c      	adds	r7, #28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e042      	b.n	8003856 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7fc ffd7 	bl	8000798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2224      	movs	r2, #36	; 0x24
 80037ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003800:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fd80 	bl	8004308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003816:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003826:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003836:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b08a      	sub	sp, #40	; 0x28
 8003862:	af02      	add	r7, sp, #8
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b20      	cmp	r3, #32
 800387c:	d17c      	bne.n	8003978 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_UART_Receive+0x2c>
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e075      	b.n	800397a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2222      	movs	r2, #34	; 0x22
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038a2:	f7fd f913 	bl	8000acc <HAL_GetTick>
 80038a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	88fa      	ldrh	r2, [r7, #6]
 80038ac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	88fa      	ldrh	r2, [r7, #6]
 80038b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038bc:	d108      	bne.n	80038d0 <HAL_UART_Receive+0x72>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d104      	bne.n	80038d0 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	e003      	b.n	80038d8 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80038d8:	e043      	b.n	8003962 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2200      	movs	r2, #0
 80038e2:	2120      	movs	r1, #32
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fb05 	bl	8003ef4 <UART_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e042      	b.n	800397a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10c      	bne.n	8003914 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	b29b      	uxth	r3, r3
 8003902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003906:	b29a      	uxth	r2, r3
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	3302      	adds	r3, #2
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e01f      	b.n	8003954 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391c:	d007      	beq.n	800392e <HAL_UART_Receive+0xd0>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <HAL_UART_Receive+0xde>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	e008      	b.n	800394e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003948:	b2da      	uxtb	r2, r3
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3301      	adds	r3, #1
 8003952:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1b6      	bne.n	80038da <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e000      	b.n	800397a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003978:	2302      	movs	r3, #2
  }
}
 800397a:	4618      	mov	r0, r3
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b0ba      	sub	sp, #232	; 0xe8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10f      	bne.n	80039ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <HAL_UART_IRQHandler+0x66>
 80039d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fbd1 	bl	800418a <UART_Receive_IT>
      return;
 80039e8:	e25b      	b.n	8003ea2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80de 	beq.w	8003bb0 <HAL_UART_IRQHandler+0x22c>
 80039f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80d1 	beq.w	8003bb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_UART_IRQHandler+0xae>
 8003a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f043 0201 	orr.w	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <HAL_UART_IRQHandler+0xd2>
 8003a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d005      	beq.n	8003a56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	f043 0202 	orr.w	r2, r3, #2
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00b      	beq.n	8003a7a <HAL_UART_IRQHandler+0xf6>
 8003a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	f043 0204 	orr.w	r2, r3, #4
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d011      	beq.n	8003aaa <HAL_UART_IRQHandler+0x126>
 8003a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d105      	bne.n	8003a9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f043 0208 	orr.w	r2, r3, #8
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 81f2 	beq.w	8003e98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x14e>
 8003ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fb5c 	bl	800418a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf14      	ite	ne
 8003ae0:	2301      	movne	r3, #1
 8003ae2:	2300      	moveq	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d103      	bne.n	8003afe <HAL_UART_IRQHandler+0x17a>
 8003af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d04f      	beq.n	8003b9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fa66 	bl	8003fd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d041      	beq.n	8003b96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3314      	adds	r3, #20
 8003b18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b20:	e853 3f00 	ldrex	r3, [r3]
 8003b24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3314      	adds	r3, #20
 8003b3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1d9      	bne.n	8003b12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d013      	beq.n	8003b8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6a:	4a7e      	ldr	r2, [pc, #504]	; (8003d64 <HAL_UART_IRQHandler+0x3e0>)
 8003b6c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fd fd28 	bl	80015c8 <HAL_DMA_Abort_IT>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d016      	beq.n	8003bac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b88:	4610      	mov	r0, r2
 8003b8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8c:	e00e      	b.n	8003bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f99c 	bl	8003ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b94:	e00a      	b.n	8003bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f998 	bl	8003ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9c:	e006      	b.n	8003bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f994 	bl	8003ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003baa:	e175      	b.n	8003e98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	bf00      	nop
    return;
 8003bae:	e173      	b.n	8003e98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	f040 814f 	bne.w	8003e58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 8148 	beq.w	8003e58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8141 	beq.w	8003e58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 80b6 	beq.w	8003d68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8145 	beq.w	8003e9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	f080 813e 	bcs.w	8003e9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	f000 8088 	beq.w	8003d44 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	330c      	adds	r3, #12
 8003c3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	330c      	adds	r3, #12
 8003c5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c60:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1d9      	bne.n	8003c34 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3314      	adds	r3, #20
 8003c86:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ca4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ca8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e1      	bne.n	8003c80 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3314      	adds	r3, #20
 8003cdc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ce0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ce2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ce6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ce8:	e841 2300 	strex	r3, r2, [r1]
 8003cec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e3      	bne.n	8003cbc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d14:	f023 0310 	bic.w	r3, r3, #16
 8003d18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d26:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d28:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d2e:	e841 2300 	strex	r3, r2, [r1]
 8003d32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1e3      	bne.n	8003d02 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fd fc07 	bl	8001552 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	4619      	mov	r1, r3
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f8bf 	bl	8003ede <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d60:	e09c      	b.n	8003e9c <HAL_UART_IRQHandler+0x518>
 8003d62:	bf00      	nop
 8003d64:	08004095 	.word	0x08004095
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 808e 	beq.w	8003ea0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8089 	beq.w	8003ea0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003db2:	647a      	str	r2, [r7, #68]	; 0x44
 8003db4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e3      	bne.n	8003d8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3314      	adds	r3, #20
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	e853 3f00 	ldrex	r3, [r3]
 8003dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	f023 0301 	bic.w	r3, r3, #1
 8003ddc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3314      	adds	r3, #20
 8003de6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dea:	633a      	str	r2, [r7, #48]	; 0x30
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e3      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0310 	bic.w	r3, r3, #16
 8003e22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e30:	61fa      	str	r2, [r7, #28]
 8003e32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	69b9      	ldr	r1, [r7, #24]
 8003e36:	69fa      	ldr	r2, [r7, #28]
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e3      	bne.n	8003e0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e4e:	4619      	mov	r1, r3
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f844 	bl	8003ede <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e56:	e023      	b.n	8003ea0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d009      	beq.n	8003e78 <HAL_UART_IRQHandler+0x4f4>
 8003e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f923 	bl	80040bc <UART_Transmit_IT>
    return;
 8003e76:	e014      	b.n	8003ea2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00e      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x51e>
 8003e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f962 	bl	800415a <UART_EndTransmit_IT>
    return;
 8003e96:	e004      	b.n	8003ea2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e98:	bf00      	nop
 8003e9a:	e002      	b.n	8003ea2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e9c:	bf00      	nop
 8003e9e:	e000      	b.n	8003ea2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ea0:	bf00      	nop
  }
}
 8003ea2:	37e8      	adds	r7, #232	; 0xe8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr

08003eba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b090      	sub	sp, #64	; 0x40
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f04:	e050      	b.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d04c      	beq.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f14:	f7fc fdda 	bl	8000acc <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d241      	bcs.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	330c      	adds	r3, #12
 8003f42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f44:	637a      	str	r2, [r7, #52]	; 0x34
 8003f46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e5      	bne.n	8003f24 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	613b      	str	r3, [r7, #16]
   return(result);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3314      	adds	r3, #20
 8003f76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f78:	623a      	str	r2, [r7, #32]
 8003f7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	69f9      	ldr	r1, [r7, #28]
 8003f7e:	6a3a      	ldr	r2, [r7, #32]
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e00f      	b.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d09f      	beq.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3740      	adds	r7, #64	; 0x40
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b095      	sub	sp, #84	; 0x54
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ff8:	643a      	str	r2, [r7, #64]	; 0x40
 8003ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ffe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e5      	bne.n	8003fd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3314      	adds	r3, #20
 8004012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	61fb      	str	r3, [r7, #28]
   return(result);
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	64bb      	str	r3, [r7, #72]	; 0x48
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3314      	adds	r3, #20
 800402a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800402c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e5      	bne.n	800400c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	2b01      	cmp	r3, #1
 8004046:	d119      	bne.n	800407c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	60bb      	str	r3, [r7, #8]
   return(result);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f023 0310 	bic.w	r3, r3, #16
 800405e:	647b      	str	r3, [r7, #68]	; 0x44
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004068:	61ba      	str	r2, [r7, #24]
 800406a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	6979      	ldr	r1, [r7, #20]
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	613b      	str	r3, [r7, #16]
   return(result);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e5      	bne.n	8004048 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	631a      	str	r2, [r3, #48]	; 0x30
}
 800408a:	bf00      	nop
 800408c:	3754      	adds	r7, #84	; 0x54
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f7ff ff0c 	bl	8003ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b21      	cmp	r3, #33	; 0x21
 80040ce:	d13e      	bne.n	800414e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d8:	d114      	bne.n	8004104 <UART_Transmit_IT+0x48>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d110      	bne.n	8004104 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	1c9a      	adds	r2, r3, #2
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]
 8004102:	e008      	b.n	8004116 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	1c59      	adds	r1, r3, #1
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6211      	str	r1, [r2, #32]
 800410e:	781a      	ldrb	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29b      	uxth	r3, r3
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	4619      	mov	r1, r3
 8004124:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10f      	bne.n	800414a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004138:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004148:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	e000      	b.n	8004150 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800414e:	2302      	movs	r3, #2
  }
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004170:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff fe94 	bl	8003ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b08c      	sub	sp, #48	; 0x30
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b22      	cmp	r3, #34	; 0x22
 800419c:	f040 80ae 	bne.w	80042fc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a8:	d117      	bne.n	80041da <UART_Receive_IT+0x50>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d113      	bne.n	80041da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	1c9a      	adds	r2, r3, #2
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
 80041d8:	e026      	b.n	8004228 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ec:	d007      	beq.n	80041fe <UART_Receive_IT+0x74>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10a      	bne.n	800420c <UART_Receive_IT+0x82>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	e008      	b.n	800421e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004218:	b2da      	uxtb	r2, r3
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29b      	uxth	r3, r3
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4619      	mov	r1, r3
 8004236:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004238:	2b00      	cmp	r3, #0
 800423a:	d15d      	bne.n	80042f8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0220 	bic.w	r2, r2, #32
 800424a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800425a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	2b01      	cmp	r3, #1
 8004280:	d135      	bne.n	80042ee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	330c      	adds	r3, #12
 800428e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	613b      	str	r3, [r7, #16]
   return(result);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f023 0310 	bic.w	r3, r3, #16
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	330c      	adds	r3, #12
 80042a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a8:	623a      	str	r2, [r7, #32]
 80042aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ac:	69f9      	ldr	r1, [r7, #28]
 80042ae:	6a3a      	ldr	r2, [r7, #32]
 80042b0:	e841 2300 	strex	r3, r2, [r1]
 80042b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e5      	bne.n	8004288 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b10      	cmp	r3, #16
 80042c8:	d10a      	bne.n	80042e0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042e4:	4619      	mov	r1, r3
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff fdf9 	bl	8003ede <HAL_UARTEx_RxEventCallback>
 80042ec:	e002      	b.n	80042f4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff fde3 	bl	8003eba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	e002      	b.n	80042fe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e000      	b.n	80042fe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042fc:	2302      	movs	r3, #2
  }
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3730      	adds	r7, #48	; 0x30
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004342:	f023 030c 	bic.w	r3, r3, #12
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	430b      	orrs	r3, r1
 800434e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a2c      	ldr	r2, [pc, #176]	; (800441c <UART_SetConfig+0x114>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d103      	bne.n	8004378 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004370:	f7fd ff1e 	bl	80021b0 <HAL_RCC_GetPCLK2Freq>
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	e002      	b.n	800437e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004378:	f7fd ff06 	bl	8002188 <HAL_RCC_GetPCLK1Freq>
 800437c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009a      	lsls	r2, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	fbb2 f3f3 	udiv	r3, r2, r3
 8004394:	4a22      	ldr	r2, [pc, #136]	; (8004420 <UART_SetConfig+0x118>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	0119      	lsls	r1, r3, #4
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009a      	lsls	r2, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043b4:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <UART_SetConfig+0x118>)
 80043b6:	fba3 0302 	umull	r0, r3, r3, r2
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	2064      	movs	r0, #100	; 0x64
 80043be:	fb00 f303 	mul.w	r3, r0, r3
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	3332      	adds	r3, #50	; 0x32
 80043c8:	4a15      	ldr	r2, [pc, #84]	; (8004420 <UART_SetConfig+0x118>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d4:	4419      	add	r1, r3
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	009a      	lsls	r2, r3, #2
 80043e0:	441a      	add	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043ec:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <UART_SetConfig+0x118>)
 80043ee:	fba3 0302 	umull	r0, r3, r3, r2
 80043f2:	095b      	lsrs	r3, r3, #5
 80043f4:	2064      	movs	r0, #100	; 0x64
 80043f6:	fb00 f303 	mul.w	r3, r0, r3
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	3332      	adds	r3, #50	; 0x32
 8004400:	4a07      	ldr	r2, [pc, #28]	; (8004420 <UART_SetConfig+0x118>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	f003 020f 	and.w	r2, r3, #15
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	440a      	add	r2, r1
 8004412:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40013800 	.word	0x40013800
 8004420:	51eb851f 	.word	0x51eb851f

08004424 <__libc_init_array>:
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	2600      	movs	r6, #0
 8004428:	4d0c      	ldr	r5, [pc, #48]	; (800445c <__libc_init_array+0x38>)
 800442a:	4c0d      	ldr	r4, [pc, #52]	; (8004460 <__libc_init_array+0x3c>)
 800442c:	1b64      	subs	r4, r4, r5
 800442e:	10a4      	asrs	r4, r4, #2
 8004430:	42a6      	cmp	r6, r4
 8004432:	d109      	bne.n	8004448 <__libc_init_array+0x24>
 8004434:	f000 f822 	bl	800447c <_init>
 8004438:	2600      	movs	r6, #0
 800443a:	4d0a      	ldr	r5, [pc, #40]	; (8004464 <__libc_init_array+0x40>)
 800443c:	4c0a      	ldr	r4, [pc, #40]	; (8004468 <__libc_init_array+0x44>)
 800443e:	1b64      	subs	r4, r4, r5
 8004440:	10a4      	asrs	r4, r4, #2
 8004442:	42a6      	cmp	r6, r4
 8004444:	d105      	bne.n	8004452 <__libc_init_array+0x2e>
 8004446:	bd70      	pop	{r4, r5, r6, pc}
 8004448:	f855 3b04 	ldr.w	r3, [r5], #4
 800444c:	4798      	blx	r3
 800444e:	3601      	adds	r6, #1
 8004450:	e7ee      	b.n	8004430 <__libc_init_array+0xc>
 8004452:	f855 3b04 	ldr.w	r3, [r5], #4
 8004456:	4798      	blx	r3
 8004458:	3601      	adds	r6, #1
 800445a:	e7f2      	b.n	8004442 <__libc_init_array+0x1e>
 800445c:	080044d4 	.word	0x080044d4
 8004460:	080044d4 	.word	0x080044d4
 8004464:	080044d4 	.word	0x080044d4
 8004468:	080044d8 	.word	0x080044d8

0800446c <memset>:
 800446c:	4603      	mov	r3, r0
 800446e:	4402      	add	r2, r0
 8004470:	4293      	cmp	r3, r2
 8004472:	d100      	bne.n	8004476 <memset+0xa>
 8004474:	4770      	bx	lr
 8004476:	f803 1b01 	strb.w	r1, [r3], #1
 800447a:	e7f9      	b.n	8004470 <memset+0x4>

0800447c <_init>:
 800447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447e:	bf00      	nop
 8004480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004482:	bc08      	pop	{r3}
 8004484:	469e      	mov	lr, r3
 8004486:	4770      	bx	lr

08004488 <_fini>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	bf00      	nop
 800448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448e:	bc08      	pop	{r3}
 8004490:	469e      	mov	lr, r3
 8004492:	4770      	bx	lr
