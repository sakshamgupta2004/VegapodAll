
LU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000721c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08007330  08007330  00017330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800779c  0800779c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800779c  0800779c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800779c  0800779c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077a0  080077a0  000177a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080077a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200001e4  08007988  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08007988  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3fa  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002139  00000000  00000000  0002e607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00030740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00031520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019097  00000000  00000000  00032228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f602  00000000  00000000  0004b2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090c33  00000000  00000000  0005a8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb4f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b78  00000000  00000000  000eb544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007314 	.word	0x08007314

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007314 	.word	0x08007314

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2lz>:
 8000a9c:	b538      	push	{r3, r4, r5, lr}
 8000a9e:	4605      	mov	r5, r0
 8000aa0:	460c      	mov	r4, r1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	4628      	mov	r0, r5
 8000aa8:	4621      	mov	r1, r4
 8000aaa:	f7ff ff87 	bl	80009bc <__aeabi_dcmplt>
 8000aae:	b928      	cbnz	r0, 8000abc <__aeabi_d2lz+0x20>
 8000ab0:	4628      	mov	r0, r5
 8000ab2:	4621      	mov	r1, r4
 8000ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ab8:	f000 b80a 	b.w	8000ad0 <__aeabi_d2ulz>
 8000abc:	4628      	mov	r0, r5
 8000abe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ac2:	f000 f805 	bl	8000ad0 <__aeabi_d2ulz>
 8000ac6:	4240      	negs	r0, r0
 8000ac8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000acc:	bd38      	pop	{r3, r4, r5, pc}
 8000ace:	bf00      	nop

08000ad0 <__aeabi_d2ulz>:
 8000ad0:	b5d0      	push	{r4, r6, r7, lr}
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <__aeabi_d2ulz+0x34>)
 8000ad6:	4606      	mov	r6, r0
 8000ad8:	460f      	mov	r7, r1
 8000ada:	f7ff fcfd 	bl	80004d8 <__aeabi_dmul>
 8000ade:	f7ff ffbd 	bl	8000a5c <__aeabi_d2uiz>
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	f7ff fc7e 	bl	80003e4 <__aeabi_ui2d>
 8000ae8:	2200      	movs	r2, #0
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <__aeabi_d2ulz+0x38>)
 8000aec:	f7ff fcf4 	bl	80004d8 <__aeabi_dmul>
 8000af0:	4602      	mov	r2, r0
 8000af2:	460b      	mov	r3, r1
 8000af4:	4630      	mov	r0, r6
 8000af6:	4639      	mov	r1, r7
 8000af8:	f7ff fb36 	bl	8000168 <__aeabi_dsub>
 8000afc:	f7ff ffae 	bl	8000a5c <__aeabi_d2uiz>
 8000b00:	4621      	mov	r1, r4
 8000b02:	bdd0      	pop	{r4, r6, r7, pc}
 8000b04:	3df00000 	.word	0x3df00000
 8000b08:	41f00000 	.word	0x41f00000

08000b0c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b18:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d013      	beq.n	8000b4c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b24:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b28:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b2c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d00b      	beq.n	8000b4c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b34:	e000      	b.n	8000b38 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b36:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0f9      	beq.n	8000b36 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b42:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
	int i=0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e009      	b.n	8000b82 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	60ba      	str	r2, [r7, #8]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ffc8 	bl	8000b0c <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	dbf1      	blt.n	8000b6e <_write+0x16>
	return len;
 8000b8a:	687b      	ldr	r3, [r7, #4]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b98:	f000 fc28 	bl	80013ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9c:	f000 f88c 	bl	8000cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba0:	f000 f9d2 	bl	8000f48 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ba4:	f000 f8e4 	bl	8000d70 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ba8:	f000 f920 	bl	8000dec <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000bac:	f000 f9a2 	bl	8000ef4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start(&hadc1);
 8000bb0:	4836      	ldr	r0, [pc, #216]	; (8000c8c <main+0xf8>)
 8000bb2:	f000 fd55 	bl	8001660 <HAL_ADC_Start>
HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4835      	ldr	r0, [pc, #212]	; (8000c90 <main+0xfc>)
 8000bba:	f002 fd41 	bl	8003640 <HAL_TIMEx_PWMN_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4833      	ldr	r0, [pc, #204]	; (8000c90 <main+0xfc>)
 8000bc2:	f002 f9cb 	bl	8002f5c <HAL_TIM_PWM_Start>

    /* USER CODE BEGIN 3 */
//	  sprintf(txBuffer,"%d\n",number);
	  //HAL_Delay(50);
	  //HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer,  strlen(txBuffer),500);
	  if(HAL_UART_Receive(&huart1,con_sig,sizeof(con_sig),10) != HAL_OK) {
 8000bc6:	230a      	movs	r3, #10
 8000bc8:	220a      	movs	r2, #10
 8000bca:	4932      	ldr	r1, [pc, #200]	; (8000c94 <main+0x100>)
 8000bcc:	4832      	ldr	r0, [pc, #200]	; (8000c98 <main+0x104>)
 8000bce:	f002 fef8 	bl	80039c2 <HAL_UART_Receive>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d004      	beq.n	8000be2 <main+0x4e>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bdc:	482f      	ldr	r0, [pc, #188]	; (8000c9c <main+0x108>)
 8000bde:	f001 fbd7 	bl	8002390 <HAL_GPIO_TogglePin>
		  //HAL_Delay(1000);
	  }
	  //HAL_Delay(100);
	  targetCurrentma = atof(con_sig);
 8000be2:	482c      	ldr	r0, [pc, #176]	; (8000c94 <main+0x100>)
 8000be4:	f003 fcd0 	bl	8004588 <atof>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4610      	mov	r0, r2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f7ff ff0c 	bl	8000a0c <__aeabi_d2iz>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4a2a      	ldr	r2, [pc, #168]	; (8000ca0 <main+0x10c>)
 8000bf8:	6013      	str	r3, [r2, #0]
	  HAL_ADC_PollForConversion(&hadc1, 0);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4823      	ldr	r0, [pc, #140]	; (8000c8c <main+0xf8>)
 8000bfe:	f000 fddd 	bl	80017bc <HAL_ADC_PollForConversion>
	  value1 = HAL_ADC_GetValue(&hadc1);
 8000c02:	4822      	ldr	r0, [pc, #136]	; (8000c8c <main+0xf8>)
 8000c04:	f000 fee0 	bl	80019c8 <HAL_ADC_GetValue>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <main+0x110>)
 8000c0e:	801a      	strh	r2, [r3, #0]
	  	  currentma = (value1 * 10000)/2481;
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <main+0x110>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c1a:	fb02 f303 	mul.w	r3, r2, r3
 8000c1e:	4a22      	ldr	r2, [pc, #136]	; (8000ca8 <main+0x114>)
 8000c20:	fb82 1203 	smull	r1, r2, r2, r3
 8000c24:	1292      	asrs	r2, r2, #10
 8000c26:	17db      	asrs	r3, r3, #31
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	4a20      	ldr	r2, [pc, #128]	; (8000cac <main+0x118>)
 8000c2c:	6013      	str	r3, [r2, #0]
	  	  if (currentma > targetCurrentma) currPWM--;
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <main+0x118>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <main+0x10c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	dd05      	ble.n	8000c46 <main+0xb2>
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <main+0x11c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <main+0x11c>)
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	e00a      	b.n	8000c5c <main+0xc8>
	  	  else if (currentma < targetCurrentma)currPWM++;
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <main+0x118>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <main+0x10c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	da04      	bge.n	8000c5c <main+0xc8>
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <main+0x11c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <main+0x11c>)
 8000c5a:	6013      	str	r3, [r2, #0]
	  	  if (currPWM > 1300) currPWM = 1300;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <main+0x11c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f240 5214 	movw	r2, #1300	; 0x514
 8000c64:	4293      	cmp	r3, r2
 8000c66:	dd04      	ble.n	8000c72 <main+0xde>
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <main+0x11c>)
 8000c6a:	f240 5214 	movw	r2, #1300	; 0x514
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	e006      	b.n	8000c80 <main+0xec>
	  	  else if (currPWM < 0) currPWM = 0;
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <main+0x11c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	da02      	bge.n	8000c80 <main+0xec>
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <main+0x11c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
	  	  TIM1->CCR1=currPWM;
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <main+0x11c>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <main+0x120>)
 8000c86:	635a      	str	r2, [r3, #52]	; 0x34
	  if(HAL_UART_Receive(&huart1,con_sig,sizeof(con_sig),10) != HAL_OK) {
 8000c88:	e79d      	b.n	8000bc6 <main+0x32>
 8000c8a:	bf00      	nop
 8000c8c:	20000200 	.word	0x20000200
 8000c90:	20000230 	.word	0x20000230
 8000c94:	200002c4 	.word	0x200002c4
 8000c98:	20000278 	.word	0x20000278
 8000c9c:	40011000 	.word	0x40011000
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	200002c0 	.word	0x200002c0
 8000ca8:	69a91e71 	.word	0x69a91e71
 8000cac:	200002d0 	.word	0x200002d0
 8000cb0:	200002d4 	.word	0x200002d4
 8000cb4:	40012c00 	.word	0x40012c00

08000cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b094      	sub	sp, #80	; 0x50
 8000cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc2:	2228      	movs	r2, #40	; 0x28
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f003 fc8c 	bl	80045e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d04:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 fb58 	bl	80023c4 <HAL_RCC_OscConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d1a:	f000 f937 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1e:	230f      	movs	r3, #15
 8000d20:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2102      	movs	r1, #2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 fdc4 	bl	80028c8 <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d46:	f000 f921 	bl	8000f8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d52:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 ff44 	bl	8002be4 <HAL_RCCEx_PeriphCLKConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d62:	f000 f913 	bl	8000f8c <Error_Handler>
  }
}
 8000d66:	bf00      	nop
 8000d68:	3750      	adds	r7, #80	; 0x50
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_ADC1_Init+0x74>)
 8000d82:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <MX_ADC1_Init+0x78>)
 8000d84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_ADC1_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_ADC1_Init+0x74>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_ADC1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_ADC1_Init+0x74>)
 8000d9a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_ADC1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_ADC1_Init+0x74>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dac:	480d      	ldr	r0, [pc, #52]	; (8000de4 <MX_ADC1_Init+0x74>)
 8000dae:	f000 fb7f 	bl	80014b0 <HAL_ADC_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000db8:	f000 f8e8 	bl	8000f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_ADC1_Init+0x74>)
 8000dce:	f000 fe07 	bl	80019e0 <HAL_ADC_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000dd8:	f000 f8d8 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000200 	.word	0x20000200
 8000de8:	40012400 	.word	0x40012400

08000dec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b092      	sub	sp, #72	; 0x48
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
 8000e0c:	615a      	str	r2, [r3, #20]
 8000e0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2220      	movs	r2, #32
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 fbe4 	bl	80045e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e1c:	4b33      	ldr	r3, [pc, #204]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e1e:	4a34      	ldr	r2, [pc, #208]	; (8000ef0 <MX_TIM1_Init+0x104>)
 8000e20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e22:	4b32      	ldr	r3, [pc, #200]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b30      	ldr	r3, [pc, #192]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1439;
 8000e2e:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e30:	f240 529f 	movw	r2, #1439	; 0x59f
 8000e34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e36:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e42:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e48:	4828      	ldr	r0, [pc, #160]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e4a:	f002 f837 	bl	8002ebc <HAL_TIM_PWM_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000e54:	f000 f89a 	bl	8000f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e64:	4619      	mov	r1, r3
 8000e66:	4821      	ldr	r0, [pc, #132]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e68:	f002 fc88 	bl	800377c <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000e72:	f000 f88b 	bl	8000f8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e76:	2360      	movs	r3, #96	; 0x60
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e82:	2300      	movs	r3, #0
 8000e84:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	2200      	movs	r2, #0
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4814      	ldr	r0, [pc, #80]	; (8000eec <MX_TIM1_Init+0x100>)
 8000e9c:	f002 f900 	bl	80030a0 <HAL_TIM_PWM_ConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000ea6:	f000 f871 	bl	8000f8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 144;
 8000eb6:	2390      	movs	r3, #144	; 0x90
 8000eb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ebe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4807      	ldr	r0, [pc, #28]	; (8000eec <MX_TIM1_Init+0x100>)
 8000ece:	f002 fcb3 	bl	8003838 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000ed8:	f000 f858 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <MX_TIM1_Init+0x100>)
 8000ede:	f000 f8d7 	bl	8001090 <HAL_TIM_MspPostInit>

}
 8000ee2:	bf00      	nop
 8000ee4:	3748      	adds	r7, #72	; 0x48
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000230 	.word	0x20000230
 8000ef0:	40012c00 	.word	0x40012c00

08000ef4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <MX_USART1_UART_Init+0x50>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USART1_UART_Init+0x4c>)
 8000f2c:	f002 fcf9 	bl	8003922 <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f36:	f000 f829 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000278 	.word	0x20000278
 8000f44:	40013800 	.word	0x40013800

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_GPIO_Init+0x40>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <MX_GPIO_Init+0x40>)
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	6193      	str	r3, [r2, #24]
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_GPIO_Init+0x40>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_GPIO_Init+0x40>)
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <MX_GPIO_Init+0x40>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6193      	str	r3, [r2, #24]
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <MX_GPIO_Init+0x40>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	40021000 	.word	0x40021000

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_MspInit+0x40>)
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_MspInit+0x40>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6193      	str	r3, [r2, #24]
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_MspInit+0x40>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_MspInit+0x40>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_MspInit+0x40>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_MspInit+0x40>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a14      	ldr	r2, [pc, #80]	; (8001048 <HAL_ADC_MspInit+0x6c>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d121      	bne.n	8001040 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_ADC_MspInit+0x70>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a12      	ldr	r2, [pc, #72]	; (800104c <HAL_ADC_MspInit+0x70>)
 8001002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_ADC_MspInit+0x70>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_ADC_MspInit+0x70>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a0c      	ldr	r2, [pc, #48]	; (800104c <HAL_ADC_MspInit+0x70>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_ADC_MspInit+0x70>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800102c:	2301      	movs	r3, #1
 800102e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001030:	2303      	movs	r3, #3
 8001032:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	4619      	mov	r1, r3
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_ADC_MspInit+0x74>)
 800103c:	f001 f824 	bl	8002088 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40012400 	.word	0x40012400
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800

08001054 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a09      	ldr	r2, [pc, #36]	; (8001088 <HAL_TIM_PWM_MspInit+0x34>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d10b      	bne.n	800107e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <HAL_TIM_PWM_MspInit+0x38>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_TIM_PWM_MspInit+0x38>)
 800106c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001070:	6193      	str	r3, [r2, #24]
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_TIM_PWM_MspInit+0x38>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	40012c00 	.word	0x40012c00
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a19      	ldr	r2, [pc, #100]	; (8001110 <HAL_TIM_MspPostInit+0x80>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d12a      	bne.n	8001106 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_TIM_MspPostInit+0x84>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a17      	ldr	r2, [pc, #92]	; (8001114 <HAL_TIM_MspPostInit+0x84>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_TIM_MspPostInit+0x84>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80010c8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	4619      	mov	r1, r3
 80010dc:	480e      	ldr	r0, [pc, #56]	; (8001118 <HAL_TIM_MspPostInit+0x88>)
 80010de:	f000 ffd3 	bl	8002088 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_TIM_MspPostInit+0x8c>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_TIM_MspPostInit+0x8c>)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001106:	bf00      	nop
 8001108:	3720      	adds	r7, #32
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40012c00 	.word	0x40012c00
 8001114:	40021000 	.word	0x40021000
 8001118:	40010800 	.word	0x40010800
 800111c:	40010000 	.word	0x40010000

08001120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a20      	ldr	r2, [pc, #128]	; (80011bc <HAL_UART_MspInit+0x9c>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d139      	bne.n	80011b4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_UART_MspInit+0xa0>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <HAL_UART_MspInit+0xa0>)
 8001146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <HAL_UART_MspInit+0xa0>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_UART_MspInit+0xa0>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <HAL_UART_MspInit+0xa0>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_UART_MspInit+0xa0>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001174:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	4619      	mov	r1, r3
 8001184:	480f      	ldr	r0, [pc, #60]	; (80011c4 <HAL_UART_MspInit+0xa4>)
 8001186:	f000 ff7f 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800118a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4619      	mov	r1, r3
 800119e:	4809      	ldr	r0, [pc, #36]	; (80011c4 <HAL_UART_MspInit+0xa4>)
 80011a0:	f000 ff72 	bl	8002088 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	2025      	movs	r0, #37	; 0x25
 80011aa:	f000 fe84 	bl	8001eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ae:	2025      	movs	r0, #37	; 0x25
 80011b0:	f000 fe9d 	bl	8001eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40013800 	.word	0x40013800
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010800 	.word	0x40010800

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <NMI_Handler+0x4>

080011ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <MemManage_Handler+0x4>

080011da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr

080011f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr

080011fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
	...

0800120c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
ticks++;
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <SysTick_Handler+0x28>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	4a07      	ldr	r2, [pc, #28]	; (8001234 <SysTick_Handler+0x28>)
 8001218:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121a:	f000 f92d 	bl	8001478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
if (ticks >= 1000) {
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <SysTick_Handler+0x28>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001226:	db02      	blt.n	800122e <SysTick_Handler+0x22>
	ticks = 0;
 8001228:	4b02      	ldr	r3, [pc, #8]	; (8001234 <SysTick_Handler+0x28>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
//		  targetCurrentma = 11000;
//	  else
//		  targetCurrentma = 1000;
}
  /* USER CODE END SysTick_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200002d8 	.word	0x200002d8

08001238 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <USART1_IRQHandler+0x10>)
 800123e:	f002 fc53 	bl	8003ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000278 	.word	0x20000278

0800124c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
	return 1;
 8001250:	2301      	movs	r3, #1
}
 8001252:	4618      	mov	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <_kill>:

int _kill(int pid, int sig)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001264:	f003 f994 	bl	8004590 <__errno>
 8001268:	4603      	mov	r3, r0
 800126a:	2216      	movs	r2, #22
 800126c:	601a      	str	r2, [r3, #0]
	return -1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_exit>:

void _exit (int status)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001282:	f04f 31ff 	mov.w	r1, #4294967295
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffe7 	bl	800125a <_kill>
	while (1) {}		/* Make sure we hang here */
 800128c:	e7fe      	b.n	800128c <_exit+0x12>

0800128e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e00a      	b.n	80012b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012a0:	f3af 8000 	nop.w
 80012a4:	4601      	mov	r1, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	60ba      	str	r2, [r7, #8]
 80012ac:	b2ca      	uxtb	r2, r1
 80012ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	3301      	adds	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	dbf0      	blt.n	80012a0 <_read+0x12>
	}

return len;
 80012be:	687b      	ldr	r3, [r7, #4]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_close>:
	}
	return len;
}

int _close(int file)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	return -1;
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ee:	605a      	str	r2, [r3, #4]
	return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <_isatty>:

int _isatty(int file)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	return 1;
 8001304:	2301      	movs	r3, #1
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <_sbrk+0x5c>)
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <_sbrk+0x60>)
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <_sbrk+0x64>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <_sbrk+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	d207      	bcs.n	8001368 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001358:	f003 f91a 	bl	8004590 <__errno>
 800135c:	4603      	mov	r3, r0
 800135e:	220c      	movs	r2, #12
 8001360:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	e009      	b.n	800137c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <_sbrk+0x64>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <_sbrk+0x64>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	4a05      	ldr	r2, [pc, #20]	; (800138c <_sbrk+0x64>)
 8001378:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137a:	68fb      	ldr	r3, [r7, #12]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20005000 	.word	0x20005000
 8001388:	00000400 	.word	0x00000400
 800138c:	200002dc 	.word	0x200002dc
 8001390:	200002f8 	.word	0x200002f8

08001394 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a0:	f7ff fff8 	bl	8001394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013a6:	490c      	ldr	r1, [pc, #48]	; (80013d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013a8:	4a0c      	ldr	r2, [pc, #48]	; (80013dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013bc:	4c09      	ldr	r4, [pc, #36]	; (80013e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ca:	f003 f8e7 	bl	800459c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ce:	f7ff fbe1 	bl	8000b94 <main>
  bx lr
 80013d2:	4770      	bx	lr
  ldr r0, =_sdata
 80013d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80013dc:	080077a4 	.word	0x080077a4
  ldr r2, =_sbss
 80013e0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80013e4:	200002f4 	.word	0x200002f4

080013e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC1_2_IRQHandler>
	...

080013ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_Init+0x28>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_Init+0x28>)
 80013f6:	f043 0310 	orr.w	r3, r3, #16
 80013fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 fd4f 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001402:	200f      	movs	r0, #15
 8001404:	f000 f808 	bl	8001418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001408:	f7ff fdc6 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000

08001418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_InitTick+0x54>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_InitTick+0x58>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001432:	fbb2 f3f3 	udiv	r3, r2, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 fd67 	bl	8001f0a <HAL_SYSTICK_Config>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e00e      	b.n	8001464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d80a      	bhi.n	8001462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144c:	2200      	movs	r2, #0
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f000 fd2f 	bl	8001eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <HAL_InitTick+0x5c>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000004 	.word	0x20000004
 8001470:	2000000c 	.word	0x2000000c
 8001474:	20000008 	.word	0x20000008

08001478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_IncTick+0x1c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_IncTick+0x20>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a03      	ldr	r2, [pc, #12]	; (8001498 <HAL_IncTick+0x20>)
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	2000000c 	.word	0x2000000c
 8001498:	200002e0 	.word	0x200002e0

0800149c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b02      	ldr	r3, [pc, #8]	; (80014ac <HAL_GetTick+0x10>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	200002e0 	.word	0x200002e0

080014b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e0be      	b.n	8001650 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d109      	bne.n	80014f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fd74 	bl	8000fdc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fbc5 	bl	8001c84 <ADC_ConversionStop_Disable>
 80014fa:	4603      	mov	r3, r0
 80014fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 8099 	bne.w	800163e <HAL_ADC_Init+0x18e>
 800150c:	7dfb      	ldrb	r3, [r7, #23]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f040 8095 	bne.w	800163e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800151c:	f023 0302 	bic.w	r3, r3, #2
 8001520:	f043 0202 	orr.w	r2, r3, #2
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001530:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7b1b      	ldrb	r3, [r3, #12]
 8001536:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001538:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	4313      	orrs	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001548:	d003      	beq.n	8001552 <HAL_ADC_Init+0xa2>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d102      	bne.n	8001558 <HAL_ADC_Init+0xa8>
 8001552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001556:	e000      	b.n	800155a <HAL_ADC_Init+0xaa>
 8001558:	2300      	movs	r3, #0
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7d1b      	ldrb	r3, [r3, #20]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d119      	bne.n	800159c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7b1b      	ldrb	r3, [r3, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d109      	bne.n	8001584 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	3b01      	subs	r3, #1
 8001576:	035a      	lsls	r2, r3, #13
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	e00b      	b.n	800159c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001588:	f043 0220 	orr.w	r2, r3, #32
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	f043 0201 	orr.w	r2, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	4b28      	ldr	r3, [pc, #160]	; (8001658 <HAL_ADC_Init+0x1a8>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	430b      	orrs	r3, r1
 80015c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015cc:	d003      	beq.n	80015d6 <HAL_ADC_Init+0x126>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d104      	bne.n	80015e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	3b01      	subs	r3, #1
 80015dc:	051b      	lsls	r3, r3, #20
 80015de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_ADC_Init+0x1ac>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	429a      	cmp	r2, r3
 8001602:	d10b      	bne.n	800161c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	f023 0303 	bic.w	r3, r3, #3
 8001612:	f043 0201 	orr.w	r2, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800161a:	e018      	b.n	800164e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	f023 0312 	bic.w	r3, r3, #18
 8001624:	f043 0210 	orr.w	r2, r3, #16
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	f043 0201 	orr.w	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800163c:	e007      	b.n	800164e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	f043 0210 	orr.w	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800164e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	ffe1f7fd 	.word	0xffe1f7fd
 800165c:	ff1f0efe 	.word	0xff1f0efe

08001660 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_ADC_Start+0x1a>
 8001676:	2302      	movs	r3, #2
 8001678:	e098      	b.n	80017ac <HAL_ADC_Start+0x14c>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 faa4 	bl	8001bd0 <ADC_Enable>
 8001688:	4603      	mov	r3, r0
 800168a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	2b00      	cmp	r3, #0
 8001690:	f040 8087 	bne.w	80017a2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a41      	ldr	r2, [pc, #260]	; (80017b4 <HAL_ADC_Start+0x154>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d105      	bne.n	80016be <HAL_ADC_Start+0x5e>
 80016b2:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <HAL_ADC_Start+0x158>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d115      	bne.n	80016ea <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d026      	beq.n	8001726 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016e8:	e01d      	b.n	8001726 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a2f      	ldr	r2, [pc, #188]	; (80017b8 <HAL_ADC_Start+0x158>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d004      	beq.n	800170a <HAL_ADC_Start+0xaa>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a2b      	ldr	r2, [pc, #172]	; (80017b4 <HAL_ADC_Start+0x154>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d10d      	bne.n	8001726 <HAL_ADC_Start+0xc6>
 800170a:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <HAL_ADC_Start+0x158>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800171e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d006      	beq.n	8001740 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	f023 0206 	bic.w	r2, r3, #6
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	62da      	str	r2, [r3, #44]	; 0x2c
 800173e:	e002      	b.n	8001746 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f06f 0202 	mvn.w	r2, #2
 8001756:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001762:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001766:	d113      	bne.n	8001790 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800176c:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <HAL_ADC_Start+0x154>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d105      	bne.n	800177e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <HAL_ADC_Start+0x158>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800177a:	2b00      	cmp	r3, #0
 800177c:	d108      	bne.n	8001790 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	e00c      	b.n	80017aa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	e003      	b.n	80017aa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40012800 	.word	0x40012800
 80017b8:	40012400 	.word	0x40012400

080017bc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80017d2:	f7ff fe63 	bl	800149c <HAL_GetTick>
 80017d6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	f043 0220 	orr.w	r2, r3, #32
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e0d3      	b.n	80019a6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d131      	bne.n	8001870 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001816:	2b00      	cmp	r3, #0
 8001818:	d12a      	bne.n	8001870 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800181a:	e021      	b.n	8001860 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001822:	d01d      	beq.n	8001860 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d007      	beq.n	800183a <HAL_ADC_PollForConversion+0x7e>
 800182a:	f7ff fe37 	bl	800149c <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d212      	bcs.n	8001860 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10b      	bne.n	8001860 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	f043 0204 	orr.w	r2, r3, #4
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e0a2      	b.n	80019a6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0d6      	beq.n	800181c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800186e:	e070      	b.n	8001952 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001870:	4b4f      	ldr	r3, [pc, #316]	; (80019b0 <HAL_ADC_PollForConversion+0x1f4>)
 8001872:	681c      	ldr	r4, [r3, #0]
 8001874:	2002      	movs	r0, #2
 8001876:	f001 fa6b 	bl	8002d50 <HAL_RCCEx_GetPeriphCLKFreq>
 800187a:	4603      	mov	r3, r0
 800187c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6919      	ldr	r1, [r3, #16]
 8001886:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <HAL_ADC_PollForConversion+0x1f8>)
 8001888:	400b      	ands	r3, r1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d118      	bne.n	80018c0 <HAL_ADC_PollForConversion+0x104>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68d9      	ldr	r1, [r3, #12]
 8001894:	4b48      	ldr	r3, [pc, #288]	; (80019b8 <HAL_ADC_PollForConversion+0x1fc>)
 8001896:	400b      	ands	r3, r1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d111      	bne.n	80018c0 <HAL_ADC_PollForConversion+0x104>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6919      	ldr	r1, [r3, #16]
 80018a2:	4b46      	ldr	r3, [pc, #280]	; (80019bc <HAL_ADC_PollForConversion+0x200>)
 80018a4:	400b      	ands	r3, r1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d108      	bne.n	80018bc <HAL_ADC_PollForConversion+0x100>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68d9      	ldr	r1, [r3, #12]
 80018b0:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <HAL_ADC_PollForConversion+0x204>)
 80018b2:	400b      	ands	r3, r1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_ADC_PollForConversion+0x100>
 80018b8:	2314      	movs	r3, #20
 80018ba:	e020      	b.n	80018fe <HAL_ADC_PollForConversion+0x142>
 80018bc:	2329      	movs	r3, #41	; 0x29
 80018be:	e01e      	b.n	80018fe <HAL_ADC_PollForConversion+0x142>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6919      	ldr	r1, [r3, #16]
 80018c6:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <HAL_ADC_PollForConversion+0x200>)
 80018c8:	400b      	ands	r3, r1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d106      	bne.n	80018dc <HAL_ADC_PollForConversion+0x120>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68d9      	ldr	r1, [r3, #12]
 80018d4:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <HAL_ADC_PollForConversion+0x204>)
 80018d6:	400b      	ands	r3, r1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00d      	beq.n	80018f8 <HAL_ADC_PollForConversion+0x13c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6919      	ldr	r1, [r3, #16]
 80018e2:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <HAL_ADC_PollForConversion+0x208>)
 80018e4:	400b      	ands	r3, r1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d108      	bne.n	80018fc <HAL_ADC_PollForConversion+0x140>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68d9      	ldr	r1, [r3, #12]
 80018f0:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <HAL_ADC_PollForConversion+0x208>)
 80018f2:	400b      	ands	r3, r1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_PollForConversion+0x140>
 80018f8:	2354      	movs	r3, #84	; 0x54
 80018fa:	e000      	b.n	80018fe <HAL_ADC_PollForConversion+0x142>
 80018fc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80018fe:	fb02 f303 	mul.w	r3, r2, r3
 8001902:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001904:	e021      	b.n	800194a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d01a      	beq.n	8001944 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <HAL_ADC_PollForConversion+0x168>
 8001914:	f7ff fdc2 	bl	800149c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d20f      	bcs.n	8001944 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	429a      	cmp	r2, r3
 800192a:	d90b      	bls.n	8001944 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	f043 0204 	orr.w	r2, r3, #4
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e030      	b.n	80019a6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3301      	adds	r3, #1
 8001948:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	429a      	cmp	r2, r3
 8001950:	d8d9      	bhi.n	8001906 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f06f 0212 	mvn.w	r2, #18
 800195a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001972:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001976:	d115      	bne.n	80019a4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800197c:	2b00      	cmp	r3, #0
 800197e:	d111      	bne.n	80019a4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d105      	bne.n	80019a4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	371c      	adds	r7, #28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd90      	pop	{r4, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000004 	.word	0x20000004
 80019b4:	24924924 	.word	0x24924924
 80019b8:	00924924 	.word	0x00924924
 80019bc:	12492492 	.word	0x12492492
 80019c0:	00492492 	.word	0x00492492
 80019c4:	00249249 	.word	0x00249249

080019c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x20>
 80019fc:	2302      	movs	r3, #2
 80019fe:	e0dc      	b.n	8001bba <HAL_ADC_ConfigChannel+0x1da>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b06      	cmp	r3, #6
 8001a0e:	d81c      	bhi.n	8001a4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	3b05      	subs	r3, #5
 8001a22:	221f      	movs	r2, #31
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4019      	ands	r1, r3
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3b05      	subs	r3, #5
 8001a3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	635a      	str	r2, [r3, #52]	; 0x34
 8001a48:	e03c      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d81c      	bhi.n	8001a8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	3b23      	subs	r3, #35	; 0x23
 8001a64:	221f      	movs	r2, #31
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	4019      	ands	r1, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3b23      	subs	r3, #35	; 0x23
 8001a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	631a      	str	r2, [r3, #48]	; 0x30
 8001a8a:	e01b      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3b41      	subs	r3, #65	; 0x41
 8001a9e:	221f      	movs	r2, #31
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	4019      	ands	r1, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3b41      	subs	r3, #65	; 0x41
 8001ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b09      	cmp	r3, #9
 8001aca:	d91c      	bls.n	8001b06 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68d9      	ldr	r1, [r3, #12]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	3b1e      	subs	r3, #30
 8001ade:	2207      	movs	r2, #7
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4019      	ands	r1, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6898      	ldr	r0, [r3, #8]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	3b1e      	subs	r3, #30
 8001af8:	fa00 f203 	lsl.w	r2, r0, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	e019      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6919      	ldr	r1, [r3, #16]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	2207      	movs	r2, #7
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4019      	ands	r1, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	6898      	ldr	r0, [r3, #8]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d003      	beq.n	8001b4a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b46:	2b11      	cmp	r3, #17
 8001b48:	d132      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d125      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d126      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b70:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d11a      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <HAL_ADC_ConfigChannel+0x1ec>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	0c9a      	lsrs	r2, r3, #18
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b90:	e002      	b.n	8001b98 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f9      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x1b2>
 8001b9e:	e007      	b.n	8001bb0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f043 0220 	orr.w	r2, r3, #32
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	40012400 	.word	0x40012400
 8001bc8:	20000004 	.word	0x20000004
 8001bcc:	431bde83 	.word	0x431bde83

08001bd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d040      	beq.n	8001c70 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfe:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <ADC_Enable+0xac>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1f      	ldr	r2, [pc, #124]	; (8001c80 <ADC_Enable+0xb0>)
 8001c04:	fba2 2303 	umull	r2, r3, r2, r3
 8001c08:	0c9b      	lsrs	r3, r3, #18
 8001c0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c0c:	e002      	b.n	8001c14 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f9      	bne.n	8001c0e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c1a:	f7ff fc3f 	bl	800149c <HAL_GetTick>
 8001c1e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c20:	e01f      	b.n	8001c62 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c22:	f7ff fc3b 	bl	800149c <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d918      	bls.n	8001c62 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d011      	beq.n	8001c62 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	f043 0210 	orr.w	r2, r3, #16
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4e:	f043 0201 	orr.w	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e007      	b.n	8001c72 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d1d8      	bne.n	8001c22 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000004 	.word	0x20000004
 8001c80:	431bde83 	.word	0x431bde83

08001c84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d12e      	bne.n	8001cfc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cae:	f7ff fbf5 	bl	800149c <HAL_GetTick>
 8001cb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cb4:	e01b      	b.n	8001cee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cb6:	f7ff fbf1 	bl	800149c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d914      	bls.n	8001cee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10d      	bne.n	8001cee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	f043 0210 	orr.w	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e007      	b.n	8001cfe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d0dc      	beq.n	8001cb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <__NVIC_SetPriorityGrouping>:
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_EnableIRQ>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	db0b      	blt.n	8001d96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	f003 021f 	and.w	r2, r3, #31
 8001d84:	4906      	ldr	r1, [pc, #24]	; (8001da0 <__NVIC_EnableIRQ+0x34>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <SysTick_Config>:
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f7ff ff90 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff2d 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff42 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff90 	bl	8001df8 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5f 	bl	8001da4 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff35 	bl	8001d6c <__NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ffa2 	bl	8001e5c <SysTick_Config>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b085      	sub	sp, #20
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d008      	beq.n	8001f4c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e020      	b.n	8001f8e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 020e 	bic.w	r2, r2, #14
 8001f5a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0201 	bic.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d005      	beq.n	8001fbc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e051      	b.n	8002060 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 020e 	bic.w	r2, r2, #14
 8001fca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0201 	bic.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a22      	ldr	r2, [pc, #136]	; (800206c <HAL_DMA_Abort_IT+0xd4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d029      	beq.n	800203a <HAL_DMA_Abort_IT+0xa2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a21      	ldr	r2, [pc, #132]	; (8002070 <HAL_DMA_Abort_IT+0xd8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d022      	beq.n	8002036 <HAL_DMA_Abort_IT+0x9e>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_DMA_Abort_IT+0xdc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01a      	beq.n	8002030 <HAL_DMA_Abort_IT+0x98>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1e      	ldr	r2, [pc, #120]	; (8002078 <HAL_DMA_Abort_IT+0xe0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d012      	beq.n	800202a <HAL_DMA_Abort_IT+0x92>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_DMA_Abort_IT+0xe4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00a      	beq.n	8002024 <HAL_DMA_Abort_IT+0x8c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <HAL_DMA_Abort_IT+0xe8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d102      	bne.n	800201e <HAL_DMA_Abort_IT+0x86>
 8002018:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800201c:	e00e      	b.n	800203c <HAL_DMA_Abort_IT+0xa4>
 800201e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002022:	e00b      	b.n	800203c <HAL_DMA_Abort_IT+0xa4>
 8002024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002028:	e008      	b.n	800203c <HAL_DMA_Abort_IT+0xa4>
 800202a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202e:	e005      	b.n	800203c <HAL_DMA_Abort_IT+0xa4>
 8002030:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002034:	e002      	b.n	800203c <HAL_DMA_Abort_IT+0xa4>
 8002036:	2310      	movs	r3, #16
 8002038:	e000      	b.n	800203c <HAL_DMA_Abort_IT+0xa4>
 800203a:	2301      	movs	r3, #1
 800203c:	4a11      	ldr	r2, [pc, #68]	; (8002084 <HAL_DMA_Abort_IT+0xec>)
 800203e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
    } 
  }
  return status;
 8002060:	7bfb      	ldrb	r3, [r7, #15]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40020008 	.word	0x40020008
 8002070:	4002001c 	.word	0x4002001c
 8002074:	40020030 	.word	0x40020030
 8002078:	40020044 	.word	0x40020044
 800207c:	40020058 	.word	0x40020058
 8002080:	4002006c 	.word	0x4002006c
 8002084:	40020000 	.word	0x40020000

08002088 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002088:	b480      	push	{r7}
 800208a:	b08b      	sub	sp, #44	; 0x2c
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209a:	e169      	b.n	8002370 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800209c:	2201      	movs	r2, #1
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	f040 8158 	bne.w	800236a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4a9a      	ldr	r2, [pc, #616]	; (8002328 <HAL_GPIO_Init+0x2a0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d05e      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
 80020c4:	4a98      	ldr	r2, [pc, #608]	; (8002328 <HAL_GPIO_Init+0x2a0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d875      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 80020ca:	4a98      	ldr	r2, [pc, #608]	; (800232c <HAL_GPIO_Init+0x2a4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d058      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
 80020d0:	4a96      	ldr	r2, [pc, #600]	; (800232c <HAL_GPIO_Init+0x2a4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d86f      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 80020d6:	4a96      	ldr	r2, [pc, #600]	; (8002330 <HAL_GPIO_Init+0x2a8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d052      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
 80020dc:	4a94      	ldr	r2, [pc, #592]	; (8002330 <HAL_GPIO_Init+0x2a8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d869      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 80020e2:	4a94      	ldr	r2, [pc, #592]	; (8002334 <HAL_GPIO_Init+0x2ac>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d04c      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
 80020e8:	4a92      	ldr	r2, [pc, #584]	; (8002334 <HAL_GPIO_Init+0x2ac>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d863      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 80020ee:	4a92      	ldr	r2, [pc, #584]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d046      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
 80020f4:	4a90      	ldr	r2, [pc, #576]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d85d      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 80020fa:	2b12      	cmp	r3, #18
 80020fc:	d82a      	bhi.n	8002154 <HAL_GPIO_Init+0xcc>
 80020fe:	2b12      	cmp	r3, #18
 8002100:	d859      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 8002102:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <HAL_GPIO_Init+0x80>)
 8002104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002108:	08002183 	.word	0x08002183
 800210c:	0800215d 	.word	0x0800215d
 8002110:	0800216f 	.word	0x0800216f
 8002114:	080021b1 	.word	0x080021b1
 8002118:	080021b7 	.word	0x080021b7
 800211c:	080021b7 	.word	0x080021b7
 8002120:	080021b7 	.word	0x080021b7
 8002124:	080021b7 	.word	0x080021b7
 8002128:	080021b7 	.word	0x080021b7
 800212c:	080021b7 	.word	0x080021b7
 8002130:	080021b7 	.word	0x080021b7
 8002134:	080021b7 	.word	0x080021b7
 8002138:	080021b7 	.word	0x080021b7
 800213c:	080021b7 	.word	0x080021b7
 8002140:	080021b7 	.word	0x080021b7
 8002144:	080021b7 	.word	0x080021b7
 8002148:	080021b7 	.word	0x080021b7
 800214c:	08002165 	.word	0x08002165
 8002150:	08002179 	.word	0x08002179
 8002154:	4a79      	ldr	r2, [pc, #484]	; (800233c <HAL_GPIO_Init+0x2b4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800215a:	e02c      	b.n	80021b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	623b      	str	r3, [r7, #32]
          break;
 8002162:	e029      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	3304      	adds	r3, #4
 800216a:	623b      	str	r3, [r7, #32]
          break;
 800216c:	e024      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	3308      	adds	r3, #8
 8002174:	623b      	str	r3, [r7, #32]
          break;
 8002176:	e01f      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	330c      	adds	r3, #12
 800217e:	623b      	str	r3, [r7, #32]
          break;
 8002180:	e01a      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d102      	bne.n	8002190 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800218a:	2304      	movs	r3, #4
 800218c:	623b      	str	r3, [r7, #32]
          break;
 800218e:	e013      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002198:	2308      	movs	r3, #8
 800219a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	611a      	str	r2, [r3, #16]
          break;
 80021a2:	e009      	b.n	80021b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a4:	2308      	movs	r3, #8
 80021a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	615a      	str	r2, [r3, #20]
          break;
 80021ae:	e003      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021b0:	2300      	movs	r3, #0
 80021b2:	623b      	str	r3, [r7, #32]
          break;
 80021b4:	e000      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          break;
 80021b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2bff      	cmp	r3, #255	; 0xff
 80021bc:	d801      	bhi.n	80021c2 <HAL_GPIO_Init+0x13a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	e001      	b.n	80021c6 <HAL_GPIO_Init+0x13e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3304      	adds	r3, #4
 80021c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2bff      	cmp	r3, #255	; 0xff
 80021cc:	d802      	bhi.n	80021d4 <HAL_GPIO_Init+0x14c>
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	e002      	b.n	80021da <HAL_GPIO_Init+0x152>
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	3b08      	subs	r3, #8
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	210f      	movs	r1, #15
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	401a      	ands	r2, r3
 80021ec:	6a39      	ldr	r1, [r7, #32]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	431a      	orrs	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80b1 	beq.w	800236a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002208:	4b4d      	ldr	r3, [pc, #308]	; (8002340 <HAL_GPIO_Init+0x2b8>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a4c      	ldr	r2, [pc, #304]	; (8002340 <HAL_GPIO_Init+0x2b8>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <HAL_GPIO_Init+0x2b8>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002220:	4a48      	ldr	r2, [pc, #288]	; (8002344 <HAL_GPIO_Init+0x2bc>)
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	3302      	adds	r3, #2
 8002228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	220f      	movs	r2, #15
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4013      	ands	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a40      	ldr	r2, [pc, #256]	; (8002348 <HAL_GPIO_Init+0x2c0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <HAL_GPIO_Init+0x1ec>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a3f      	ldr	r2, [pc, #252]	; (800234c <HAL_GPIO_Init+0x2c4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00d      	beq.n	8002270 <HAL_GPIO_Init+0x1e8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a3e      	ldr	r2, [pc, #248]	; (8002350 <HAL_GPIO_Init+0x2c8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d007      	beq.n	800226c <HAL_GPIO_Init+0x1e4>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a3d      	ldr	r2, [pc, #244]	; (8002354 <HAL_GPIO_Init+0x2cc>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d101      	bne.n	8002268 <HAL_GPIO_Init+0x1e0>
 8002264:	2303      	movs	r3, #3
 8002266:	e006      	b.n	8002276 <HAL_GPIO_Init+0x1ee>
 8002268:	2304      	movs	r3, #4
 800226a:	e004      	b.n	8002276 <HAL_GPIO_Init+0x1ee>
 800226c:	2302      	movs	r3, #2
 800226e:	e002      	b.n	8002276 <HAL_GPIO_Init+0x1ee>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <HAL_GPIO_Init+0x1ee>
 8002274:	2300      	movs	r3, #0
 8002276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002278:	f002 0203 	and.w	r2, r2, #3
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	4093      	lsls	r3, r2
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002286:	492f      	ldr	r1, [pc, #188]	; (8002344 <HAL_GPIO_Init+0x2bc>)
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022a0:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	492c      	ldr	r1, [pc, #176]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	608b      	str	r3, [r1, #8]
 80022ac:	e006      	b.n	80022bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ae:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4928      	ldr	r1, [pc, #160]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d006      	beq.n	80022d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022c8:	4b23      	ldr	r3, [pc, #140]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	4922      	ldr	r1, [pc, #136]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60cb      	str	r3, [r1, #12]
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	43db      	mvns	r3, r3
 80022de:	491e      	ldr	r1, [pc, #120]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	4918      	ldr	r1, [pc, #96]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	43db      	mvns	r3, r3
 8002306:	4914      	ldr	r1, [pc, #80]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 8002308:	4013      	ands	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d021      	beq.n	800235c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	490e      	ldr	r1, [pc, #56]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]
 8002324:	e021      	b.n	800236a <HAL_GPIO_Init+0x2e2>
 8002326:	bf00      	nop
 8002328:	10320000 	.word	0x10320000
 800232c:	10310000 	.word	0x10310000
 8002330:	10220000 	.word	0x10220000
 8002334:	10210000 	.word	0x10210000
 8002338:	10120000 	.word	0x10120000
 800233c:	10110000 	.word	0x10110000
 8002340:	40021000 	.word	0x40021000
 8002344:	40010000 	.word	0x40010000
 8002348:	40010800 	.word	0x40010800
 800234c:	40010c00 	.word	0x40010c00
 8002350:	40011000 	.word	0x40011000
 8002354:	40011400 	.word	0x40011400
 8002358:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_GPIO_Init+0x304>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	43db      	mvns	r3, r3
 8002364:	4909      	ldr	r1, [pc, #36]	; (800238c <HAL_GPIO_Init+0x304>)
 8002366:	4013      	ands	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	3301      	adds	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	fa22 f303 	lsr.w	r3, r2, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	f47f ae8e 	bne.w	800209c <HAL_GPIO_Init+0x14>
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	372c      	adds	r7, #44	; 0x2c
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	40010400 	.word	0x40010400

08002390 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023a2:	887a      	ldrh	r2, [r7, #2]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4013      	ands	r3, r2
 80023a8:	041a      	lsls	r2, r3, #16
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	43d9      	mvns	r1, r3
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	400b      	ands	r3, r1
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	611a      	str	r2, [r3, #16]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e272      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8087 	beq.w	80024f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e4:	4b92      	ldr	r3, [pc, #584]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d00c      	beq.n	800240a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023f0:	4b8f      	ldr	r3, [pc, #572]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d112      	bne.n	8002422 <HAL_RCC_OscConfig+0x5e>
 80023fc:	4b8c      	ldr	r3, [pc, #560]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d10b      	bne.n	8002422 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240a:	4b89      	ldr	r3, [pc, #548]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d06c      	beq.n	80024f0 <HAL_RCC_OscConfig+0x12c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d168      	bne.n	80024f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e24c      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x76>
 800242c:	4b80      	ldr	r3, [pc, #512]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a7f      	ldr	r2, [pc, #508]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e02e      	b.n	8002498 <HAL_RCC_OscConfig+0xd4>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x98>
 8002442:	4b7b      	ldr	r3, [pc, #492]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7a      	ldr	r2, [pc, #488]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b78      	ldr	r3, [pc, #480]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a77      	ldr	r2, [pc, #476]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e01d      	b.n	8002498 <HAL_RCC_OscConfig+0xd4>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0xbc>
 8002466:	4b72      	ldr	r3, [pc, #456]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a71      	ldr	r2, [pc, #452]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800246c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b6f      	ldr	r3, [pc, #444]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a6e      	ldr	r2, [pc, #440]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0xd4>
 8002480:	4b6b      	ldr	r3, [pc, #428]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a6a      	ldr	r2, [pc, #424]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b68      	ldr	r3, [pc, #416]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a67      	ldr	r2, [pc, #412]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002496:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fffc 	bl	800149c <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7fe fff8 	bl	800149c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e200      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b5d      	ldr	r3, [pc, #372]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0xe4>
 80024c6:	e014      	b.n	80024f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7fe ffe8 	bl	800149c <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7fe ffe4 	bl	800149c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1ec      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x10c>
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d063      	beq.n	80025c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024fe:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00b      	beq.n	8002522 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800250a:	4b49      	ldr	r3, [pc, #292]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b08      	cmp	r3, #8
 8002514:	d11c      	bne.n	8002550 <HAL_RCC_OscConfig+0x18c>
 8002516:	4b46      	ldr	r3, [pc, #280]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d116      	bne.n	8002550 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	4b43      	ldr	r3, [pc, #268]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_RCC_OscConfig+0x176>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e1c0      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4939      	ldr	r1, [pc, #228]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	e03a      	b.n	80025c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002558:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7fe ff9d 	bl	800149c <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002566:	f7fe ff99 	bl	800149c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e1a1      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4927      	ldr	r1, [pc, #156]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
 8002598:	e015      	b.n	80025c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7fe ff7c 	bl	800149c <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a8:	f7fe ff78 	bl	800149c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e180      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d03a      	beq.n	8002648 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d019      	beq.n	800260e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025da:	4b17      	ldr	r3, [pc, #92]	; (8002638 <HAL_RCC_OscConfig+0x274>)
 80025dc:	2201      	movs	r2, #1
 80025de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7fe ff5c 	bl	800149c <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e8:	f7fe ff58 	bl	800149c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e160      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002606:	2001      	movs	r0, #1
 8002608:	f000 face 	bl	8002ba8 <RCC_Delay>
 800260c:	e01c      	b.n	8002648 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_RCC_OscConfig+0x274>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002614:	f7fe ff42 	bl	800149c <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261a:	e00f      	b.n	800263c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261c:	f7fe ff3e 	bl	800149c <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d908      	bls.n	800263c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e146      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	42420000 	.word	0x42420000
 8002638:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	4b92      	ldr	r3, [pc, #584]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1e9      	bne.n	800261c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80a6 	beq.w	80027a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265a:	4b8b      	ldr	r3, [pc, #556]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10d      	bne.n	8002682 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	4b88      	ldr	r3, [pc, #544]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	4a87      	ldr	r2, [pc, #540]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	61d3      	str	r3, [r2, #28]
 8002672:	4b85      	ldr	r3, [pc, #532]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267e:	2301      	movs	r3, #1
 8002680:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	4b82      	ldr	r3, [pc, #520]	; (800288c <HAL_RCC_OscConfig+0x4c8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d118      	bne.n	80026c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268e:	4b7f      	ldr	r3, [pc, #508]	; (800288c <HAL_RCC_OscConfig+0x4c8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a7e      	ldr	r2, [pc, #504]	; (800288c <HAL_RCC_OscConfig+0x4c8>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269a:	f7fe feff 	bl	800149c <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a2:	f7fe fefb 	bl	800149c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b64      	cmp	r3, #100	; 0x64
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e103      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	4b75      	ldr	r3, [pc, #468]	; (800288c <HAL_RCC_OscConfig+0x4c8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x312>
 80026c8:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a6e      	ldr	r2, [pc, #440]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	e02d      	b.n	8002732 <HAL_RCC_OscConfig+0x36e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x334>
 80026de:	4b6a      	ldr	r3, [pc, #424]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4a69      	ldr	r2, [pc, #420]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	f023 0301 	bic.w	r3, r3, #1
 80026e8:	6213      	str	r3, [r2, #32]
 80026ea:	4b67      	ldr	r3, [pc, #412]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4a66      	ldr	r2, [pc, #408]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	f023 0304 	bic.w	r3, r3, #4
 80026f4:	6213      	str	r3, [r2, #32]
 80026f6:	e01c      	b.n	8002732 <HAL_RCC_OscConfig+0x36e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b05      	cmp	r3, #5
 80026fe:	d10c      	bne.n	800271a <HAL_RCC_OscConfig+0x356>
 8002700:	4b61      	ldr	r3, [pc, #388]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4a60      	ldr	r2, [pc, #384]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6213      	str	r3, [r2, #32]
 800270c:	4b5e      	ldr	r3, [pc, #376]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a5d      	ldr	r2, [pc, #372]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6213      	str	r3, [r2, #32]
 8002718:	e00b      	b.n	8002732 <HAL_RCC_OscConfig+0x36e>
 800271a:	4b5b      	ldr	r3, [pc, #364]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a5a      	ldr	r2, [pc, #360]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	4b58      	ldr	r3, [pc, #352]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a57      	ldr	r2, [pc, #348]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d015      	beq.n	8002766 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273a:	f7fe feaf 	bl	800149c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7fe feab 	bl	800149c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e0b1      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002758:	4b4b      	ldr	r3, [pc, #300]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ee      	beq.n	8002742 <HAL_RCC_OscConfig+0x37e>
 8002764:	e014      	b.n	8002790 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002766:	f7fe fe99 	bl	800149c <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe fe95 	bl	800149c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e09b      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002784:	4b40      	ldr	r3, [pc, #256]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ee      	bne.n	800276e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d105      	bne.n	80027a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002796:	4b3c      	ldr	r3, [pc, #240]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	4a3b      	ldr	r2, [pc, #236]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8087 	beq.w	80028ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ac:	4b36      	ldr	r3, [pc, #216]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d061      	beq.n	800287c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d146      	bne.n	800284e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c0:	4b33      	ldr	r3, [pc, #204]	; (8002890 <HAL_RCC_OscConfig+0x4cc>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7fe fe69 	bl	800149c <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ce:	f7fe fe65 	bl	800149c <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e06d      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e0:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d108      	bne.n	8002808 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027f6:	4b24      	ldr	r3, [pc, #144]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	4921      	ldr	r1, [pc, #132]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002808:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a19      	ldr	r1, [r3, #32]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	430b      	orrs	r3, r1
 800281a:	491b      	ldr	r1, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_RCC_OscConfig+0x4cc>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe fe39 	bl	800149c <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe fe35 	bl	800149c <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e03d      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x46a>
 800284c:	e035      	b.n	80028ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_RCC_OscConfig+0x4cc>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe fe22 	bl	800149c <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285c:	f7fe fe1e 	bl	800149c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e026      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x498>
 800287a:	e01e      	b.n	80028ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e019      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
 8002888:	40021000 	.word	0x40021000
 800288c:	40007000 	.word	0x40007000
 8002890:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_OscConfig+0x500>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d106      	bne.n	80028b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000

080028c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0d0      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028dc:	4b6a      	ldr	r3, [pc, #424]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d910      	bls.n	800290c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b67      	ldr	r3, [pc, #412]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 0207 	bic.w	r2, r3, #7
 80028f2:	4965      	ldr	r1, [pc, #404]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b63      	ldr	r3, [pc, #396]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0b8      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002924:	4b59      	ldr	r3, [pc, #356]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a58      	ldr	r2, [pc, #352]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800292e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800293c:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a52      	ldr	r2, [pc, #328]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002946:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002948:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	494d      	ldr	r1, [pc, #308]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d040      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d115      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e07f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002986:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e073      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002996:	4b3d      	ldr	r3, [pc, #244]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e06b      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a6:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f023 0203 	bic.w	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4936      	ldr	r1, [pc, #216]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b8:	f7fe fd70 	bl	800149c <HAL_GetTick>
 80029bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c0:	f7fe fd6c 	bl	800149c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e053      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 020c 	and.w	r2, r3, #12
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1eb      	bne.n	80029c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e8:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d210      	bcs.n	8002a18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 0207 	bic.w	r2, r3, #7
 80029fe:	4922      	ldr	r1, [pc, #136]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e032      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4916      	ldr	r1, [pc, #88]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	490e      	ldr	r1, [pc, #56]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a56:	f000 f821 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	490a      	ldr	r1, [pc, #40]	; (8002a90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	5ccb      	ldrb	r3, [r1, r3]
 8002a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1cc>)
 8002a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1d0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fcce 	bl	8001418 <HAL_InitTick>

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40022000 	.word	0x40022000
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	08007330 	.word	0x08007330
 8002a94:	20000004 	.word	0x20000004
 8002a98:	20000008 	.word	0x20000008

08002a9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d002      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x30>
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d003      	beq.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aca:	e027      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ace:	613b      	str	r3, [r7, #16]
      break;
 8002ad0:	e027      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	0c9b      	lsrs	r3, r3, #18
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002adc:	5cd3      	ldrb	r3, [r2, r3]
 8002ade:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d010      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	0c5b      	lsrs	r3, r3, #17
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002af6:	5cd3      	ldrb	r3, [r2, r3]
 8002af8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a0d      	ldr	r2, [pc, #52]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002afe:	fb03 f202 	mul.w	r2, r3, r2
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	e004      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a0c      	ldr	r2, [pc, #48]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	613b      	str	r3, [r7, #16]
      break;
 8002b1a:	e002      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b1e:	613b      	str	r3, [r7, #16]
      break;
 8002b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b22:	693b      	ldr	r3, [r7, #16]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	007a1200 	.word	0x007a1200
 8002b38:	08007348 	.word	0x08007348
 8002b3c:	08007358 	.word	0x08007358
 8002b40:	003d0900 	.word	0x003d0900

08002b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b48:	4b02      	ldr	r3, [pc, #8]	; (8002b54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	20000004 	.word	0x20000004

08002b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b5c:	f7ff fff2 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	0a1b      	lsrs	r3, r3, #8
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	4903      	ldr	r1, [pc, #12]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	08007340 	.word	0x08007340

08002b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b84:	f7ff ffde 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	0adb      	lsrs	r3, r3, #11
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	4903      	ldr	r1, [pc, #12]	; (8002ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b96:	5ccb      	ldrb	r3, [r1, r3]
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	08007340 	.word	0x08007340

08002ba8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <RCC_Delay+0x34>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <RCC_Delay+0x38>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	0a5b      	lsrs	r3, r3, #9
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bc4:	bf00      	nop
  }
  while (Delay --);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1e5a      	subs	r2, r3, #1
 8002bca:	60fa      	str	r2, [r7, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f9      	bne.n	8002bc4 <RCC_Delay+0x1c>
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	20000004 	.word	0x20000004
 8002be0:	10624dd3 	.word	0x10624dd3

08002be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d07d      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c00:	2300      	movs	r3, #0
 8002c02:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c04:	4b4f      	ldr	r3, [pc, #316]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10d      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c10:	4b4c      	ldr	r3, [pc, #304]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	4a4b      	ldr	r2, [pc, #300]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	61d3      	str	r3, [r2, #28]
 8002c1c:	4b49      	ldr	r3, [pc, #292]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2c:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d118      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c38:	4b43      	ldr	r3, [pc, #268]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a42      	ldr	r2, [pc, #264]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c44:	f7fe fc2a 	bl	800149c <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4a:	e008      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4c:	f7fe fc26 	bl	800149c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e06d      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5e:	4b3a      	ldr	r3, [pc, #232]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c6a:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d02e      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d027      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c88:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c92:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c98:	4b2c      	ldr	r3, [pc, #176]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c9e:	4a29      	ldr	r2, [pc, #164]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d014      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cae:	f7fe fbf5 	bl	800149c <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7fe fbf1 	bl	800149c <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e036      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ee      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4917      	ldr	r1, [pc, #92]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d105      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf0:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	4a13      	ldr	r2, [pc, #76]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d08:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	490b      	ldr	r1, [pc, #44]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	4904      	ldr	r1, [pc, #16]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	42420440 	.word	0x42420440

08002d50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	2300      	movs	r3, #0
 8002d62:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b10      	cmp	r3, #16
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	f200 808a 	bhi.w	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d045      	beq.n	8002e0c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d075      	beq.n	8002e72 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002d86:	e082      	b.n	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002d88:	4b46      	ldr	r3, [pc, #280]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d8e:	4b45      	ldr	r3, [pc, #276]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d07b      	beq.n	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	0c9b      	lsrs	r3, r3, #18
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	4a41      	ldr	r2, [pc, #260]	; (8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002da4:	5cd3      	ldrb	r3, [r2, r3]
 8002da6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d015      	beq.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002db2:	4b3c      	ldr	r3, [pc, #240]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	0c5b      	lsrs	r3, r3, #17
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	4a3b      	ldr	r2, [pc, #236]	; (8002eac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002dbe:	5cd3      	ldrb	r3, [r2, r3]
 8002dc0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002dcc:	4a38      	ldr	r2, [pc, #224]	; (8002eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	e004      	b.n	8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4a34      	ldr	r2, [pc, #208]	; (8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002de8:	4b2e      	ldr	r3, [pc, #184]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df4:	d102      	bne.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	61bb      	str	r3, [r7, #24]
      break;
 8002dfa:	e04a      	b.n	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4a2d      	ldr	r2, [pc, #180]	; (8002eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	085b      	lsrs	r3, r3, #1
 8002e08:	61bb      	str	r3, [r7, #24]
      break;
 8002e0a:	e042      	b.n	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002e0c:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1c:	d108      	bne.n	8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	e01f      	b.n	8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e3a:	d109      	bne.n	8002e50 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002e3c:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002e48:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	e00f      	b.n	8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e5a:	d11c      	bne.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e5c:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d016      	beq.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002e68:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002e6c:	61bb      	str	r3, [r7, #24]
      break;
 8002e6e:	e012      	b.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e70:	e011      	b.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002e72:	f7ff fe85 	bl	8002b80 <HAL_RCC_GetPCLK2Freq>
 8002e76:	4602      	mov	r2, r0
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	0b9b      	lsrs	r3, r3, #14
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	3301      	adds	r3, #1
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8a:	61bb      	str	r3, [r7, #24]
      break;
 8002e8c:	e004      	b.n	8002e98 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e8e:	bf00      	nop
 8002e90:	e002      	b.n	8002e98 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e92:	bf00      	nop
 8002e94:	e000      	b.n	8002e98 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e96:	bf00      	nop
    }
  }
  return (frequency);
 8002e98:	69bb      	ldr	r3, [r7, #24]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	0800735c 	.word	0x0800735c
 8002eac:	0800736c 	.word	0x0800736c
 8002eb0:	007a1200 	.word	0x007a1200
 8002eb4:	003d0900 	.word	0x003d0900
 8002eb8:	aaaaaaab 	.word	0xaaaaaaab

08002ebc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e041      	b.n	8002f52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe f8b6 	bl	8001054 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f000 f992 	bl	8003224 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d109      	bne.n	8002f80 <HAL_TIM_PWM_Start+0x24>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e022      	b.n	8002fc6 <HAL_TIM_PWM_Start+0x6a>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d109      	bne.n	8002f9a <HAL_TIM_PWM_Start+0x3e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	bf14      	ite	ne
 8002f92:	2301      	movne	r3, #1
 8002f94:	2300      	moveq	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	e015      	b.n	8002fc6 <HAL_TIM_PWM_Start+0x6a>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d109      	bne.n	8002fb4 <HAL_TIM_PWM_Start+0x58>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	e008      	b.n	8002fc6 <HAL_TIM_PWM_Start+0x6a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	bf14      	ite	ne
 8002fc0:	2301      	movne	r3, #1
 8002fc2:	2300      	moveq	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e05e      	b.n	800308c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d104      	bne.n	8002fde <HAL_TIM_PWM_Start+0x82>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fdc:	e013      	b.n	8003006 <HAL_TIM_PWM_Start+0xaa>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d104      	bne.n	8002fee <HAL_TIM_PWM_Start+0x92>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fec:	e00b      	b.n	8003006 <HAL_TIM_PWM_Start+0xaa>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIM_PWM_Start+0xa2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ffc:	e003      	b.n	8003006 <HAL_TIM_PWM_Start+0xaa>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2202      	movs	r2, #2
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2201      	movs	r2, #1
 800300c:	6839      	ldr	r1, [r7, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 faf2 	bl	80035f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <HAL_TIM_PWM_Start+0x138>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d107      	bne.n	800302e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800302c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a18      	ldr	r2, [pc, #96]	; (8003094 <HAL_TIM_PWM_Start+0x138>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00e      	beq.n	8003056 <HAL_TIM_PWM_Start+0xfa>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003040:	d009      	beq.n	8003056 <HAL_TIM_PWM_Start+0xfa>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a14      	ldr	r2, [pc, #80]	; (8003098 <HAL_TIM_PWM_Start+0x13c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d004      	beq.n	8003056 <HAL_TIM_PWM_Start+0xfa>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a12      	ldr	r2, [pc, #72]	; (800309c <HAL_TIM_PWM_Start+0x140>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d111      	bne.n	800307a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b06      	cmp	r3, #6
 8003066:	d010      	beq.n	800308a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003078:	e007      	b.n	800308a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40000400 	.word	0x40000400
 800309c:	40000800 	.word	0x40000800

080030a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030ba:	2302      	movs	r3, #2
 80030bc:	e0ae      	b.n	800321c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	f200 809f 	bhi.w	800320c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030ce:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d4:	08003109 	.word	0x08003109
 80030d8:	0800320d 	.word	0x0800320d
 80030dc:	0800320d 	.word	0x0800320d
 80030e0:	0800320d 	.word	0x0800320d
 80030e4:	08003149 	.word	0x08003149
 80030e8:	0800320d 	.word	0x0800320d
 80030ec:	0800320d 	.word	0x0800320d
 80030f0:	0800320d 	.word	0x0800320d
 80030f4:	0800318b 	.word	0x0800318b
 80030f8:	0800320d 	.word	0x0800320d
 80030fc:	0800320d 	.word	0x0800320d
 8003100:	0800320d 	.word	0x0800320d
 8003104:	080031cb 	.word	0x080031cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	4618      	mov	r0, r3
 8003110:	f000 f8ea 	bl	80032e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0208 	orr.w	r2, r2, #8
 8003122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0204 	bic.w	r2, r2, #4
 8003132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6999      	ldr	r1, [r3, #24]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	619a      	str	r2, [r3, #24]
      break;
 8003146:	e064      	b.n	8003212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	4618      	mov	r0, r3
 8003150:	f000 f930 	bl	80033b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6999      	ldr	r1, [r3, #24]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	021a      	lsls	r2, r3, #8
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	619a      	str	r2, [r3, #24]
      break;
 8003188:	e043      	b.n	8003212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f979 	bl	8003488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0208 	orr.w	r2, r2, #8
 80031a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69da      	ldr	r2, [r3, #28]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0204 	bic.w	r2, r2, #4
 80031b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69d9      	ldr	r1, [r3, #28]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	61da      	str	r2, [r3, #28]
      break;
 80031c8:	e023      	b.n	8003212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 f9c3 	bl	800355c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69da      	ldr	r2, [r3, #28]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69da      	ldr	r2, [r3, #28]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69d9      	ldr	r1, [r3, #28]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	021a      	lsls	r2, r3, #8
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	61da      	str	r2, [r3, #28]
      break;
 800320a:	e002      	b.n	8003212 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	75fb      	strb	r3, [r7, #23]
      break;
 8003210:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800321a:	7dfb      	ldrb	r3, [r7, #23]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a29      	ldr	r2, [pc, #164]	; (80032dc <TIM_Base_SetConfig+0xb8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d00b      	beq.n	8003254 <TIM_Base_SetConfig+0x30>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003242:	d007      	beq.n	8003254 <TIM_Base_SetConfig+0x30>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a26      	ldr	r2, [pc, #152]	; (80032e0 <TIM_Base_SetConfig+0xbc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d003      	beq.n	8003254 <TIM_Base_SetConfig+0x30>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a25      	ldr	r2, [pc, #148]	; (80032e4 <TIM_Base_SetConfig+0xc0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d108      	bne.n	8003266 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <TIM_Base_SetConfig+0xb8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00b      	beq.n	8003286 <TIM_Base_SetConfig+0x62>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003274:	d007      	beq.n	8003286 <TIM_Base_SetConfig+0x62>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <TIM_Base_SetConfig+0xbc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d003      	beq.n	8003286 <TIM_Base_SetConfig+0x62>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <TIM_Base_SetConfig+0xc0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d108      	bne.n	8003298 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a07      	ldr	r2, [pc, #28]	; (80032dc <TIM_Base_SetConfig+0xb8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d103      	bne.n	80032cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	615a      	str	r2, [r3, #20]
}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	40012c00 	.word	0x40012c00
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000800 	.word	0x40000800

080032e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f023 0201 	bic.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0303 	bic.w	r3, r3, #3
 800331e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f023 0302 	bic.w	r3, r3, #2
 8003330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <TIM_OC1_SetConfig+0xc8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d10c      	bne.n	800335e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f023 0308 	bic.w	r3, r3, #8
 800334a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f023 0304 	bic.w	r3, r3, #4
 800335c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a13      	ldr	r2, [pc, #76]	; (80033b0 <TIM_OC1_SetConfig+0xc8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d111      	bne.n	800338a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800336c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	621a      	str	r2, [r3, #32]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40012c00 	.word	0x40012c00

080033b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f023 0210 	bic.w	r2, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0320 	bic.w	r3, r3, #32
 80033fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <TIM_OC2_SetConfig+0xd0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d10d      	bne.n	8003430 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800341a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800342e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a14      	ldr	r2, [pc, #80]	; (8003484 <TIM_OC2_SetConfig+0xd0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d113      	bne.n	8003460 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800343e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr
 8003484:	40012c00 	.word	0x40012c00

08003488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0303 	bic.w	r3, r3, #3
 80034be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <TIM_OC3_SetConfig+0xd0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10d      	bne.n	8003502 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a14      	ldr	r2, [pc, #80]	; (8003558 <TIM_OC3_SetConfig+0xd0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d113      	bne.n	8003532 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	621a      	str	r2, [r3, #32]
}
 800354c:	bf00      	nop
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40012c00 	.word	0x40012c00

0800355c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800358a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	031b      	lsls	r3, r3, #12
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a0f      	ldr	r2, [pc, #60]	; (80035f4 <TIM_OC4_SetConfig+0x98>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d109      	bne.n	80035d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	019b      	lsls	r3, r3, #6
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	621a      	str	r2, [r3, #32]
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr
 80035f4:	40012c00 	.word	0x40012c00

080035f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2201      	movs	r2, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a1a      	ldr	r2, [r3, #32]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	43db      	mvns	r3, r3
 800361a:	401a      	ands	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a1a      	ldr	r2, [r3, #32]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	fa01 f303 	lsl.w	r3, r1, r3
 8003630:	431a      	orrs	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <HAL_TIMEx_PWMN_Start+0x24>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	bf14      	ite	ne
 800365c:	2301      	movne	r3, #1
 800365e:	2300      	moveq	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e022      	b.n	80036aa <HAL_TIMEx_PWMN_Start+0x6a>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b04      	cmp	r3, #4
 8003668:	d109      	bne.n	800367e <HAL_TIMEx_PWMN_Start+0x3e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	bf14      	ite	ne
 8003676:	2301      	movne	r3, #1
 8003678:	2300      	moveq	r3, #0
 800367a:	b2db      	uxtb	r3, r3
 800367c:	e015      	b.n	80036aa <HAL_TIMEx_PWMN_Start+0x6a>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b08      	cmp	r3, #8
 8003682:	d109      	bne.n	8003698 <HAL_TIMEx_PWMN_Start+0x58>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e008      	b.n	80036aa <HAL_TIMEx_PWMN_Start+0x6a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e059      	b.n	8003766 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d104      	bne.n	80036c2 <HAL_TIMEx_PWMN_Start+0x82>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c0:	e013      	b.n	80036ea <HAL_TIMEx_PWMN_Start+0xaa>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d104      	bne.n	80036d2 <HAL_TIMEx_PWMN_Start+0x92>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036d0:	e00b      	b.n	80036ea <HAL_TIMEx_PWMN_Start+0xaa>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d104      	bne.n	80036e2 <HAL_TIMEx_PWMN_Start+0xa2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e0:	e003      	b.n	80036ea <HAL_TIMEx_PWMN_Start+0xaa>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2204      	movs	r2, #4
 80036f0:	6839      	ldr	r1, [r7, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f8f1 	bl	80038da <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003706:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a18      	ldr	r2, [pc, #96]	; (8003770 <HAL_TIMEx_PWMN_Start+0x130>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00e      	beq.n	8003730 <HAL_TIMEx_PWMN_Start+0xf0>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371a:	d009      	beq.n	8003730 <HAL_TIMEx_PWMN_Start+0xf0>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIMEx_PWMN_Start+0x134>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_TIMEx_PWMN_Start+0xf0>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a13      	ldr	r2, [pc, #76]	; (8003778 <HAL_TIMEx_PWMN_Start+0x138>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d111      	bne.n	8003754 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b06      	cmp	r3, #6
 8003740:	d010      	beq.n	8003764 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003752:	e007      	b.n	8003764 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800

0800377c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003790:	2302      	movs	r3, #2
 8003792:	e046      	b.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a16      	ldr	r2, [pc, #88]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00e      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e0:	d009      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a12      	ldr	r2, [pc, #72]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d004      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a10      	ldr	r2, [pc, #64]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10c      	bne.n	8003810 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	4313      	orrs	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	40012c00 	.word	0x40012c00
 8003830:	40000400 	.word	0x40000400
 8003834:	40000800 	.word	0x40000800

08003838 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003850:	2302      	movs	r3, #2
 8003852:	e03d      	b.n	80038d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr

080038da <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80038da:	b480      	push	{r7}
 80038dc:	b087      	sub	sp, #28
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	2204      	movs	r2, #4
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	401a      	ands	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1a      	ldr	r2, [r3, #32]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	431a      	orrs	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	621a      	str	r2, [r3, #32]
}
 8003918:	bf00      	nop
 800391a:	371c      	adds	r7, #28
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr

08003922 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e042      	b.n	80039ba <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d106      	bne.n	800394e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7fd fbe9 	bl	8001120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2224      	movs	r2, #36	; 0x24
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003964:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fd80 	bl	800446c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800397a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800398a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800399a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b08a      	sub	sp, #40	; 0x28
 80039c6:	af02      	add	r7, sp, #8
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d17c      	bne.n	8003adc <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_UART_Receive+0x2c>
 80039e8:	88fb      	ldrh	r3, [r7, #6]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e075      	b.n	8003ade <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2222      	movs	r2, #34	; 0x22
 80039fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a06:	f7fd fd49 	bl	800149c <HAL_GetTick>
 8003a0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	88fa      	ldrh	r2, [r7, #6]
 8003a10:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	88fa      	ldrh	r2, [r7, #6]
 8003a16:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a20:	d108      	bne.n	8003a34 <HAL_UART_Receive+0x72>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	e003      	b.n	8003a3c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a3c:	e043      	b.n	8003ac6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2200      	movs	r2, #0
 8003a46:	2120      	movs	r1, #32
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fb05 	bl	8004058 <UART_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e042      	b.n	8003ade <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10c      	bne.n	8003a78 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	3302      	adds	r3, #2
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e01f      	b.n	8003ab8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a80:	d007      	beq.n	8003a92 <HAL_UART_Receive+0xd0>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10a      	bne.n	8003aa0 <HAL_UART_Receive+0xde>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	e008      	b.n	8003ab2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1b6      	bne.n	8003a3e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e000      	b.n	8003ade <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b0ba      	sub	sp, #232	; 0xe8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <HAL_UART_IRQHandler+0x66>
 8003b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fbd1 	bl	80042ee <UART_Receive_IT>
      return;
 8003b4c:	e25b      	b.n	8004006 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 80de 	beq.w	8003d14 <HAL_UART_IRQHandler+0x22c>
 8003b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80d1 	beq.w	8003d14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_UART_IRQHandler+0xae>
 8003b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f043 0201 	orr.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_UART_IRQHandler+0xd2>
 8003ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	f043 0202 	orr.w	r2, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_UART_IRQHandler+0xf6>
 8003bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	f043 0204 	orr.w	r2, r3, #4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d011      	beq.n	8003c0e <HAL_UART_IRQHandler+0x126>
 8003bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d105      	bne.n	8003c02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	f043 0208 	orr.w	r2, r3, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 81f2 	beq.w	8003ffc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_UART_IRQHandler+0x14e>
 8003c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fb5c 	bl	80042ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d103      	bne.n	8003c62 <HAL_UART_IRQHandler+0x17a>
 8003c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d04f      	beq.n	8003d02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fa66 	bl	8004134 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d041      	beq.n	8003cfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3314      	adds	r3, #20
 8003c7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3314      	adds	r3, #20
 8003c9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ca2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1d9      	bne.n	8003c76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d013      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	4a7e      	ldr	r2, [pc, #504]	; (8003ec8 <HAL_UART_IRQHandler+0x3e0>)
 8003cd0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe f95e 	bl	8001f98 <HAL_DMA_Abort_IT>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d016      	beq.n	8003d10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cec:	4610      	mov	r0, r2
 8003cee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	e00e      	b.n	8003d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f99c 	bl	8004030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf8:	e00a      	b.n	8003d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f998 	bl	8004030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	e006      	b.n	8003d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f994 	bl	8004030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003d0e:	e175      	b.n	8003ffc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	bf00      	nop
    return;
 8003d12:	e173      	b.n	8003ffc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	f040 814f 	bne.w	8003fbc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8148 	beq.w	8003fbc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8141 	beq.w	8003fbc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80b6 	beq.w	8003ecc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8145 	beq.w	8004000 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	f080 813e 	bcs.w	8004000 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	f000 8088 	beq.w	8003ea8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003db2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003dc4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003dc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dd4:	e841 2300 	strex	r3, r2, [r1]
 8003dd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1d9      	bne.n	8003d98 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3314      	adds	r3, #20
 8003dea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3314      	adds	r3, #20
 8003e04:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e08:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e0c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e1      	bne.n	8003de4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3314      	adds	r3, #20
 8003e26:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e3      	bne.n	8003e20 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e78:	f023 0310 	bic.w	r3, r3, #16
 8003e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e8c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e3      	bne.n	8003e66 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe f83d 	bl	8001f22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f8bf 	bl	8004042 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ec4:	e09c      	b.n	8004000 <HAL_UART_IRQHandler+0x518>
 8003ec6:	bf00      	nop
 8003ec8:	080041f9 	.word	0x080041f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 808e 	beq.w	8004004 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8089 	beq.w	8004004 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	330c      	adds	r3, #12
 8003ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f16:	647a      	str	r2, [r7, #68]	; 0x44
 8003f18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e3      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3314      	adds	r3, #20
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	623b      	str	r3, [r7, #32]
   return(result);
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3314      	adds	r3, #20
 8003f4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f4e:	633a      	str	r2, [r7, #48]	; 0x30
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e3      	bne.n	8003f2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	e853 3f00 	ldrex	r3, [r3]
 8003f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0310 	bic.w	r3, r3, #16
 8003f86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f94:	61fa      	str	r2, [r7, #28]
 8003f96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	69b9      	ldr	r1, [r7, #24]
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e3      	bne.n	8003f70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f844 	bl	8004042 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fba:	e023      	b.n	8004004 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d009      	beq.n	8003fdc <HAL_UART_IRQHandler+0x4f4>
 8003fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f923 	bl	8004220 <UART_Transmit_IT>
    return;
 8003fda:	e014      	b.n	8004006 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00e      	beq.n	8004006 <HAL_UART_IRQHandler+0x51e>
 8003fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f962 	bl	80042be <UART_EndTransmit_IT>
    return;
 8003ffa:	e004      	b.n	8004006 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ffc:	bf00      	nop
 8003ffe:	e002      	b.n	8004006 <HAL_UART_IRQHandler+0x51e>
      return;
 8004000:	bf00      	nop
 8004002:	e000      	b.n	8004006 <HAL_UART_IRQHandler+0x51e>
      return;
 8004004:	bf00      	nop
  }
}
 8004006:	37e8      	adds	r7, #232	; 0xe8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	460b      	mov	r3, r1
 800404c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b090      	sub	sp, #64	; 0x40
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004068:	e050      	b.n	800410c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004070:	d04c      	beq.n	800410c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <UART_WaitOnFlagUntilTimeout+0x30>
 8004078:	f7fd fa10 	bl	800149c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004084:	429a      	cmp	r2, r3
 8004086:	d241      	bcs.n	800410c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	330c      	adds	r3, #12
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800409e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	330c      	adds	r3, #12
 80040a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040a8:	637a      	str	r2, [r7, #52]	; 0x34
 80040aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e5      	bne.n	8004088 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3314      	adds	r3, #20
 80040c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	613b      	str	r3, [r7, #16]
   return(result);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3314      	adds	r3, #20
 80040da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040dc:	623a      	str	r2, [r7, #32]
 80040de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	69f9      	ldr	r1, [r7, #28]
 80040e2:	6a3a      	ldr	r2, [r7, #32]
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e5      	bne.n	80040bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e00f      	b.n	800412c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4013      	ands	r3, r2
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	429a      	cmp	r2, r3
 800411a:	bf0c      	ite	eq
 800411c:	2301      	moveq	r3, #1
 800411e:	2300      	movne	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	429a      	cmp	r2, r3
 8004128:	d09f      	beq.n	800406a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3740      	adds	r7, #64	; 0x40
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b095      	sub	sp, #84	; 0x54
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	330c      	adds	r3, #12
 8004142:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800415c:	643a      	str	r2, [r7, #64]	; 0x40
 800415e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e5      	bne.n	800413c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3314      	adds	r3, #20
 8004176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	64bb      	str	r3, [r7, #72]	; 0x48
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3314      	adds	r3, #20
 800418e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004190:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e5      	bne.n	8004170 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d119      	bne.n	80041e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f023 0310 	bic.w	r3, r3, #16
 80041c2:	647b      	str	r3, [r7, #68]	; 0x44
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	330c      	adds	r3, #12
 80041ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041cc:	61ba      	str	r2, [r7, #24]
 80041ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	6979      	ldr	r1, [r7, #20]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	e841 2300 	strex	r3, r2, [r1]
 80041d8:	613b      	str	r3, [r7, #16]
   return(result);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1e5      	bne.n	80041ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041ee:	bf00      	nop
 80041f0:	3754      	adds	r7, #84	; 0x54
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7ff ff0c 	bl	8004030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004218:	bf00      	nop
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b21      	cmp	r3, #33	; 0x21
 8004232:	d13e      	bne.n	80042b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423c:	d114      	bne.n	8004268 <UART_Transmit_IT+0x48>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d110      	bne.n	8004268 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800425a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	1c9a      	adds	r2, r3, #2
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	621a      	str	r2, [r3, #32]
 8004266:	e008      	b.n	800427a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	1c59      	adds	r1, r3, #1
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6211      	str	r1, [r2, #32]
 8004272:	781a      	ldrb	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29b      	uxth	r3, r3
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	4619      	mov	r1, r3
 8004288:	84d1      	strh	r1, [r2, #38]	; 0x26
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10f      	bne.n	80042ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800429c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e000      	b.n	80042b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr

080042be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff fe94 	bl	800400c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b08c      	sub	sp, #48	; 0x30
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b22      	cmp	r3, #34	; 0x22
 8004300:	f040 80ae 	bne.w	8004460 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430c:	d117      	bne.n	800433e <UART_Receive_IT+0x50>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d113      	bne.n	800433e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004316:	2300      	movs	r3, #0
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	b29b      	uxth	r3, r3
 8004328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800432c:	b29a      	uxth	r2, r3
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	1c9a      	adds	r2, r3, #2
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	629a      	str	r2, [r3, #40]	; 0x28
 800433c:	e026      	b.n	800438c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004344:	2300      	movs	r3, #0
 8004346:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004350:	d007      	beq.n	8004362 <UART_Receive_IT+0x74>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <UART_Receive_IT+0x82>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	b2da      	uxtb	r2, r3
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	e008      	b.n	8004382 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800437c:	b2da      	uxtb	r2, r3
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29b      	uxth	r3, r3
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4619      	mov	r1, r3
 800439a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800439c:	2b00      	cmp	r3, #0
 800439e:	d15d      	bne.n	800445c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0220 	bic.w	r2, r2, #32
 80043ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0201 	bic.w	r2, r2, #1
 80043ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d135      	bne.n	8004452 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	330c      	adds	r3, #12
 80043f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	613b      	str	r3, [r7, #16]
   return(result);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f023 0310 	bic.w	r3, r3, #16
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800440c:	623a      	str	r2, [r7, #32]
 800440e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	69f9      	ldr	r1, [r7, #28]
 8004412:	6a3a      	ldr	r2, [r7, #32]
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	61bb      	str	r3, [r7, #24]
   return(result);
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e5      	bne.n	80043ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b10      	cmp	r3, #16
 800442c:	d10a      	bne.n	8004444 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004448:	4619      	mov	r1, r3
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff fdf9 	bl	8004042 <HAL_UARTEx_RxEventCallback>
 8004450:	e002      	b.n	8004458 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff fde3 	bl	800401e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	e002      	b.n	8004462 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004460:	2302      	movs	r3, #2
  }
}
 8004462:	4618      	mov	r0, r3
 8004464:	3730      	adds	r7, #48	; 0x30
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044a6:	f023 030c 	bic.w	r3, r3, #12
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	430b      	orrs	r3, r1
 80044b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2c      	ldr	r2, [pc, #176]	; (8004580 <UART_SetConfig+0x114>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d103      	bne.n	80044dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044d4:	f7fe fb54 	bl	8002b80 <HAL_RCC_GetPCLK2Freq>
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	e002      	b.n	80044e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044dc:	f7fe fb3c 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 80044e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	009a      	lsls	r2, r3, #2
 80044ec:	441a      	add	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f8:	4a22      	ldr	r2, [pc, #136]	; (8004584 <UART_SetConfig+0x118>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	0119      	lsls	r1, r3, #4
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009a      	lsls	r2, r3, #2
 800450c:	441a      	add	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	fbb2 f2f3 	udiv	r2, r2, r3
 8004518:	4b1a      	ldr	r3, [pc, #104]	; (8004584 <UART_SetConfig+0x118>)
 800451a:	fba3 0302 	umull	r0, r3, r3, r2
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	2064      	movs	r0, #100	; 0x64
 8004522:	fb00 f303 	mul.w	r3, r0, r3
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	3332      	adds	r3, #50	; 0x32
 800452c:	4a15      	ldr	r2, [pc, #84]	; (8004584 <UART_SetConfig+0x118>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004538:	4419      	add	r1, r3
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	009a      	lsls	r2, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <UART_SetConfig+0x118>)
 8004552:	fba3 0302 	umull	r0, r3, r3, r2
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	2064      	movs	r0, #100	; 0x64
 800455a:	fb00 f303 	mul.w	r3, r0, r3
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	3332      	adds	r3, #50	; 0x32
 8004564:	4a07      	ldr	r2, [pc, #28]	; (8004584 <UART_SetConfig+0x118>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	f003 020f 	and.w	r2, r3, #15
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	440a      	add	r2, r1
 8004576:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40013800 	.word	0x40013800
 8004584:	51eb851f 	.word	0x51eb851f

08004588 <atof>:
 8004588:	2100      	movs	r1, #0
 800458a:	f000 be3d 	b.w	8005208 <strtod>
	...

08004590 <__errno>:
 8004590:	4b01      	ldr	r3, [pc, #4]	; (8004598 <__errno+0x8>)
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000010 	.word	0x20000010

0800459c <__libc_init_array>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	2600      	movs	r6, #0
 80045a0:	4d0c      	ldr	r5, [pc, #48]	; (80045d4 <__libc_init_array+0x38>)
 80045a2:	4c0d      	ldr	r4, [pc, #52]	; (80045d8 <__libc_init_array+0x3c>)
 80045a4:	1b64      	subs	r4, r4, r5
 80045a6:	10a4      	asrs	r4, r4, #2
 80045a8:	42a6      	cmp	r6, r4
 80045aa:	d109      	bne.n	80045c0 <__libc_init_array+0x24>
 80045ac:	f002 feb2 	bl	8007314 <_init>
 80045b0:	2600      	movs	r6, #0
 80045b2:	4d0a      	ldr	r5, [pc, #40]	; (80045dc <__libc_init_array+0x40>)
 80045b4:	4c0a      	ldr	r4, [pc, #40]	; (80045e0 <__libc_init_array+0x44>)
 80045b6:	1b64      	subs	r4, r4, r5
 80045b8:	10a4      	asrs	r4, r4, #2
 80045ba:	42a6      	cmp	r6, r4
 80045bc:	d105      	bne.n	80045ca <__libc_init_array+0x2e>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c4:	4798      	blx	r3
 80045c6:	3601      	adds	r6, #1
 80045c8:	e7ee      	b.n	80045a8 <__libc_init_array+0xc>
 80045ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ce:	4798      	blx	r3
 80045d0:	3601      	adds	r6, #1
 80045d2:	e7f2      	b.n	80045ba <__libc_init_array+0x1e>
 80045d4:	0800779c 	.word	0x0800779c
 80045d8:	0800779c 	.word	0x0800779c
 80045dc:	0800779c 	.word	0x0800779c
 80045e0:	080077a0 	.word	0x080077a0

080045e4 <memset>:
 80045e4:	4603      	mov	r3, r0
 80045e6:	4402      	add	r2, r0
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d100      	bne.n	80045ee <memset+0xa>
 80045ec:	4770      	bx	lr
 80045ee:	f803 1b01 	strb.w	r1, [r3], #1
 80045f2:	e7f9      	b.n	80045e8 <memset+0x4>

080045f4 <sulp>:
 80045f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f8:	460f      	mov	r7, r1
 80045fa:	4690      	mov	r8, r2
 80045fc:	f001 fd06 	bl	800600c <__ulp>
 8004600:	4604      	mov	r4, r0
 8004602:	460d      	mov	r5, r1
 8004604:	f1b8 0f00 	cmp.w	r8, #0
 8004608:	d011      	beq.n	800462e <sulp+0x3a>
 800460a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800460e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004612:	2b00      	cmp	r3, #0
 8004614:	dd0b      	ble.n	800462e <sulp+0x3a>
 8004616:	2400      	movs	r4, #0
 8004618:	051b      	lsls	r3, r3, #20
 800461a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800461e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004622:	4622      	mov	r2, r4
 8004624:	462b      	mov	r3, r5
 8004626:	f7fb ff57 	bl	80004d8 <__aeabi_dmul>
 800462a:	4604      	mov	r4, r0
 800462c:	460d      	mov	r5, r1
 800462e:	4620      	mov	r0, r4
 8004630:	4629      	mov	r1, r5
 8004632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004638 <_strtod_l>:
 8004638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463c:	469b      	mov	fp, r3
 800463e:	2300      	movs	r3, #0
 8004640:	b09f      	sub	sp, #124	; 0x7c
 8004642:	931a      	str	r3, [sp, #104]	; 0x68
 8004644:	4b9e      	ldr	r3, [pc, #632]	; (80048c0 <_strtod_l+0x288>)
 8004646:	4682      	mov	sl, r0
 8004648:	681f      	ldr	r7, [r3, #0]
 800464a:	460e      	mov	r6, r1
 800464c:	4638      	mov	r0, r7
 800464e:	9215      	str	r2, [sp, #84]	; 0x54
 8004650:	f7fb fd7e 	bl	8000150 <strlen>
 8004654:	f04f 0800 	mov.w	r8, #0
 8004658:	4604      	mov	r4, r0
 800465a:	f04f 0900 	mov.w	r9, #0
 800465e:	9619      	str	r6, [sp, #100]	; 0x64
 8004660:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	2a2b      	cmp	r2, #43	; 0x2b
 8004666:	d04c      	beq.n	8004702 <_strtod_l+0xca>
 8004668:	d83a      	bhi.n	80046e0 <_strtod_l+0xa8>
 800466a:	2a0d      	cmp	r2, #13
 800466c:	d833      	bhi.n	80046d6 <_strtod_l+0x9e>
 800466e:	2a08      	cmp	r2, #8
 8004670:	d833      	bhi.n	80046da <_strtod_l+0xa2>
 8004672:	2a00      	cmp	r2, #0
 8004674:	d03d      	beq.n	80046f2 <_strtod_l+0xba>
 8004676:	2300      	movs	r3, #0
 8004678:	930a      	str	r3, [sp, #40]	; 0x28
 800467a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800467c:	782b      	ldrb	r3, [r5, #0]
 800467e:	2b30      	cmp	r3, #48	; 0x30
 8004680:	f040 80aa 	bne.w	80047d8 <_strtod_l+0x1a0>
 8004684:	786b      	ldrb	r3, [r5, #1]
 8004686:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800468a:	2b58      	cmp	r3, #88	; 0x58
 800468c:	d166      	bne.n	800475c <_strtod_l+0x124>
 800468e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004690:	4650      	mov	r0, sl
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	ab1a      	add	r3, sp, #104	; 0x68
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	4a8a      	ldr	r2, [pc, #552]	; (80048c4 <_strtod_l+0x28c>)
 800469a:	f8cd b008 	str.w	fp, [sp, #8]
 800469e:	ab1b      	add	r3, sp, #108	; 0x6c
 80046a0:	a919      	add	r1, sp, #100	; 0x64
 80046a2:	f000 fe25 	bl	80052f0 <__gethex>
 80046a6:	f010 0607 	ands.w	r6, r0, #7
 80046aa:	4604      	mov	r4, r0
 80046ac:	d005      	beq.n	80046ba <_strtod_l+0x82>
 80046ae:	2e06      	cmp	r6, #6
 80046b0:	d129      	bne.n	8004706 <_strtod_l+0xce>
 80046b2:	2300      	movs	r3, #0
 80046b4:	3501      	adds	r5, #1
 80046b6:	9519      	str	r5, [sp, #100]	; 0x64
 80046b8:	930a      	str	r3, [sp, #40]	; 0x28
 80046ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f040 858a 	bne.w	80051d6 <_strtod_l+0xb9e>
 80046c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046c4:	b1d3      	cbz	r3, 80046fc <_strtod_l+0xc4>
 80046c6:	4642      	mov	r2, r8
 80046c8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80046cc:	4610      	mov	r0, r2
 80046ce:	4619      	mov	r1, r3
 80046d0:	b01f      	add	sp, #124	; 0x7c
 80046d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d6:	2a20      	cmp	r2, #32
 80046d8:	d1cd      	bne.n	8004676 <_strtod_l+0x3e>
 80046da:	3301      	adds	r3, #1
 80046dc:	9319      	str	r3, [sp, #100]	; 0x64
 80046de:	e7bf      	b.n	8004660 <_strtod_l+0x28>
 80046e0:	2a2d      	cmp	r2, #45	; 0x2d
 80046e2:	d1c8      	bne.n	8004676 <_strtod_l+0x3e>
 80046e4:	2201      	movs	r2, #1
 80046e6:	920a      	str	r2, [sp, #40]	; 0x28
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	9219      	str	r2, [sp, #100]	; 0x64
 80046ec:	785b      	ldrb	r3, [r3, #1]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1c3      	bne.n	800467a <_strtod_l+0x42>
 80046f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80046f4:	9619      	str	r6, [sp, #100]	; 0x64
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f040 856b 	bne.w	80051d2 <_strtod_l+0xb9a>
 80046fc:	4642      	mov	r2, r8
 80046fe:	464b      	mov	r3, r9
 8004700:	e7e4      	b.n	80046cc <_strtod_l+0x94>
 8004702:	2200      	movs	r2, #0
 8004704:	e7ef      	b.n	80046e6 <_strtod_l+0xae>
 8004706:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004708:	b13a      	cbz	r2, 800471a <_strtod_l+0xe2>
 800470a:	2135      	movs	r1, #53	; 0x35
 800470c:	a81c      	add	r0, sp, #112	; 0x70
 800470e:	f001 fd81 	bl	8006214 <__copybits>
 8004712:	4650      	mov	r0, sl
 8004714:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004716:	f001 f949 	bl	80059ac <_Bfree>
 800471a:	3e01      	subs	r6, #1
 800471c:	2e04      	cmp	r6, #4
 800471e:	d806      	bhi.n	800472e <_strtod_l+0xf6>
 8004720:	e8df f006 	tbb	[pc, r6]
 8004724:	1714030a 	.word	0x1714030a
 8004728:	0a          	.byte	0x0a
 8004729:	00          	.byte	0x00
 800472a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800472e:	0721      	lsls	r1, r4, #28
 8004730:	d5c3      	bpl.n	80046ba <_strtod_l+0x82>
 8004732:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004736:	e7c0      	b.n	80046ba <_strtod_l+0x82>
 8004738:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800473a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800473e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004742:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004746:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800474a:	e7f0      	b.n	800472e <_strtod_l+0xf6>
 800474c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80048c8 <_strtod_l+0x290>
 8004750:	e7ed      	b.n	800472e <_strtod_l+0xf6>
 8004752:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004756:	f04f 38ff 	mov.w	r8, #4294967295
 800475a:	e7e8      	b.n	800472e <_strtod_l+0xf6>
 800475c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	9219      	str	r2, [sp, #100]	; 0x64
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	2b30      	cmp	r3, #48	; 0x30
 8004766:	d0f9      	beq.n	800475c <_strtod_l+0x124>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0a6      	beq.n	80046ba <_strtod_l+0x82>
 800476c:	2301      	movs	r3, #1
 800476e:	9307      	str	r3, [sp, #28]
 8004770:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004772:	220a      	movs	r2, #10
 8004774:	9308      	str	r3, [sp, #32]
 8004776:	2300      	movs	r3, #0
 8004778:	469b      	mov	fp, r3
 800477a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800477e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004780:	7805      	ldrb	r5, [r0, #0]
 8004782:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004786:	b2d9      	uxtb	r1, r3
 8004788:	2909      	cmp	r1, #9
 800478a:	d927      	bls.n	80047dc <_strtod_l+0x1a4>
 800478c:	4622      	mov	r2, r4
 800478e:	4639      	mov	r1, r7
 8004790:	f001 fe42 	bl	8006418 <strncmp>
 8004794:	2800      	cmp	r0, #0
 8004796:	d033      	beq.n	8004800 <_strtod_l+0x1c8>
 8004798:	2000      	movs	r0, #0
 800479a:	462a      	mov	r2, r5
 800479c:	465c      	mov	r4, fp
 800479e:	4603      	mov	r3, r0
 80047a0:	9004      	str	r0, [sp, #16]
 80047a2:	2a65      	cmp	r2, #101	; 0x65
 80047a4:	d001      	beq.n	80047aa <_strtod_l+0x172>
 80047a6:	2a45      	cmp	r2, #69	; 0x45
 80047a8:	d114      	bne.n	80047d4 <_strtod_l+0x19c>
 80047aa:	b91c      	cbnz	r4, 80047b4 <_strtod_l+0x17c>
 80047ac:	9a07      	ldr	r2, [sp, #28]
 80047ae:	4302      	orrs	r2, r0
 80047b0:	d09f      	beq.n	80046f2 <_strtod_l+0xba>
 80047b2:	2400      	movs	r4, #0
 80047b4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80047b6:	1c72      	adds	r2, r6, #1
 80047b8:	9219      	str	r2, [sp, #100]	; 0x64
 80047ba:	7872      	ldrb	r2, [r6, #1]
 80047bc:	2a2b      	cmp	r2, #43	; 0x2b
 80047be:	d079      	beq.n	80048b4 <_strtod_l+0x27c>
 80047c0:	2a2d      	cmp	r2, #45	; 0x2d
 80047c2:	f000 8083 	beq.w	80048cc <_strtod_l+0x294>
 80047c6:	2700      	movs	r7, #0
 80047c8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80047cc:	2909      	cmp	r1, #9
 80047ce:	f240 8083 	bls.w	80048d8 <_strtod_l+0x2a0>
 80047d2:	9619      	str	r6, [sp, #100]	; 0x64
 80047d4:	2500      	movs	r5, #0
 80047d6:	e09f      	b.n	8004918 <_strtod_l+0x2e0>
 80047d8:	2300      	movs	r3, #0
 80047da:	e7c8      	b.n	800476e <_strtod_l+0x136>
 80047dc:	f1bb 0f08 	cmp.w	fp, #8
 80047e0:	bfd5      	itete	le
 80047e2:	9906      	ldrle	r1, [sp, #24]
 80047e4:	9905      	ldrgt	r1, [sp, #20]
 80047e6:	fb02 3301 	mlale	r3, r2, r1, r3
 80047ea:	fb02 3301 	mlagt	r3, r2, r1, r3
 80047ee:	f100 0001 	add.w	r0, r0, #1
 80047f2:	bfd4      	ite	le
 80047f4:	9306      	strle	r3, [sp, #24]
 80047f6:	9305      	strgt	r3, [sp, #20]
 80047f8:	f10b 0b01 	add.w	fp, fp, #1
 80047fc:	9019      	str	r0, [sp, #100]	; 0x64
 80047fe:	e7be      	b.n	800477e <_strtod_l+0x146>
 8004800:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004802:	191a      	adds	r2, r3, r4
 8004804:	9219      	str	r2, [sp, #100]	; 0x64
 8004806:	5d1a      	ldrb	r2, [r3, r4]
 8004808:	f1bb 0f00 	cmp.w	fp, #0
 800480c:	d036      	beq.n	800487c <_strtod_l+0x244>
 800480e:	465c      	mov	r4, fp
 8004810:	9004      	str	r0, [sp, #16]
 8004812:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004816:	2b09      	cmp	r3, #9
 8004818:	d912      	bls.n	8004840 <_strtod_l+0x208>
 800481a:	2301      	movs	r3, #1
 800481c:	e7c1      	b.n	80047a2 <_strtod_l+0x16a>
 800481e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004820:	3001      	adds	r0, #1
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	9219      	str	r2, [sp, #100]	; 0x64
 8004826:	785a      	ldrb	r2, [r3, #1]
 8004828:	2a30      	cmp	r2, #48	; 0x30
 800482a:	d0f8      	beq.n	800481e <_strtod_l+0x1e6>
 800482c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004830:	2b08      	cmp	r3, #8
 8004832:	f200 84d5 	bhi.w	80051e0 <_strtod_l+0xba8>
 8004836:	9004      	str	r0, [sp, #16]
 8004838:	2000      	movs	r0, #0
 800483a:	4604      	mov	r4, r0
 800483c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800483e:	9308      	str	r3, [sp, #32]
 8004840:	3a30      	subs	r2, #48	; 0x30
 8004842:	f100 0301 	add.w	r3, r0, #1
 8004846:	d013      	beq.n	8004870 <_strtod_l+0x238>
 8004848:	9904      	ldr	r1, [sp, #16]
 800484a:	1905      	adds	r5, r0, r4
 800484c:	4419      	add	r1, r3
 800484e:	9104      	str	r1, [sp, #16]
 8004850:	4623      	mov	r3, r4
 8004852:	210a      	movs	r1, #10
 8004854:	42ab      	cmp	r3, r5
 8004856:	d113      	bne.n	8004880 <_strtod_l+0x248>
 8004858:	1823      	adds	r3, r4, r0
 800485a:	2b08      	cmp	r3, #8
 800485c:	f104 0401 	add.w	r4, r4, #1
 8004860:	4404      	add	r4, r0
 8004862:	dc1b      	bgt.n	800489c <_strtod_l+0x264>
 8004864:	230a      	movs	r3, #10
 8004866:	9906      	ldr	r1, [sp, #24]
 8004868:	fb03 2301 	mla	r3, r3, r1, r2
 800486c:	9306      	str	r3, [sp, #24]
 800486e:	2300      	movs	r3, #0
 8004870:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004872:	4618      	mov	r0, r3
 8004874:	1c51      	adds	r1, r2, #1
 8004876:	9119      	str	r1, [sp, #100]	; 0x64
 8004878:	7852      	ldrb	r2, [r2, #1]
 800487a:	e7ca      	b.n	8004812 <_strtod_l+0x1da>
 800487c:	4658      	mov	r0, fp
 800487e:	e7d3      	b.n	8004828 <_strtod_l+0x1f0>
 8004880:	2b08      	cmp	r3, #8
 8004882:	dc04      	bgt.n	800488e <_strtod_l+0x256>
 8004884:	9f06      	ldr	r7, [sp, #24]
 8004886:	434f      	muls	r7, r1
 8004888:	9706      	str	r7, [sp, #24]
 800488a:	3301      	adds	r3, #1
 800488c:	e7e2      	b.n	8004854 <_strtod_l+0x21c>
 800488e:	1c5f      	adds	r7, r3, #1
 8004890:	2f10      	cmp	r7, #16
 8004892:	bfde      	ittt	le
 8004894:	9f05      	ldrle	r7, [sp, #20]
 8004896:	434f      	mulle	r7, r1
 8004898:	9705      	strle	r7, [sp, #20]
 800489a:	e7f6      	b.n	800488a <_strtod_l+0x252>
 800489c:	2c10      	cmp	r4, #16
 800489e:	bfdf      	itttt	le
 80048a0:	230a      	movle	r3, #10
 80048a2:	9905      	ldrle	r1, [sp, #20]
 80048a4:	fb03 2301 	mlale	r3, r3, r1, r2
 80048a8:	9305      	strle	r3, [sp, #20]
 80048aa:	e7e0      	b.n	800486e <_strtod_l+0x236>
 80048ac:	2300      	movs	r3, #0
 80048ae:	9304      	str	r3, [sp, #16]
 80048b0:	2301      	movs	r3, #1
 80048b2:	e77b      	b.n	80047ac <_strtod_l+0x174>
 80048b4:	2700      	movs	r7, #0
 80048b6:	1cb2      	adds	r2, r6, #2
 80048b8:	9219      	str	r2, [sp, #100]	; 0x64
 80048ba:	78b2      	ldrb	r2, [r6, #2]
 80048bc:	e784      	b.n	80047c8 <_strtod_l+0x190>
 80048be:	bf00      	nop
 80048c0:	08007448 	.word	0x08007448
 80048c4:	08007380 	.word	0x08007380
 80048c8:	7ff00000 	.word	0x7ff00000
 80048cc:	2701      	movs	r7, #1
 80048ce:	e7f2      	b.n	80048b6 <_strtod_l+0x27e>
 80048d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80048d2:	1c51      	adds	r1, r2, #1
 80048d4:	9119      	str	r1, [sp, #100]	; 0x64
 80048d6:	7852      	ldrb	r2, [r2, #1]
 80048d8:	2a30      	cmp	r2, #48	; 0x30
 80048da:	d0f9      	beq.n	80048d0 <_strtod_l+0x298>
 80048dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80048e0:	2908      	cmp	r1, #8
 80048e2:	f63f af77 	bhi.w	80047d4 <_strtod_l+0x19c>
 80048e6:	f04f 0e0a 	mov.w	lr, #10
 80048ea:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80048ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80048f0:	9209      	str	r2, [sp, #36]	; 0x24
 80048f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80048f4:	1c51      	adds	r1, r2, #1
 80048f6:	9119      	str	r1, [sp, #100]	; 0x64
 80048f8:	7852      	ldrb	r2, [r2, #1]
 80048fa:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80048fe:	2d09      	cmp	r5, #9
 8004900:	d935      	bls.n	800496e <_strtod_l+0x336>
 8004902:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004904:	1b49      	subs	r1, r1, r5
 8004906:	2908      	cmp	r1, #8
 8004908:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800490c:	dc02      	bgt.n	8004914 <_strtod_l+0x2dc>
 800490e:	4565      	cmp	r5, ip
 8004910:	bfa8      	it	ge
 8004912:	4665      	movge	r5, ip
 8004914:	b107      	cbz	r7, 8004918 <_strtod_l+0x2e0>
 8004916:	426d      	negs	r5, r5
 8004918:	2c00      	cmp	r4, #0
 800491a:	d14c      	bne.n	80049b6 <_strtod_l+0x37e>
 800491c:	9907      	ldr	r1, [sp, #28]
 800491e:	4301      	orrs	r1, r0
 8004920:	f47f aecb 	bne.w	80046ba <_strtod_l+0x82>
 8004924:	2b00      	cmp	r3, #0
 8004926:	f47f aee4 	bne.w	80046f2 <_strtod_l+0xba>
 800492a:	2a69      	cmp	r2, #105	; 0x69
 800492c:	d026      	beq.n	800497c <_strtod_l+0x344>
 800492e:	dc23      	bgt.n	8004978 <_strtod_l+0x340>
 8004930:	2a49      	cmp	r2, #73	; 0x49
 8004932:	d023      	beq.n	800497c <_strtod_l+0x344>
 8004934:	2a4e      	cmp	r2, #78	; 0x4e
 8004936:	f47f aedc 	bne.w	80046f2 <_strtod_l+0xba>
 800493a:	499d      	ldr	r1, [pc, #628]	; (8004bb0 <_strtod_l+0x578>)
 800493c:	a819      	add	r0, sp, #100	; 0x64
 800493e:	f000 ff25 	bl	800578c <__match>
 8004942:	2800      	cmp	r0, #0
 8004944:	f43f aed5 	beq.w	80046f2 <_strtod_l+0xba>
 8004948:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b28      	cmp	r3, #40	; 0x28
 800494e:	d12c      	bne.n	80049aa <_strtod_l+0x372>
 8004950:	4998      	ldr	r1, [pc, #608]	; (8004bb4 <_strtod_l+0x57c>)
 8004952:	aa1c      	add	r2, sp, #112	; 0x70
 8004954:	a819      	add	r0, sp, #100	; 0x64
 8004956:	f000 ff2d 	bl	80057b4 <__hexnan>
 800495a:	2805      	cmp	r0, #5
 800495c:	d125      	bne.n	80049aa <_strtod_l+0x372>
 800495e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004960:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004964:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004968:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800496c:	e6a5      	b.n	80046ba <_strtod_l+0x82>
 800496e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004972:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004976:	e7bc      	b.n	80048f2 <_strtod_l+0x2ba>
 8004978:	2a6e      	cmp	r2, #110	; 0x6e
 800497a:	e7dc      	b.n	8004936 <_strtod_l+0x2fe>
 800497c:	498e      	ldr	r1, [pc, #568]	; (8004bb8 <_strtod_l+0x580>)
 800497e:	a819      	add	r0, sp, #100	; 0x64
 8004980:	f000 ff04 	bl	800578c <__match>
 8004984:	2800      	cmp	r0, #0
 8004986:	f43f aeb4 	beq.w	80046f2 <_strtod_l+0xba>
 800498a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800498c:	498b      	ldr	r1, [pc, #556]	; (8004bbc <_strtod_l+0x584>)
 800498e:	3b01      	subs	r3, #1
 8004990:	a819      	add	r0, sp, #100	; 0x64
 8004992:	9319      	str	r3, [sp, #100]	; 0x64
 8004994:	f000 fefa 	bl	800578c <__match>
 8004998:	b910      	cbnz	r0, 80049a0 <_strtod_l+0x368>
 800499a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800499c:	3301      	adds	r3, #1
 800499e:	9319      	str	r3, [sp, #100]	; 0x64
 80049a0:	f04f 0800 	mov.w	r8, #0
 80049a4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8004bc0 <_strtod_l+0x588>
 80049a8:	e687      	b.n	80046ba <_strtod_l+0x82>
 80049aa:	4886      	ldr	r0, [pc, #536]	; (8004bc4 <_strtod_l+0x58c>)
 80049ac:	f001 fd1e 	bl	80063ec <nan>
 80049b0:	4680      	mov	r8, r0
 80049b2:	4689      	mov	r9, r1
 80049b4:	e681      	b.n	80046ba <_strtod_l+0x82>
 80049b6:	9b04      	ldr	r3, [sp, #16]
 80049b8:	f1bb 0f00 	cmp.w	fp, #0
 80049bc:	bf08      	it	eq
 80049be:	46a3      	moveq	fp, r4
 80049c0:	1aeb      	subs	r3, r5, r3
 80049c2:	2c10      	cmp	r4, #16
 80049c4:	9806      	ldr	r0, [sp, #24]
 80049c6:	4626      	mov	r6, r4
 80049c8:	9307      	str	r3, [sp, #28]
 80049ca:	bfa8      	it	ge
 80049cc:	2610      	movge	r6, #16
 80049ce:	f7fb fd09 	bl	80003e4 <__aeabi_ui2d>
 80049d2:	2c09      	cmp	r4, #9
 80049d4:	4680      	mov	r8, r0
 80049d6:	4689      	mov	r9, r1
 80049d8:	dd13      	ble.n	8004a02 <_strtod_l+0x3ca>
 80049da:	4b7b      	ldr	r3, [pc, #492]	; (8004bc8 <_strtod_l+0x590>)
 80049dc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80049e0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80049e4:	f7fb fd78 	bl	80004d8 <__aeabi_dmul>
 80049e8:	4680      	mov	r8, r0
 80049ea:	9805      	ldr	r0, [sp, #20]
 80049ec:	4689      	mov	r9, r1
 80049ee:	f7fb fcf9 	bl	80003e4 <__aeabi_ui2d>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4640      	mov	r0, r8
 80049f8:	4649      	mov	r1, r9
 80049fa:	f7fb fbb7 	bl	800016c <__adddf3>
 80049fe:	4680      	mov	r8, r0
 8004a00:	4689      	mov	r9, r1
 8004a02:	2c0f      	cmp	r4, #15
 8004a04:	dc36      	bgt.n	8004a74 <_strtod_l+0x43c>
 8004a06:	9b07      	ldr	r3, [sp, #28]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f43f ae56 	beq.w	80046ba <_strtod_l+0x82>
 8004a0e:	dd22      	ble.n	8004a56 <_strtod_l+0x41e>
 8004a10:	2b16      	cmp	r3, #22
 8004a12:	dc09      	bgt.n	8004a28 <_strtod_l+0x3f0>
 8004a14:	496c      	ldr	r1, [pc, #432]	; (8004bc8 <_strtod_l+0x590>)
 8004a16:	4642      	mov	r2, r8
 8004a18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004a1c:	464b      	mov	r3, r9
 8004a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a22:	f7fb fd59 	bl	80004d8 <__aeabi_dmul>
 8004a26:	e7c3      	b.n	80049b0 <_strtod_l+0x378>
 8004a28:	9a07      	ldr	r2, [sp, #28]
 8004a2a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	db20      	blt.n	8004a74 <_strtod_l+0x43c>
 8004a32:	4d65      	ldr	r5, [pc, #404]	; (8004bc8 <_strtod_l+0x590>)
 8004a34:	f1c4 040f 	rsb	r4, r4, #15
 8004a38:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a42:	464b      	mov	r3, r9
 8004a44:	f7fb fd48 	bl	80004d8 <__aeabi_dmul>
 8004a48:	9b07      	ldr	r3, [sp, #28]
 8004a4a:	1b1c      	subs	r4, r3, r4
 8004a4c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004a50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a54:	e7e5      	b.n	8004a22 <_strtod_l+0x3ea>
 8004a56:	9b07      	ldr	r3, [sp, #28]
 8004a58:	3316      	adds	r3, #22
 8004a5a:	db0b      	blt.n	8004a74 <_strtod_l+0x43c>
 8004a5c:	9b04      	ldr	r3, [sp, #16]
 8004a5e:	4640      	mov	r0, r8
 8004a60:	1b5d      	subs	r5, r3, r5
 8004a62:	4b59      	ldr	r3, [pc, #356]	; (8004bc8 <_strtod_l+0x590>)
 8004a64:	4649      	mov	r1, r9
 8004a66:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004a6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a6e:	f7fb fe5d 	bl	800072c <__aeabi_ddiv>
 8004a72:	e79d      	b.n	80049b0 <_strtod_l+0x378>
 8004a74:	9b07      	ldr	r3, [sp, #28]
 8004a76:	1ba6      	subs	r6, r4, r6
 8004a78:	441e      	add	r6, r3
 8004a7a:	2e00      	cmp	r6, #0
 8004a7c:	dd74      	ble.n	8004b68 <_strtod_l+0x530>
 8004a7e:	f016 030f 	ands.w	r3, r6, #15
 8004a82:	d00a      	beq.n	8004a9a <_strtod_l+0x462>
 8004a84:	4950      	ldr	r1, [pc, #320]	; (8004bc8 <_strtod_l+0x590>)
 8004a86:	4642      	mov	r2, r8
 8004a88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a90:	464b      	mov	r3, r9
 8004a92:	f7fb fd21 	bl	80004d8 <__aeabi_dmul>
 8004a96:	4680      	mov	r8, r0
 8004a98:	4689      	mov	r9, r1
 8004a9a:	f036 060f 	bics.w	r6, r6, #15
 8004a9e:	d052      	beq.n	8004b46 <_strtod_l+0x50e>
 8004aa0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004aa4:	dd27      	ble.n	8004af6 <_strtod_l+0x4be>
 8004aa6:	f04f 0b00 	mov.w	fp, #0
 8004aaa:	f8cd b010 	str.w	fp, [sp, #16]
 8004aae:	f8cd b020 	str.w	fp, [sp, #32]
 8004ab2:	f8cd b018 	str.w	fp, [sp, #24]
 8004ab6:	2322      	movs	r3, #34	; 0x22
 8004ab8:	f04f 0800 	mov.w	r8, #0
 8004abc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004bc0 <_strtod_l+0x588>
 8004ac0:	f8ca 3000 	str.w	r3, [sl]
 8004ac4:	9b08      	ldr	r3, [sp, #32]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f43f adf7 	beq.w	80046ba <_strtod_l+0x82>
 8004acc:	4650      	mov	r0, sl
 8004ace:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004ad0:	f000 ff6c 	bl	80059ac <_Bfree>
 8004ad4:	4650      	mov	r0, sl
 8004ad6:	9906      	ldr	r1, [sp, #24]
 8004ad8:	f000 ff68 	bl	80059ac <_Bfree>
 8004adc:	4650      	mov	r0, sl
 8004ade:	9904      	ldr	r1, [sp, #16]
 8004ae0:	f000 ff64 	bl	80059ac <_Bfree>
 8004ae4:	4650      	mov	r0, sl
 8004ae6:	9908      	ldr	r1, [sp, #32]
 8004ae8:	f000 ff60 	bl	80059ac <_Bfree>
 8004aec:	4659      	mov	r1, fp
 8004aee:	4650      	mov	r0, sl
 8004af0:	f000 ff5c 	bl	80059ac <_Bfree>
 8004af4:	e5e1      	b.n	80046ba <_strtod_l+0x82>
 8004af6:	4b35      	ldr	r3, [pc, #212]	; (8004bcc <_strtod_l+0x594>)
 8004af8:	4640      	mov	r0, r8
 8004afa:	9305      	str	r3, [sp, #20]
 8004afc:	2300      	movs	r3, #0
 8004afe:	4649      	mov	r1, r9
 8004b00:	461f      	mov	r7, r3
 8004b02:	1136      	asrs	r6, r6, #4
 8004b04:	2e01      	cmp	r6, #1
 8004b06:	dc21      	bgt.n	8004b4c <_strtod_l+0x514>
 8004b08:	b10b      	cbz	r3, 8004b0e <_strtod_l+0x4d6>
 8004b0a:	4680      	mov	r8, r0
 8004b0c:	4689      	mov	r9, r1
 8004b0e:	4b2f      	ldr	r3, [pc, #188]	; (8004bcc <_strtod_l+0x594>)
 8004b10:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004b14:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004b18:	4642      	mov	r2, r8
 8004b1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b1e:	464b      	mov	r3, r9
 8004b20:	f7fb fcda 	bl	80004d8 <__aeabi_dmul>
 8004b24:	4b26      	ldr	r3, [pc, #152]	; (8004bc0 <_strtod_l+0x588>)
 8004b26:	460a      	mov	r2, r1
 8004b28:	400b      	ands	r3, r1
 8004b2a:	4929      	ldr	r1, [pc, #164]	; (8004bd0 <_strtod_l+0x598>)
 8004b2c:	4680      	mov	r8, r0
 8004b2e:	428b      	cmp	r3, r1
 8004b30:	d8b9      	bhi.n	8004aa6 <_strtod_l+0x46e>
 8004b32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004b36:	428b      	cmp	r3, r1
 8004b38:	bf86      	itte	hi
 8004b3a:	f04f 38ff 	movhi.w	r8, #4294967295
 8004b3e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004bd4 <_strtod_l+0x59c>
 8004b42:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004b46:	2300      	movs	r3, #0
 8004b48:	9305      	str	r3, [sp, #20]
 8004b4a:	e07f      	b.n	8004c4c <_strtod_l+0x614>
 8004b4c:	07f2      	lsls	r2, r6, #31
 8004b4e:	d505      	bpl.n	8004b5c <_strtod_l+0x524>
 8004b50:	9b05      	ldr	r3, [sp, #20]
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	f7fb fcbf 	bl	80004d8 <__aeabi_dmul>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	9a05      	ldr	r2, [sp, #20]
 8004b5e:	3701      	adds	r7, #1
 8004b60:	3208      	adds	r2, #8
 8004b62:	1076      	asrs	r6, r6, #1
 8004b64:	9205      	str	r2, [sp, #20]
 8004b66:	e7cd      	b.n	8004b04 <_strtod_l+0x4cc>
 8004b68:	d0ed      	beq.n	8004b46 <_strtod_l+0x50e>
 8004b6a:	4276      	negs	r6, r6
 8004b6c:	f016 020f 	ands.w	r2, r6, #15
 8004b70:	d00a      	beq.n	8004b88 <_strtod_l+0x550>
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <_strtod_l+0x590>)
 8004b74:	4640      	mov	r0, r8
 8004b76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f7fb fdd4 	bl	800072c <__aeabi_ddiv>
 8004b84:	4680      	mov	r8, r0
 8004b86:	4689      	mov	r9, r1
 8004b88:	1136      	asrs	r6, r6, #4
 8004b8a:	d0dc      	beq.n	8004b46 <_strtod_l+0x50e>
 8004b8c:	2e1f      	cmp	r6, #31
 8004b8e:	dd23      	ble.n	8004bd8 <_strtod_l+0x5a0>
 8004b90:	f04f 0b00 	mov.w	fp, #0
 8004b94:	f8cd b010 	str.w	fp, [sp, #16]
 8004b98:	f8cd b020 	str.w	fp, [sp, #32]
 8004b9c:	f8cd b018 	str.w	fp, [sp, #24]
 8004ba0:	2322      	movs	r3, #34	; 0x22
 8004ba2:	f04f 0800 	mov.w	r8, #0
 8004ba6:	f04f 0900 	mov.w	r9, #0
 8004baa:	f8ca 3000 	str.w	r3, [sl]
 8004bae:	e789      	b.n	8004ac4 <_strtod_l+0x48c>
 8004bb0:	0800737d 	.word	0x0800737d
 8004bb4:	08007394 	.word	0x08007394
 8004bb8:	08007374 	.word	0x08007374
 8004bbc:	08007377 	.word	0x08007377
 8004bc0:	7ff00000 	.word	0x7ff00000
 8004bc4:	08007607 	.word	0x08007607
 8004bc8:	080074f8 	.word	0x080074f8
 8004bcc:	080074d0 	.word	0x080074d0
 8004bd0:	7ca00000 	.word	0x7ca00000
 8004bd4:	7fefffff 	.word	0x7fefffff
 8004bd8:	f016 0310 	ands.w	r3, r6, #16
 8004bdc:	bf18      	it	ne
 8004bde:	236a      	movne	r3, #106	; 0x6a
 8004be0:	4640      	mov	r0, r8
 8004be2:	9305      	str	r3, [sp, #20]
 8004be4:	4649      	mov	r1, r9
 8004be6:	2300      	movs	r3, #0
 8004be8:	4fb0      	ldr	r7, [pc, #704]	; (8004eac <_strtod_l+0x874>)
 8004bea:	07f2      	lsls	r2, r6, #31
 8004bec:	d504      	bpl.n	8004bf8 <_strtod_l+0x5c0>
 8004bee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bf2:	f7fb fc71 	bl	80004d8 <__aeabi_dmul>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	1076      	asrs	r6, r6, #1
 8004bfa:	f107 0708 	add.w	r7, r7, #8
 8004bfe:	d1f4      	bne.n	8004bea <_strtod_l+0x5b2>
 8004c00:	b10b      	cbz	r3, 8004c06 <_strtod_l+0x5ce>
 8004c02:	4680      	mov	r8, r0
 8004c04:	4689      	mov	r9, r1
 8004c06:	9b05      	ldr	r3, [sp, #20]
 8004c08:	b1c3      	cbz	r3, 8004c3c <_strtod_l+0x604>
 8004c0a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004c0e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	4649      	mov	r1, r9
 8004c16:	dd11      	ble.n	8004c3c <_strtod_l+0x604>
 8004c18:	2b1f      	cmp	r3, #31
 8004c1a:	f340 8127 	ble.w	8004e6c <_strtod_l+0x834>
 8004c1e:	2b34      	cmp	r3, #52	; 0x34
 8004c20:	bfd8      	it	le
 8004c22:	f04f 33ff 	movle.w	r3, #4294967295
 8004c26:	f04f 0800 	mov.w	r8, #0
 8004c2a:	bfcf      	iteee	gt
 8004c2c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004c30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004c34:	fa03 f202 	lslle.w	r2, r3, r2
 8004c38:	ea02 0901 	andle.w	r9, r2, r1
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2300      	movs	r3, #0
 8004c40:	4640      	mov	r0, r8
 8004c42:	4649      	mov	r1, r9
 8004c44:	f7fb feb0 	bl	80009a8 <__aeabi_dcmpeq>
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	d1a1      	bne.n	8004b90 <_strtod_l+0x558>
 8004c4c:	9b06      	ldr	r3, [sp, #24]
 8004c4e:	465a      	mov	r2, fp
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	4650      	mov	r0, sl
 8004c54:	4623      	mov	r3, r4
 8004c56:	9908      	ldr	r1, [sp, #32]
 8004c58:	f000 ff10 	bl	8005a7c <__s2b>
 8004c5c:	9008      	str	r0, [sp, #32]
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	f43f af21 	beq.w	8004aa6 <_strtod_l+0x46e>
 8004c64:	9b04      	ldr	r3, [sp, #16]
 8004c66:	f04f 0b00 	mov.w	fp, #0
 8004c6a:	1b5d      	subs	r5, r3, r5
 8004c6c:	9b07      	ldr	r3, [sp, #28]
 8004c6e:	f8cd b010 	str.w	fp, [sp, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bfb4      	ite	lt
 8004c76:	462b      	movlt	r3, r5
 8004c78:	2300      	movge	r3, #0
 8004c7a:	930e      	str	r3, [sp, #56]	; 0x38
 8004c7c:	9b07      	ldr	r3, [sp, #28]
 8004c7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004c82:	9314      	str	r3, [sp, #80]	; 0x50
 8004c84:	9b08      	ldr	r3, [sp, #32]
 8004c86:	4650      	mov	r0, sl
 8004c88:	6859      	ldr	r1, [r3, #4]
 8004c8a:	f000 fe4f 	bl	800592c <_Balloc>
 8004c8e:	9006      	str	r0, [sp, #24]
 8004c90:	2800      	cmp	r0, #0
 8004c92:	f43f af10 	beq.w	8004ab6 <_strtod_l+0x47e>
 8004c96:	9b08      	ldr	r3, [sp, #32]
 8004c98:	300c      	adds	r0, #12
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	f103 010c 	add.w	r1, r3, #12
 8004ca0:	3202      	adds	r2, #2
 8004ca2:	0092      	lsls	r2, r2, #2
 8004ca4:	f000 fe34 	bl	8005910 <memcpy>
 8004ca8:	ab1c      	add	r3, sp, #112	; 0x70
 8004caa:	9301      	str	r3, [sp, #4]
 8004cac:	ab1b      	add	r3, sp, #108	; 0x6c
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	4642      	mov	r2, r8
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	4650      	mov	r0, sl
 8004cb6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8004cba:	f001 fa21 	bl	8006100 <__d2b>
 8004cbe:	901a      	str	r0, [sp, #104]	; 0x68
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	f43f aef8 	beq.w	8004ab6 <_strtod_l+0x47e>
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	4650      	mov	r0, sl
 8004cca:	f000 ff6f 	bl	8005bac <__i2b>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	9004      	str	r0, [sp, #16]
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	f43f aeef 	beq.w	8004ab6 <_strtod_l+0x47e>
 8004cd8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004cda:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004cdc:	2d00      	cmp	r5, #0
 8004cde:	bfab      	itete	ge
 8004ce0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004ce2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8004ce4:	18ee      	addge	r6, r5, r3
 8004ce6:	1b5c      	sublt	r4, r3, r5
 8004ce8:	9b05      	ldr	r3, [sp, #20]
 8004cea:	bfa8      	it	ge
 8004cec:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8004cee:	eba5 0503 	sub.w	r5, r5, r3
 8004cf2:	4415      	add	r5, r2
 8004cf4:	4b6e      	ldr	r3, [pc, #440]	; (8004eb0 <_strtod_l+0x878>)
 8004cf6:	f105 35ff 	add.w	r5, r5, #4294967295
 8004cfa:	bfb8      	it	lt
 8004cfc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004cfe:	429d      	cmp	r5, r3
 8004d00:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004d04:	f280 80c4 	bge.w	8004e90 <_strtod_l+0x858>
 8004d08:	1b5b      	subs	r3, r3, r5
 8004d0a:	2b1f      	cmp	r3, #31
 8004d0c:	f04f 0701 	mov.w	r7, #1
 8004d10:	eba2 0203 	sub.w	r2, r2, r3
 8004d14:	f300 80b1 	bgt.w	8004e7a <_strtod_l+0x842>
 8004d18:	2500      	movs	r5, #0
 8004d1a:	fa07 f303 	lsl.w	r3, r7, r3
 8004d1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d20:	18b7      	adds	r7, r6, r2
 8004d22:	9b05      	ldr	r3, [sp, #20]
 8004d24:	42be      	cmp	r6, r7
 8004d26:	4414      	add	r4, r2
 8004d28:	441c      	add	r4, r3
 8004d2a:	4633      	mov	r3, r6
 8004d2c:	bfa8      	it	ge
 8004d2e:	463b      	movge	r3, r7
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	bfa8      	it	ge
 8004d34:	4623      	movge	r3, r4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bfc2      	ittt	gt
 8004d3a:	1aff      	subgt	r7, r7, r3
 8004d3c:	1ae4      	subgt	r4, r4, r3
 8004d3e:	1af6      	subgt	r6, r6, r3
 8004d40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	dd17      	ble.n	8004d76 <_strtod_l+0x73e>
 8004d46:	461a      	mov	r2, r3
 8004d48:	4650      	mov	r0, sl
 8004d4a:	9904      	ldr	r1, [sp, #16]
 8004d4c:	f000 ffec 	bl	8005d28 <__pow5mult>
 8004d50:	9004      	str	r0, [sp, #16]
 8004d52:	2800      	cmp	r0, #0
 8004d54:	f43f aeaf 	beq.w	8004ab6 <_strtod_l+0x47e>
 8004d58:	4601      	mov	r1, r0
 8004d5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004d5c:	4650      	mov	r0, sl
 8004d5e:	f000 ff3b 	bl	8005bd8 <__multiply>
 8004d62:	9009      	str	r0, [sp, #36]	; 0x24
 8004d64:	2800      	cmp	r0, #0
 8004d66:	f43f aea6 	beq.w	8004ab6 <_strtod_l+0x47e>
 8004d6a:	4650      	mov	r0, sl
 8004d6c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004d6e:	f000 fe1d 	bl	80059ac <_Bfree>
 8004d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d74:	931a      	str	r3, [sp, #104]	; 0x68
 8004d76:	2f00      	cmp	r7, #0
 8004d78:	f300 808e 	bgt.w	8004e98 <_strtod_l+0x860>
 8004d7c:	9b07      	ldr	r3, [sp, #28]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	dd08      	ble.n	8004d94 <_strtod_l+0x75c>
 8004d82:	4650      	mov	r0, sl
 8004d84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004d86:	9906      	ldr	r1, [sp, #24]
 8004d88:	f000 ffce 	bl	8005d28 <__pow5mult>
 8004d8c:	9006      	str	r0, [sp, #24]
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	f43f ae91 	beq.w	8004ab6 <_strtod_l+0x47e>
 8004d94:	2c00      	cmp	r4, #0
 8004d96:	dd08      	ble.n	8004daa <_strtod_l+0x772>
 8004d98:	4622      	mov	r2, r4
 8004d9a:	4650      	mov	r0, sl
 8004d9c:	9906      	ldr	r1, [sp, #24]
 8004d9e:	f001 f81d 	bl	8005ddc <__lshift>
 8004da2:	9006      	str	r0, [sp, #24]
 8004da4:	2800      	cmp	r0, #0
 8004da6:	f43f ae86 	beq.w	8004ab6 <_strtod_l+0x47e>
 8004daa:	2e00      	cmp	r6, #0
 8004dac:	dd08      	ble.n	8004dc0 <_strtod_l+0x788>
 8004dae:	4632      	mov	r2, r6
 8004db0:	4650      	mov	r0, sl
 8004db2:	9904      	ldr	r1, [sp, #16]
 8004db4:	f001 f812 	bl	8005ddc <__lshift>
 8004db8:	9004      	str	r0, [sp, #16]
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	f43f ae7b 	beq.w	8004ab6 <_strtod_l+0x47e>
 8004dc0:	4650      	mov	r0, sl
 8004dc2:	9a06      	ldr	r2, [sp, #24]
 8004dc4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004dc6:	f001 f895 	bl	8005ef4 <__mdiff>
 8004dca:	4683      	mov	fp, r0
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	f43f ae72 	beq.w	8004ab6 <_strtod_l+0x47e>
 8004dd2:	2400      	movs	r4, #0
 8004dd4:	68c3      	ldr	r3, [r0, #12]
 8004dd6:	9904      	ldr	r1, [sp, #16]
 8004dd8:	60c4      	str	r4, [r0, #12]
 8004dda:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ddc:	f001 f86e 	bl	8005ebc <__mcmp>
 8004de0:	42a0      	cmp	r0, r4
 8004de2:	da6b      	bge.n	8004ebc <_strtod_l+0x884>
 8004de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004de6:	ea53 0308 	orrs.w	r3, r3, r8
 8004dea:	f040 8091 	bne.w	8004f10 <_strtod_l+0x8d8>
 8004dee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f040 808c 	bne.w	8004f10 <_strtod_l+0x8d8>
 8004df8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004dfc:	0d1b      	lsrs	r3, r3, #20
 8004dfe:	051b      	lsls	r3, r3, #20
 8004e00:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004e04:	f240 8084 	bls.w	8004f10 <_strtod_l+0x8d8>
 8004e08:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004e0c:	b91b      	cbnz	r3, 8004e16 <_strtod_l+0x7de>
 8004e0e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	dd7c      	ble.n	8004f10 <_strtod_l+0x8d8>
 8004e16:	4659      	mov	r1, fp
 8004e18:	2201      	movs	r2, #1
 8004e1a:	4650      	mov	r0, sl
 8004e1c:	f000 ffde 	bl	8005ddc <__lshift>
 8004e20:	9904      	ldr	r1, [sp, #16]
 8004e22:	4683      	mov	fp, r0
 8004e24:	f001 f84a 	bl	8005ebc <__mcmp>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	dd71      	ble.n	8004f10 <_strtod_l+0x8d8>
 8004e2c:	9905      	ldr	r1, [sp, #20]
 8004e2e:	464b      	mov	r3, r9
 8004e30:	4a20      	ldr	r2, [pc, #128]	; (8004eb4 <_strtod_l+0x87c>)
 8004e32:	2900      	cmp	r1, #0
 8004e34:	f000 808c 	beq.w	8004f50 <_strtod_l+0x918>
 8004e38:	ea02 0109 	and.w	r1, r2, r9
 8004e3c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004e40:	f300 8086 	bgt.w	8004f50 <_strtod_l+0x918>
 8004e44:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004e48:	f77f aeaa 	ble.w	8004ba0 <_strtod_l+0x568>
 8004e4c:	4640      	mov	r0, r8
 8004e4e:	4649      	mov	r1, r9
 8004e50:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <_strtod_l+0x880>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	f7fb fb40 	bl	80004d8 <__aeabi_dmul>
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4303      	orrs	r3, r0
 8004e5c:	bf08      	it	eq
 8004e5e:	2322      	moveq	r3, #34	; 0x22
 8004e60:	4680      	mov	r8, r0
 8004e62:	4689      	mov	r9, r1
 8004e64:	bf08      	it	eq
 8004e66:	f8ca 3000 	streq.w	r3, [sl]
 8004e6a:	e62f      	b.n	8004acc <_strtod_l+0x494>
 8004e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	ea03 0808 	and.w	r8, r3, r8
 8004e78:	e6e0      	b.n	8004c3c <_strtod_l+0x604>
 8004e7a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004e7e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004e82:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004e86:	35e2      	adds	r5, #226	; 0xe2
 8004e88:	fa07 f505 	lsl.w	r5, r7, r5
 8004e8c:	970f      	str	r7, [sp, #60]	; 0x3c
 8004e8e:	e747      	b.n	8004d20 <_strtod_l+0x6e8>
 8004e90:	2301      	movs	r3, #1
 8004e92:	2500      	movs	r5, #0
 8004e94:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e96:	e743      	b.n	8004d20 <_strtod_l+0x6e8>
 8004e98:	463a      	mov	r2, r7
 8004e9a:	4650      	mov	r0, sl
 8004e9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004e9e:	f000 ff9d 	bl	8005ddc <__lshift>
 8004ea2:	901a      	str	r0, [sp, #104]	; 0x68
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	f47f af69 	bne.w	8004d7c <_strtod_l+0x744>
 8004eaa:	e604      	b.n	8004ab6 <_strtod_l+0x47e>
 8004eac:	080073a8 	.word	0x080073a8
 8004eb0:	fffffc02 	.word	0xfffffc02
 8004eb4:	7ff00000 	.word	0x7ff00000
 8004eb8:	39500000 	.word	0x39500000
 8004ebc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004ec0:	d165      	bne.n	8004f8e <_strtod_l+0x956>
 8004ec2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ec4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ec8:	b35a      	cbz	r2, 8004f22 <_strtod_l+0x8ea>
 8004eca:	4a99      	ldr	r2, [pc, #612]	; (8005130 <_strtod_l+0xaf8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d12b      	bne.n	8004f28 <_strtod_l+0x8f0>
 8004ed0:	9b05      	ldr	r3, [sp, #20]
 8004ed2:	4641      	mov	r1, r8
 8004ed4:	b303      	cbz	r3, 8004f18 <_strtod_l+0x8e0>
 8004ed6:	464a      	mov	r2, r9
 8004ed8:	4b96      	ldr	r3, [pc, #600]	; (8005134 <_strtod_l+0xafc>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee4:	d81b      	bhi.n	8004f1e <_strtod_l+0x8e6>
 8004ee6:	0d1b      	lsrs	r3, r3, #20
 8004ee8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004eec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef0:	4299      	cmp	r1, r3
 8004ef2:	d119      	bne.n	8004f28 <_strtod_l+0x8f0>
 8004ef4:	4b90      	ldr	r3, [pc, #576]	; (8005138 <_strtod_l+0xb00>)
 8004ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d102      	bne.n	8004f02 <_strtod_l+0x8ca>
 8004efc:	3101      	adds	r1, #1
 8004efe:	f43f adda 	beq.w	8004ab6 <_strtod_l+0x47e>
 8004f02:	f04f 0800 	mov.w	r8, #0
 8004f06:	4b8b      	ldr	r3, [pc, #556]	; (8005134 <_strtod_l+0xafc>)
 8004f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f0a:	401a      	ands	r2, r3
 8004f0c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004f10:	9b05      	ldr	r3, [sp, #20]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d19a      	bne.n	8004e4c <_strtod_l+0x814>
 8004f16:	e5d9      	b.n	8004acc <_strtod_l+0x494>
 8004f18:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1c:	e7e8      	b.n	8004ef0 <_strtod_l+0x8b8>
 8004f1e:	4613      	mov	r3, r2
 8004f20:	e7e6      	b.n	8004ef0 <_strtod_l+0x8b8>
 8004f22:	ea53 0308 	orrs.w	r3, r3, r8
 8004f26:	d081      	beq.n	8004e2c <_strtod_l+0x7f4>
 8004f28:	b1e5      	cbz	r5, 8004f64 <_strtod_l+0x92c>
 8004f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f2c:	421d      	tst	r5, r3
 8004f2e:	d0ef      	beq.n	8004f10 <_strtod_l+0x8d8>
 8004f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f32:	4640      	mov	r0, r8
 8004f34:	4649      	mov	r1, r9
 8004f36:	9a05      	ldr	r2, [sp, #20]
 8004f38:	b1c3      	cbz	r3, 8004f6c <_strtod_l+0x934>
 8004f3a:	f7ff fb5b 	bl	80045f4 <sulp>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f46:	f7fb f911 	bl	800016c <__adddf3>
 8004f4a:	4680      	mov	r8, r0
 8004f4c:	4689      	mov	r9, r1
 8004f4e:	e7df      	b.n	8004f10 <_strtod_l+0x8d8>
 8004f50:	4013      	ands	r3, r2
 8004f52:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004f56:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004f5a:	f04f 38ff 	mov.w	r8, #4294967295
 8004f5e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004f62:	e7d5      	b.n	8004f10 <_strtod_l+0x8d8>
 8004f64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f66:	ea13 0f08 	tst.w	r3, r8
 8004f6a:	e7e0      	b.n	8004f2e <_strtod_l+0x8f6>
 8004f6c:	f7ff fb42 	bl	80045f4 <sulp>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f78:	f7fb f8f6 	bl	8000168 <__aeabi_dsub>
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2300      	movs	r3, #0
 8004f80:	4680      	mov	r8, r0
 8004f82:	4689      	mov	r9, r1
 8004f84:	f7fb fd10 	bl	80009a8 <__aeabi_dcmpeq>
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	d0c1      	beq.n	8004f10 <_strtod_l+0x8d8>
 8004f8c:	e608      	b.n	8004ba0 <_strtod_l+0x568>
 8004f8e:	4658      	mov	r0, fp
 8004f90:	9904      	ldr	r1, [sp, #16]
 8004f92:	f001 f911 	bl	80061b8 <__ratio>
 8004f96:	2200      	movs	r2, #0
 8004f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f9c:	4606      	mov	r6, r0
 8004f9e:	460f      	mov	r7, r1
 8004fa0:	f7fb fd16 	bl	80009d0 <__aeabi_dcmple>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d070      	beq.n	800508a <_strtod_l+0xa52>
 8004fa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d042      	beq.n	8005034 <_strtod_l+0x9fc>
 8004fae:	2600      	movs	r6, #0
 8004fb0:	4f62      	ldr	r7, [pc, #392]	; (800513c <_strtod_l+0xb04>)
 8004fb2:	4d62      	ldr	r5, [pc, #392]	; (800513c <_strtod_l+0xb04>)
 8004fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fba:	0d1b      	lsrs	r3, r3, #20
 8004fbc:	051b      	lsls	r3, r3, #20
 8004fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004fc2:	4b5f      	ldr	r3, [pc, #380]	; (8005140 <_strtod_l+0xb08>)
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	f040 80c3 	bne.w	8005150 <_strtod_l+0xb18>
 8004fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fcc:	4640      	mov	r0, r8
 8004fce:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	f001 f81a 	bl	800600c <__ulp>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4630      	mov	r0, r6
 8004fde:	4639      	mov	r1, r7
 8004fe0:	f7fb fa7a 	bl	80004d8 <__aeabi_dmul>
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	f7fb f8c0 	bl	800016c <__adddf3>
 8004fec:	460b      	mov	r3, r1
 8004fee:	4951      	ldr	r1, [pc, #324]	; (8005134 <_strtod_l+0xafc>)
 8004ff0:	4a54      	ldr	r2, [pc, #336]	; (8005144 <_strtod_l+0xb0c>)
 8004ff2:	4019      	ands	r1, r3
 8004ff4:	4291      	cmp	r1, r2
 8004ff6:	4680      	mov	r8, r0
 8004ff8:	d95d      	bls.n	80050b6 <_strtod_l+0xa7e>
 8004ffa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ffc:	4b4e      	ldr	r3, [pc, #312]	; (8005138 <_strtod_l+0xb00>)
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d103      	bne.n	800500a <_strtod_l+0x9d2>
 8005002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005004:	3301      	adds	r3, #1
 8005006:	f43f ad56 	beq.w	8004ab6 <_strtod_l+0x47e>
 800500a:	f04f 38ff 	mov.w	r8, #4294967295
 800500e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005138 <_strtod_l+0xb00>
 8005012:	4650      	mov	r0, sl
 8005014:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005016:	f000 fcc9 	bl	80059ac <_Bfree>
 800501a:	4650      	mov	r0, sl
 800501c:	9906      	ldr	r1, [sp, #24]
 800501e:	f000 fcc5 	bl	80059ac <_Bfree>
 8005022:	4650      	mov	r0, sl
 8005024:	9904      	ldr	r1, [sp, #16]
 8005026:	f000 fcc1 	bl	80059ac <_Bfree>
 800502a:	4659      	mov	r1, fp
 800502c:	4650      	mov	r0, sl
 800502e:	f000 fcbd 	bl	80059ac <_Bfree>
 8005032:	e627      	b.n	8004c84 <_strtod_l+0x64c>
 8005034:	f1b8 0f00 	cmp.w	r8, #0
 8005038:	d119      	bne.n	800506e <_strtod_l+0xa36>
 800503a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800503c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005040:	b9e3      	cbnz	r3, 800507c <_strtod_l+0xa44>
 8005042:	2200      	movs	r2, #0
 8005044:	4630      	mov	r0, r6
 8005046:	4639      	mov	r1, r7
 8005048:	4b3c      	ldr	r3, [pc, #240]	; (800513c <_strtod_l+0xb04>)
 800504a:	f7fb fcb7 	bl	80009bc <__aeabi_dcmplt>
 800504e:	b9c8      	cbnz	r0, 8005084 <_strtod_l+0xa4c>
 8005050:	2200      	movs	r2, #0
 8005052:	4630      	mov	r0, r6
 8005054:	4639      	mov	r1, r7
 8005056:	4b3c      	ldr	r3, [pc, #240]	; (8005148 <_strtod_l+0xb10>)
 8005058:	f7fb fa3e 	bl	80004d8 <__aeabi_dmul>
 800505c:	4604      	mov	r4, r0
 800505e:	460d      	mov	r5, r1
 8005060:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005064:	9416      	str	r4, [sp, #88]	; 0x58
 8005066:	9317      	str	r3, [sp, #92]	; 0x5c
 8005068:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800506c:	e7a2      	b.n	8004fb4 <_strtod_l+0x97c>
 800506e:	f1b8 0f01 	cmp.w	r8, #1
 8005072:	d103      	bne.n	800507c <_strtod_l+0xa44>
 8005074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005076:	2b00      	cmp	r3, #0
 8005078:	f43f ad92 	beq.w	8004ba0 <_strtod_l+0x568>
 800507c:	2600      	movs	r6, #0
 800507e:	2400      	movs	r4, #0
 8005080:	4f32      	ldr	r7, [pc, #200]	; (800514c <_strtod_l+0xb14>)
 8005082:	e796      	b.n	8004fb2 <_strtod_l+0x97a>
 8005084:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005086:	4d30      	ldr	r5, [pc, #192]	; (8005148 <_strtod_l+0xb10>)
 8005088:	e7ea      	b.n	8005060 <_strtod_l+0xa28>
 800508a:	4b2f      	ldr	r3, [pc, #188]	; (8005148 <_strtod_l+0xb10>)
 800508c:	2200      	movs	r2, #0
 800508e:	4630      	mov	r0, r6
 8005090:	4639      	mov	r1, r7
 8005092:	f7fb fa21 	bl	80004d8 <__aeabi_dmul>
 8005096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005098:	4604      	mov	r4, r0
 800509a:	460d      	mov	r5, r1
 800509c:	b933      	cbnz	r3, 80050ac <_strtod_l+0xa74>
 800509e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050a2:	9010      	str	r0, [sp, #64]	; 0x40
 80050a4:	9311      	str	r3, [sp, #68]	; 0x44
 80050a6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80050aa:	e783      	b.n	8004fb4 <_strtod_l+0x97c>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80050b4:	e7f7      	b.n	80050a6 <_strtod_l+0xa6e>
 80050b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80050ba:	9b05      	ldr	r3, [sp, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1a8      	bne.n	8005012 <_strtod_l+0x9da>
 80050c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80050c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050c6:	0d1b      	lsrs	r3, r3, #20
 80050c8:	051b      	lsls	r3, r3, #20
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d1a1      	bne.n	8005012 <_strtod_l+0x9da>
 80050ce:	4620      	mov	r0, r4
 80050d0:	4629      	mov	r1, r5
 80050d2:	f7fb fce3 	bl	8000a9c <__aeabi_d2lz>
 80050d6:	f7fb f9d1 	bl	800047c <__aeabi_l2d>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4620      	mov	r0, r4
 80050e0:	4629      	mov	r1, r5
 80050e2:	f7fb f841 	bl	8000168 <__aeabi_dsub>
 80050e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050ec:	ea43 0308 	orr.w	r3, r3, r8
 80050f0:	4313      	orrs	r3, r2
 80050f2:	4604      	mov	r4, r0
 80050f4:	460d      	mov	r5, r1
 80050f6:	d066      	beq.n	80051c6 <_strtod_l+0xb8e>
 80050f8:	a309      	add	r3, pc, #36	; (adr r3, 8005120 <_strtod_l+0xae8>)
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	f7fb fc5d 	bl	80009bc <__aeabi_dcmplt>
 8005102:	2800      	cmp	r0, #0
 8005104:	f47f ace2 	bne.w	8004acc <_strtod_l+0x494>
 8005108:	a307      	add	r3, pc, #28	; (adr r3, 8005128 <_strtod_l+0xaf0>)
 800510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510e:	4620      	mov	r0, r4
 8005110:	4629      	mov	r1, r5
 8005112:	f7fb fc71 	bl	80009f8 <__aeabi_dcmpgt>
 8005116:	2800      	cmp	r0, #0
 8005118:	f43f af7b 	beq.w	8005012 <_strtod_l+0x9da>
 800511c:	e4d6      	b.n	8004acc <_strtod_l+0x494>
 800511e:	bf00      	nop
 8005120:	94a03595 	.word	0x94a03595
 8005124:	3fdfffff 	.word	0x3fdfffff
 8005128:	35afe535 	.word	0x35afe535
 800512c:	3fe00000 	.word	0x3fe00000
 8005130:	000fffff 	.word	0x000fffff
 8005134:	7ff00000 	.word	0x7ff00000
 8005138:	7fefffff 	.word	0x7fefffff
 800513c:	3ff00000 	.word	0x3ff00000
 8005140:	7fe00000 	.word	0x7fe00000
 8005144:	7c9fffff 	.word	0x7c9fffff
 8005148:	3fe00000 	.word	0x3fe00000
 800514c:	bff00000 	.word	0xbff00000
 8005150:	9b05      	ldr	r3, [sp, #20]
 8005152:	b313      	cbz	r3, 800519a <_strtod_l+0xb62>
 8005154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005156:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800515a:	d81e      	bhi.n	800519a <_strtod_l+0xb62>
 800515c:	a326      	add	r3, pc, #152	; (adr r3, 80051f8 <_strtod_l+0xbc0>)
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	4620      	mov	r0, r4
 8005164:	4629      	mov	r1, r5
 8005166:	f7fb fc33 	bl	80009d0 <__aeabi_dcmple>
 800516a:	b190      	cbz	r0, 8005192 <_strtod_l+0xb5a>
 800516c:	4629      	mov	r1, r5
 800516e:	4620      	mov	r0, r4
 8005170:	f7fb fc74 	bl	8000a5c <__aeabi_d2uiz>
 8005174:	2801      	cmp	r0, #1
 8005176:	bf38      	it	cc
 8005178:	2001      	movcc	r0, #1
 800517a:	f7fb f933 	bl	80003e4 <__aeabi_ui2d>
 800517e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005180:	4604      	mov	r4, r0
 8005182:	460d      	mov	r5, r1
 8005184:	b9d3      	cbnz	r3, 80051bc <_strtod_l+0xb84>
 8005186:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800518a:	9012      	str	r0, [sp, #72]	; 0x48
 800518c:	9313      	str	r3, [sp, #76]	; 0x4c
 800518e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005192:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005194:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005198:	1a9f      	subs	r7, r3, r2
 800519a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800519e:	f000 ff35 	bl	800600c <__ulp>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4630      	mov	r0, r6
 80051a8:	4639      	mov	r1, r7
 80051aa:	f7fb f995 	bl	80004d8 <__aeabi_dmul>
 80051ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051b2:	f7fa ffdb 	bl	800016c <__adddf3>
 80051b6:	4680      	mov	r8, r0
 80051b8:	4689      	mov	r9, r1
 80051ba:	e77e      	b.n	80050ba <_strtod_l+0xa82>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80051c4:	e7e3      	b.n	800518e <_strtod_l+0xb56>
 80051c6:	a30e      	add	r3, pc, #56	; (adr r3, 8005200 <_strtod_l+0xbc8>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f7fb fbf6 	bl	80009bc <__aeabi_dcmplt>
 80051d0:	e7a1      	b.n	8005116 <_strtod_l+0xade>
 80051d2:	2300      	movs	r3, #0
 80051d4:	930a      	str	r3, [sp, #40]	; 0x28
 80051d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	f7ff ba71 	b.w	80046c2 <_strtod_l+0x8a>
 80051e0:	2a65      	cmp	r2, #101	; 0x65
 80051e2:	f43f ab63 	beq.w	80048ac <_strtod_l+0x274>
 80051e6:	2a45      	cmp	r2, #69	; 0x45
 80051e8:	f43f ab60 	beq.w	80048ac <_strtod_l+0x274>
 80051ec:	2301      	movs	r3, #1
 80051ee:	f7ff bb95 	b.w	800491c <_strtod_l+0x2e4>
 80051f2:	bf00      	nop
 80051f4:	f3af 8000 	nop.w
 80051f8:	ffc00000 	.word	0xffc00000
 80051fc:	41dfffff 	.word	0x41dfffff
 8005200:	94a03595 	.word	0x94a03595
 8005204:	3fcfffff 	.word	0x3fcfffff

08005208 <strtod>:
 8005208:	460a      	mov	r2, r1
 800520a:	4601      	mov	r1, r0
 800520c:	4802      	ldr	r0, [pc, #8]	; (8005218 <strtod+0x10>)
 800520e:	4b03      	ldr	r3, [pc, #12]	; (800521c <strtod+0x14>)
 8005210:	6800      	ldr	r0, [r0, #0]
 8005212:	f7ff ba11 	b.w	8004638 <_strtod_l>
 8005216:	bf00      	nop
 8005218:	20000010 	.word	0x20000010
 800521c:	20000078 	.word	0x20000078

08005220 <rshift>:
 8005220:	6903      	ldr	r3, [r0, #16]
 8005222:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005226:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800522a:	f100 0414 	add.w	r4, r0, #20
 800522e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005232:	dd46      	ble.n	80052c2 <rshift+0xa2>
 8005234:	f011 011f 	ands.w	r1, r1, #31
 8005238:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800523c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005240:	d10c      	bne.n	800525c <rshift+0x3c>
 8005242:	4629      	mov	r1, r5
 8005244:	f100 0710 	add.w	r7, r0, #16
 8005248:	42b1      	cmp	r1, r6
 800524a:	d335      	bcc.n	80052b8 <rshift+0x98>
 800524c:	1a9b      	subs	r3, r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	1eea      	subs	r2, r5, #3
 8005252:	4296      	cmp	r6, r2
 8005254:	bf38      	it	cc
 8005256:	2300      	movcc	r3, #0
 8005258:	4423      	add	r3, r4
 800525a:	e015      	b.n	8005288 <rshift+0x68>
 800525c:	46a1      	mov	r9, r4
 800525e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005262:	f1c1 0820 	rsb	r8, r1, #32
 8005266:	40cf      	lsrs	r7, r1
 8005268:	f105 0e04 	add.w	lr, r5, #4
 800526c:	4576      	cmp	r6, lr
 800526e:	46f4      	mov	ip, lr
 8005270:	d816      	bhi.n	80052a0 <rshift+0x80>
 8005272:	1a9a      	subs	r2, r3, r2
 8005274:	0092      	lsls	r2, r2, #2
 8005276:	3a04      	subs	r2, #4
 8005278:	3501      	adds	r5, #1
 800527a:	42ae      	cmp	r6, r5
 800527c:	bf38      	it	cc
 800527e:	2200      	movcc	r2, #0
 8005280:	18a3      	adds	r3, r4, r2
 8005282:	50a7      	str	r7, [r4, r2]
 8005284:	b107      	cbz	r7, 8005288 <rshift+0x68>
 8005286:	3304      	adds	r3, #4
 8005288:	42a3      	cmp	r3, r4
 800528a:	eba3 0204 	sub.w	r2, r3, r4
 800528e:	bf08      	it	eq
 8005290:	2300      	moveq	r3, #0
 8005292:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005296:	6102      	str	r2, [r0, #16]
 8005298:	bf08      	it	eq
 800529a:	6143      	streq	r3, [r0, #20]
 800529c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052a0:	f8dc c000 	ldr.w	ip, [ip]
 80052a4:	fa0c fc08 	lsl.w	ip, ip, r8
 80052a8:	ea4c 0707 	orr.w	r7, ip, r7
 80052ac:	f849 7b04 	str.w	r7, [r9], #4
 80052b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80052b4:	40cf      	lsrs	r7, r1
 80052b6:	e7d9      	b.n	800526c <rshift+0x4c>
 80052b8:	f851 cb04 	ldr.w	ip, [r1], #4
 80052bc:	f847 cf04 	str.w	ip, [r7, #4]!
 80052c0:	e7c2      	b.n	8005248 <rshift+0x28>
 80052c2:	4623      	mov	r3, r4
 80052c4:	e7e0      	b.n	8005288 <rshift+0x68>

080052c6 <__hexdig_fun>:
 80052c6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80052ca:	2b09      	cmp	r3, #9
 80052cc:	d802      	bhi.n	80052d4 <__hexdig_fun+0xe>
 80052ce:	3820      	subs	r0, #32
 80052d0:	b2c0      	uxtb	r0, r0
 80052d2:	4770      	bx	lr
 80052d4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80052d8:	2b05      	cmp	r3, #5
 80052da:	d801      	bhi.n	80052e0 <__hexdig_fun+0x1a>
 80052dc:	3847      	subs	r0, #71	; 0x47
 80052de:	e7f7      	b.n	80052d0 <__hexdig_fun+0xa>
 80052e0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80052e4:	2b05      	cmp	r3, #5
 80052e6:	d801      	bhi.n	80052ec <__hexdig_fun+0x26>
 80052e8:	3827      	subs	r0, #39	; 0x27
 80052ea:	e7f1      	b.n	80052d0 <__hexdig_fun+0xa>
 80052ec:	2000      	movs	r0, #0
 80052ee:	4770      	bx	lr

080052f0 <__gethex>:
 80052f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f4:	b08b      	sub	sp, #44	; 0x2c
 80052f6:	9305      	str	r3, [sp, #20]
 80052f8:	4bb2      	ldr	r3, [pc, #712]	; (80055c4 <__gethex+0x2d4>)
 80052fa:	9002      	str	r0, [sp, #8]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	468b      	mov	fp, r1
 8005300:	4618      	mov	r0, r3
 8005302:	4690      	mov	r8, r2
 8005304:	9303      	str	r3, [sp, #12]
 8005306:	f7fa ff23 	bl	8000150 <strlen>
 800530a:	4682      	mov	sl, r0
 800530c:	9b03      	ldr	r3, [sp, #12]
 800530e:	f8db 2000 	ldr.w	r2, [fp]
 8005312:	4403      	add	r3, r0
 8005314:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005318:	9306      	str	r3, [sp, #24]
 800531a:	1c93      	adds	r3, r2, #2
 800531c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005320:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005324:	32fe      	adds	r2, #254	; 0xfe
 8005326:	18d1      	adds	r1, r2, r3
 8005328:	461f      	mov	r7, r3
 800532a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800532e:	9101      	str	r1, [sp, #4]
 8005330:	2830      	cmp	r0, #48	; 0x30
 8005332:	d0f8      	beq.n	8005326 <__gethex+0x36>
 8005334:	f7ff ffc7 	bl	80052c6 <__hexdig_fun>
 8005338:	4604      	mov	r4, r0
 800533a:	2800      	cmp	r0, #0
 800533c:	d13a      	bne.n	80053b4 <__gethex+0xc4>
 800533e:	4652      	mov	r2, sl
 8005340:	4638      	mov	r0, r7
 8005342:	9903      	ldr	r1, [sp, #12]
 8005344:	f001 f868 	bl	8006418 <strncmp>
 8005348:	4605      	mov	r5, r0
 800534a:	2800      	cmp	r0, #0
 800534c:	d166      	bne.n	800541c <__gethex+0x12c>
 800534e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005352:	eb07 060a 	add.w	r6, r7, sl
 8005356:	f7ff ffb6 	bl	80052c6 <__hexdig_fun>
 800535a:	2800      	cmp	r0, #0
 800535c:	d060      	beq.n	8005420 <__gethex+0x130>
 800535e:	4633      	mov	r3, r6
 8005360:	7818      	ldrb	r0, [r3, #0]
 8005362:	461f      	mov	r7, r3
 8005364:	2830      	cmp	r0, #48	; 0x30
 8005366:	f103 0301 	add.w	r3, r3, #1
 800536a:	d0f9      	beq.n	8005360 <__gethex+0x70>
 800536c:	f7ff ffab 	bl	80052c6 <__hexdig_fun>
 8005370:	2301      	movs	r3, #1
 8005372:	fab0 f480 	clz	r4, r0
 8005376:	4635      	mov	r5, r6
 8005378:	0964      	lsrs	r4, r4, #5
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	463a      	mov	r2, r7
 800537e:	4616      	mov	r6, r2
 8005380:	7830      	ldrb	r0, [r6, #0]
 8005382:	3201      	adds	r2, #1
 8005384:	f7ff ff9f 	bl	80052c6 <__hexdig_fun>
 8005388:	2800      	cmp	r0, #0
 800538a:	d1f8      	bne.n	800537e <__gethex+0x8e>
 800538c:	4652      	mov	r2, sl
 800538e:	4630      	mov	r0, r6
 8005390:	9903      	ldr	r1, [sp, #12]
 8005392:	f001 f841 	bl	8006418 <strncmp>
 8005396:	b980      	cbnz	r0, 80053ba <__gethex+0xca>
 8005398:	b94d      	cbnz	r5, 80053ae <__gethex+0xbe>
 800539a:	eb06 050a 	add.w	r5, r6, sl
 800539e:	462a      	mov	r2, r5
 80053a0:	4616      	mov	r6, r2
 80053a2:	7830      	ldrb	r0, [r6, #0]
 80053a4:	3201      	adds	r2, #1
 80053a6:	f7ff ff8e 	bl	80052c6 <__hexdig_fun>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d1f8      	bne.n	80053a0 <__gethex+0xb0>
 80053ae:	1bad      	subs	r5, r5, r6
 80053b0:	00ad      	lsls	r5, r5, #2
 80053b2:	e004      	b.n	80053be <__gethex+0xce>
 80053b4:	2400      	movs	r4, #0
 80053b6:	4625      	mov	r5, r4
 80053b8:	e7e0      	b.n	800537c <__gethex+0x8c>
 80053ba:	2d00      	cmp	r5, #0
 80053bc:	d1f7      	bne.n	80053ae <__gethex+0xbe>
 80053be:	7833      	ldrb	r3, [r6, #0]
 80053c0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80053c4:	2b50      	cmp	r3, #80	; 0x50
 80053c6:	d139      	bne.n	800543c <__gethex+0x14c>
 80053c8:	7873      	ldrb	r3, [r6, #1]
 80053ca:	2b2b      	cmp	r3, #43	; 0x2b
 80053cc:	d02a      	beq.n	8005424 <__gethex+0x134>
 80053ce:	2b2d      	cmp	r3, #45	; 0x2d
 80053d0:	d02c      	beq.n	800542c <__gethex+0x13c>
 80053d2:	f04f 0900 	mov.w	r9, #0
 80053d6:	1c71      	adds	r1, r6, #1
 80053d8:	7808      	ldrb	r0, [r1, #0]
 80053da:	f7ff ff74 	bl	80052c6 <__hexdig_fun>
 80053de:	1e43      	subs	r3, r0, #1
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b18      	cmp	r3, #24
 80053e4:	d82a      	bhi.n	800543c <__gethex+0x14c>
 80053e6:	f1a0 0210 	sub.w	r2, r0, #16
 80053ea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80053ee:	f7ff ff6a 	bl	80052c6 <__hexdig_fun>
 80053f2:	1e43      	subs	r3, r0, #1
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b18      	cmp	r3, #24
 80053f8:	d91b      	bls.n	8005432 <__gethex+0x142>
 80053fa:	f1b9 0f00 	cmp.w	r9, #0
 80053fe:	d000      	beq.n	8005402 <__gethex+0x112>
 8005400:	4252      	negs	r2, r2
 8005402:	4415      	add	r5, r2
 8005404:	f8cb 1000 	str.w	r1, [fp]
 8005408:	b1d4      	cbz	r4, 8005440 <__gethex+0x150>
 800540a:	9b01      	ldr	r3, [sp, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	bf14      	ite	ne
 8005410:	2700      	movne	r7, #0
 8005412:	2706      	moveq	r7, #6
 8005414:	4638      	mov	r0, r7
 8005416:	b00b      	add	sp, #44	; 0x2c
 8005418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800541c:	463e      	mov	r6, r7
 800541e:	4625      	mov	r5, r4
 8005420:	2401      	movs	r4, #1
 8005422:	e7cc      	b.n	80053be <__gethex+0xce>
 8005424:	f04f 0900 	mov.w	r9, #0
 8005428:	1cb1      	adds	r1, r6, #2
 800542a:	e7d5      	b.n	80053d8 <__gethex+0xe8>
 800542c:	f04f 0901 	mov.w	r9, #1
 8005430:	e7fa      	b.n	8005428 <__gethex+0x138>
 8005432:	230a      	movs	r3, #10
 8005434:	fb03 0202 	mla	r2, r3, r2, r0
 8005438:	3a10      	subs	r2, #16
 800543a:	e7d6      	b.n	80053ea <__gethex+0xfa>
 800543c:	4631      	mov	r1, r6
 800543e:	e7e1      	b.n	8005404 <__gethex+0x114>
 8005440:	4621      	mov	r1, r4
 8005442:	1bf3      	subs	r3, r6, r7
 8005444:	3b01      	subs	r3, #1
 8005446:	2b07      	cmp	r3, #7
 8005448:	dc0a      	bgt.n	8005460 <__gethex+0x170>
 800544a:	9802      	ldr	r0, [sp, #8]
 800544c:	f000 fa6e 	bl	800592c <_Balloc>
 8005450:	4604      	mov	r4, r0
 8005452:	b940      	cbnz	r0, 8005466 <__gethex+0x176>
 8005454:	4602      	mov	r2, r0
 8005456:	21de      	movs	r1, #222	; 0xde
 8005458:	4b5b      	ldr	r3, [pc, #364]	; (80055c8 <__gethex+0x2d8>)
 800545a:	485c      	ldr	r0, [pc, #368]	; (80055cc <__gethex+0x2dc>)
 800545c:	f000 fffe 	bl	800645c <__assert_func>
 8005460:	3101      	adds	r1, #1
 8005462:	105b      	asrs	r3, r3, #1
 8005464:	e7ef      	b.n	8005446 <__gethex+0x156>
 8005466:	f04f 0b00 	mov.w	fp, #0
 800546a:	f100 0914 	add.w	r9, r0, #20
 800546e:	f1ca 0301 	rsb	r3, sl, #1
 8005472:	f8cd 9010 	str.w	r9, [sp, #16]
 8005476:	f8cd b004 	str.w	fp, [sp, #4]
 800547a:	9308      	str	r3, [sp, #32]
 800547c:	42b7      	cmp	r7, r6
 800547e:	d33f      	bcc.n	8005500 <__gethex+0x210>
 8005480:	9f04      	ldr	r7, [sp, #16]
 8005482:	9b01      	ldr	r3, [sp, #4]
 8005484:	f847 3b04 	str.w	r3, [r7], #4
 8005488:	eba7 0709 	sub.w	r7, r7, r9
 800548c:	10bf      	asrs	r7, r7, #2
 800548e:	6127      	str	r7, [r4, #16]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fb3d 	bl	8005b10 <__hi0bits>
 8005496:	017f      	lsls	r7, r7, #5
 8005498:	f8d8 6000 	ldr.w	r6, [r8]
 800549c:	1a3f      	subs	r7, r7, r0
 800549e:	42b7      	cmp	r7, r6
 80054a0:	dd62      	ble.n	8005568 <__gethex+0x278>
 80054a2:	1bbf      	subs	r7, r7, r6
 80054a4:	4639      	mov	r1, r7
 80054a6:	4620      	mov	r0, r4
 80054a8:	f000 fed7 	bl	800625a <__any_on>
 80054ac:	4682      	mov	sl, r0
 80054ae:	b1a8      	cbz	r0, 80054dc <__gethex+0x1ec>
 80054b0:	f04f 0a01 	mov.w	sl, #1
 80054b4:	1e7b      	subs	r3, r7, #1
 80054b6:	1159      	asrs	r1, r3, #5
 80054b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80054bc:	f003 021f 	and.w	r2, r3, #31
 80054c0:	fa0a f202 	lsl.w	r2, sl, r2
 80054c4:	420a      	tst	r2, r1
 80054c6:	d009      	beq.n	80054dc <__gethex+0x1ec>
 80054c8:	4553      	cmp	r3, sl
 80054ca:	dd05      	ble.n	80054d8 <__gethex+0x1e8>
 80054cc:	4620      	mov	r0, r4
 80054ce:	1eb9      	subs	r1, r7, #2
 80054d0:	f000 fec3 	bl	800625a <__any_on>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d144      	bne.n	8005562 <__gethex+0x272>
 80054d8:	f04f 0a02 	mov.w	sl, #2
 80054dc:	4639      	mov	r1, r7
 80054de:	4620      	mov	r0, r4
 80054e0:	f7ff fe9e 	bl	8005220 <rshift>
 80054e4:	443d      	add	r5, r7
 80054e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80054ea:	42ab      	cmp	r3, r5
 80054ec:	da4a      	bge.n	8005584 <__gethex+0x294>
 80054ee:	4621      	mov	r1, r4
 80054f0:	9802      	ldr	r0, [sp, #8]
 80054f2:	f000 fa5b 	bl	80059ac <_Bfree>
 80054f6:	2300      	movs	r3, #0
 80054f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80054fa:	27a3      	movs	r7, #163	; 0xa3
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e789      	b.n	8005414 <__gethex+0x124>
 8005500:	1e73      	subs	r3, r6, #1
 8005502:	9a06      	ldr	r2, [sp, #24]
 8005504:	9307      	str	r3, [sp, #28]
 8005506:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800550a:	4293      	cmp	r3, r2
 800550c:	d019      	beq.n	8005542 <__gethex+0x252>
 800550e:	f1bb 0f20 	cmp.w	fp, #32
 8005512:	d107      	bne.n	8005524 <__gethex+0x234>
 8005514:	9b04      	ldr	r3, [sp, #16]
 8005516:	9a01      	ldr	r2, [sp, #4]
 8005518:	f843 2b04 	str.w	r2, [r3], #4
 800551c:	9304      	str	r3, [sp, #16]
 800551e:	2300      	movs	r3, #0
 8005520:	469b      	mov	fp, r3
 8005522:	9301      	str	r3, [sp, #4]
 8005524:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005528:	f7ff fecd 	bl	80052c6 <__hexdig_fun>
 800552c:	9b01      	ldr	r3, [sp, #4]
 800552e:	f000 000f 	and.w	r0, r0, #15
 8005532:	fa00 f00b 	lsl.w	r0, r0, fp
 8005536:	4303      	orrs	r3, r0
 8005538:	9301      	str	r3, [sp, #4]
 800553a:	f10b 0b04 	add.w	fp, fp, #4
 800553e:	9b07      	ldr	r3, [sp, #28]
 8005540:	e00d      	b.n	800555e <__gethex+0x26e>
 8005542:	9a08      	ldr	r2, [sp, #32]
 8005544:	1e73      	subs	r3, r6, #1
 8005546:	4413      	add	r3, r2
 8005548:	42bb      	cmp	r3, r7
 800554a:	d3e0      	bcc.n	800550e <__gethex+0x21e>
 800554c:	4618      	mov	r0, r3
 800554e:	4652      	mov	r2, sl
 8005550:	9903      	ldr	r1, [sp, #12]
 8005552:	9309      	str	r3, [sp, #36]	; 0x24
 8005554:	f000 ff60 	bl	8006418 <strncmp>
 8005558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800555a:	2800      	cmp	r0, #0
 800555c:	d1d7      	bne.n	800550e <__gethex+0x21e>
 800555e:	461e      	mov	r6, r3
 8005560:	e78c      	b.n	800547c <__gethex+0x18c>
 8005562:	f04f 0a03 	mov.w	sl, #3
 8005566:	e7b9      	b.n	80054dc <__gethex+0x1ec>
 8005568:	da09      	bge.n	800557e <__gethex+0x28e>
 800556a:	1bf7      	subs	r7, r6, r7
 800556c:	4621      	mov	r1, r4
 800556e:	463a      	mov	r2, r7
 8005570:	9802      	ldr	r0, [sp, #8]
 8005572:	f000 fc33 	bl	8005ddc <__lshift>
 8005576:	4604      	mov	r4, r0
 8005578:	1bed      	subs	r5, r5, r7
 800557a:	f100 0914 	add.w	r9, r0, #20
 800557e:	f04f 0a00 	mov.w	sl, #0
 8005582:	e7b0      	b.n	80054e6 <__gethex+0x1f6>
 8005584:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005588:	42a8      	cmp	r0, r5
 800558a:	dd72      	ble.n	8005672 <__gethex+0x382>
 800558c:	1b45      	subs	r5, r0, r5
 800558e:	42ae      	cmp	r6, r5
 8005590:	dc35      	bgt.n	80055fe <__gethex+0x30e>
 8005592:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005596:	2b02      	cmp	r3, #2
 8005598:	d029      	beq.n	80055ee <__gethex+0x2fe>
 800559a:	2b03      	cmp	r3, #3
 800559c:	d02b      	beq.n	80055f6 <__gethex+0x306>
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d11c      	bne.n	80055dc <__gethex+0x2ec>
 80055a2:	42ae      	cmp	r6, r5
 80055a4:	d11a      	bne.n	80055dc <__gethex+0x2ec>
 80055a6:	2e01      	cmp	r6, #1
 80055a8:	d112      	bne.n	80055d0 <__gethex+0x2e0>
 80055aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80055ae:	9a05      	ldr	r2, [sp, #20]
 80055b0:	2762      	movs	r7, #98	; 0x62
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	2301      	movs	r3, #1
 80055b6:	6123      	str	r3, [r4, #16]
 80055b8:	f8c9 3000 	str.w	r3, [r9]
 80055bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80055be:	601c      	str	r4, [r3, #0]
 80055c0:	e728      	b.n	8005414 <__gethex+0x124>
 80055c2:	bf00      	nop
 80055c4:	08007448 	.word	0x08007448
 80055c8:	080073d0 	.word	0x080073d0
 80055cc:	080073e1 	.word	0x080073e1
 80055d0:	4620      	mov	r0, r4
 80055d2:	1e71      	subs	r1, r6, #1
 80055d4:	f000 fe41 	bl	800625a <__any_on>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d1e6      	bne.n	80055aa <__gethex+0x2ba>
 80055dc:	4621      	mov	r1, r4
 80055de:	9802      	ldr	r0, [sp, #8]
 80055e0:	f000 f9e4 	bl	80059ac <_Bfree>
 80055e4:	2300      	movs	r3, #0
 80055e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80055e8:	2750      	movs	r7, #80	; 0x50
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	e712      	b.n	8005414 <__gethex+0x124>
 80055ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f3      	bne.n	80055dc <__gethex+0x2ec>
 80055f4:	e7d9      	b.n	80055aa <__gethex+0x2ba>
 80055f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1d6      	bne.n	80055aa <__gethex+0x2ba>
 80055fc:	e7ee      	b.n	80055dc <__gethex+0x2ec>
 80055fe:	1e6f      	subs	r7, r5, #1
 8005600:	f1ba 0f00 	cmp.w	sl, #0
 8005604:	d132      	bne.n	800566c <__gethex+0x37c>
 8005606:	b127      	cbz	r7, 8005612 <__gethex+0x322>
 8005608:	4639      	mov	r1, r7
 800560a:	4620      	mov	r0, r4
 800560c:	f000 fe25 	bl	800625a <__any_on>
 8005610:	4682      	mov	sl, r0
 8005612:	2101      	movs	r1, #1
 8005614:	117b      	asrs	r3, r7, #5
 8005616:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800561a:	f007 071f 	and.w	r7, r7, #31
 800561e:	fa01 f707 	lsl.w	r7, r1, r7
 8005622:	421f      	tst	r7, r3
 8005624:	f04f 0702 	mov.w	r7, #2
 8005628:	4629      	mov	r1, r5
 800562a:	4620      	mov	r0, r4
 800562c:	bf18      	it	ne
 800562e:	f04a 0a02 	orrne.w	sl, sl, #2
 8005632:	1b76      	subs	r6, r6, r5
 8005634:	f7ff fdf4 	bl	8005220 <rshift>
 8005638:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800563c:	f1ba 0f00 	cmp.w	sl, #0
 8005640:	d048      	beq.n	80056d4 <__gethex+0x3e4>
 8005642:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d015      	beq.n	8005676 <__gethex+0x386>
 800564a:	2b03      	cmp	r3, #3
 800564c:	d017      	beq.n	800567e <__gethex+0x38e>
 800564e:	2b01      	cmp	r3, #1
 8005650:	d109      	bne.n	8005666 <__gethex+0x376>
 8005652:	f01a 0f02 	tst.w	sl, #2
 8005656:	d006      	beq.n	8005666 <__gethex+0x376>
 8005658:	f8d9 0000 	ldr.w	r0, [r9]
 800565c:	ea4a 0a00 	orr.w	sl, sl, r0
 8005660:	f01a 0f01 	tst.w	sl, #1
 8005664:	d10e      	bne.n	8005684 <__gethex+0x394>
 8005666:	f047 0710 	orr.w	r7, r7, #16
 800566a:	e033      	b.n	80056d4 <__gethex+0x3e4>
 800566c:	f04f 0a01 	mov.w	sl, #1
 8005670:	e7cf      	b.n	8005612 <__gethex+0x322>
 8005672:	2701      	movs	r7, #1
 8005674:	e7e2      	b.n	800563c <__gethex+0x34c>
 8005676:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005678:	f1c3 0301 	rsb	r3, r3, #1
 800567c:	9315      	str	r3, [sp, #84]	; 0x54
 800567e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f0      	beq.n	8005666 <__gethex+0x376>
 8005684:	f04f 0c00 	mov.w	ip, #0
 8005688:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800568c:	f104 0314 	add.w	r3, r4, #20
 8005690:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005694:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005698:	4618      	mov	r0, r3
 800569a:	f853 2b04 	ldr.w	r2, [r3], #4
 800569e:	f1b2 3fff 	cmp.w	r2, #4294967295
 80056a2:	d01c      	beq.n	80056de <__gethex+0x3ee>
 80056a4:	3201      	adds	r2, #1
 80056a6:	6002      	str	r2, [r0, #0]
 80056a8:	2f02      	cmp	r7, #2
 80056aa:	f104 0314 	add.w	r3, r4, #20
 80056ae:	d13d      	bne.n	800572c <__gethex+0x43c>
 80056b0:	f8d8 2000 	ldr.w	r2, [r8]
 80056b4:	3a01      	subs	r2, #1
 80056b6:	42b2      	cmp	r2, r6
 80056b8:	d10a      	bne.n	80056d0 <__gethex+0x3e0>
 80056ba:	2201      	movs	r2, #1
 80056bc:	1171      	asrs	r1, r6, #5
 80056be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80056c2:	f006 061f 	and.w	r6, r6, #31
 80056c6:	fa02 f606 	lsl.w	r6, r2, r6
 80056ca:	421e      	tst	r6, r3
 80056cc:	bf18      	it	ne
 80056ce:	4617      	movne	r7, r2
 80056d0:	f047 0720 	orr.w	r7, r7, #32
 80056d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056d6:	601c      	str	r4, [r3, #0]
 80056d8:	9b05      	ldr	r3, [sp, #20]
 80056da:	601d      	str	r5, [r3, #0]
 80056dc:	e69a      	b.n	8005414 <__gethex+0x124>
 80056de:	4299      	cmp	r1, r3
 80056e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80056e4:	d8d8      	bhi.n	8005698 <__gethex+0x3a8>
 80056e6:	68a3      	ldr	r3, [r4, #8]
 80056e8:	459b      	cmp	fp, r3
 80056ea:	db17      	blt.n	800571c <__gethex+0x42c>
 80056ec:	6861      	ldr	r1, [r4, #4]
 80056ee:	9802      	ldr	r0, [sp, #8]
 80056f0:	3101      	adds	r1, #1
 80056f2:	f000 f91b 	bl	800592c <_Balloc>
 80056f6:	4681      	mov	r9, r0
 80056f8:	b918      	cbnz	r0, 8005702 <__gethex+0x412>
 80056fa:	4602      	mov	r2, r0
 80056fc:	2184      	movs	r1, #132	; 0x84
 80056fe:	4b19      	ldr	r3, [pc, #100]	; (8005764 <__gethex+0x474>)
 8005700:	e6ab      	b.n	800545a <__gethex+0x16a>
 8005702:	6922      	ldr	r2, [r4, #16]
 8005704:	f104 010c 	add.w	r1, r4, #12
 8005708:	3202      	adds	r2, #2
 800570a:	0092      	lsls	r2, r2, #2
 800570c:	300c      	adds	r0, #12
 800570e:	f000 f8ff 	bl	8005910 <memcpy>
 8005712:	4621      	mov	r1, r4
 8005714:	9802      	ldr	r0, [sp, #8]
 8005716:	f000 f949 	bl	80059ac <_Bfree>
 800571a:	464c      	mov	r4, r9
 800571c:	6923      	ldr	r3, [r4, #16]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	6122      	str	r2, [r4, #16]
 8005722:	2201      	movs	r2, #1
 8005724:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005728:	615a      	str	r2, [r3, #20]
 800572a:	e7bd      	b.n	80056a8 <__gethex+0x3b8>
 800572c:	6922      	ldr	r2, [r4, #16]
 800572e:	455a      	cmp	r2, fp
 8005730:	dd0b      	ble.n	800574a <__gethex+0x45a>
 8005732:	2101      	movs	r1, #1
 8005734:	4620      	mov	r0, r4
 8005736:	f7ff fd73 	bl	8005220 <rshift>
 800573a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800573e:	3501      	adds	r5, #1
 8005740:	42ab      	cmp	r3, r5
 8005742:	f6ff aed4 	blt.w	80054ee <__gethex+0x1fe>
 8005746:	2701      	movs	r7, #1
 8005748:	e7c2      	b.n	80056d0 <__gethex+0x3e0>
 800574a:	f016 061f 	ands.w	r6, r6, #31
 800574e:	d0fa      	beq.n	8005746 <__gethex+0x456>
 8005750:	4453      	add	r3, sl
 8005752:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005756:	f000 f9db 	bl	8005b10 <__hi0bits>
 800575a:	f1c6 0620 	rsb	r6, r6, #32
 800575e:	42b0      	cmp	r0, r6
 8005760:	dbe7      	blt.n	8005732 <__gethex+0x442>
 8005762:	e7f0      	b.n	8005746 <__gethex+0x456>
 8005764:	080073d0 	.word	0x080073d0

08005768 <L_shift>:
 8005768:	f1c2 0208 	rsb	r2, r2, #8
 800576c:	0092      	lsls	r2, r2, #2
 800576e:	b570      	push	{r4, r5, r6, lr}
 8005770:	f1c2 0620 	rsb	r6, r2, #32
 8005774:	6843      	ldr	r3, [r0, #4]
 8005776:	6804      	ldr	r4, [r0, #0]
 8005778:	fa03 f506 	lsl.w	r5, r3, r6
 800577c:	432c      	orrs	r4, r5
 800577e:	40d3      	lsrs	r3, r2
 8005780:	6004      	str	r4, [r0, #0]
 8005782:	f840 3f04 	str.w	r3, [r0, #4]!
 8005786:	4288      	cmp	r0, r1
 8005788:	d3f4      	bcc.n	8005774 <L_shift+0xc>
 800578a:	bd70      	pop	{r4, r5, r6, pc}

0800578c <__match>:
 800578c:	b530      	push	{r4, r5, lr}
 800578e:	6803      	ldr	r3, [r0, #0]
 8005790:	3301      	adds	r3, #1
 8005792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005796:	b914      	cbnz	r4, 800579e <__match+0x12>
 8005798:	6003      	str	r3, [r0, #0]
 800579a:	2001      	movs	r0, #1
 800579c:	bd30      	pop	{r4, r5, pc}
 800579e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80057a6:	2d19      	cmp	r5, #25
 80057a8:	bf98      	it	ls
 80057aa:	3220      	addls	r2, #32
 80057ac:	42a2      	cmp	r2, r4
 80057ae:	d0f0      	beq.n	8005792 <__match+0x6>
 80057b0:	2000      	movs	r0, #0
 80057b2:	e7f3      	b.n	800579c <__match+0x10>

080057b4 <__hexnan>:
 80057b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b8:	2500      	movs	r5, #0
 80057ba:	680b      	ldr	r3, [r1, #0]
 80057bc:	4682      	mov	sl, r0
 80057be:	115e      	asrs	r6, r3, #5
 80057c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80057c4:	f013 031f 	ands.w	r3, r3, #31
 80057c8:	bf18      	it	ne
 80057ca:	3604      	addne	r6, #4
 80057cc:	1f37      	subs	r7, r6, #4
 80057ce:	46b9      	mov	r9, r7
 80057d0:	463c      	mov	r4, r7
 80057d2:	46ab      	mov	fp, r5
 80057d4:	b087      	sub	sp, #28
 80057d6:	4690      	mov	r8, r2
 80057d8:	6802      	ldr	r2, [r0, #0]
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	f846 5c04 	str.w	r5, [r6, #-4]
 80057e0:	9502      	str	r5, [sp, #8]
 80057e2:	7851      	ldrb	r1, [r2, #1]
 80057e4:	1c53      	adds	r3, r2, #1
 80057e6:	9303      	str	r3, [sp, #12]
 80057e8:	b341      	cbz	r1, 800583c <__hexnan+0x88>
 80057ea:	4608      	mov	r0, r1
 80057ec:	9205      	str	r2, [sp, #20]
 80057ee:	9104      	str	r1, [sp, #16]
 80057f0:	f7ff fd69 	bl	80052c6 <__hexdig_fun>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d14f      	bne.n	8005898 <__hexnan+0xe4>
 80057f8:	9904      	ldr	r1, [sp, #16]
 80057fa:	9a05      	ldr	r2, [sp, #20]
 80057fc:	2920      	cmp	r1, #32
 80057fe:	d818      	bhi.n	8005832 <__hexnan+0x7e>
 8005800:	9b02      	ldr	r3, [sp, #8]
 8005802:	459b      	cmp	fp, r3
 8005804:	dd13      	ble.n	800582e <__hexnan+0x7a>
 8005806:	454c      	cmp	r4, r9
 8005808:	d206      	bcs.n	8005818 <__hexnan+0x64>
 800580a:	2d07      	cmp	r5, #7
 800580c:	dc04      	bgt.n	8005818 <__hexnan+0x64>
 800580e:	462a      	mov	r2, r5
 8005810:	4649      	mov	r1, r9
 8005812:	4620      	mov	r0, r4
 8005814:	f7ff ffa8 	bl	8005768 <L_shift>
 8005818:	4544      	cmp	r4, r8
 800581a:	d950      	bls.n	80058be <__hexnan+0x10a>
 800581c:	2300      	movs	r3, #0
 800581e:	f1a4 0904 	sub.w	r9, r4, #4
 8005822:	f844 3c04 	str.w	r3, [r4, #-4]
 8005826:	461d      	mov	r5, r3
 8005828:	464c      	mov	r4, r9
 800582a:	f8cd b008 	str.w	fp, [sp, #8]
 800582e:	9a03      	ldr	r2, [sp, #12]
 8005830:	e7d7      	b.n	80057e2 <__hexnan+0x2e>
 8005832:	2929      	cmp	r1, #41	; 0x29
 8005834:	d156      	bne.n	80058e4 <__hexnan+0x130>
 8005836:	3202      	adds	r2, #2
 8005838:	f8ca 2000 	str.w	r2, [sl]
 800583c:	f1bb 0f00 	cmp.w	fp, #0
 8005840:	d050      	beq.n	80058e4 <__hexnan+0x130>
 8005842:	454c      	cmp	r4, r9
 8005844:	d206      	bcs.n	8005854 <__hexnan+0xa0>
 8005846:	2d07      	cmp	r5, #7
 8005848:	dc04      	bgt.n	8005854 <__hexnan+0xa0>
 800584a:	462a      	mov	r2, r5
 800584c:	4649      	mov	r1, r9
 800584e:	4620      	mov	r0, r4
 8005850:	f7ff ff8a 	bl	8005768 <L_shift>
 8005854:	4544      	cmp	r4, r8
 8005856:	d934      	bls.n	80058c2 <__hexnan+0x10e>
 8005858:	4623      	mov	r3, r4
 800585a:	f1a8 0204 	sub.w	r2, r8, #4
 800585e:	f853 1b04 	ldr.w	r1, [r3], #4
 8005862:	429f      	cmp	r7, r3
 8005864:	f842 1f04 	str.w	r1, [r2, #4]!
 8005868:	d2f9      	bcs.n	800585e <__hexnan+0xaa>
 800586a:	1b3b      	subs	r3, r7, r4
 800586c:	f023 0303 	bic.w	r3, r3, #3
 8005870:	3304      	adds	r3, #4
 8005872:	3401      	adds	r4, #1
 8005874:	3e03      	subs	r6, #3
 8005876:	42b4      	cmp	r4, r6
 8005878:	bf88      	it	hi
 800587a:	2304      	movhi	r3, #4
 800587c:	2200      	movs	r2, #0
 800587e:	4443      	add	r3, r8
 8005880:	f843 2b04 	str.w	r2, [r3], #4
 8005884:	429f      	cmp	r7, r3
 8005886:	d2fb      	bcs.n	8005880 <__hexnan+0xcc>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	b91b      	cbnz	r3, 8005894 <__hexnan+0xe0>
 800588c:	4547      	cmp	r7, r8
 800588e:	d127      	bne.n	80058e0 <__hexnan+0x12c>
 8005890:	2301      	movs	r3, #1
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	2005      	movs	r0, #5
 8005896:	e026      	b.n	80058e6 <__hexnan+0x132>
 8005898:	3501      	adds	r5, #1
 800589a:	2d08      	cmp	r5, #8
 800589c:	f10b 0b01 	add.w	fp, fp, #1
 80058a0:	dd06      	ble.n	80058b0 <__hexnan+0xfc>
 80058a2:	4544      	cmp	r4, r8
 80058a4:	d9c3      	bls.n	800582e <__hexnan+0x7a>
 80058a6:	2300      	movs	r3, #0
 80058a8:	2501      	movs	r5, #1
 80058aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80058ae:	3c04      	subs	r4, #4
 80058b0:	6822      	ldr	r2, [r4, #0]
 80058b2:	f000 000f 	and.w	r0, r0, #15
 80058b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80058ba:	6022      	str	r2, [r4, #0]
 80058bc:	e7b7      	b.n	800582e <__hexnan+0x7a>
 80058be:	2508      	movs	r5, #8
 80058c0:	e7b5      	b.n	800582e <__hexnan+0x7a>
 80058c2:	9b01      	ldr	r3, [sp, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0df      	beq.n	8005888 <__hexnan+0xd4>
 80058c8:	f04f 32ff 	mov.w	r2, #4294967295
 80058cc:	f1c3 0320 	rsb	r3, r3, #32
 80058d0:	fa22 f303 	lsr.w	r3, r2, r3
 80058d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80058d8:	401a      	ands	r2, r3
 80058da:	f846 2c04 	str.w	r2, [r6, #-4]
 80058de:	e7d3      	b.n	8005888 <__hexnan+0xd4>
 80058e0:	3f04      	subs	r7, #4
 80058e2:	e7d1      	b.n	8005888 <__hexnan+0xd4>
 80058e4:	2004      	movs	r0, #4
 80058e6:	b007      	add	sp, #28
 80058e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080058ec <__ascii_mbtowc>:
 80058ec:	b082      	sub	sp, #8
 80058ee:	b901      	cbnz	r1, 80058f2 <__ascii_mbtowc+0x6>
 80058f0:	a901      	add	r1, sp, #4
 80058f2:	b142      	cbz	r2, 8005906 <__ascii_mbtowc+0x1a>
 80058f4:	b14b      	cbz	r3, 800590a <__ascii_mbtowc+0x1e>
 80058f6:	7813      	ldrb	r3, [r2, #0]
 80058f8:	600b      	str	r3, [r1, #0]
 80058fa:	7812      	ldrb	r2, [r2, #0]
 80058fc:	1e10      	subs	r0, r2, #0
 80058fe:	bf18      	it	ne
 8005900:	2001      	movne	r0, #1
 8005902:	b002      	add	sp, #8
 8005904:	4770      	bx	lr
 8005906:	4610      	mov	r0, r2
 8005908:	e7fb      	b.n	8005902 <__ascii_mbtowc+0x16>
 800590a:	f06f 0001 	mvn.w	r0, #1
 800590e:	e7f8      	b.n	8005902 <__ascii_mbtowc+0x16>

08005910 <memcpy>:
 8005910:	440a      	add	r2, r1
 8005912:	4291      	cmp	r1, r2
 8005914:	f100 33ff 	add.w	r3, r0, #4294967295
 8005918:	d100      	bne.n	800591c <memcpy+0xc>
 800591a:	4770      	bx	lr
 800591c:	b510      	push	{r4, lr}
 800591e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005922:	4291      	cmp	r1, r2
 8005924:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005928:	d1f9      	bne.n	800591e <memcpy+0xe>
 800592a:	bd10      	pop	{r4, pc}

0800592c <_Balloc>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005930:	4604      	mov	r4, r0
 8005932:	460d      	mov	r5, r1
 8005934:	b976      	cbnz	r6, 8005954 <_Balloc+0x28>
 8005936:	2010      	movs	r0, #16
 8005938:	f000 fdc0 	bl	80064bc <malloc>
 800593c:	4602      	mov	r2, r0
 800593e:	6260      	str	r0, [r4, #36]	; 0x24
 8005940:	b920      	cbnz	r0, 800594c <_Balloc+0x20>
 8005942:	2166      	movs	r1, #102	; 0x66
 8005944:	4b17      	ldr	r3, [pc, #92]	; (80059a4 <_Balloc+0x78>)
 8005946:	4818      	ldr	r0, [pc, #96]	; (80059a8 <_Balloc+0x7c>)
 8005948:	f000 fd88 	bl	800645c <__assert_func>
 800594c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005950:	6006      	str	r6, [r0, #0]
 8005952:	60c6      	str	r6, [r0, #12]
 8005954:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005956:	68f3      	ldr	r3, [r6, #12]
 8005958:	b183      	cbz	r3, 800597c <_Balloc+0x50>
 800595a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005962:	b9b8      	cbnz	r0, 8005994 <_Balloc+0x68>
 8005964:	2101      	movs	r1, #1
 8005966:	fa01 f605 	lsl.w	r6, r1, r5
 800596a:	1d72      	adds	r2, r6, #5
 800596c:	4620      	mov	r0, r4
 800596e:	0092      	lsls	r2, r2, #2
 8005970:	f000 fc94 	bl	800629c <_calloc_r>
 8005974:	b160      	cbz	r0, 8005990 <_Balloc+0x64>
 8005976:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800597a:	e00e      	b.n	800599a <_Balloc+0x6e>
 800597c:	2221      	movs	r2, #33	; 0x21
 800597e:	2104      	movs	r1, #4
 8005980:	4620      	mov	r0, r4
 8005982:	f000 fc8b 	bl	800629c <_calloc_r>
 8005986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005988:	60f0      	str	r0, [r6, #12]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e4      	bne.n	800595a <_Balloc+0x2e>
 8005990:	2000      	movs	r0, #0
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	6802      	ldr	r2, [r0, #0]
 8005996:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800599a:	2300      	movs	r3, #0
 800599c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059a0:	e7f7      	b.n	8005992 <_Balloc+0x66>
 80059a2:	bf00      	nop
 80059a4:	0800745c 	.word	0x0800745c
 80059a8:	08007473 	.word	0x08007473

080059ac <_Bfree>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059b0:	4605      	mov	r5, r0
 80059b2:	460c      	mov	r4, r1
 80059b4:	b976      	cbnz	r6, 80059d4 <_Bfree+0x28>
 80059b6:	2010      	movs	r0, #16
 80059b8:	f000 fd80 	bl	80064bc <malloc>
 80059bc:	4602      	mov	r2, r0
 80059be:	6268      	str	r0, [r5, #36]	; 0x24
 80059c0:	b920      	cbnz	r0, 80059cc <_Bfree+0x20>
 80059c2:	218a      	movs	r1, #138	; 0x8a
 80059c4:	4b08      	ldr	r3, [pc, #32]	; (80059e8 <_Bfree+0x3c>)
 80059c6:	4809      	ldr	r0, [pc, #36]	; (80059ec <_Bfree+0x40>)
 80059c8:	f000 fd48 	bl	800645c <__assert_func>
 80059cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059d0:	6006      	str	r6, [r0, #0]
 80059d2:	60c6      	str	r6, [r0, #12]
 80059d4:	b13c      	cbz	r4, 80059e6 <_Bfree+0x3a>
 80059d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80059d8:	6862      	ldr	r2, [r4, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059e0:	6021      	str	r1, [r4, #0]
 80059e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	0800745c 	.word	0x0800745c
 80059ec:	08007473 	.word	0x08007473

080059f0 <__multadd>:
 80059f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f4:	4607      	mov	r7, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	461e      	mov	r6, r3
 80059fa:	2000      	movs	r0, #0
 80059fc:	690d      	ldr	r5, [r1, #16]
 80059fe:	f101 0c14 	add.w	ip, r1, #20
 8005a02:	f8dc 3000 	ldr.w	r3, [ip]
 8005a06:	3001      	adds	r0, #1
 8005a08:	b299      	uxth	r1, r3
 8005a0a:	fb02 6101 	mla	r1, r2, r1, r6
 8005a0e:	0c1e      	lsrs	r6, r3, #16
 8005a10:	0c0b      	lsrs	r3, r1, #16
 8005a12:	fb02 3306 	mla	r3, r2, r6, r3
 8005a16:	b289      	uxth	r1, r1
 8005a18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a1c:	4285      	cmp	r5, r0
 8005a1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a22:	f84c 1b04 	str.w	r1, [ip], #4
 8005a26:	dcec      	bgt.n	8005a02 <__multadd+0x12>
 8005a28:	b30e      	cbz	r6, 8005a6e <__multadd+0x7e>
 8005a2a:	68a3      	ldr	r3, [r4, #8]
 8005a2c:	42ab      	cmp	r3, r5
 8005a2e:	dc19      	bgt.n	8005a64 <__multadd+0x74>
 8005a30:	6861      	ldr	r1, [r4, #4]
 8005a32:	4638      	mov	r0, r7
 8005a34:	3101      	adds	r1, #1
 8005a36:	f7ff ff79 	bl	800592c <_Balloc>
 8005a3a:	4680      	mov	r8, r0
 8005a3c:	b928      	cbnz	r0, 8005a4a <__multadd+0x5a>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	21b5      	movs	r1, #181	; 0xb5
 8005a42:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <__multadd+0x84>)
 8005a44:	480c      	ldr	r0, [pc, #48]	; (8005a78 <__multadd+0x88>)
 8005a46:	f000 fd09 	bl	800645c <__assert_func>
 8005a4a:	6922      	ldr	r2, [r4, #16]
 8005a4c:	f104 010c 	add.w	r1, r4, #12
 8005a50:	3202      	adds	r2, #2
 8005a52:	0092      	lsls	r2, r2, #2
 8005a54:	300c      	adds	r0, #12
 8005a56:	f7ff ff5b 	bl	8005910 <memcpy>
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	4638      	mov	r0, r7
 8005a5e:	f7ff ffa5 	bl	80059ac <_Bfree>
 8005a62:	4644      	mov	r4, r8
 8005a64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a68:	3501      	adds	r5, #1
 8005a6a:	615e      	str	r6, [r3, #20]
 8005a6c:	6125      	str	r5, [r4, #16]
 8005a6e:	4620      	mov	r0, r4
 8005a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a74:	080073d0 	.word	0x080073d0
 8005a78:	08007473 	.word	0x08007473

08005a7c <__s2b>:
 8005a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a80:	4615      	mov	r5, r2
 8005a82:	2209      	movs	r2, #9
 8005a84:	461f      	mov	r7, r3
 8005a86:	3308      	adds	r3, #8
 8005a88:	460c      	mov	r4, r1
 8005a8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a8e:	4606      	mov	r6, r0
 8005a90:	2201      	movs	r2, #1
 8005a92:	2100      	movs	r1, #0
 8005a94:	429a      	cmp	r2, r3
 8005a96:	db09      	blt.n	8005aac <__s2b+0x30>
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f7ff ff47 	bl	800592c <_Balloc>
 8005a9e:	b940      	cbnz	r0, 8005ab2 <__s2b+0x36>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	21ce      	movs	r1, #206	; 0xce
 8005aa4:	4b18      	ldr	r3, [pc, #96]	; (8005b08 <__s2b+0x8c>)
 8005aa6:	4819      	ldr	r0, [pc, #100]	; (8005b0c <__s2b+0x90>)
 8005aa8:	f000 fcd8 	bl	800645c <__assert_func>
 8005aac:	0052      	lsls	r2, r2, #1
 8005aae:	3101      	adds	r1, #1
 8005ab0:	e7f0      	b.n	8005a94 <__s2b+0x18>
 8005ab2:	9b08      	ldr	r3, [sp, #32]
 8005ab4:	2d09      	cmp	r5, #9
 8005ab6:	6143      	str	r3, [r0, #20]
 8005ab8:	f04f 0301 	mov.w	r3, #1
 8005abc:	6103      	str	r3, [r0, #16]
 8005abe:	dd16      	ble.n	8005aee <__s2b+0x72>
 8005ac0:	f104 0909 	add.w	r9, r4, #9
 8005ac4:	46c8      	mov	r8, r9
 8005ac6:	442c      	add	r4, r5
 8005ac8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005acc:	4601      	mov	r1, r0
 8005ace:	220a      	movs	r2, #10
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	3b30      	subs	r3, #48	; 0x30
 8005ad4:	f7ff ff8c 	bl	80059f0 <__multadd>
 8005ad8:	45a0      	cmp	r8, r4
 8005ada:	d1f5      	bne.n	8005ac8 <__s2b+0x4c>
 8005adc:	f1a5 0408 	sub.w	r4, r5, #8
 8005ae0:	444c      	add	r4, r9
 8005ae2:	1b2d      	subs	r5, r5, r4
 8005ae4:	1963      	adds	r3, r4, r5
 8005ae6:	42bb      	cmp	r3, r7
 8005ae8:	db04      	blt.n	8005af4 <__s2b+0x78>
 8005aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aee:	2509      	movs	r5, #9
 8005af0:	340a      	adds	r4, #10
 8005af2:	e7f6      	b.n	8005ae2 <__s2b+0x66>
 8005af4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005af8:	4601      	mov	r1, r0
 8005afa:	220a      	movs	r2, #10
 8005afc:	4630      	mov	r0, r6
 8005afe:	3b30      	subs	r3, #48	; 0x30
 8005b00:	f7ff ff76 	bl	80059f0 <__multadd>
 8005b04:	e7ee      	b.n	8005ae4 <__s2b+0x68>
 8005b06:	bf00      	nop
 8005b08:	080073d0 	.word	0x080073d0
 8005b0c:	08007473 	.word	0x08007473

08005b10 <__hi0bits>:
 8005b10:	0c02      	lsrs	r2, r0, #16
 8005b12:	0412      	lsls	r2, r2, #16
 8005b14:	4603      	mov	r3, r0
 8005b16:	b9ca      	cbnz	r2, 8005b4c <__hi0bits+0x3c>
 8005b18:	0403      	lsls	r3, r0, #16
 8005b1a:	2010      	movs	r0, #16
 8005b1c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b20:	bf04      	itt	eq
 8005b22:	021b      	lsleq	r3, r3, #8
 8005b24:	3008      	addeq	r0, #8
 8005b26:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b2a:	bf04      	itt	eq
 8005b2c:	011b      	lsleq	r3, r3, #4
 8005b2e:	3004      	addeq	r0, #4
 8005b30:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b34:	bf04      	itt	eq
 8005b36:	009b      	lsleq	r3, r3, #2
 8005b38:	3002      	addeq	r0, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	db05      	blt.n	8005b4a <__hi0bits+0x3a>
 8005b3e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005b42:	f100 0001 	add.w	r0, r0, #1
 8005b46:	bf08      	it	eq
 8005b48:	2020      	moveq	r0, #32
 8005b4a:	4770      	bx	lr
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	e7e5      	b.n	8005b1c <__hi0bits+0xc>

08005b50 <__lo0bits>:
 8005b50:	6803      	ldr	r3, [r0, #0]
 8005b52:	4602      	mov	r2, r0
 8005b54:	f013 0007 	ands.w	r0, r3, #7
 8005b58:	d00b      	beq.n	8005b72 <__lo0bits+0x22>
 8005b5a:	07d9      	lsls	r1, r3, #31
 8005b5c:	d421      	bmi.n	8005ba2 <__lo0bits+0x52>
 8005b5e:	0798      	lsls	r0, r3, #30
 8005b60:	bf49      	itett	mi
 8005b62:	085b      	lsrmi	r3, r3, #1
 8005b64:	089b      	lsrpl	r3, r3, #2
 8005b66:	2001      	movmi	r0, #1
 8005b68:	6013      	strmi	r3, [r2, #0]
 8005b6a:	bf5c      	itt	pl
 8005b6c:	2002      	movpl	r0, #2
 8005b6e:	6013      	strpl	r3, [r2, #0]
 8005b70:	4770      	bx	lr
 8005b72:	b299      	uxth	r1, r3
 8005b74:	b909      	cbnz	r1, 8005b7a <__lo0bits+0x2a>
 8005b76:	2010      	movs	r0, #16
 8005b78:	0c1b      	lsrs	r3, r3, #16
 8005b7a:	b2d9      	uxtb	r1, r3
 8005b7c:	b909      	cbnz	r1, 8005b82 <__lo0bits+0x32>
 8005b7e:	3008      	adds	r0, #8
 8005b80:	0a1b      	lsrs	r3, r3, #8
 8005b82:	0719      	lsls	r1, r3, #28
 8005b84:	bf04      	itt	eq
 8005b86:	091b      	lsreq	r3, r3, #4
 8005b88:	3004      	addeq	r0, #4
 8005b8a:	0799      	lsls	r1, r3, #30
 8005b8c:	bf04      	itt	eq
 8005b8e:	089b      	lsreq	r3, r3, #2
 8005b90:	3002      	addeq	r0, #2
 8005b92:	07d9      	lsls	r1, r3, #31
 8005b94:	d403      	bmi.n	8005b9e <__lo0bits+0x4e>
 8005b96:	085b      	lsrs	r3, r3, #1
 8005b98:	f100 0001 	add.w	r0, r0, #1
 8005b9c:	d003      	beq.n	8005ba6 <__lo0bits+0x56>
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	4770      	bx	lr
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	4770      	bx	lr
 8005ba6:	2020      	movs	r0, #32
 8005ba8:	4770      	bx	lr
	...

08005bac <__i2b>:
 8005bac:	b510      	push	{r4, lr}
 8005bae:	460c      	mov	r4, r1
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	f7ff febb 	bl	800592c <_Balloc>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	b928      	cbnz	r0, 8005bc6 <__i2b+0x1a>
 8005bba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005bbe:	4b04      	ldr	r3, [pc, #16]	; (8005bd0 <__i2b+0x24>)
 8005bc0:	4804      	ldr	r0, [pc, #16]	; (8005bd4 <__i2b+0x28>)
 8005bc2:	f000 fc4b 	bl	800645c <__assert_func>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	6144      	str	r4, [r0, #20]
 8005bca:	6103      	str	r3, [r0, #16]
 8005bcc:	bd10      	pop	{r4, pc}
 8005bce:	bf00      	nop
 8005bd0:	080073d0 	.word	0x080073d0
 8005bd4:	08007473 	.word	0x08007473

08005bd8 <__multiply>:
 8005bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bdc:	4691      	mov	r9, r2
 8005bde:	690a      	ldr	r2, [r1, #16]
 8005be0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005be4:	460c      	mov	r4, r1
 8005be6:	429a      	cmp	r2, r3
 8005be8:	bfbe      	ittt	lt
 8005bea:	460b      	movlt	r3, r1
 8005bec:	464c      	movlt	r4, r9
 8005bee:	4699      	movlt	r9, r3
 8005bf0:	6927      	ldr	r7, [r4, #16]
 8005bf2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005bf6:	68a3      	ldr	r3, [r4, #8]
 8005bf8:	6861      	ldr	r1, [r4, #4]
 8005bfa:	eb07 060a 	add.w	r6, r7, sl
 8005bfe:	42b3      	cmp	r3, r6
 8005c00:	b085      	sub	sp, #20
 8005c02:	bfb8      	it	lt
 8005c04:	3101      	addlt	r1, #1
 8005c06:	f7ff fe91 	bl	800592c <_Balloc>
 8005c0a:	b930      	cbnz	r0, 8005c1a <__multiply+0x42>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	f240 115d 	movw	r1, #349	; 0x15d
 8005c12:	4b43      	ldr	r3, [pc, #268]	; (8005d20 <__multiply+0x148>)
 8005c14:	4843      	ldr	r0, [pc, #268]	; (8005d24 <__multiply+0x14c>)
 8005c16:	f000 fc21 	bl	800645c <__assert_func>
 8005c1a:	f100 0514 	add.w	r5, r0, #20
 8005c1e:	462b      	mov	r3, r5
 8005c20:	2200      	movs	r2, #0
 8005c22:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c26:	4543      	cmp	r3, r8
 8005c28:	d321      	bcc.n	8005c6e <__multiply+0x96>
 8005c2a:	f104 0314 	add.w	r3, r4, #20
 8005c2e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005c32:	f109 0314 	add.w	r3, r9, #20
 8005c36:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005c3a:	9202      	str	r2, [sp, #8]
 8005c3c:	1b3a      	subs	r2, r7, r4
 8005c3e:	3a15      	subs	r2, #21
 8005c40:	f022 0203 	bic.w	r2, r2, #3
 8005c44:	3204      	adds	r2, #4
 8005c46:	f104 0115 	add.w	r1, r4, #21
 8005c4a:	428f      	cmp	r7, r1
 8005c4c:	bf38      	it	cc
 8005c4e:	2204      	movcc	r2, #4
 8005c50:	9201      	str	r2, [sp, #4]
 8005c52:	9a02      	ldr	r2, [sp, #8]
 8005c54:	9303      	str	r3, [sp, #12]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d80c      	bhi.n	8005c74 <__multiply+0x9c>
 8005c5a:	2e00      	cmp	r6, #0
 8005c5c:	dd03      	ble.n	8005c66 <__multiply+0x8e>
 8005c5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d059      	beq.n	8005d1a <__multiply+0x142>
 8005c66:	6106      	str	r6, [r0, #16]
 8005c68:	b005      	add	sp, #20
 8005c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6e:	f843 2b04 	str.w	r2, [r3], #4
 8005c72:	e7d8      	b.n	8005c26 <__multiply+0x4e>
 8005c74:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c78:	f1ba 0f00 	cmp.w	sl, #0
 8005c7c:	d023      	beq.n	8005cc6 <__multiply+0xee>
 8005c7e:	46a9      	mov	r9, r5
 8005c80:	f04f 0c00 	mov.w	ip, #0
 8005c84:	f104 0e14 	add.w	lr, r4, #20
 8005c88:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c8c:	f8d9 1000 	ldr.w	r1, [r9]
 8005c90:	fa1f fb82 	uxth.w	fp, r2
 8005c94:	b289      	uxth	r1, r1
 8005c96:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c9a:	4461      	add	r1, ip
 8005c9c:	f8d9 c000 	ldr.w	ip, [r9]
 8005ca0:	0c12      	lsrs	r2, r2, #16
 8005ca2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005ca6:	fb0a c202 	mla	r2, sl, r2, ip
 8005caa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005cae:	b289      	uxth	r1, r1
 8005cb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005cb4:	4577      	cmp	r7, lr
 8005cb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005cba:	f849 1b04 	str.w	r1, [r9], #4
 8005cbe:	d8e3      	bhi.n	8005c88 <__multiply+0xb0>
 8005cc0:	9a01      	ldr	r2, [sp, #4]
 8005cc2:	f845 c002 	str.w	ip, [r5, r2]
 8005cc6:	9a03      	ldr	r2, [sp, #12]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005cce:	f1b9 0f00 	cmp.w	r9, #0
 8005cd2:	d020      	beq.n	8005d16 <__multiply+0x13e>
 8005cd4:	46ae      	mov	lr, r5
 8005cd6:	f04f 0a00 	mov.w	sl, #0
 8005cda:	6829      	ldr	r1, [r5, #0]
 8005cdc:	f104 0c14 	add.w	ip, r4, #20
 8005ce0:	f8bc b000 	ldrh.w	fp, [ip]
 8005ce4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005ce8:	b289      	uxth	r1, r1
 8005cea:	fb09 220b 	mla	r2, r9, fp, r2
 8005cee:	4492      	add	sl, r2
 8005cf0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005cf4:	f84e 1b04 	str.w	r1, [lr], #4
 8005cf8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005cfc:	f8be 1000 	ldrh.w	r1, [lr]
 8005d00:	0c12      	lsrs	r2, r2, #16
 8005d02:	fb09 1102 	mla	r1, r9, r2, r1
 8005d06:	4567      	cmp	r7, ip
 8005d08:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005d0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d10:	d8e6      	bhi.n	8005ce0 <__multiply+0x108>
 8005d12:	9a01      	ldr	r2, [sp, #4]
 8005d14:	50a9      	str	r1, [r5, r2]
 8005d16:	3504      	adds	r5, #4
 8005d18:	e79b      	b.n	8005c52 <__multiply+0x7a>
 8005d1a:	3e01      	subs	r6, #1
 8005d1c:	e79d      	b.n	8005c5a <__multiply+0x82>
 8005d1e:	bf00      	nop
 8005d20:	080073d0 	.word	0x080073d0
 8005d24:	08007473 	.word	0x08007473

08005d28 <__pow5mult>:
 8005d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d2c:	4615      	mov	r5, r2
 8005d2e:	f012 0203 	ands.w	r2, r2, #3
 8005d32:	4606      	mov	r6, r0
 8005d34:	460f      	mov	r7, r1
 8005d36:	d007      	beq.n	8005d48 <__pow5mult+0x20>
 8005d38:	4c25      	ldr	r4, [pc, #148]	; (8005dd0 <__pow5mult+0xa8>)
 8005d3a:	3a01      	subs	r2, #1
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d42:	f7ff fe55 	bl	80059f0 <__multadd>
 8005d46:	4607      	mov	r7, r0
 8005d48:	10ad      	asrs	r5, r5, #2
 8005d4a:	d03d      	beq.n	8005dc8 <__pow5mult+0xa0>
 8005d4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d4e:	b97c      	cbnz	r4, 8005d70 <__pow5mult+0x48>
 8005d50:	2010      	movs	r0, #16
 8005d52:	f000 fbb3 	bl	80064bc <malloc>
 8005d56:	4602      	mov	r2, r0
 8005d58:	6270      	str	r0, [r6, #36]	; 0x24
 8005d5a:	b928      	cbnz	r0, 8005d68 <__pow5mult+0x40>
 8005d5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005d60:	4b1c      	ldr	r3, [pc, #112]	; (8005dd4 <__pow5mult+0xac>)
 8005d62:	481d      	ldr	r0, [pc, #116]	; (8005dd8 <__pow5mult+0xb0>)
 8005d64:	f000 fb7a 	bl	800645c <__assert_func>
 8005d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d6c:	6004      	str	r4, [r0, #0]
 8005d6e:	60c4      	str	r4, [r0, #12]
 8005d70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d78:	b94c      	cbnz	r4, 8005d8e <__pow5mult+0x66>
 8005d7a:	f240 2171 	movw	r1, #625	; 0x271
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7ff ff14 	bl	8005bac <__i2b>
 8005d84:	2300      	movs	r3, #0
 8005d86:	4604      	mov	r4, r0
 8005d88:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d8c:	6003      	str	r3, [r0, #0]
 8005d8e:	f04f 0900 	mov.w	r9, #0
 8005d92:	07eb      	lsls	r3, r5, #31
 8005d94:	d50a      	bpl.n	8005dac <__pow5mult+0x84>
 8005d96:	4639      	mov	r1, r7
 8005d98:	4622      	mov	r2, r4
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f7ff ff1c 	bl	8005bd8 <__multiply>
 8005da0:	4680      	mov	r8, r0
 8005da2:	4639      	mov	r1, r7
 8005da4:	4630      	mov	r0, r6
 8005da6:	f7ff fe01 	bl	80059ac <_Bfree>
 8005daa:	4647      	mov	r7, r8
 8005dac:	106d      	asrs	r5, r5, #1
 8005dae:	d00b      	beq.n	8005dc8 <__pow5mult+0xa0>
 8005db0:	6820      	ldr	r0, [r4, #0]
 8005db2:	b938      	cbnz	r0, 8005dc4 <__pow5mult+0x9c>
 8005db4:	4622      	mov	r2, r4
 8005db6:	4621      	mov	r1, r4
 8005db8:	4630      	mov	r0, r6
 8005dba:	f7ff ff0d 	bl	8005bd8 <__multiply>
 8005dbe:	6020      	str	r0, [r4, #0]
 8005dc0:	f8c0 9000 	str.w	r9, [r0]
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	e7e4      	b.n	8005d92 <__pow5mult+0x6a>
 8005dc8:	4638      	mov	r0, r7
 8005dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dce:	bf00      	nop
 8005dd0:	080075c0 	.word	0x080075c0
 8005dd4:	0800745c 	.word	0x0800745c
 8005dd8:	08007473 	.word	0x08007473

08005ddc <__lshift>:
 8005ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de0:	460c      	mov	r4, r1
 8005de2:	4607      	mov	r7, r0
 8005de4:	4691      	mov	r9, r2
 8005de6:	6923      	ldr	r3, [r4, #16]
 8005de8:	6849      	ldr	r1, [r1, #4]
 8005dea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005dee:	68a3      	ldr	r3, [r4, #8]
 8005df0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005df4:	f108 0601 	add.w	r6, r8, #1
 8005df8:	42b3      	cmp	r3, r6
 8005dfa:	db0b      	blt.n	8005e14 <__lshift+0x38>
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	f7ff fd95 	bl	800592c <_Balloc>
 8005e02:	4605      	mov	r5, r0
 8005e04:	b948      	cbnz	r0, 8005e1a <__lshift+0x3e>
 8005e06:	4602      	mov	r2, r0
 8005e08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e0c:	4b29      	ldr	r3, [pc, #164]	; (8005eb4 <__lshift+0xd8>)
 8005e0e:	482a      	ldr	r0, [pc, #168]	; (8005eb8 <__lshift+0xdc>)
 8005e10:	f000 fb24 	bl	800645c <__assert_func>
 8005e14:	3101      	adds	r1, #1
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	e7ee      	b.n	8005df8 <__lshift+0x1c>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f100 0114 	add.w	r1, r0, #20
 8005e20:	f100 0210 	add.w	r2, r0, #16
 8005e24:	4618      	mov	r0, r3
 8005e26:	4553      	cmp	r3, sl
 8005e28:	db37      	blt.n	8005e9a <__lshift+0xbe>
 8005e2a:	6920      	ldr	r0, [r4, #16]
 8005e2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e30:	f104 0314 	add.w	r3, r4, #20
 8005e34:	f019 091f 	ands.w	r9, r9, #31
 8005e38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005e40:	d02f      	beq.n	8005ea2 <__lshift+0xc6>
 8005e42:	468a      	mov	sl, r1
 8005e44:	f04f 0c00 	mov.w	ip, #0
 8005e48:	f1c9 0e20 	rsb	lr, r9, #32
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	fa02 f209 	lsl.w	r2, r2, r9
 8005e52:	ea42 020c 	orr.w	r2, r2, ip
 8005e56:	f84a 2b04 	str.w	r2, [sl], #4
 8005e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e5e:	4298      	cmp	r0, r3
 8005e60:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005e64:	d8f2      	bhi.n	8005e4c <__lshift+0x70>
 8005e66:	1b03      	subs	r3, r0, r4
 8005e68:	3b15      	subs	r3, #21
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	3304      	adds	r3, #4
 8005e70:	f104 0215 	add.w	r2, r4, #21
 8005e74:	4290      	cmp	r0, r2
 8005e76:	bf38      	it	cc
 8005e78:	2304      	movcc	r3, #4
 8005e7a:	f841 c003 	str.w	ip, [r1, r3]
 8005e7e:	f1bc 0f00 	cmp.w	ip, #0
 8005e82:	d001      	beq.n	8005e88 <__lshift+0xac>
 8005e84:	f108 0602 	add.w	r6, r8, #2
 8005e88:	3e01      	subs	r6, #1
 8005e8a:	4638      	mov	r0, r7
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	612e      	str	r6, [r5, #16]
 8005e90:	f7ff fd8c 	bl	80059ac <_Bfree>
 8005e94:	4628      	mov	r0, r5
 8005e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	e7c1      	b.n	8005e26 <__lshift+0x4a>
 8005ea2:	3904      	subs	r1, #4
 8005ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ea8:	4298      	cmp	r0, r3
 8005eaa:	f841 2f04 	str.w	r2, [r1, #4]!
 8005eae:	d8f9      	bhi.n	8005ea4 <__lshift+0xc8>
 8005eb0:	e7ea      	b.n	8005e88 <__lshift+0xac>
 8005eb2:	bf00      	nop
 8005eb4:	080073d0 	.word	0x080073d0
 8005eb8:	08007473 	.word	0x08007473

08005ebc <__mcmp>:
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	690a      	ldr	r2, [r1, #16]
 8005ec0:	6900      	ldr	r0, [r0, #16]
 8005ec2:	b530      	push	{r4, r5, lr}
 8005ec4:	1a80      	subs	r0, r0, r2
 8005ec6:	d10d      	bne.n	8005ee4 <__mcmp+0x28>
 8005ec8:	3314      	adds	r3, #20
 8005eca:	3114      	adds	r1, #20
 8005ecc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005ed0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005ed4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ed8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005edc:	4295      	cmp	r5, r2
 8005ede:	d002      	beq.n	8005ee6 <__mcmp+0x2a>
 8005ee0:	d304      	bcc.n	8005eec <__mcmp+0x30>
 8005ee2:	2001      	movs	r0, #1
 8005ee4:	bd30      	pop	{r4, r5, pc}
 8005ee6:	42a3      	cmp	r3, r4
 8005ee8:	d3f4      	bcc.n	8005ed4 <__mcmp+0x18>
 8005eea:	e7fb      	b.n	8005ee4 <__mcmp+0x28>
 8005eec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef0:	e7f8      	b.n	8005ee4 <__mcmp+0x28>
	...

08005ef4 <__mdiff>:
 8005ef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef8:	460d      	mov	r5, r1
 8005efa:	4607      	mov	r7, r0
 8005efc:	4611      	mov	r1, r2
 8005efe:	4628      	mov	r0, r5
 8005f00:	4614      	mov	r4, r2
 8005f02:	f7ff ffdb 	bl	8005ebc <__mcmp>
 8005f06:	1e06      	subs	r6, r0, #0
 8005f08:	d111      	bne.n	8005f2e <__mdiff+0x3a>
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	4638      	mov	r0, r7
 8005f0e:	f7ff fd0d 	bl	800592c <_Balloc>
 8005f12:	4602      	mov	r2, r0
 8005f14:	b928      	cbnz	r0, 8005f22 <__mdiff+0x2e>
 8005f16:	f240 2132 	movw	r1, #562	; 0x232
 8005f1a:	4b3a      	ldr	r3, [pc, #232]	; (8006004 <__mdiff+0x110>)
 8005f1c:	483a      	ldr	r0, [pc, #232]	; (8006008 <__mdiff+0x114>)
 8005f1e:	f000 fa9d 	bl	800645c <__assert_func>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005f28:	4610      	mov	r0, r2
 8005f2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2e:	bfa4      	itt	ge
 8005f30:	4623      	movge	r3, r4
 8005f32:	462c      	movge	r4, r5
 8005f34:	4638      	mov	r0, r7
 8005f36:	6861      	ldr	r1, [r4, #4]
 8005f38:	bfa6      	itte	ge
 8005f3a:	461d      	movge	r5, r3
 8005f3c:	2600      	movge	r6, #0
 8005f3e:	2601      	movlt	r6, #1
 8005f40:	f7ff fcf4 	bl	800592c <_Balloc>
 8005f44:	4602      	mov	r2, r0
 8005f46:	b918      	cbnz	r0, 8005f50 <__mdiff+0x5c>
 8005f48:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f4c:	4b2d      	ldr	r3, [pc, #180]	; (8006004 <__mdiff+0x110>)
 8005f4e:	e7e5      	b.n	8005f1c <__mdiff+0x28>
 8005f50:	f102 0814 	add.w	r8, r2, #20
 8005f54:	46c2      	mov	sl, r8
 8005f56:	f04f 0c00 	mov.w	ip, #0
 8005f5a:	6927      	ldr	r7, [r4, #16]
 8005f5c:	60c6      	str	r6, [r0, #12]
 8005f5e:	692e      	ldr	r6, [r5, #16]
 8005f60:	f104 0014 	add.w	r0, r4, #20
 8005f64:	f105 0914 	add.w	r9, r5, #20
 8005f68:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005f6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f70:	3410      	adds	r4, #16
 8005f72:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005f76:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f7a:	fa1f f18b 	uxth.w	r1, fp
 8005f7e:	448c      	add	ip, r1
 8005f80:	b299      	uxth	r1, r3
 8005f82:	0c1b      	lsrs	r3, r3, #16
 8005f84:	ebac 0101 	sub.w	r1, ip, r1
 8005f88:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f8c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f90:	b289      	uxth	r1, r1
 8005f92:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f96:	454e      	cmp	r6, r9
 8005f98:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f9c:	f84a 3b04 	str.w	r3, [sl], #4
 8005fa0:	d8e7      	bhi.n	8005f72 <__mdiff+0x7e>
 8005fa2:	1b73      	subs	r3, r6, r5
 8005fa4:	3b15      	subs	r3, #21
 8005fa6:	f023 0303 	bic.w	r3, r3, #3
 8005faa:	3515      	adds	r5, #21
 8005fac:	3304      	adds	r3, #4
 8005fae:	42ae      	cmp	r6, r5
 8005fb0:	bf38      	it	cc
 8005fb2:	2304      	movcc	r3, #4
 8005fb4:	4418      	add	r0, r3
 8005fb6:	4443      	add	r3, r8
 8005fb8:	461e      	mov	r6, r3
 8005fba:	4605      	mov	r5, r0
 8005fbc:	4575      	cmp	r5, lr
 8005fbe:	d30e      	bcc.n	8005fde <__mdiff+0xea>
 8005fc0:	f10e 0103 	add.w	r1, lr, #3
 8005fc4:	1a09      	subs	r1, r1, r0
 8005fc6:	f021 0103 	bic.w	r1, r1, #3
 8005fca:	3803      	subs	r0, #3
 8005fcc:	4586      	cmp	lr, r0
 8005fce:	bf38      	it	cc
 8005fd0:	2100      	movcc	r1, #0
 8005fd2:	4419      	add	r1, r3
 8005fd4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005fd8:	b18b      	cbz	r3, 8005ffe <__mdiff+0x10a>
 8005fda:	6117      	str	r7, [r2, #16]
 8005fdc:	e7a4      	b.n	8005f28 <__mdiff+0x34>
 8005fde:	f855 8b04 	ldr.w	r8, [r5], #4
 8005fe2:	fa1f f188 	uxth.w	r1, r8
 8005fe6:	4461      	add	r1, ip
 8005fe8:	140c      	asrs	r4, r1, #16
 8005fea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005fee:	b289      	uxth	r1, r1
 8005ff0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005ff4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005ff8:	f846 1b04 	str.w	r1, [r6], #4
 8005ffc:	e7de      	b.n	8005fbc <__mdiff+0xc8>
 8005ffe:	3f01      	subs	r7, #1
 8006000:	e7e8      	b.n	8005fd4 <__mdiff+0xe0>
 8006002:	bf00      	nop
 8006004:	080073d0 	.word	0x080073d0
 8006008:	08007473 	.word	0x08007473

0800600c <__ulp>:
 800600c:	4b11      	ldr	r3, [pc, #68]	; (8006054 <__ulp+0x48>)
 800600e:	400b      	ands	r3, r1
 8006010:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006014:	2b00      	cmp	r3, #0
 8006016:	dd02      	ble.n	800601e <__ulp+0x12>
 8006018:	2000      	movs	r0, #0
 800601a:	4619      	mov	r1, r3
 800601c:	4770      	bx	lr
 800601e:	425b      	negs	r3, r3
 8006020:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006024:	f04f 0000 	mov.w	r0, #0
 8006028:	f04f 0100 	mov.w	r1, #0
 800602c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006030:	da04      	bge.n	800603c <__ulp+0x30>
 8006032:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006036:	fa43 f102 	asr.w	r1, r3, r2
 800603a:	4770      	bx	lr
 800603c:	f1a2 0314 	sub.w	r3, r2, #20
 8006040:	2b1e      	cmp	r3, #30
 8006042:	bfd6      	itet	le
 8006044:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006048:	2301      	movgt	r3, #1
 800604a:	fa22 f303 	lsrle.w	r3, r2, r3
 800604e:	4618      	mov	r0, r3
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	7ff00000 	.word	0x7ff00000

08006058 <__b2d>:
 8006058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800605c:	6907      	ldr	r7, [r0, #16]
 800605e:	f100 0914 	add.w	r9, r0, #20
 8006062:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006066:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800606a:	f1a7 0804 	sub.w	r8, r7, #4
 800606e:	4630      	mov	r0, r6
 8006070:	f7ff fd4e 	bl	8005b10 <__hi0bits>
 8006074:	f1c0 0320 	rsb	r3, r0, #32
 8006078:	280a      	cmp	r0, #10
 800607a:	600b      	str	r3, [r1, #0]
 800607c:	491f      	ldr	r1, [pc, #124]	; (80060fc <__b2d+0xa4>)
 800607e:	dc17      	bgt.n	80060b0 <__b2d+0x58>
 8006080:	45c1      	cmp	r9, r8
 8006082:	bf28      	it	cs
 8006084:	2200      	movcs	r2, #0
 8006086:	f1c0 0c0b 	rsb	ip, r0, #11
 800608a:	fa26 f30c 	lsr.w	r3, r6, ip
 800608e:	bf38      	it	cc
 8006090:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006094:	ea43 0501 	orr.w	r5, r3, r1
 8006098:	f100 0315 	add.w	r3, r0, #21
 800609c:	fa06 f303 	lsl.w	r3, r6, r3
 80060a0:	fa22 f20c 	lsr.w	r2, r2, ip
 80060a4:	ea43 0402 	orr.w	r4, r3, r2
 80060a8:	4620      	mov	r0, r4
 80060aa:	4629      	mov	r1, r5
 80060ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b0:	45c1      	cmp	r9, r8
 80060b2:	bf2e      	itee	cs
 80060b4:	2200      	movcs	r2, #0
 80060b6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80060ba:	f1a7 0808 	subcc.w	r8, r7, #8
 80060be:	f1b0 030b 	subs.w	r3, r0, #11
 80060c2:	d016      	beq.n	80060f2 <__b2d+0x9a>
 80060c4:	f1c3 0720 	rsb	r7, r3, #32
 80060c8:	fa22 f107 	lsr.w	r1, r2, r7
 80060cc:	45c8      	cmp	r8, r9
 80060ce:	fa06 f603 	lsl.w	r6, r6, r3
 80060d2:	ea46 0601 	orr.w	r6, r6, r1
 80060d6:	bf94      	ite	ls
 80060d8:	2100      	movls	r1, #0
 80060da:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80060de:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80060e2:	fa02 f003 	lsl.w	r0, r2, r3
 80060e6:	40f9      	lsrs	r1, r7
 80060e8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80060ec:	ea40 0401 	orr.w	r4, r0, r1
 80060f0:	e7da      	b.n	80060a8 <__b2d+0x50>
 80060f2:	4614      	mov	r4, r2
 80060f4:	ea46 0501 	orr.w	r5, r6, r1
 80060f8:	e7d6      	b.n	80060a8 <__b2d+0x50>
 80060fa:	bf00      	nop
 80060fc:	3ff00000 	.word	0x3ff00000

08006100 <__d2b>:
 8006100:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006104:	2101      	movs	r1, #1
 8006106:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800610a:	4690      	mov	r8, r2
 800610c:	461d      	mov	r5, r3
 800610e:	f7ff fc0d 	bl	800592c <_Balloc>
 8006112:	4604      	mov	r4, r0
 8006114:	b930      	cbnz	r0, 8006124 <__d2b+0x24>
 8006116:	4602      	mov	r2, r0
 8006118:	f240 310a 	movw	r1, #778	; 0x30a
 800611c:	4b24      	ldr	r3, [pc, #144]	; (80061b0 <__d2b+0xb0>)
 800611e:	4825      	ldr	r0, [pc, #148]	; (80061b4 <__d2b+0xb4>)
 8006120:	f000 f99c 	bl	800645c <__assert_func>
 8006124:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006128:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800612c:	bb2d      	cbnz	r5, 800617a <__d2b+0x7a>
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	f1b8 0300 	subs.w	r3, r8, #0
 8006134:	d026      	beq.n	8006184 <__d2b+0x84>
 8006136:	4668      	mov	r0, sp
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	f7ff fd09 	bl	8005b50 <__lo0bits>
 800613e:	9900      	ldr	r1, [sp, #0]
 8006140:	b1f0      	cbz	r0, 8006180 <__d2b+0x80>
 8006142:	9a01      	ldr	r2, [sp, #4]
 8006144:	f1c0 0320 	rsb	r3, r0, #32
 8006148:	fa02 f303 	lsl.w	r3, r2, r3
 800614c:	430b      	orrs	r3, r1
 800614e:	40c2      	lsrs	r2, r0
 8006150:	6163      	str	r3, [r4, #20]
 8006152:	9201      	str	r2, [sp, #4]
 8006154:	9b01      	ldr	r3, [sp, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	bf14      	ite	ne
 800615a:	2102      	movne	r1, #2
 800615c:	2101      	moveq	r1, #1
 800615e:	61a3      	str	r3, [r4, #24]
 8006160:	6121      	str	r1, [r4, #16]
 8006162:	b1c5      	cbz	r5, 8006196 <__d2b+0x96>
 8006164:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006168:	4405      	add	r5, r0
 800616a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800616e:	603d      	str	r5, [r7, #0]
 8006170:	6030      	str	r0, [r6, #0]
 8006172:	4620      	mov	r0, r4
 8006174:	b002      	add	sp, #8
 8006176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800617a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800617e:	e7d6      	b.n	800612e <__d2b+0x2e>
 8006180:	6161      	str	r1, [r4, #20]
 8006182:	e7e7      	b.n	8006154 <__d2b+0x54>
 8006184:	a801      	add	r0, sp, #4
 8006186:	f7ff fce3 	bl	8005b50 <__lo0bits>
 800618a:	2101      	movs	r1, #1
 800618c:	9b01      	ldr	r3, [sp, #4]
 800618e:	6121      	str	r1, [r4, #16]
 8006190:	6163      	str	r3, [r4, #20]
 8006192:	3020      	adds	r0, #32
 8006194:	e7e5      	b.n	8006162 <__d2b+0x62>
 8006196:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800619a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800619e:	6038      	str	r0, [r7, #0]
 80061a0:	6918      	ldr	r0, [r3, #16]
 80061a2:	f7ff fcb5 	bl	8005b10 <__hi0bits>
 80061a6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80061aa:	6031      	str	r1, [r6, #0]
 80061ac:	e7e1      	b.n	8006172 <__d2b+0x72>
 80061ae:	bf00      	nop
 80061b0:	080073d0 	.word	0x080073d0
 80061b4:	08007473 	.word	0x08007473

080061b8 <__ratio>:
 80061b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061bc:	4688      	mov	r8, r1
 80061be:	4669      	mov	r1, sp
 80061c0:	4681      	mov	r9, r0
 80061c2:	f7ff ff49 	bl	8006058 <__b2d>
 80061c6:	460f      	mov	r7, r1
 80061c8:	4604      	mov	r4, r0
 80061ca:	460d      	mov	r5, r1
 80061cc:	4640      	mov	r0, r8
 80061ce:	a901      	add	r1, sp, #4
 80061d0:	f7ff ff42 	bl	8006058 <__b2d>
 80061d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80061d8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80061dc:	468b      	mov	fp, r1
 80061de:	eba3 0c02 	sub.w	ip, r3, r2
 80061e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80061e6:	1a9b      	subs	r3, r3, r2
 80061e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	bfd5      	itete	le
 80061f0:	460a      	movle	r2, r1
 80061f2:	462a      	movgt	r2, r5
 80061f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80061f8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80061fc:	bfd8      	it	le
 80061fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006202:	465b      	mov	r3, fp
 8006204:	4602      	mov	r2, r0
 8006206:	4639      	mov	r1, r7
 8006208:	4620      	mov	r0, r4
 800620a:	f7fa fa8f 	bl	800072c <__aeabi_ddiv>
 800620e:	b003      	add	sp, #12
 8006210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006214 <__copybits>:
 8006214:	3901      	subs	r1, #1
 8006216:	b570      	push	{r4, r5, r6, lr}
 8006218:	1149      	asrs	r1, r1, #5
 800621a:	6914      	ldr	r4, [r2, #16]
 800621c:	3101      	adds	r1, #1
 800621e:	f102 0314 	add.w	r3, r2, #20
 8006222:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006226:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800622a:	1f05      	subs	r5, r0, #4
 800622c:	42a3      	cmp	r3, r4
 800622e:	d30c      	bcc.n	800624a <__copybits+0x36>
 8006230:	1aa3      	subs	r3, r4, r2
 8006232:	3b11      	subs	r3, #17
 8006234:	f023 0303 	bic.w	r3, r3, #3
 8006238:	3211      	adds	r2, #17
 800623a:	42a2      	cmp	r2, r4
 800623c:	bf88      	it	hi
 800623e:	2300      	movhi	r3, #0
 8006240:	4418      	add	r0, r3
 8006242:	2300      	movs	r3, #0
 8006244:	4288      	cmp	r0, r1
 8006246:	d305      	bcc.n	8006254 <__copybits+0x40>
 8006248:	bd70      	pop	{r4, r5, r6, pc}
 800624a:	f853 6b04 	ldr.w	r6, [r3], #4
 800624e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006252:	e7eb      	b.n	800622c <__copybits+0x18>
 8006254:	f840 3b04 	str.w	r3, [r0], #4
 8006258:	e7f4      	b.n	8006244 <__copybits+0x30>

0800625a <__any_on>:
 800625a:	f100 0214 	add.w	r2, r0, #20
 800625e:	6900      	ldr	r0, [r0, #16]
 8006260:	114b      	asrs	r3, r1, #5
 8006262:	4298      	cmp	r0, r3
 8006264:	b510      	push	{r4, lr}
 8006266:	db11      	blt.n	800628c <__any_on+0x32>
 8006268:	dd0a      	ble.n	8006280 <__any_on+0x26>
 800626a:	f011 011f 	ands.w	r1, r1, #31
 800626e:	d007      	beq.n	8006280 <__any_on+0x26>
 8006270:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006274:	fa24 f001 	lsr.w	r0, r4, r1
 8006278:	fa00 f101 	lsl.w	r1, r0, r1
 800627c:	428c      	cmp	r4, r1
 800627e:	d10b      	bne.n	8006298 <__any_on+0x3e>
 8006280:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006284:	4293      	cmp	r3, r2
 8006286:	d803      	bhi.n	8006290 <__any_on+0x36>
 8006288:	2000      	movs	r0, #0
 800628a:	bd10      	pop	{r4, pc}
 800628c:	4603      	mov	r3, r0
 800628e:	e7f7      	b.n	8006280 <__any_on+0x26>
 8006290:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006294:	2900      	cmp	r1, #0
 8006296:	d0f5      	beq.n	8006284 <__any_on+0x2a>
 8006298:	2001      	movs	r0, #1
 800629a:	e7f6      	b.n	800628a <__any_on+0x30>

0800629c <_calloc_r>:
 800629c:	b570      	push	{r4, r5, r6, lr}
 800629e:	fba1 5402 	umull	r5, r4, r1, r2
 80062a2:	b934      	cbnz	r4, 80062b2 <_calloc_r+0x16>
 80062a4:	4629      	mov	r1, r5
 80062a6:	f000 f82d 	bl	8006304 <_malloc_r>
 80062aa:	4606      	mov	r6, r0
 80062ac:	b928      	cbnz	r0, 80062ba <_calloc_r+0x1e>
 80062ae:	4630      	mov	r0, r6
 80062b0:	bd70      	pop	{r4, r5, r6, pc}
 80062b2:	220c      	movs	r2, #12
 80062b4:	2600      	movs	r6, #0
 80062b6:	6002      	str	r2, [r0, #0]
 80062b8:	e7f9      	b.n	80062ae <_calloc_r+0x12>
 80062ba:	462a      	mov	r2, r5
 80062bc:	4621      	mov	r1, r4
 80062be:	f7fe f991 	bl	80045e4 <memset>
 80062c2:	e7f4      	b.n	80062ae <_calloc_r+0x12>

080062c4 <sbrk_aligned>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	4e0e      	ldr	r6, [pc, #56]	; (8006300 <sbrk_aligned+0x3c>)
 80062c8:	460c      	mov	r4, r1
 80062ca:	6831      	ldr	r1, [r6, #0]
 80062cc:	4605      	mov	r5, r0
 80062ce:	b911      	cbnz	r1, 80062d6 <sbrk_aligned+0x12>
 80062d0:	f000 f892 	bl	80063f8 <_sbrk_r>
 80062d4:	6030      	str	r0, [r6, #0]
 80062d6:	4621      	mov	r1, r4
 80062d8:	4628      	mov	r0, r5
 80062da:	f000 f88d 	bl	80063f8 <_sbrk_r>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	d00a      	beq.n	80062f8 <sbrk_aligned+0x34>
 80062e2:	1cc4      	adds	r4, r0, #3
 80062e4:	f024 0403 	bic.w	r4, r4, #3
 80062e8:	42a0      	cmp	r0, r4
 80062ea:	d007      	beq.n	80062fc <sbrk_aligned+0x38>
 80062ec:	1a21      	subs	r1, r4, r0
 80062ee:	4628      	mov	r0, r5
 80062f0:	f000 f882 	bl	80063f8 <_sbrk_r>
 80062f4:	3001      	adds	r0, #1
 80062f6:	d101      	bne.n	80062fc <sbrk_aligned+0x38>
 80062f8:	f04f 34ff 	mov.w	r4, #4294967295
 80062fc:	4620      	mov	r0, r4
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	200002e8 	.word	0x200002e8

08006304 <_malloc_r>:
 8006304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006308:	1ccd      	adds	r5, r1, #3
 800630a:	f025 0503 	bic.w	r5, r5, #3
 800630e:	3508      	adds	r5, #8
 8006310:	2d0c      	cmp	r5, #12
 8006312:	bf38      	it	cc
 8006314:	250c      	movcc	r5, #12
 8006316:	2d00      	cmp	r5, #0
 8006318:	4607      	mov	r7, r0
 800631a:	db01      	blt.n	8006320 <_malloc_r+0x1c>
 800631c:	42a9      	cmp	r1, r5
 800631e:	d905      	bls.n	800632c <_malloc_r+0x28>
 8006320:	230c      	movs	r3, #12
 8006322:	2600      	movs	r6, #0
 8006324:	603b      	str	r3, [r7, #0]
 8006326:	4630      	mov	r0, r6
 8006328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800632c:	4e2e      	ldr	r6, [pc, #184]	; (80063e8 <_malloc_r+0xe4>)
 800632e:	f000 f8cd 	bl	80064cc <__malloc_lock>
 8006332:	6833      	ldr	r3, [r6, #0]
 8006334:	461c      	mov	r4, r3
 8006336:	bb34      	cbnz	r4, 8006386 <_malloc_r+0x82>
 8006338:	4629      	mov	r1, r5
 800633a:	4638      	mov	r0, r7
 800633c:	f7ff ffc2 	bl	80062c4 <sbrk_aligned>
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	4604      	mov	r4, r0
 8006344:	d14d      	bne.n	80063e2 <_malloc_r+0xde>
 8006346:	6834      	ldr	r4, [r6, #0]
 8006348:	4626      	mov	r6, r4
 800634a:	2e00      	cmp	r6, #0
 800634c:	d140      	bne.n	80063d0 <_malloc_r+0xcc>
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	4631      	mov	r1, r6
 8006352:	4638      	mov	r0, r7
 8006354:	eb04 0803 	add.w	r8, r4, r3
 8006358:	f000 f84e 	bl	80063f8 <_sbrk_r>
 800635c:	4580      	cmp	r8, r0
 800635e:	d13a      	bne.n	80063d6 <_malloc_r+0xd2>
 8006360:	6821      	ldr	r1, [r4, #0]
 8006362:	3503      	adds	r5, #3
 8006364:	1a6d      	subs	r5, r5, r1
 8006366:	f025 0503 	bic.w	r5, r5, #3
 800636a:	3508      	adds	r5, #8
 800636c:	2d0c      	cmp	r5, #12
 800636e:	bf38      	it	cc
 8006370:	250c      	movcc	r5, #12
 8006372:	4638      	mov	r0, r7
 8006374:	4629      	mov	r1, r5
 8006376:	f7ff ffa5 	bl	80062c4 <sbrk_aligned>
 800637a:	3001      	adds	r0, #1
 800637c:	d02b      	beq.n	80063d6 <_malloc_r+0xd2>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	442b      	add	r3, r5
 8006382:	6023      	str	r3, [r4, #0]
 8006384:	e00e      	b.n	80063a4 <_malloc_r+0xa0>
 8006386:	6822      	ldr	r2, [r4, #0]
 8006388:	1b52      	subs	r2, r2, r5
 800638a:	d41e      	bmi.n	80063ca <_malloc_r+0xc6>
 800638c:	2a0b      	cmp	r2, #11
 800638e:	d916      	bls.n	80063be <_malloc_r+0xba>
 8006390:	1961      	adds	r1, r4, r5
 8006392:	42a3      	cmp	r3, r4
 8006394:	6025      	str	r5, [r4, #0]
 8006396:	bf18      	it	ne
 8006398:	6059      	strne	r1, [r3, #4]
 800639a:	6863      	ldr	r3, [r4, #4]
 800639c:	bf08      	it	eq
 800639e:	6031      	streq	r1, [r6, #0]
 80063a0:	5162      	str	r2, [r4, r5]
 80063a2:	604b      	str	r3, [r1, #4]
 80063a4:	4638      	mov	r0, r7
 80063a6:	f104 060b 	add.w	r6, r4, #11
 80063aa:	f000 f895 	bl	80064d8 <__malloc_unlock>
 80063ae:	f026 0607 	bic.w	r6, r6, #7
 80063b2:	1d23      	adds	r3, r4, #4
 80063b4:	1af2      	subs	r2, r6, r3
 80063b6:	d0b6      	beq.n	8006326 <_malloc_r+0x22>
 80063b8:	1b9b      	subs	r3, r3, r6
 80063ba:	50a3      	str	r3, [r4, r2]
 80063bc:	e7b3      	b.n	8006326 <_malloc_r+0x22>
 80063be:	6862      	ldr	r2, [r4, #4]
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	bf0c      	ite	eq
 80063c4:	6032      	streq	r2, [r6, #0]
 80063c6:	605a      	strne	r2, [r3, #4]
 80063c8:	e7ec      	b.n	80063a4 <_malloc_r+0xa0>
 80063ca:	4623      	mov	r3, r4
 80063cc:	6864      	ldr	r4, [r4, #4]
 80063ce:	e7b2      	b.n	8006336 <_malloc_r+0x32>
 80063d0:	4634      	mov	r4, r6
 80063d2:	6876      	ldr	r6, [r6, #4]
 80063d4:	e7b9      	b.n	800634a <_malloc_r+0x46>
 80063d6:	230c      	movs	r3, #12
 80063d8:	4638      	mov	r0, r7
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	f000 f87c 	bl	80064d8 <__malloc_unlock>
 80063e0:	e7a1      	b.n	8006326 <_malloc_r+0x22>
 80063e2:	6025      	str	r5, [r4, #0]
 80063e4:	e7de      	b.n	80063a4 <_malloc_r+0xa0>
 80063e6:	bf00      	nop
 80063e8:	200002e4 	.word	0x200002e4

080063ec <nan>:
 80063ec:	2000      	movs	r0, #0
 80063ee:	4901      	ldr	r1, [pc, #4]	; (80063f4 <nan+0x8>)
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	7ff80000 	.word	0x7ff80000

080063f8 <_sbrk_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	2300      	movs	r3, #0
 80063fc:	4d05      	ldr	r5, [pc, #20]	; (8006414 <_sbrk_r+0x1c>)
 80063fe:	4604      	mov	r4, r0
 8006400:	4608      	mov	r0, r1
 8006402:	602b      	str	r3, [r5, #0]
 8006404:	f7fa ff90 	bl	8001328 <_sbrk>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d102      	bne.n	8006412 <_sbrk_r+0x1a>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	b103      	cbz	r3, 8006412 <_sbrk_r+0x1a>
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	bd38      	pop	{r3, r4, r5, pc}
 8006414:	200002ec 	.word	0x200002ec

08006418 <strncmp>:
 8006418:	4603      	mov	r3, r0
 800641a:	b510      	push	{r4, lr}
 800641c:	b172      	cbz	r2, 800643c <strncmp+0x24>
 800641e:	3901      	subs	r1, #1
 8006420:	1884      	adds	r4, r0, r2
 8006422:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006426:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800642a:	4290      	cmp	r0, r2
 800642c:	d101      	bne.n	8006432 <strncmp+0x1a>
 800642e:	42a3      	cmp	r3, r4
 8006430:	d101      	bne.n	8006436 <strncmp+0x1e>
 8006432:	1a80      	subs	r0, r0, r2
 8006434:	bd10      	pop	{r4, pc}
 8006436:	2800      	cmp	r0, #0
 8006438:	d1f3      	bne.n	8006422 <strncmp+0xa>
 800643a:	e7fa      	b.n	8006432 <strncmp+0x1a>
 800643c:	4610      	mov	r0, r2
 800643e:	e7f9      	b.n	8006434 <strncmp+0x1c>

08006440 <__ascii_wctomb>:
 8006440:	4603      	mov	r3, r0
 8006442:	4608      	mov	r0, r1
 8006444:	b141      	cbz	r1, 8006458 <__ascii_wctomb+0x18>
 8006446:	2aff      	cmp	r2, #255	; 0xff
 8006448:	d904      	bls.n	8006454 <__ascii_wctomb+0x14>
 800644a:	228a      	movs	r2, #138	; 0x8a
 800644c:	f04f 30ff 	mov.w	r0, #4294967295
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	4770      	bx	lr
 8006454:	2001      	movs	r0, #1
 8006456:	700a      	strb	r2, [r1, #0]
 8006458:	4770      	bx	lr
	...

0800645c <__assert_func>:
 800645c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800645e:	4614      	mov	r4, r2
 8006460:	461a      	mov	r2, r3
 8006462:	4b09      	ldr	r3, [pc, #36]	; (8006488 <__assert_func+0x2c>)
 8006464:	4605      	mov	r5, r0
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68d8      	ldr	r0, [r3, #12]
 800646a:	b14c      	cbz	r4, 8006480 <__assert_func+0x24>
 800646c:	4b07      	ldr	r3, [pc, #28]	; (800648c <__assert_func+0x30>)
 800646e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006472:	9100      	str	r1, [sp, #0]
 8006474:	462b      	mov	r3, r5
 8006476:	4906      	ldr	r1, [pc, #24]	; (8006490 <__assert_func+0x34>)
 8006478:	f000 f80e 	bl	8006498 <fiprintf>
 800647c:	f000 fc28 	bl	8006cd0 <abort>
 8006480:	4b04      	ldr	r3, [pc, #16]	; (8006494 <__assert_func+0x38>)
 8006482:	461c      	mov	r4, r3
 8006484:	e7f3      	b.n	800646e <__assert_func+0x12>
 8006486:	bf00      	nop
 8006488:	20000010 	.word	0x20000010
 800648c:	080075cc 	.word	0x080075cc
 8006490:	080075d9 	.word	0x080075d9
 8006494:	08007607 	.word	0x08007607

08006498 <fiprintf>:
 8006498:	b40e      	push	{r1, r2, r3}
 800649a:	b503      	push	{r0, r1, lr}
 800649c:	4601      	mov	r1, r0
 800649e:	ab03      	add	r3, sp, #12
 80064a0:	4805      	ldr	r0, [pc, #20]	; (80064b8 <fiprintf+0x20>)
 80064a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80064a6:	6800      	ldr	r0, [r0, #0]
 80064a8:	9301      	str	r3, [sp, #4]
 80064aa:	f000 f88b 	bl	80065c4 <_vfiprintf_r>
 80064ae:	b002      	add	sp, #8
 80064b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064b4:	b003      	add	sp, #12
 80064b6:	4770      	bx	lr
 80064b8:	20000010 	.word	0x20000010

080064bc <malloc>:
 80064bc:	4b02      	ldr	r3, [pc, #8]	; (80064c8 <malloc+0xc>)
 80064be:	4601      	mov	r1, r0
 80064c0:	6818      	ldr	r0, [r3, #0]
 80064c2:	f7ff bf1f 	b.w	8006304 <_malloc_r>
 80064c6:	bf00      	nop
 80064c8:	20000010 	.word	0x20000010

080064cc <__malloc_lock>:
 80064cc:	4801      	ldr	r0, [pc, #4]	; (80064d4 <__malloc_lock+0x8>)
 80064ce:	f000 bdbb 	b.w	8007048 <__retarget_lock_acquire_recursive>
 80064d2:	bf00      	nop
 80064d4:	200002f0 	.word	0x200002f0

080064d8 <__malloc_unlock>:
 80064d8:	4801      	ldr	r0, [pc, #4]	; (80064e0 <__malloc_unlock+0x8>)
 80064da:	f000 bdb6 	b.w	800704a <__retarget_lock_release_recursive>
 80064de:	bf00      	nop
 80064e0:	200002f0 	.word	0x200002f0

080064e4 <_free_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4605      	mov	r5, r0
 80064e8:	2900      	cmp	r1, #0
 80064ea:	d040      	beq.n	800656e <_free_r+0x8a>
 80064ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064f0:	1f0c      	subs	r4, r1, #4
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	bfb8      	it	lt
 80064f6:	18e4      	addlt	r4, r4, r3
 80064f8:	f7ff ffe8 	bl	80064cc <__malloc_lock>
 80064fc:	4a1c      	ldr	r2, [pc, #112]	; (8006570 <_free_r+0x8c>)
 80064fe:	6813      	ldr	r3, [r2, #0]
 8006500:	b933      	cbnz	r3, 8006510 <_free_r+0x2c>
 8006502:	6063      	str	r3, [r4, #4]
 8006504:	6014      	str	r4, [r2, #0]
 8006506:	4628      	mov	r0, r5
 8006508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800650c:	f7ff bfe4 	b.w	80064d8 <__malloc_unlock>
 8006510:	42a3      	cmp	r3, r4
 8006512:	d908      	bls.n	8006526 <_free_r+0x42>
 8006514:	6820      	ldr	r0, [r4, #0]
 8006516:	1821      	adds	r1, r4, r0
 8006518:	428b      	cmp	r3, r1
 800651a:	bf01      	itttt	eq
 800651c:	6819      	ldreq	r1, [r3, #0]
 800651e:	685b      	ldreq	r3, [r3, #4]
 8006520:	1809      	addeq	r1, r1, r0
 8006522:	6021      	streq	r1, [r4, #0]
 8006524:	e7ed      	b.n	8006502 <_free_r+0x1e>
 8006526:	461a      	mov	r2, r3
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	b10b      	cbz	r3, 8006530 <_free_r+0x4c>
 800652c:	42a3      	cmp	r3, r4
 800652e:	d9fa      	bls.n	8006526 <_free_r+0x42>
 8006530:	6811      	ldr	r1, [r2, #0]
 8006532:	1850      	adds	r0, r2, r1
 8006534:	42a0      	cmp	r0, r4
 8006536:	d10b      	bne.n	8006550 <_free_r+0x6c>
 8006538:	6820      	ldr	r0, [r4, #0]
 800653a:	4401      	add	r1, r0
 800653c:	1850      	adds	r0, r2, r1
 800653e:	4283      	cmp	r3, r0
 8006540:	6011      	str	r1, [r2, #0]
 8006542:	d1e0      	bne.n	8006506 <_free_r+0x22>
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	4401      	add	r1, r0
 800654a:	6011      	str	r1, [r2, #0]
 800654c:	6053      	str	r3, [r2, #4]
 800654e:	e7da      	b.n	8006506 <_free_r+0x22>
 8006550:	d902      	bls.n	8006558 <_free_r+0x74>
 8006552:	230c      	movs	r3, #12
 8006554:	602b      	str	r3, [r5, #0]
 8006556:	e7d6      	b.n	8006506 <_free_r+0x22>
 8006558:	6820      	ldr	r0, [r4, #0]
 800655a:	1821      	adds	r1, r4, r0
 800655c:	428b      	cmp	r3, r1
 800655e:	bf01      	itttt	eq
 8006560:	6819      	ldreq	r1, [r3, #0]
 8006562:	685b      	ldreq	r3, [r3, #4]
 8006564:	1809      	addeq	r1, r1, r0
 8006566:	6021      	streq	r1, [r4, #0]
 8006568:	6063      	str	r3, [r4, #4]
 800656a:	6054      	str	r4, [r2, #4]
 800656c:	e7cb      	b.n	8006506 <_free_r+0x22>
 800656e:	bd38      	pop	{r3, r4, r5, pc}
 8006570:	200002e4 	.word	0x200002e4

08006574 <__sfputc_r>:
 8006574:	6893      	ldr	r3, [r2, #8]
 8006576:	b410      	push	{r4}
 8006578:	3b01      	subs	r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	6093      	str	r3, [r2, #8]
 800657e:	da07      	bge.n	8006590 <__sfputc_r+0x1c>
 8006580:	6994      	ldr	r4, [r2, #24]
 8006582:	42a3      	cmp	r3, r4
 8006584:	db01      	blt.n	800658a <__sfputc_r+0x16>
 8006586:	290a      	cmp	r1, #10
 8006588:	d102      	bne.n	8006590 <__sfputc_r+0x1c>
 800658a:	bc10      	pop	{r4}
 800658c:	f000 bae0 	b.w	8006b50 <__swbuf_r>
 8006590:	6813      	ldr	r3, [r2, #0]
 8006592:	1c58      	adds	r0, r3, #1
 8006594:	6010      	str	r0, [r2, #0]
 8006596:	7019      	strb	r1, [r3, #0]
 8006598:	4608      	mov	r0, r1
 800659a:	bc10      	pop	{r4}
 800659c:	4770      	bx	lr

0800659e <__sfputs_r>:
 800659e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a0:	4606      	mov	r6, r0
 80065a2:	460f      	mov	r7, r1
 80065a4:	4614      	mov	r4, r2
 80065a6:	18d5      	adds	r5, r2, r3
 80065a8:	42ac      	cmp	r4, r5
 80065aa:	d101      	bne.n	80065b0 <__sfputs_r+0x12>
 80065ac:	2000      	movs	r0, #0
 80065ae:	e007      	b.n	80065c0 <__sfputs_r+0x22>
 80065b0:	463a      	mov	r2, r7
 80065b2:	4630      	mov	r0, r6
 80065b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b8:	f7ff ffdc 	bl	8006574 <__sfputc_r>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d1f3      	bne.n	80065a8 <__sfputs_r+0xa>
 80065c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065c4 <_vfiprintf_r>:
 80065c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c8:	460d      	mov	r5, r1
 80065ca:	4614      	mov	r4, r2
 80065cc:	4698      	mov	r8, r3
 80065ce:	4606      	mov	r6, r0
 80065d0:	b09d      	sub	sp, #116	; 0x74
 80065d2:	b118      	cbz	r0, 80065dc <_vfiprintf_r+0x18>
 80065d4:	6983      	ldr	r3, [r0, #24]
 80065d6:	b90b      	cbnz	r3, 80065dc <_vfiprintf_r+0x18>
 80065d8:	f000 fc98 	bl	8006f0c <__sinit>
 80065dc:	4b89      	ldr	r3, [pc, #548]	; (8006804 <_vfiprintf_r+0x240>)
 80065de:	429d      	cmp	r5, r3
 80065e0:	d11b      	bne.n	800661a <_vfiprintf_r+0x56>
 80065e2:	6875      	ldr	r5, [r6, #4]
 80065e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065e6:	07d9      	lsls	r1, r3, #31
 80065e8:	d405      	bmi.n	80065f6 <_vfiprintf_r+0x32>
 80065ea:	89ab      	ldrh	r3, [r5, #12]
 80065ec:	059a      	lsls	r2, r3, #22
 80065ee:	d402      	bmi.n	80065f6 <_vfiprintf_r+0x32>
 80065f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065f2:	f000 fd29 	bl	8007048 <__retarget_lock_acquire_recursive>
 80065f6:	89ab      	ldrh	r3, [r5, #12]
 80065f8:	071b      	lsls	r3, r3, #28
 80065fa:	d501      	bpl.n	8006600 <_vfiprintf_r+0x3c>
 80065fc:	692b      	ldr	r3, [r5, #16]
 80065fe:	b9eb      	cbnz	r3, 800663c <_vfiprintf_r+0x78>
 8006600:	4629      	mov	r1, r5
 8006602:	4630      	mov	r0, r6
 8006604:	f000 faf6 	bl	8006bf4 <__swsetup_r>
 8006608:	b1c0      	cbz	r0, 800663c <_vfiprintf_r+0x78>
 800660a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800660c:	07dc      	lsls	r4, r3, #31
 800660e:	d50e      	bpl.n	800662e <_vfiprintf_r+0x6a>
 8006610:	f04f 30ff 	mov.w	r0, #4294967295
 8006614:	b01d      	add	sp, #116	; 0x74
 8006616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661a:	4b7b      	ldr	r3, [pc, #492]	; (8006808 <_vfiprintf_r+0x244>)
 800661c:	429d      	cmp	r5, r3
 800661e:	d101      	bne.n	8006624 <_vfiprintf_r+0x60>
 8006620:	68b5      	ldr	r5, [r6, #8]
 8006622:	e7df      	b.n	80065e4 <_vfiprintf_r+0x20>
 8006624:	4b79      	ldr	r3, [pc, #484]	; (800680c <_vfiprintf_r+0x248>)
 8006626:	429d      	cmp	r5, r3
 8006628:	bf08      	it	eq
 800662a:	68f5      	ldreq	r5, [r6, #12]
 800662c:	e7da      	b.n	80065e4 <_vfiprintf_r+0x20>
 800662e:	89ab      	ldrh	r3, [r5, #12]
 8006630:	0598      	lsls	r0, r3, #22
 8006632:	d4ed      	bmi.n	8006610 <_vfiprintf_r+0x4c>
 8006634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006636:	f000 fd08 	bl	800704a <__retarget_lock_release_recursive>
 800663a:	e7e9      	b.n	8006610 <_vfiprintf_r+0x4c>
 800663c:	2300      	movs	r3, #0
 800663e:	9309      	str	r3, [sp, #36]	; 0x24
 8006640:	2320      	movs	r3, #32
 8006642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006646:	2330      	movs	r3, #48	; 0x30
 8006648:	f04f 0901 	mov.w	r9, #1
 800664c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006650:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006810 <_vfiprintf_r+0x24c>
 8006654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006658:	4623      	mov	r3, r4
 800665a:	469a      	mov	sl, r3
 800665c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006660:	b10a      	cbz	r2, 8006666 <_vfiprintf_r+0xa2>
 8006662:	2a25      	cmp	r2, #37	; 0x25
 8006664:	d1f9      	bne.n	800665a <_vfiprintf_r+0x96>
 8006666:	ebba 0b04 	subs.w	fp, sl, r4
 800666a:	d00b      	beq.n	8006684 <_vfiprintf_r+0xc0>
 800666c:	465b      	mov	r3, fp
 800666e:	4622      	mov	r2, r4
 8006670:	4629      	mov	r1, r5
 8006672:	4630      	mov	r0, r6
 8006674:	f7ff ff93 	bl	800659e <__sfputs_r>
 8006678:	3001      	adds	r0, #1
 800667a:	f000 80aa 	beq.w	80067d2 <_vfiprintf_r+0x20e>
 800667e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006680:	445a      	add	r2, fp
 8006682:	9209      	str	r2, [sp, #36]	; 0x24
 8006684:	f89a 3000 	ldrb.w	r3, [sl]
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 80a2 	beq.w	80067d2 <_vfiprintf_r+0x20e>
 800668e:	2300      	movs	r3, #0
 8006690:	f04f 32ff 	mov.w	r2, #4294967295
 8006694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006698:	f10a 0a01 	add.w	sl, sl, #1
 800669c:	9304      	str	r3, [sp, #16]
 800669e:	9307      	str	r3, [sp, #28]
 80066a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066a4:	931a      	str	r3, [sp, #104]	; 0x68
 80066a6:	4654      	mov	r4, sl
 80066a8:	2205      	movs	r2, #5
 80066aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ae:	4858      	ldr	r0, [pc, #352]	; (8006810 <_vfiprintf_r+0x24c>)
 80066b0:	f000 fd32 	bl	8007118 <memchr>
 80066b4:	9a04      	ldr	r2, [sp, #16]
 80066b6:	b9d8      	cbnz	r0, 80066f0 <_vfiprintf_r+0x12c>
 80066b8:	06d1      	lsls	r1, r2, #27
 80066ba:	bf44      	itt	mi
 80066bc:	2320      	movmi	r3, #32
 80066be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066c2:	0713      	lsls	r3, r2, #28
 80066c4:	bf44      	itt	mi
 80066c6:	232b      	movmi	r3, #43	; 0x2b
 80066c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066cc:	f89a 3000 	ldrb.w	r3, [sl]
 80066d0:	2b2a      	cmp	r3, #42	; 0x2a
 80066d2:	d015      	beq.n	8006700 <_vfiprintf_r+0x13c>
 80066d4:	4654      	mov	r4, sl
 80066d6:	2000      	movs	r0, #0
 80066d8:	f04f 0c0a 	mov.w	ip, #10
 80066dc:	9a07      	ldr	r2, [sp, #28]
 80066de:	4621      	mov	r1, r4
 80066e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066e4:	3b30      	subs	r3, #48	; 0x30
 80066e6:	2b09      	cmp	r3, #9
 80066e8:	d94e      	bls.n	8006788 <_vfiprintf_r+0x1c4>
 80066ea:	b1b0      	cbz	r0, 800671a <_vfiprintf_r+0x156>
 80066ec:	9207      	str	r2, [sp, #28]
 80066ee:	e014      	b.n	800671a <_vfiprintf_r+0x156>
 80066f0:	eba0 0308 	sub.w	r3, r0, r8
 80066f4:	fa09 f303 	lsl.w	r3, r9, r3
 80066f8:	4313      	orrs	r3, r2
 80066fa:	46a2      	mov	sl, r4
 80066fc:	9304      	str	r3, [sp, #16]
 80066fe:	e7d2      	b.n	80066a6 <_vfiprintf_r+0xe2>
 8006700:	9b03      	ldr	r3, [sp, #12]
 8006702:	1d19      	adds	r1, r3, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	9103      	str	r1, [sp, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	bfbb      	ittet	lt
 800670c:	425b      	neglt	r3, r3
 800670e:	f042 0202 	orrlt.w	r2, r2, #2
 8006712:	9307      	strge	r3, [sp, #28]
 8006714:	9307      	strlt	r3, [sp, #28]
 8006716:	bfb8      	it	lt
 8006718:	9204      	strlt	r2, [sp, #16]
 800671a:	7823      	ldrb	r3, [r4, #0]
 800671c:	2b2e      	cmp	r3, #46	; 0x2e
 800671e:	d10c      	bne.n	800673a <_vfiprintf_r+0x176>
 8006720:	7863      	ldrb	r3, [r4, #1]
 8006722:	2b2a      	cmp	r3, #42	; 0x2a
 8006724:	d135      	bne.n	8006792 <_vfiprintf_r+0x1ce>
 8006726:	9b03      	ldr	r3, [sp, #12]
 8006728:	3402      	adds	r4, #2
 800672a:	1d1a      	adds	r2, r3, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	9203      	str	r2, [sp, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	bfb8      	it	lt
 8006734:	f04f 33ff 	movlt.w	r3, #4294967295
 8006738:	9305      	str	r3, [sp, #20]
 800673a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006814 <_vfiprintf_r+0x250>
 800673e:	2203      	movs	r2, #3
 8006740:	4650      	mov	r0, sl
 8006742:	7821      	ldrb	r1, [r4, #0]
 8006744:	f000 fce8 	bl	8007118 <memchr>
 8006748:	b140      	cbz	r0, 800675c <_vfiprintf_r+0x198>
 800674a:	2340      	movs	r3, #64	; 0x40
 800674c:	eba0 000a 	sub.w	r0, r0, sl
 8006750:	fa03 f000 	lsl.w	r0, r3, r0
 8006754:	9b04      	ldr	r3, [sp, #16]
 8006756:	3401      	adds	r4, #1
 8006758:	4303      	orrs	r3, r0
 800675a:	9304      	str	r3, [sp, #16]
 800675c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006760:	2206      	movs	r2, #6
 8006762:	482d      	ldr	r0, [pc, #180]	; (8006818 <_vfiprintf_r+0x254>)
 8006764:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006768:	f000 fcd6 	bl	8007118 <memchr>
 800676c:	2800      	cmp	r0, #0
 800676e:	d03f      	beq.n	80067f0 <_vfiprintf_r+0x22c>
 8006770:	4b2a      	ldr	r3, [pc, #168]	; (800681c <_vfiprintf_r+0x258>)
 8006772:	bb1b      	cbnz	r3, 80067bc <_vfiprintf_r+0x1f8>
 8006774:	9b03      	ldr	r3, [sp, #12]
 8006776:	3307      	adds	r3, #7
 8006778:	f023 0307 	bic.w	r3, r3, #7
 800677c:	3308      	adds	r3, #8
 800677e:	9303      	str	r3, [sp, #12]
 8006780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006782:	443b      	add	r3, r7
 8006784:	9309      	str	r3, [sp, #36]	; 0x24
 8006786:	e767      	b.n	8006658 <_vfiprintf_r+0x94>
 8006788:	460c      	mov	r4, r1
 800678a:	2001      	movs	r0, #1
 800678c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006790:	e7a5      	b.n	80066de <_vfiprintf_r+0x11a>
 8006792:	2300      	movs	r3, #0
 8006794:	f04f 0c0a 	mov.w	ip, #10
 8006798:	4619      	mov	r1, r3
 800679a:	3401      	adds	r4, #1
 800679c:	9305      	str	r3, [sp, #20]
 800679e:	4620      	mov	r0, r4
 80067a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067a4:	3a30      	subs	r2, #48	; 0x30
 80067a6:	2a09      	cmp	r2, #9
 80067a8:	d903      	bls.n	80067b2 <_vfiprintf_r+0x1ee>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d0c5      	beq.n	800673a <_vfiprintf_r+0x176>
 80067ae:	9105      	str	r1, [sp, #20]
 80067b0:	e7c3      	b.n	800673a <_vfiprintf_r+0x176>
 80067b2:	4604      	mov	r4, r0
 80067b4:	2301      	movs	r3, #1
 80067b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80067ba:	e7f0      	b.n	800679e <_vfiprintf_r+0x1da>
 80067bc:	ab03      	add	r3, sp, #12
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	462a      	mov	r2, r5
 80067c2:	4630      	mov	r0, r6
 80067c4:	4b16      	ldr	r3, [pc, #88]	; (8006820 <_vfiprintf_r+0x25c>)
 80067c6:	a904      	add	r1, sp, #16
 80067c8:	f3af 8000 	nop.w
 80067cc:	4607      	mov	r7, r0
 80067ce:	1c78      	adds	r0, r7, #1
 80067d0:	d1d6      	bne.n	8006780 <_vfiprintf_r+0x1bc>
 80067d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067d4:	07d9      	lsls	r1, r3, #31
 80067d6:	d405      	bmi.n	80067e4 <_vfiprintf_r+0x220>
 80067d8:	89ab      	ldrh	r3, [r5, #12]
 80067da:	059a      	lsls	r2, r3, #22
 80067dc:	d402      	bmi.n	80067e4 <_vfiprintf_r+0x220>
 80067de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067e0:	f000 fc33 	bl	800704a <__retarget_lock_release_recursive>
 80067e4:	89ab      	ldrh	r3, [r5, #12]
 80067e6:	065b      	lsls	r3, r3, #25
 80067e8:	f53f af12 	bmi.w	8006610 <_vfiprintf_r+0x4c>
 80067ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ee:	e711      	b.n	8006614 <_vfiprintf_r+0x50>
 80067f0:	ab03      	add	r3, sp, #12
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	462a      	mov	r2, r5
 80067f6:	4630      	mov	r0, r6
 80067f8:	4b09      	ldr	r3, [pc, #36]	; (8006820 <_vfiprintf_r+0x25c>)
 80067fa:	a904      	add	r1, sp, #16
 80067fc:	f000 f882 	bl	8006904 <_printf_i>
 8006800:	e7e4      	b.n	80067cc <_vfiprintf_r+0x208>
 8006802:	bf00      	nop
 8006804:	0800775c 	.word	0x0800775c
 8006808:	0800777c 	.word	0x0800777c
 800680c:	0800773c 	.word	0x0800773c
 8006810:	08007709 	.word	0x08007709
 8006814:	0800770f 	.word	0x0800770f
 8006818:	08007713 	.word	0x08007713
 800681c:	00000000 	.word	0x00000000
 8006820:	0800659f 	.word	0x0800659f

08006824 <_printf_common>:
 8006824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006828:	4616      	mov	r6, r2
 800682a:	4699      	mov	r9, r3
 800682c:	688a      	ldr	r2, [r1, #8]
 800682e:	690b      	ldr	r3, [r1, #16]
 8006830:	4607      	mov	r7, r0
 8006832:	4293      	cmp	r3, r2
 8006834:	bfb8      	it	lt
 8006836:	4613      	movlt	r3, r2
 8006838:	6033      	str	r3, [r6, #0]
 800683a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800683e:	460c      	mov	r4, r1
 8006840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006844:	b10a      	cbz	r2, 800684a <_printf_common+0x26>
 8006846:	3301      	adds	r3, #1
 8006848:	6033      	str	r3, [r6, #0]
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	0699      	lsls	r1, r3, #26
 800684e:	bf42      	ittt	mi
 8006850:	6833      	ldrmi	r3, [r6, #0]
 8006852:	3302      	addmi	r3, #2
 8006854:	6033      	strmi	r3, [r6, #0]
 8006856:	6825      	ldr	r5, [r4, #0]
 8006858:	f015 0506 	ands.w	r5, r5, #6
 800685c:	d106      	bne.n	800686c <_printf_common+0x48>
 800685e:	f104 0a19 	add.w	sl, r4, #25
 8006862:	68e3      	ldr	r3, [r4, #12]
 8006864:	6832      	ldr	r2, [r6, #0]
 8006866:	1a9b      	subs	r3, r3, r2
 8006868:	42ab      	cmp	r3, r5
 800686a:	dc28      	bgt.n	80068be <_printf_common+0x9a>
 800686c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006870:	1e13      	subs	r3, r2, #0
 8006872:	6822      	ldr	r2, [r4, #0]
 8006874:	bf18      	it	ne
 8006876:	2301      	movne	r3, #1
 8006878:	0692      	lsls	r2, r2, #26
 800687a:	d42d      	bmi.n	80068d8 <_printf_common+0xb4>
 800687c:	4649      	mov	r1, r9
 800687e:	4638      	mov	r0, r7
 8006880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006884:	47c0      	blx	r8
 8006886:	3001      	adds	r0, #1
 8006888:	d020      	beq.n	80068cc <_printf_common+0xa8>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	68e5      	ldr	r5, [r4, #12]
 800688e:	f003 0306 	and.w	r3, r3, #6
 8006892:	2b04      	cmp	r3, #4
 8006894:	bf18      	it	ne
 8006896:	2500      	movne	r5, #0
 8006898:	6832      	ldr	r2, [r6, #0]
 800689a:	f04f 0600 	mov.w	r6, #0
 800689e:	68a3      	ldr	r3, [r4, #8]
 80068a0:	bf08      	it	eq
 80068a2:	1aad      	subeq	r5, r5, r2
 80068a4:	6922      	ldr	r2, [r4, #16]
 80068a6:	bf08      	it	eq
 80068a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068ac:	4293      	cmp	r3, r2
 80068ae:	bfc4      	itt	gt
 80068b0:	1a9b      	subgt	r3, r3, r2
 80068b2:	18ed      	addgt	r5, r5, r3
 80068b4:	341a      	adds	r4, #26
 80068b6:	42b5      	cmp	r5, r6
 80068b8:	d11a      	bne.n	80068f0 <_printf_common+0xcc>
 80068ba:	2000      	movs	r0, #0
 80068bc:	e008      	b.n	80068d0 <_printf_common+0xac>
 80068be:	2301      	movs	r3, #1
 80068c0:	4652      	mov	r2, sl
 80068c2:	4649      	mov	r1, r9
 80068c4:	4638      	mov	r0, r7
 80068c6:	47c0      	blx	r8
 80068c8:	3001      	adds	r0, #1
 80068ca:	d103      	bne.n	80068d4 <_printf_common+0xb0>
 80068cc:	f04f 30ff 	mov.w	r0, #4294967295
 80068d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d4:	3501      	adds	r5, #1
 80068d6:	e7c4      	b.n	8006862 <_printf_common+0x3e>
 80068d8:	2030      	movs	r0, #48	; 0x30
 80068da:	18e1      	adds	r1, r4, r3
 80068dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068e6:	4422      	add	r2, r4
 80068e8:	3302      	adds	r3, #2
 80068ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068ee:	e7c5      	b.n	800687c <_printf_common+0x58>
 80068f0:	2301      	movs	r3, #1
 80068f2:	4622      	mov	r2, r4
 80068f4:	4649      	mov	r1, r9
 80068f6:	4638      	mov	r0, r7
 80068f8:	47c0      	blx	r8
 80068fa:	3001      	adds	r0, #1
 80068fc:	d0e6      	beq.n	80068cc <_printf_common+0xa8>
 80068fe:	3601      	adds	r6, #1
 8006900:	e7d9      	b.n	80068b6 <_printf_common+0x92>
	...

08006904 <_printf_i>:
 8006904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006908:	7e0f      	ldrb	r7, [r1, #24]
 800690a:	4691      	mov	r9, r2
 800690c:	2f78      	cmp	r7, #120	; 0x78
 800690e:	4680      	mov	r8, r0
 8006910:	460c      	mov	r4, r1
 8006912:	469a      	mov	sl, r3
 8006914:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006916:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800691a:	d807      	bhi.n	800692c <_printf_i+0x28>
 800691c:	2f62      	cmp	r7, #98	; 0x62
 800691e:	d80a      	bhi.n	8006936 <_printf_i+0x32>
 8006920:	2f00      	cmp	r7, #0
 8006922:	f000 80d9 	beq.w	8006ad8 <_printf_i+0x1d4>
 8006926:	2f58      	cmp	r7, #88	; 0x58
 8006928:	f000 80a4 	beq.w	8006a74 <_printf_i+0x170>
 800692c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006934:	e03a      	b.n	80069ac <_printf_i+0xa8>
 8006936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800693a:	2b15      	cmp	r3, #21
 800693c:	d8f6      	bhi.n	800692c <_printf_i+0x28>
 800693e:	a101      	add	r1, pc, #4	; (adr r1, 8006944 <_printf_i+0x40>)
 8006940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006944:	0800699d 	.word	0x0800699d
 8006948:	080069b1 	.word	0x080069b1
 800694c:	0800692d 	.word	0x0800692d
 8006950:	0800692d 	.word	0x0800692d
 8006954:	0800692d 	.word	0x0800692d
 8006958:	0800692d 	.word	0x0800692d
 800695c:	080069b1 	.word	0x080069b1
 8006960:	0800692d 	.word	0x0800692d
 8006964:	0800692d 	.word	0x0800692d
 8006968:	0800692d 	.word	0x0800692d
 800696c:	0800692d 	.word	0x0800692d
 8006970:	08006abf 	.word	0x08006abf
 8006974:	080069e1 	.word	0x080069e1
 8006978:	08006aa1 	.word	0x08006aa1
 800697c:	0800692d 	.word	0x0800692d
 8006980:	0800692d 	.word	0x0800692d
 8006984:	08006ae1 	.word	0x08006ae1
 8006988:	0800692d 	.word	0x0800692d
 800698c:	080069e1 	.word	0x080069e1
 8006990:	0800692d 	.word	0x0800692d
 8006994:	0800692d 	.word	0x0800692d
 8006998:	08006aa9 	.word	0x08006aa9
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	1d1a      	adds	r2, r3, #4
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	602a      	str	r2, [r5, #0]
 80069a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069ac:	2301      	movs	r3, #1
 80069ae:	e0a4      	b.n	8006afa <_printf_i+0x1f6>
 80069b0:	6820      	ldr	r0, [r4, #0]
 80069b2:	6829      	ldr	r1, [r5, #0]
 80069b4:	0606      	lsls	r6, r0, #24
 80069b6:	f101 0304 	add.w	r3, r1, #4
 80069ba:	d50a      	bpl.n	80069d2 <_printf_i+0xce>
 80069bc:	680e      	ldr	r6, [r1, #0]
 80069be:	602b      	str	r3, [r5, #0]
 80069c0:	2e00      	cmp	r6, #0
 80069c2:	da03      	bge.n	80069cc <_printf_i+0xc8>
 80069c4:	232d      	movs	r3, #45	; 0x2d
 80069c6:	4276      	negs	r6, r6
 80069c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069cc:	230a      	movs	r3, #10
 80069ce:	485e      	ldr	r0, [pc, #376]	; (8006b48 <_printf_i+0x244>)
 80069d0:	e019      	b.n	8006a06 <_printf_i+0x102>
 80069d2:	680e      	ldr	r6, [r1, #0]
 80069d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069d8:	602b      	str	r3, [r5, #0]
 80069da:	bf18      	it	ne
 80069dc:	b236      	sxthne	r6, r6
 80069de:	e7ef      	b.n	80069c0 <_printf_i+0xbc>
 80069e0:	682b      	ldr	r3, [r5, #0]
 80069e2:	6820      	ldr	r0, [r4, #0]
 80069e4:	1d19      	adds	r1, r3, #4
 80069e6:	6029      	str	r1, [r5, #0]
 80069e8:	0601      	lsls	r1, r0, #24
 80069ea:	d501      	bpl.n	80069f0 <_printf_i+0xec>
 80069ec:	681e      	ldr	r6, [r3, #0]
 80069ee:	e002      	b.n	80069f6 <_printf_i+0xf2>
 80069f0:	0646      	lsls	r6, r0, #25
 80069f2:	d5fb      	bpl.n	80069ec <_printf_i+0xe8>
 80069f4:	881e      	ldrh	r6, [r3, #0]
 80069f6:	2f6f      	cmp	r7, #111	; 0x6f
 80069f8:	bf0c      	ite	eq
 80069fa:	2308      	moveq	r3, #8
 80069fc:	230a      	movne	r3, #10
 80069fe:	4852      	ldr	r0, [pc, #328]	; (8006b48 <_printf_i+0x244>)
 8006a00:	2100      	movs	r1, #0
 8006a02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a06:	6865      	ldr	r5, [r4, #4]
 8006a08:	2d00      	cmp	r5, #0
 8006a0a:	bfa8      	it	ge
 8006a0c:	6821      	ldrge	r1, [r4, #0]
 8006a0e:	60a5      	str	r5, [r4, #8]
 8006a10:	bfa4      	itt	ge
 8006a12:	f021 0104 	bicge.w	r1, r1, #4
 8006a16:	6021      	strge	r1, [r4, #0]
 8006a18:	b90e      	cbnz	r6, 8006a1e <_printf_i+0x11a>
 8006a1a:	2d00      	cmp	r5, #0
 8006a1c:	d04d      	beq.n	8006aba <_printf_i+0x1b6>
 8006a1e:	4615      	mov	r5, r2
 8006a20:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a24:	fb03 6711 	mls	r7, r3, r1, r6
 8006a28:	5dc7      	ldrb	r7, [r0, r7]
 8006a2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a2e:	4637      	mov	r7, r6
 8006a30:	42bb      	cmp	r3, r7
 8006a32:	460e      	mov	r6, r1
 8006a34:	d9f4      	bls.n	8006a20 <_printf_i+0x11c>
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	d10b      	bne.n	8006a52 <_printf_i+0x14e>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	07de      	lsls	r6, r3, #31
 8006a3e:	d508      	bpl.n	8006a52 <_printf_i+0x14e>
 8006a40:	6923      	ldr	r3, [r4, #16]
 8006a42:	6861      	ldr	r1, [r4, #4]
 8006a44:	4299      	cmp	r1, r3
 8006a46:	bfde      	ittt	le
 8006a48:	2330      	movle	r3, #48	; 0x30
 8006a4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a52:	1b52      	subs	r2, r2, r5
 8006a54:	6122      	str	r2, [r4, #16]
 8006a56:	464b      	mov	r3, r9
 8006a58:	4621      	mov	r1, r4
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	f8cd a000 	str.w	sl, [sp]
 8006a60:	aa03      	add	r2, sp, #12
 8006a62:	f7ff fedf 	bl	8006824 <_printf_common>
 8006a66:	3001      	adds	r0, #1
 8006a68:	d14c      	bne.n	8006b04 <_printf_i+0x200>
 8006a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6e:	b004      	add	sp, #16
 8006a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a74:	4834      	ldr	r0, [pc, #208]	; (8006b48 <_printf_i+0x244>)
 8006a76:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a7a:	6829      	ldr	r1, [r5, #0]
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a82:	6029      	str	r1, [r5, #0]
 8006a84:	061d      	lsls	r5, r3, #24
 8006a86:	d514      	bpl.n	8006ab2 <_printf_i+0x1ae>
 8006a88:	07df      	lsls	r7, r3, #31
 8006a8a:	bf44      	itt	mi
 8006a8c:	f043 0320 	orrmi.w	r3, r3, #32
 8006a90:	6023      	strmi	r3, [r4, #0]
 8006a92:	b91e      	cbnz	r6, 8006a9c <_printf_i+0x198>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	f023 0320 	bic.w	r3, r3, #32
 8006a9a:	6023      	str	r3, [r4, #0]
 8006a9c:	2310      	movs	r3, #16
 8006a9e:	e7af      	b.n	8006a00 <_printf_i+0xfc>
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	f043 0320 	orr.w	r3, r3, #32
 8006aa6:	6023      	str	r3, [r4, #0]
 8006aa8:	2378      	movs	r3, #120	; 0x78
 8006aaa:	4828      	ldr	r0, [pc, #160]	; (8006b4c <_printf_i+0x248>)
 8006aac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ab0:	e7e3      	b.n	8006a7a <_printf_i+0x176>
 8006ab2:	0659      	lsls	r1, r3, #25
 8006ab4:	bf48      	it	mi
 8006ab6:	b2b6      	uxthmi	r6, r6
 8006ab8:	e7e6      	b.n	8006a88 <_printf_i+0x184>
 8006aba:	4615      	mov	r5, r2
 8006abc:	e7bb      	b.n	8006a36 <_printf_i+0x132>
 8006abe:	682b      	ldr	r3, [r5, #0]
 8006ac0:	6826      	ldr	r6, [r4, #0]
 8006ac2:	1d18      	adds	r0, r3, #4
 8006ac4:	6961      	ldr	r1, [r4, #20]
 8006ac6:	6028      	str	r0, [r5, #0]
 8006ac8:	0635      	lsls	r5, r6, #24
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	d501      	bpl.n	8006ad2 <_printf_i+0x1ce>
 8006ace:	6019      	str	r1, [r3, #0]
 8006ad0:	e002      	b.n	8006ad8 <_printf_i+0x1d4>
 8006ad2:	0670      	lsls	r0, r6, #25
 8006ad4:	d5fb      	bpl.n	8006ace <_printf_i+0x1ca>
 8006ad6:	8019      	strh	r1, [r3, #0]
 8006ad8:	2300      	movs	r3, #0
 8006ada:	4615      	mov	r5, r2
 8006adc:	6123      	str	r3, [r4, #16]
 8006ade:	e7ba      	b.n	8006a56 <_printf_i+0x152>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	1d1a      	adds	r2, r3, #4
 8006ae6:	602a      	str	r2, [r5, #0]
 8006ae8:	681d      	ldr	r5, [r3, #0]
 8006aea:	6862      	ldr	r2, [r4, #4]
 8006aec:	4628      	mov	r0, r5
 8006aee:	f000 fb13 	bl	8007118 <memchr>
 8006af2:	b108      	cbz	r0, 8006af8 <_printf_i+0x1f4>
 8006af4:	1b40      	subs	r0, r0, r5
 8006af6:	6060      	str	r0, [r4, #4]
 8006af8:	6863      	ldr	r3, [r4, #4]
 8006afa:	6123      	str	r3, [r4, #16]
 8006afc:	2300      	movs	r3, #0
 8006afe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b02:	e7a8      	b.n	8006a56 <_printf_i+0x152>
 8006b04:	462a      	mov	r2, r5
 8006b06:	4649      	mov	r1, r9
 8006b08:	4640      	mov	r0, r8
 8006b0a:	6923      	ldr	r3, [r4, #16]
 8006b0c:	47d0      	blx	sl
 8006b0e:	3001      	adds	r0, #1
 8006b10:	d0ab      	beq.n	8006a6a <_printf_i+0x166>
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	079b      	lsls	r3, r3, #30
 8006b16:	d413      	bmi.n	8006b40 <_printf_i+0x23c>
 8006b18:	68e0      	ldr	r0, [r4, #12]
 8006b1a:	9b03      	ldr	r3, [sp, #12]
 8006b1c:	4298      	cmp	r0, r3
 8006b1e:	bfb8      	it	lt
 8006b20:	4618      	movlt	r0, r3
 8006b22:	e7a4      	b.n	8006a6e <_printf_i+0x16a>
 8006b24:	2301      	movs	r3, #1
 8006b26:	4632      	mov	r2, r6
 8006b28:	4649      	mov	r1, r9
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	47d0      	blx	sl
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d09b      	beq.n	8006a6a <_printf_i+0x166>
 8006b32:	3501      	adds	r5, #1
 8006b34:	68e3      	ldr	r3, [r4, #12]
 8006b36:	9903      	ldr	r1, [sp, #12]
 8006b38:	1a5b      	subs	r3, r3, r1
 8006b3a:	42ab      	cmp	r3, r5
 8006b3c:	dcf2      	bgt.n	8006b24 <_printf_i+0x220>
 8006b3e:	e7eb      	b.n	8006b18 <_printf_i+0x214>
 8006b40:	2500      	movs	r5, #0
 8006b42:	f104 0619 	add.w	r6, r4, #25
 8006b46:	e7f5      	b.n	8006b34 <_printf_i+0x230>
 8006b48:	0800771a 	.word	0x0800771a
 8006b4c:	0800772b 	.word	0x0800772b

08006b50 <__swbuf_r>:
 8006b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b52:	460e      	mov	r6, r1
 8006b54:	4614      	mov	r4, r2
 8006b56:	4605      	mov	r5, r0
 8006b58:	b118      	cbz	r0, 8006b62 <__swbuf_r+0x12>
 8006b5a:	6983      	ldr	r3, [r0, #24]
 8006b5c:	b90b      	cbnz	r3, 8006b62 <__swbuf_r+0x12>
 8006b5e:	f000 f9d5 	bl	8006f0c <__sinit>
 8006b62:	4b21      	ldr	r3, [pc, #132]	; (8006be8 <__swbuf_r+0x98>)
 8006b64:	429c      	cmp	r4, r3
 8006b66:	d12b      	bne.n	8006bc0 <__swbuf_r+0x70>
 8006b68:	686c      	ldr	r4, [r5, #4]
 8006b6a:	69a3      	ldr	r3, [r4, #24]
 8006b6c:	60a3      	str	r3, [r4, #8]
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	071a      	lsls	r2, r3, #28
 8006b72:	d52f      	bpl.n	8006bd4 <__swbuf_r+0x84>
 8006b74:	6923      	ldr	r3, [r4, #16]
 8006b76:	b36b      	cbz	r3, 8006bd4 <__swbuf_r+0x84>
 8006b78:	6923      	ldr	r3, [r4, #16]
 8006b7a:	6820      	ldr	r0, [r4, #0]
 8006b7c:	b2f6      	uxtb	r6, r6
 8006b7e:	1ac0      	subs	r0, r0, r3
 8006b80:	6963      	ldr	r3, [r4, #20]
 8006b82:	4637      	mov	r7, r6
 8006b84:	4283      	cmp	r3, r0
 8006b86:	dc04      	bgt.n	8006b92 <__swbuf_r+0x42>
 8006b88:	4621      	mov	r1, r4
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f000 f92a 	bl	8006de4 <_fflush_r>
 8006b90:	bb30      	cbnz	r0, 8006be0 <__swbuf_r+0x90>
 8006b92:	68a3      	ldr	r3, [r4, #8]
 8006b94:	3001      	adds	r0, #1
 8006b96:	3b01      	subs	r3, #1
 8006b98:	60a3      	str	r3, [r4, #8]
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	6022      	str	r2, [r4, #0]
 8006ba0:	701e      	strb	r6, [r3, #0]
 8006ba2:	6963      	ldr	r3, [r4, #20]
 8006ba4:	4283      	cmp	r3, r0
 8006ba6:	d004      	beq.n	8006bb2 <__swbuf_r+0x62>
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	07db      	lsls	r3, r3, #31
 8006bac:	d506      	bpl.n	8006bbc <__swbuf_r+0x6c>
 8006bae:	2e0a      	cmp	r6, #10
 8006bb0:	d104      	bne.n	8006bbc <__swbuf_r+0x6c>
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f000 f915 	bl	8006de4 <_fflush_r>
 8006bba:	b988      	cbnz	r0, 8006be0 <__swbuf_r+0x90>
 8006bbc:	4638      	mov	r0, r7
 8006bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc0:	4b0a      	ldr	r3, [pc, #40]	; (8006bec <__swbuf_r+0x9c>)
 8006bc2:	429c      	cmp	r4, r3
 8006bc4:	d101      	bne.n	8006bca <__swbuf_r+0x7a>
 8006bc6:	68ac      	ldr	r4, [r5, #8]
 8006bc8:	e7cf      	b.n	8006b6a <__swbuf_r+0x1a>
 8006bca:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <__swbuf_r+0xa0>)
 8006bcc:	429c      	cmp	r4, r3
 8006bce:	bf08      	it	eq
 8006bd0:	68ec      	ldreq	r4, [r5, #12]
 8006bd2:	e7ca      	b.n	8006b6a <__swbuf_r+0x1a>
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f000 f80c 	bl	8006bf4 <__swsetup_r>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d0cb      	beq.n	8006b78 <__swbuf_r+0x28>
 8006be0:	f04f 37ff 	mov.w	r7, #4294967295
 8006be4:	e7ea      	b.n	8006bbc <__swbuf_r+0x6c>
 8006be6:	bf00      	nop
 8006be8:	0800775c 	.word	0x0800775c
 8006bec:	0800777c 	.word	0x0800777c
 8006bf0:	0800773c 	.word	0x0800773c

08006bf4 <__swsetup_r>:
 8006bf4:	4b32      	ldr	r3, [pc, #200]	; (8006cc0 <__swsetup_r+0xcc>)
 8006bf6:	b570      	push	{r4, r5, r6, lr}
 8006bf8:	681d      	ldr	r5, [r3, #0]
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	460c      	mov	r4, r1
 8006bfe:	b125      	cbz	r5, 8006c0a <__swsetup_r+0x16>
 8006c00:	69ab      	ldr	r3, [r5, #24]
 8006c02:	b913      	cbnz	r3, 8006c0a <__swsetup_r+0x16>
 8006c04:	4628      	mov	r0, r5
 8006c06:	f000 f981 	bl	8006f0c <__sinit>
 8006c0a:	4b2e      	ldr	r3, [pc, #184]	; (8006cc4 <__swsetup_r+0xd0>)
 8006c0c:	429c      	cmp	r4, r3
 8006c0e:	d10f      	bne.n	8006c30 <__swsetup_r+0x3c>
 8006c10:	686c      	ldr	r4, [r5, #4]
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c18:	0719      	lsls	r1, r3, #28
 8006c1a:	d42c      	bmi.n	8006c76 <__swsetup_r+0x82>
 8006c1c:	06dd      	lsls	r5, r3, #27
 8006c1e:	d411      	bmi.n	8006c44 <__swsetup_r+0x50>
 8006c20:	2309      	movs	r3, #9
 8006c22:	6033      	str	r3, [r6, #0]
 8006c24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	81a3      	strh	r3, [r4, #12]
 8006c2e:	e03e      	b.n	8006cae <__swsetup_r+0xba>
 8006c30:	4b25      	ldr	r3, [pc, #148]	; (8006cc8 <__swsetup_r+0xd4>)
 8006c32:	429c      	cmp	r4, r3
 8006c34:	d101      	bne.n	8006c3a <__swsetup_r+0x46>
 8006c36:	68ac      	ldr	r4, [r5, #8]
 8006c38:	e7eb      	b.n	8006c12 <__swsetup_r+0x1e>
 8006c3a:	4b24      	ldr	r3, [pc, #144]	; (8006ccc <__swsetup_r+0xd8>)
 8006c3c:	429c      	cmp	r4, r3
 8006c3e:	bf08      	it	eq
 8006c40:	68ec      	ldreq	r4, [r5, #12]
 8006c42:	e7e6      	b.n	8006c12 <__swsetup_r+0x1e>
 8006c44:	0758      	lsls	r0, r3, #29
 8006c46:	d512      	bpl.n	8006c6e <__swsetup_r+0x7a>
 8006c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c4a:	b141      	cbz	r1, 8006c5e <__swsetup_r+0x6a>
 8006c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c50:	4299      	cmp	r1, r3
 8006c52:	d002      	beq.n	8006c5a <__swsetup_r+0x66>
 8006c54:	4630      	mov	r0, r6
 8006c56:	f7ff fc45 	bl	80064e4 <_free_r>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	6363      	str	r3, [r4, #52]	; 0x34
 8006c5e:	89a3      	ldrh	r3, [r4, #12]
 8006c60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c64:	81a3      	strh	r3, [r4, #12]
 8006c66:	2300      	movs	r3, #0
 8006c68:	6063      	str	r3, [r4, #4]
 8006c6a:	6923      	ldr	r3, [r4, #16]
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	f043 0308 	orr.w	r3, r3, #8
 8006c74:	81a3      	strh	r3, [r4, #12]
 8006c76:	6923      	ldr	r3, [r4, #16]
 8006c78:	b94b      	cbnz	r3, 8006c8e <__swsetup_r+0x9a>
 8006c7a:	89a3      	ldrh	r3, [r4, #12]
 8006c7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c84:	d003      	beq.n	8006c8e <__swsetup_r+0x9a>
 8006c86:	4621      	mov	r1, r4
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f000 fa05 	bl	8007098 <__smakebuf_r>
 8006c8e:	89a0      	ldrh	r0, [r4, #12]
 8006c90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c94:	f010 0301 	ands.w	r3, r0, #1
 8006c98:	d00a      	beq.n	8006cb0 <__swsetup_r+0xbc>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60a3      	str	r3, [r4, #8]
 8006c9e:	6963      	ldr	r3, [r4, #20]
 8006ca0:	425b      	negs	r3, r3
 8006ca2:	61a3      	str	r3, [r4, #24]
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	b943      	cbnz	r3, 8006cba <__swsetup_r+0xc6>
 8006ca8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006cac:	d1ba      	bne.n	8006c24 <__swsetup_r+0x30>
 8006cae:	bd70      	pop	{r4, r5, r6, pc}
 8006cb0:	0781      	lsls	r1, r0, #30
 8006cb2:	bf58      	it	pl
 8006cb4:	6963      	ldrpl	r3, [r4, #20]
 8006cb6:	60a3      	str	r3, [r4, #8]
 8006cb8:	e7f4      	b.n	8006ca4 <__swsetup_r+0xb0>
 8006cba:	2000      	movs	r0, #0
 8006cbc:	e7f7      	b.n	8006cae <__swsetup_r+0xba>
 8006cbe:	bf00      	nop
 8006cc0:	20000010 	.word	0x20000010
 8006cc4:	0800775c 	.word	0x0800775c
 8006cc8:	0800777c 	.word	0x0800777c
 8006ccc:	0800773c 	.word	0x0800773c

08006cd0 <abort>:
 8006cd0:	2006      	movs	r0, #6
 8006cd2:	b508      	push	{r3, lr}
 8006cd4:	f000 fa56 	bl	8007184 <raise>
 8006cd8:	2001      	movs	r0, #1
 8006cda:	f7fa face 	bl	800127a <_exit>
	...

08006ce0 <__sflush_r>:
 8006ce0:	898a      	ldrh	r2, [r1, #12]
 8006ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce4:	4605      	mov	r5, r0
 8006ce6:	0710      	lsls	r0, r2, #28
 8006ce8:	460c      	mov	r4, r1
 8006cea:	d457      	bmi.n	8006d9c <__sflush_r+0xbc>
 8006cec:	684b      	ldr	r3, [r1, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	dc04      	bgt.n	8006cfc <__sflush_r+0x1c>
 8006cf2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	dc01      	bgt.n	8006cfc <__sflush_r+0x1c>
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cfe:	2e00      	cmp	r6, #0
 8006d00:	d0fa      	beq.n	8006cf8 <__sflush_r+0x18>
 8006d02:	2300      	movs	r3, #0
 8006d04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d08:	682f      	ldr	r7, [r5, #0]
 8006d0a:	602b      	str	r3, [r5, #0]
 8006d0c:	d032      	beq.n	8006d74 <__sflush_r+0x94>
 8006d0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	075a      	lsls	r2, r3, #29
 8006d14:	d505      	bpl.n	8006d22 <__sflush_r+0x42>
 8006d16:	6863      	ldr	r3, [r4, #4]
 8006d18:	1ac0      	subs	r0, r0, r3
 8006d1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d1c:	b10b      	cbz	r3, 8006d22 <__sflush_r+0x42>
 8006d1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d20:	1ac0      	subs	r0, r0, r3
 8006d22:	2300      	movs	r3, #0
 8006d24:	4602      	mov	r2, r0
 8006d26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d28:	4628      	mov	r0, r5
 8006d2a:	6a21      	ldr	r1, [r4, #32]
 8006d2c:	47b0      	blx	r6
 8006d2e:	1c43      	adds	r3, r0, #1
 8006d30:	89a3      	ldrh	r3, [r4, #12]
 8006d32:	d106      	bne.n	8006d42 <__sflush_r+0x62>
 8006d34:	6829      	ldr	r1, [r5, #0]
 8006d36:	291d      	cmp	r1, #29
 8006d38:	d82c      	bhi.n	8006d94 <__sflush_r+0xb4>
 8006d3a:	4a29      	ldr	r2, [pc, #164]	; (8006de0 <__sflush_r+0x100>)
 8006d3c:	40ca      	lsrs	r2, r1
 8006d3e:	07d6      	lsls	r6, r2, #31
 8006d40:	d528      	bpl.n	8006d94 <__sflush_r+0xb4>
 8006d42:	2200      	movs	r2, #0
 8006d44:	6062      	str	r2, [r4, #4]
 8006d46:	6922      	ldr	r2, [r4, #16]
 8006d48:	04d9      	lsls	r1, r3, #19
 8006d4a:	6022      	str	r2, [r4, #0]
 8006d4c:	d504      	bpl.n	8006d58 <__sflush_r+0x78>
 8006d4e:	1c42      	adds	r2, r0, #1
 8006d50:	d101      	bne.n	8006d56 <__sflush_r+0x76>
 8006d52:	682b      	ldr	r3, [r5, #0]
 8006d54:	b903      	cbnz	r3, 8006d58 <__sflush_r+0x78>
 8006d56:	6560      	str	r0, [r4, #84]	; 0x54
 8006d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d5a:	602f      	str	r7, [r5, #0]
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	d0cb      	beq.n	8006cf8 <__sflush_r+0x18>
 8006d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d64:	4299      	cmp	r1, r3
 8006d66:	d002      	beq.n	8006d6e <__sflush_r+0x8e>
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f7ff fbbb 	bl	80064e4 <_free_r>
 8006d6e:	2000      	movs	r0, #0
 8006d70:	6360      	str	r0, [r4, #52]	; 0x34
 8006d72:	e7c2      	b.n	8006cfa <__sflush_r+0x1a>
 8006d74:	6a21      	ldr	r1, [r4, #32]
 8006d76:	2301      	movs	r3, #1
 8006d78:	4628      	mov	r0, r5
 8006d7a:	47b0      	blx	r6
 8006d7c:	1c41      	adds	r1, r0, #1
 8006d7e:	d1c7      	bne.n	8006d10 <__sflush_r+0x30>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0c4      	beq.n	8006d10 <__sflush_r+0x30>
 8006d86:	2b1d      	cmp	r3, #29
 8006d88:	d001      	beq.n	8006d8e <__sflush_r+0xae>
 8006d8a:	2b16      	cmp	r3, #22
 8006d8c:	d101      	bne.n	8006d92 <__sflush_r+0xb2>
 8006d8e:	602f      	str	r7, [r5, #0]
 8006d90:	e7b2      	b.n	8006cf8 <__sflush_r+0x18>
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	e7ae      	b.n	8006cfa <__sflush_r+0x1a>
 8006d9c:	690f      	ldr	r7, [r1, #16]
 8006d9e:	2f00      	cmp	r7, #0
 8006da0:	d0aa      	beq.n	8006cf8 <__sflush_r+0x18>
 8006da2:	0793      	lsls	r3, r2, #30
 8006da4:	bf18      	it	ne
 8006da6:	2300      	movne	r3, #0
 8006da8:	680e      	ldr	r6, [r1, #0]
 8006daa:	bf08      	it	eq
 8006dac:	694b      	ldreq	r3, [r1, #20]
 8006dae:	1bf6      	subs	r6, r6, r7
 8006db0:	600f      	str	r7, [r1, #0]
 8006db2:	608b      	str	r3, [r1, #8]
 8006db4:	2e00      	cmp	r6, #0
 8006db6:	dd9f      	ble.n	8006cf8 <__sflush_r+0x18>
 8006db8:	4633      	mov	r3, r6
 8006dba:	463a      	mov	r2, r7
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	6a21      	ldr	r1, [r4, #32]
 8006dc0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006dc4:	47e0      	blx	ip
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	dc06      	bgt.n	8006dd8 <__sflush_r+0xf8>
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dd4:	81a3      	strh	r3, [r4, #12]
 8006dd6:	e790      	b.n	8006cfa <__sflush_r+0x1a>
 8006dd8:	4407      	add	r7, r0
 8006dda:	1a36      	subs	r6, r6, r0
 8006ddc:	e7ea      	b.n	8006db4 <__sflush_r+0xd4>
 8006dde:	bf00      	nop
 8006de0:	20400001 	.word	0x20400001

08006de4 <_fflush_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	690b      	ldr	r3, [r1, #16]
 8006de8:	4605      	mov	r5, r0
 8006dea:	460c      	mov	r4, r1
 8006dec:	b913      	cbnz	r3, 8006df4 <_fflush_r+0x10>
 8006dee:	2500      	movs	r5, #0
 8006df0:	4628      	mov	r0, r5
 8006df2:	bd38      	pop	{r3, r4, r5, pc}
 8006df4:	b118      	cbz	r0, 8006dfe <_fflush_r+0x1a>
 8006df6:	6983      	ldr	r3, [r0, #24]
 8006df8:	b90b      	cbnz	r3, 8006dfe <_fflush_r+0x1a>
 8006dfa:	f000 f887 	bl	8006f0c <__sinit>
 8006dfe:	4b14      	ldr	r3, [pc, #80]	; (8006e50 <_fflush_r+0x6c>)
 8006e00:	429c      	cmp	r4, r3
 8006e02:	d11b      	bne.n	8006e3c <_fflush_r+0x58>
 8006e04:	686c      	ldr	r4, [r5, #4]
 8006e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d0ef      	beq.n	8006dee <_fflush_r+0xa>
 8006e0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e10:	07d0      	lsls	r0, r2, #31
 8006e12:	d404      	bmi.n	8006e1e <_fflush_r+0x3a>
 8006e14:	0599      	lsls	r1, r3, #22
 8006e16:	d402      	bmi.n	8006e1e <_fflush_r+0x3a>
 8006e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e1a:	f000 f915 	bl	8007048 <__retarget_lock_acquire_recursive>
 8006e1e:	4628      	mov	r0, r5
 8006e20:	4621      	mov	r1, r4
 8006e22:	f7ff ff5d 	bl	8006ce0 <__sflush_r>
 8006e26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e28:	4605      	mov	r5, r0
 8006e2a:	07da      	lsls	r2, r3, #31
 8006e2c:	d4e0      	bmi.n	8006df0 <_fflush_r+0xc>
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	059b      	lsls	r3, r3, #22
 8006e32:	d4dd      	bmi.n	8006df0 <_fflush_r+0xc>
 8006e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e36:	f000 f908 	bl	800704a <__retarget_lock_release_recursive>
 8006e3a:	e7d9      	b.n	8006df0 <_fflush_r+0xc>
 8006e3c:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <_fflush_r+0x70>)
 8006e3e:	429c      	cmp	r4, r3
 8006e40:	d101      	bne.n	8006e46 <_fflush_r+0x62>
 8006e42:	68ac      	ldr	r4, [r5, #8]
 8006e44:	e7df      	b.n	8006e06 <_fflush_r+0x22>
 8006e46:	4b04      	ldr	r3, [pc, #16]	; (8006e58 <_fflush_r+0x74>)
 8006e48:	429c      	cmp	r4, r3
 8006e4a:	bf08      	it	eq
 8006e4c:	68ec      	ldreq	r4, [r5, #12]
 8006e4e:	e7da      	b.n	8006e06 <_fflush_r+0x22>
 8006e50:	0800775c 	.word	0x0800775c
 8006e54:	0800777c 	.word	0x0800777c
 8006e58:	0800773c 	.word	0x0800773c

08006e5c <std>:
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	b510      	push	{r4, lr}
 8006e60:	4604      	mov	r4, r0
 8006e62:	e9c0 3300 	strd	r3, r3, [r0]
 8006e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e6a:	6083      	str	r3, [r0, #8]
 8006e6c:	8181      	strh	r1, [r0, #12]
 8006e6e:	6643      	str	r3, [r0, #100]	; 0x64
 8006e70:	81c2      	strh	r2, [r0, #14]
 8006e72:	6183      	str	r3, [r0, #24]
 8006e74:	4619      	mov	r1, r3
 8006e76:	2208      	movs	r2, #8
 8006e78:	305c      	adds	r0, #92	; 0x5c
 8006e7a:	f7fd fbb3 	bl	80045e4 <memset>
 8006e7e:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <std+0x38>)
 8006e80:	6224      	str	r4, [r4, #32]
 8006e82:	6263      	str	r3, [r4, #36]	; 0x24
 8006e84:	4b04      	ldr	r3, [pc, #16]	; (8006e98 <std+0x3c>)
 8006e86:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e88:	4b04      	ldr	r3, [pc, #16]	; (8006e9c <std+0x40>)
 8006e8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e8c:	4b04      	ldr	r3, [pc, #16]	; (8006ea0 <std+0x44>)
 8006e8e:	6323      	str	r3, [r4, #48]	; 0x30
 8006e90:	bd10      	pop	{r4, pc}
 8006e92:	bf00      	nop
 8006e94:	080071bd 	.word	0x080071bd
 8006e98:	080071df 	.word	0x080071df
 8006e9c:	08007217 	.word	0x08007217
 8006ea0:	0800723b 	.word	0x0800723b

08006ea4 <_cleanup_r>:
 8006ea4:	4901      	ldr	r1, [pc, #4]	; (8006eac <_cleanup_r+0x8>)
 8006ea6:	f000 b8af 	b.w	8007008 <_fwalk_reent>
 8006eaa:	bf00      	nop
 8006eac:	08006de5 	.word	0x08006de5

08006eb0 <__sfmoreglue>:
 8006eb0:	2268      	movs	r2, #104	; 0x68
 8006eb2:	b570      	push	{r4, r5, r6, lr}
 8006eb4:	1e4d      	subs	r5, r1, #1
 8006eb6:	4355      	muls	r5, r2
 8006eb8:	460e      	mov	r6, r1
 8006eba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ebe:	f7ff fa21 	bl	8006304 <_malloc_r>
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	b140      	cbz	r0, 8006ed8 <__sfmoreglue+0x28>
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	e9c0 1600 	strd	r1, r6, [r0]
 8006ecc:	300c      	adds	r0, #12
 8006ece:	60a0      	str	r0, [r4, #8]
 8006ed0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ed4:	f7fd fb86 	bl	80045e4 <memset>
 8006ed8:	4620      	mov	r0, r4
 8006eda:	bd70      	pop	{r4, r5, r6, pc}

08006edc <__sfp_lock_acquire>:
 8006edc:	4801      	ldr	r0, [pc, #4]	; (8006ee4 <__sfp_lock_acquire+0x8>)
 8006ede:	f000 b8b3 	b.w	8007048 <__retarget_lock_acquire_recursive>
 8006ee2:	bf00      	nop
 8006ee4:	200002f1 	.word	0x200002f1

08006ee8 <__sfp_lock_release>:
 8006ee8:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <__sfp_lock_release+0x8>)
 8006eea:	f000 b8ae 	b.w	800704a <__retarget_lock_release_recursive>
 8006eee:	bf00      	nop
 8006ef0:	200002f1 	.word	0x200002f1

08006ef4 <__sinit_lock_acquire>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	; (8006efc <__sinit_lock_acquire+0x8>)
 8006ef6:	f000 b8a7 	b.w	8007048 <__retarget_lock_acquire_recursive>
 8006efa:	bf00      	nop
 8006efc:	200002f2 	.word	0x200002f2

08006f00 <__sinit_lock_release>:
 8006f00:	4801      	ldr	r0, [pc, #4]	; (8006f08 <__sinit_lock_release+0x8>)
 8006f02:	f000 b8a2 	b.w	800704a <__retarget_lock_release_recursive>
 8006f06:	bf00      	nop
 8006f08:	200002f2 	.word	0x200002f2

08006f0c <__sinit>:
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	4604      	mov	r4, r0
 8006f10:	f7ff fff0 	bl	8006ef4 <__sinit_lock_acquire>
 8006f14:	69a3      	ldr	r3, [r4, #24]
 8006f16:	b11b      	cbz	r3, 8006f20 <__sinit+0x14>
 8006f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f1c:	f7ff bff0 	b.w	8006f00 <__sinit_lock_release>
 8006f20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f24:	6523      	str	r3, [r4, #80]	; 0x50
 8006f26:	4b13      	ldr	r3, [pc, #76]	; (8006f74 <__sinit+0x68>)
 8006f28:	4a13      	ldr	r2, [pc, #76]	; (8006f78 <__sinit+0x6c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f2e:	42a3      	cmp	r3, r4
 8006f30:	bf08      	it	eq
 8006f32:	2301      	moveq	r3, #1
 8006f34:	4620      	mov	r0, r4
 8006f36:	bf08      	it	eq
 8006f38:	61a3      	streq	r3, [r4, #24]
 8006f3a:	f000 f81f 	bl	8006f7c <__sfp>
 8006f3e:	6060      	str	r0, [r4, #4]
 8006f40:	4620      	mov	r0, r4
 8006f42:	f000 f81b 	bl	8006f7c <__sfp>
 8006f46:	60a0      	str	r0, [r4, #8]
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f000 f817 	bl	8006f7c <__sfp>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2104      	movs	r1, #4
 8006f52:	60e0      	str	r0, [r4, #12]
 8006f54:	6860      	ldr	r0, [r4, #4]
 8006f56:	f7ff ff81 	bl	8006e5c <std>
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	2109      	movs	r1, #9
 8006f5e:	68a0      	ldr	r0, [r4, #8]
 8006f60:	f7ff ff7c 	bl	8006e5c <std>
 8006f64:	2202      	movs	r2, #2
 8006f66:	2112      	movs	r1, #18
 8006f68:	68e0      	ldr	r0, [r4, #12]
 8006f6a:	f7ff ff77 	bl	8006e5c <std>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	61a3      	str	r3, [r4, #24]
 8006f72:	e7d1      	b.n	8006f18 <__sinit+0xc>
 8006f74:	08007370 	.word	0x08007370
 8006f78:	08006ea5 	.word	0x08006ea5

08006f7c <__sfp>:
 8006f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7e:	4607      	mov	r7, r0
 8006f80:	f7ff ffac 	bl	8006edc <__sfp_lock_acquire>
 8006f84:	4b1e      	ldr	r3, [pc, #120]	; (8007000 <__sfp+0x84>)
 8006f86:	681e      	ldr	r6, [r3, #0]
 8006f88:	69b3      	ldr	r3, [r6, #24]
 8006f8a:	b913      	cbnz	r3, 8006f92 <__sfp+0x16>
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f7ff ffbd 	bl	8006f0c <__sinit>
 8006f92:	3648      	adds	r6, #72	; 0x48
 8006f94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	d503      	bpl.n	8006fa4 <__sfp+0x28>
 8006f9c:	6833      	ldr	r3, [r6, #0]
 8006f9e:	b30b      	cbz	r3, 8006fe4 <__sfp+0x68>
 8006fa0:	6836      	ldr	r6, [r6, #0]
 8006fa2:	e7f7      	b.n	8006f94 <__sfp+0x18>
 8006fa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fa8:	b9d5      	cbnz	r5, 8006fe0 <__sfp+0x64>
 8006faa:	4b16      	ldr	r3, [pc, #88]	; (8007004 <__sfp+0x88>)
 8006fac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fb0:	60e3      	str	r3, [r4, #12]
 8006fb2:	6665      	str	r5, [r4, #100]	; 0x64
 8006fb4:	f000 f847 	bl	8007046 <__retarget_lock_init_recursive>
 8006fb8:	f7ff ff96 	bl	8006ee8 <__sfp_lock_release>
 8006fbc:	2208      	movs	r2, #8
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fc8:	6025      	str	r5, [r4, #0]
 8006fca:	61a5      	str	r5, [r4, #24]
 8006fcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fd0:	f7fd fb08 	bl	80045e4 <memset>
 8006fd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fdc:	4620      	mov	r0, r4
 8006fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fe0:	3468      	adds	r4, #104	; 0x68
 8006fe2:	e7d9      	b.n	8006f98 <__sfp+0x1c>
 8006fe4:	2104      	movs	r1, #4
 8006fe6:	4638      	mov	r0, r7
 8006fe8:	f7ff ff62 	bl	8006eb0 <__sfmoreglue>
 8006fec:	4604      	mov	r4, r0
 8006fee:	6030      	str	r0, [r6, #0]
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d1d5      	bne.n	8006fa0 <__sfp+0x24>
 8006ff4:	f7ff ff78 	bl	8006ee8 <__sfp_lock_release>
 8006ff8:	230c      	movs	r3, #12
 8006ffa:	603b      	str	r3, [r7, #0]
 8006ffc:	e7ee      	b.n	8006fdc <__sfp+0x60>
 8006ffe:	bf00      	nop
 8007000:	08007370 	.word	0x08007370
 8007004:	ffff0001 	.word	0xffff0001

08007008 <_fwalk_reent>:
 8007008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800700c:	4606      	mov	r6, r0
 800700e:	4688      	mov	r8, r1
 8007010:	2700      	movs	r7, #0
 8007012:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007016:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800701a:	f1b9 0901 	subs.w	r9, r9, #1
 800701e:	d505      	bpl.n	800702c <_fwalk_reent+0x24>
 8007020:	6824      	ldr	r4, [r4, #0]
 8007022:	2c00      	cmp	r4, #0
 8007024:	d1f7      	bne.n	8007016 <_fwalk_reent+0xe>
 8007026:	4638      	mov	r0, r7
 8007028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800702c:	89ab      	ldrh	r3, [r5, #12]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d907      	bls.n	8007042 <_fwalk_reent+0x3a>
 8007032:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007036:	3301      	adds	r3, #1
 8007038:	d003      	beq.n	8007042 <_fwalk_reent+0x3a>
 800703a:	4629      	mov	r1, r5
 800703c:	4630      	mov	r0, r6
 800703e:	47c0      	blx	r8
 8007040:	4307      	orrs	r7, r0
 8007042:	3568      	adds	r5, #104	; 0x68
 8007044:	e7e9      	b.n	800701a <_fwalk_reent+0x12>

08007046 <__retarget_lock_init_recursive>:
 8007046:	4770      	bx	lr

08007048 <__retarget_lock_acquire_recursive>:
 8007048:	4770      	bx	lr

0800704a <__retarget_lock_release_recursive>:
 800704a:	4770      	bx	lr

0800704c <__swhatbuf_r>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	460e      	mov	r6, r1
 8007050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007054:	4614      	mov	r4, r2
 8007056:	2900      	cmp	r1, #0
 8007058:	461d      	mov	r5, r3
 800705a:	b096      	sub	sp, #88	; 0x58
 800705c:	da08      	bge.n	8007070 <__swhatbuf_r+0x24>
 800705e:	2200      	movs	r2, #0
 8007060:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007064:	602a      	str	r2, [r5, #0]
 8007066:	061a      	lsls	r2, r3, #24
 8007068:	d410      	bmi.n	800708c <__swhatbuf_r+0x40>
 800706a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800706e:	e00e      	b.n	800708e <__swhatbuf_r+0x42>
 8007070:	466a      	mov	r2, sp
 8007072:	f000 f909 	bl	8007288 <_fstat_r>
 8007076:	2800      	cmp	r0, #0
 8007078:	dbf1      	blt.n	800705e <__swhatbuf_r+0x12>
 800707a:	9a01      	ldr	r2, [sp, #4]
 800707c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007080:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007084:	425a      	negs	r2, r3
 8007086:	415a      	adcs	r2, r3
 8007088:	602a      	str	r2, [r5, #0]
 800708a:	e7ee      	b.n	800706a <__swhatbuf_r+0x1e>
 800708c:	2340      	movs	r3, #64	; 0x40
 800708e:	2000      	movs	r0, #0
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	b016      	add	sp, #88	; 0x58
 8007094:	bd70      	pop	{r4, r5, r6, pc}
	...

08007098 <__smakebuf_r>:
 8007098:	898b      	ldrh	r3, [r1, #12]
 800709a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800709c:	079d      	lsls	r5, r3, #30
 800709e:	4606      	mov	r6, r0
 80070a0:	460c      	mov	r4, r1
 80070a2:	d507      	bpl.n	80070b4 <__smakebuf_r+0x1c>
 80070a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	6123      	str	r3, [r4, #16]
 80070ac:	2301      	movs	r3, #1
 80070ae:	6163      	str	r3, [r4, #20]
 80070b0:	b002      	add	sp, #8
 80070b2:	bd70      	pop	{r4, r5, r6, pc}
 80070b4:	466a      	mov	r2, sp
 80070b6:	ab01      	add	r3, sp, #4
 80070b8:	f7ff ffc8 	bl	800704c <__swhatbuf_r>
 80070bc:	9900      	ldr	r1, [sp, #0]
 80070be:	4605      	mov	r5, r0
 80070c0:	4630      	mov	r0, r6
 80070c2:	f7ff f91f 	bl	8006304 <_malloc_r>
 80070c6:	b948      	cbnz	r0, 80070dc <__smakebuf_r+0x44>
 80070c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070cc:	059a      	lsls	r2, r3, #22
 80070ce:	d4ef      	bmi.n	80070b0 <__smakebuf_r+0x18>
 80070d0:	f023 0303 	bic.w	r3, r3, #3
 80070d4:	f043 0302 	orr.w	r3, r3, #2
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	e7e3      	b.n	80070a4 <__smakebuf_r+0xc>
 80070dc:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <__smakebuf_r+0x7c>)
 80070de:	62b3      	str	r3, [r6, #40]	; 0x28
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	6020      	str	r0, [r4, #0]
 80070e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070e8:	81a3      	strh	r3, [r4, #12]
 80070ea:	9b00      	ldr	r3, [sp, #0]
 80070ec:	6120      	str	r0, [r4, #16]
 80070ee:	6163      	str	r3, [r4, #20]
 80070f0:	9b01      	ldr	r3, [sp, #4]
 80070f2:	b15b      	cbz	r3, 800710c <__smakebuf_r+0x74>
 80070f4:	4630      	mov	r0, r6
 80070f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070fa:	f000 f8d7 	bl	80072ac <_isatty_r>
 80070fe:	b128      	cbz	r0, 800710c <__smakebuf_r+0x74>
 8007100:	89a3      	ldrh	r3, [r4, #12]
 8007102:	f023 0303 	bic.w	r3, r3, #3
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	81a3      	strh	r3, [r4, #12]
 800710c:	89a0      	ldrh	r0, [r4, #12]
 800710e:	4305      	orrs	r5, r0
 8007110:	81a5      	strh	r5, [r4, #12]
 8007112:	e7cd      	b.n	80070b0 <__smakebuf_r+0x18>
 8007114:	08006ea5 	.word	0x08006ea5

08007118 <memchr>:
 8007118:	4603      	mov	r3, r0
 800711a:	b510      	push	{r4, lr}
 800711c:	b2c9      	uxtb	r1, r1
 800711e:	4402      	add	r2, r0
 8007120:	4293      	cmp	r3, r2
 8007122:	4618      	mov	r0, r3
 8007124:	d101      	bne.n	800712a <memchr+0x12>
 8007126:	2000      	movs	r0, #0
 8007128:	e003      	b.n	8007132 <memchr+0x1a>
 800712a:	7804      	ldrb	r4, [r0, #0]
 800712c:	3301      	adds	r3, #1
 800712e:	428c      	cmp	r4, r1
 8007130:	d1f6      	bne.n	8007120 <memchr+0x8>
 8007132:	bd10      	pop	{r4, pc}

08007134 <_raise_r>:
 8007134:	291f      	cmp	r1, #31
 8007136:	b538      	push	{r3, r4, r5, lr}
 8007138:	4604      	mov	r4, r0
 800713a:	460d      	mov	r5, r1
 800713c:	d904      	bls.n	8007148 <_raise_r+0x14>
 800713e:	2316      	movs	r3, #22
 8007140:	6003      	str	r3, [r0, #0]
 8007142:	f04f 30ff 	mov.w	r0, #4294967295
 8007146:	bd38      	pop	{r3, r4, r5, pc}
 8007148:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800714a:	b112      	cbz	r2, 8007152 <_raise_r+0x1e>
 800714c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007150:	b94b      	cbnz	r3, 8007166 <_raise_r+0x32>
 8007152:	4620      	mov	r0, r4
 8007154:	f000 f830 	bl	80071b8 <_getpid_r>
 8007158:	462a      	mov	r2, r5
 800715a:	4601      	mov	r1, r0
 800715c:	4620      	mov	r0, r4
 800715e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007162:	f000 b817 	b.w	8007194 <_kill_r>
 8007166:	2b01      	cmp	r3, #1
 8007168:	d00a      	beq.n	8007180 <_raise_r+0x4c>
 800716a:	1c59      	adds	r1, r3, #1
 800716c:	d103      	bne.n	8007176 <_raise_r+0x42>
 800716e:	2316      	movs	r3, #22
 8007170:	6003      	str	r3, [r0, #0]
 8007172:	2001      	movs	r0, #1
 8007174:	e7e7      	b.n	8007146 <_raise_r+0x12>
 8007176:	2400      	movs	r4, #0
 8007178:	4628      	mov	r0, r5
 800717a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800717e:	4798      	blx	r3
 8007180:	2000      	movs	r0, #0
 8007182:	e7e0      	b.n	8007146 <_raise_r+0x12>

08007184 <raise>:
 8007184:	4b02      	ldr	r3, [pc, #8]	; (8007190 <raise+0xc>)
 8007186:	4601      	mov	r1, r0
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	f7ff bfd3 	b.w	8007134 <_raise_r>
 800718e:	bf00      	nop
 8007190:	20000010 	.word	0x20000010

08007194 <_kill_r>:
 8007194:	b538      	push	{r3, r4, r5, lr}
 8007196:	2300      	movs	r3, #0
 8007198:	4d06      	ldr	r5, [pc, #24]	; (80071b4 <_kill_r+0x20>)
 800719a:	4604      	mov	r4, r0
 800719c:	4608      	mov	r0, r1
 800719e:	4611      	mov	r1, r2
 80071a0:	602b      	str	r3, [r5, #0]
 80071a2:	f7fa f85a 	bl	800125a <_kill>
 80071a6:	1c43      	adds	r3, r0, #1
 80071a8:	d102      	bne.n	80071b0 <_kill_r+0x1c>
 80071aa:	682b      	ldr	r3, [r5, #0]
 80071ac:	b103      	cbz	r3, 80071b0 <_kill_r+0x1c>
 80071ae:	6023      	str	r3, [r4, #0]
 80071b0:	bd38      	pop	{r3, r4, r5, pc}
 80071b2:	bf00      	nop
 80071b4:	200002ec 	.word	0x200002ec

080071b8 <_getpid_r>:
 80071b8:	f7fa b848 	b.w	800124c <_getpid>

080071bc <__sread>:
 80071bc:	b510      	push	{r4, lr}
 80071be:	460c      	mov	r4, r1
 80071c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c4:	f000 f894 	bl	80072f0 <_read_r>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	bfab      	itete	ge
 80071cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071ce:	89a3      	ldrhlt	r3, [r4, #12]
 80071d0:	181b      	addge	r3, r3, r0
 80071d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071d6:	bfac      	ite	ge
 80071d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80071da:	81a3      	strhlt	r3, [r4, #12]
 80071dc:	bd10      	pop	{r4, pc}

080071de <__swrite>:
 80071de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e2:	461f      	mov	r7, r3
 80071e4:	898b      	ldrh	r3, [r1, #12]
 80071e6:	4605      	mov	r5, r0
 80071e8:	05db      	lsls	r3, r3, #23
 80071ea:	460c      	mov	r4, r1
 80071ec:	4616      	mov	r6, r2
 80071ee:	d505      	bpl.n	80071fc <__swrite+0x1e>
 80071f0:	2302      	movs	r3, #2
 80071f2:	2200      	movs	r2, #0
 80071f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f8:	f000 f868 	bl	80072cc <_lseek_r>
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	4632      	mov	r2, r6
 8007200:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007204:	81a3      	strh	r3, [r4, #12]
 8007206:	4628      	mov	r0, r5
 8007208:	463b      	mov	r3, r7
 800720a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800720e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007212:	f000 b817 	b.w	8007244 <_write_r>

08007216 <__sseek>:
 8007216:	b510      	push	{r4, lr}
 8007218:	460c      	mov	r4, r1
 800721a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721e:	f000 f855 	bl	80072cc <_lseek_r>
 8007222:	1c43      	adds	r3, r0, #1
 8007224:	89a3      	ldrh	r3, [r4, #12]
 8007226:	bf15      	itete	ne
 8007228:	6560      	strne	r0, [r4, #84]	; 0x54
 800722a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800722e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007232:	81a3      	strheq	r3, [r4, #12]
 8007234:	bf18      	it	ne
 8007236:	81a3      	strhne	r3, [r4, #12]
 8007238:	bd10      	pop	{r4, pc}

0800723a <__sclose>:
 800723a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800723e:	f000 b813 	b.w	8007268 <_close_r>
	...

08007244 <_write_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4604      	mov	r4, r0
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	2200      	movs	r2, #0
 800724e:	4d05      	ldr	r5, [pc, #20]	; (8007264 <_write_r+0x20>)
 8007250:	602a      	str	r2, [r5, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	f7f9 fc80 	bl	8000b58 <_write>
 8007258:	1c43      	adds	r3, r0, #1
 800725a:	d102      	bne.n	8007262 <_write_r+0x1e>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	b103      	cbz	r3, 8007262 <_write_r+0x1e>
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	200002ec 	.word	0x200002ec

08007268 <_close_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	2300      	movs	r3, #0
 800726c:	4d05      	ldr	r5, [pc, #20]	; (8007284 <_close_r+0x1c>)
 800726e:	4604      	mov	r4, r0
 8007270:	4608      	mov	r0, r1
 8007272:	602b      	str	r3, [r5, #0]
 8007274:	f7fa f828 	bl	80012c8 <_close>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_close_r+0x1a>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_close_r+0x1a>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	200002ec 	.word	0x200002ec

08007288 <_fstat_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	2300      	movs	r3, #0
 800728c:	4d06      	ldr	r5, [pc, #24]	; (80072a8 <_fstat_r+0x20>)
 800728e:	4604      	mov	r4, r0
 8007290:	4608      	mov	r0, r1
 8007292:	4611      	mov	r1, r2
 8007294:	602b      	str	r3, [r5, #0]
 8007296:	f7fa f822 	bl	80012de <_fstat>
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	d102      	bne.n	80072a4 <_fstat_r+0x1c>
 800729e:	682b      	ldr	r3, [r5, #0]
 80072a0:	b103      	cbz	r3, 80072a4 <_fstat_r+0x1c>
 80072a2:	6023      	str	r3, [r4, #0]
 80072a4:	bd38      	pop	{r3, r4, r5, pc}
 80072a6:	bf00      	nop
 80072a8:	200002ec 	.word	0x200002ec

080072ac <_isatty_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	2300      	movs	r3, #0
 80072b0:	4d05      	ldr	r5, [pc, #20]	; (80072c8 <_isatty_r+0x1c>)
 80072b2:	4604      	mov	r4, r0
 80072b4:	4608      	mov	r0, r1
 80072b6:	602b      	str	r3, [r5, #0]
 80072b8:	f7fa f820 	bl	80012fc <_isatty>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d102      	bne.n	80072c6 <_isatty_r+0x1a>
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	b103      	cbz	r3, 80072c6 <_isatty_r+0x1a>
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	bd38      	pop	{r3, r4, r5, pc}
 80072c8:	200002ec 	.word	0x200002ec

080072cc <_lseek_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4604      	mov	r4, r0
 80072d0:	4608      	mov	r0, r1
 80072d2:	4611      	mov	r1, r2
 80072d4:	2200      	movs	r2, #0
 80072d6:	4d05      	ldr	r5, [pc, #20]	; (80072ec <_lseek_r+0x20>)
 80072d8:	602a      	str	r2, [r5, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	f7fa f818 	bl	8001310 <_lseek>
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d102      	bne.n	80072ea <_lseek_r+0x1e>
 80072e4:	682b      	ldr	r3, [r5, #0]
 80072e6:	b103      	cbz	r3, 80072ea <_lseek_r+0x1e>
 80072e8:	6023      	str	r3, [r4, #0]
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
 80072ec:	200002ec 	.word	0x200002ec

080072f0 <_read_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4604      	mov	r4, r0
 80072f4:	4608      	mov	r0, r1
 80072f6:	4611      	mov	r1, r2
 80072f8:	2200      	movs	r2, #0
 80072fa:	4d05      	ldr	r5, [pc, #20]	; (8007310 <_read_r+0x20>)
 80072fc:	602a      	str	r2, [r5, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	f7f9 ffc5 	bl	800128e <_read>
 8007304:	1c43      	adds	r3, r0, #1
 8007306:	d102      	bne.n	800730e <_read_r+0x1e>
 8007308:	682b      	ldr	r3, [r5, #0]
 800730a:	b103      	cbz	r3, 800730e <_read_r+0x1e>
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	bd38      	pop	{r3, r4, r5, pc}
 8007310:	200002ec 	.word	0x200002ec

08007314 <_init>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	bf00      	nop
 8007318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731a:	bc08      	pop	{r3}
 800731c:	469e      	mov	lr, r3
 800731e:	4770      	bx	lr

08007320 <_fini>:
 8007320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007322:	bf00      	nop
 8007324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007326:	bc08      	pop	{r3}
 8007328:	469e      	mov	lr, r3
 800732a:	4770      	bx	lr
